
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model PostDIYHomes
 * 
 */
export type PostDIYHomes = $Result.DefaultSelection<Prisma.$PostDIYHomesPayload>
/**
 * Model ReviewDIYHomes
 * 
 */
export type ReviewDIYHomes = $Result.DefaultSelection<Prisma.$ReviewDIYHomesPayload>
/**
 * Model LikeDIYHomes
 * 
 */
export type LikeDIYHomes = $Result.DefaultSelection<Prisma.$LikeDIYHomesPayload>
/**
 * Model BookmarkDIYHomes
 * 
 */
export type BookmarkDIYHomes = $Result.DefaultSelection<Prisma.$BookmarkDIYHomesPayload>
/**
 * Model ReportDIYHomes
 * 
 */
export type ReportDIYHomes = $Result.DefaultSelection<Prisma.$ReportDIYHomesPayload>
/**
 * Model PlaceUrbanExplorer
 * 
 */
export type PlaceUrbanExplorer = $Result.DefaultSelection<Prisma.$PlaceUrbanExplorerPayload>
/**
 * Model ReviewUrbanExplorer
 * 
 */
export type ReviewUrbanExplorer = $Result.DefaultSelection<Prisma.$ReviewUrbanExplorerPayload>
/**
 * Model LikeUrbanExplorer
 * 
 */
export type LikeUrbanExplorer = $Result.DefaultSelection<Prisma.$LikeUrbanExplorerPayload>
/**
 * Model BookmarkUrbanExplorer
 * 
 */
export type BookmarkUrbanExplorer = $Result.DefaultSelection<Prisma.$BookmarkUrbanExplorerPayload>
/**
 * Model ReportUrbanExplorer
 * 
 */
export type ReportUrbanExplorer = $Result.DefaultSelection<Prisma.$ReportUrbanExplorerPayload>
/**
 * Model FoodieFood
 * 
 */
export type FoodieFood = $Result.DefaultSelection<Prisma.$FoodieFoodPayload>
/**
 * Model FoodieLocation
 * 
 */
export type FoodieLocation = $Result.DefaultSelection<Prisma.$FoodieLocationPayload>
/**
 * Model FoodieReview
 * 
 */
export type FoodieReview = $Result.DefaultSelection<Prisma.$FoodieReviewPayload>
/**
 * Model FoodieLike
 * 
 */
export type FoodieLike = $Result.DefaultSelection<Prisma.$FoodieLikePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postDIYHomes`: Exposes CRUD operations for the **PostDIYHomes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostDIYHomes
    * const postDIYHomes = await prisma.postDIYHomes.findMany()
    * ```
    */
  get postDIYHomes(): Prisma.PostDIYHomesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewDIYHomes`: Exposes CRUD operations for the **ReviewDIYHomes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewDIYHomes
    * const reviewDIYHomes = await prisma.reviewDIYHomes.findMany()
    * ```
    */
  get reviewDIYHomes(): Prisma.ReviewDIYHomesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.likeDIYHomes`: Exposes CRUD operations for the **LikeDIYHomes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikeDIYHomes
    * const likeDIYHomes = await prisma.likeDIYHomes.findMany()
    * ```
    */
  get likeDIYHomes(): Prisma.LikeDIYHomesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookmarkDIYHomes`: Exposes CRUD operations for the **BookmarkDIYHomes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookmarkDIYHomes
    * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.findMany()
    * ```
    */
  get bookmarkDIYHomes(): Prisma.BookmarkDIYHomesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportDIYHomes`: Exposes CRUD operations for the **ReportDIYHomes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportDIYHomes
    * const reportDIYHomes = await prisma.reportDIYHomes.findMany()
    * ```
    */
  get reportDIYHomes(): Prisma.ReportDIYHomesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.placeUrbanExplorer`: Exposes CRUD operations for the **PlaceUrbanExplorer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlaceUrbanExplorers
    * const placeUrbanExplorers = await prisma.placeUrbanExplorer.findMany()
    * ```
    */
  get placeUrbanExplorer(): Prisma.PlaceUrbanExplorerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewUrbanExplorer`: Exposes CRUD operations for the **ReviewUrbanExplorer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewUrbanExplorers
    * const reviewUrbanExplorers = await prisma.reviewUrbanExplorer.findMany()
    * ```
    */
  get reviewUrbanExplorer(): Prisma.ReviewUrbanExplorerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.likeUrbanExplorer`: Exposes CRUD operations for the **LikeUrbanExplorer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikeUrbanExplorers
    * const likeUrbanExplorers = await prisma.likeUrbanExplorer.findMany()
    * ```
    */
  get likeUrbanExplorer(): Prisma.LikeUrbanExplorerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookmarkUrbanExplorer`: Exposes CRUD operations for the **BookmarkUrbanExplorer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookmarkUrbanExplorers
    * const bookmarkUrbanExplorers = await prisma.bookmarkUrbanExplorer.findMany()
    * ```
    */
  get bookmarkUrbanExplorer(): Prisma.BookmarkUrbanExplorerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportUrbanExplorer`: Exposes CRUD operations for the **ReportUrbanExplorer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportUrbanExplorers
    * const reportUrbanExplorers = await prisma.reportUrbanExplorer.findMany()
    * ```
    */
  get reportUrbanExplorer(): Prisma.ReportUrbanExplorerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodieFood`: Exposes CRUD operations for the **FoodieFood** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodieFoods
    * const foodieFoods = await prisma.foodieFood.findMany()
    * ```
    */
  get foodieFood(): Prisma.FoodieFoodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodieLocation`: Exposes CRUD operations for the **FoodieLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodieLocations
    * const foodieLocations = await prisma.foodieLocation.findMany()
    * ```
    */
  get foodieLocation(): Prisma.FoodieLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodieReview`: Exposes CRUD operations for the **FoodieReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodieReviews
    * const foodieReviews = await prisma.foodieReview.findMany()
    * ```
    */
  get foodieReview(): Prisma.FoodieReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodieLike`: Exposes CRUD operations for the **FoodieLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodieLikes
    * const foodieLikes = await prisma.foodieLike.findMany()
    * ```
    */
  get foodieLike(): Prisma.FoodieLikeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    PostDIYHomes: 'PostDIYHomes',
    ReviewDIYHomes: 'ReviewDIYHomes',
    LikeDIYHomes: 'LikeDIYHomes',
    BookmarkDIYHomes: 'BookmarkDIYHomes',
    ReportDIYHomes: 'ReportDIYHomes',
    PlaceUrbanExplorer: 'PlaceUrbanExplorer',
    ReviewUrbanExplorer: 'ReviewUrbanExplorer',
    LikeUrbanExplorer: 'LikeUrbanExplorer',
    BookmarkUrbanExplorer: 'BookmarkUrbanExplorer',
    ReportUrbanExplorer: 'ReportUrbanExplorer',
    FoodieFood: 'FoodieFood',
    FoodieLocation: 'FoodieLocation',
    FoodieReview: 'FoodieReview',
    FoodieLike: 'FoodieLike'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    neon?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "postDIYHomes" | "reviewDIYHomes" | "likeDIYHomes" | "bookmarkDIYHomes" | "reportDIYHomes" | "placeUrbanExplorer" | "reviewUrbanExplorer" | "likeUrbanExplorer" | "bookmarkUrbanExplorer" | "reportUrbanExplorer" | "foodieFood" | "foodieLocation" | "foodieReview" | "foodieLike"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      PostDIYHomes: {
        payload: Prisma.$PostDIYHomesPayload<ExtArgs>
        fields: Prisma.PostDIYHomesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostDIYHomesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostDIYHomesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>
          }
          findFirst: {
            args: Prisma.PostDIYHomesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostDIYHomesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>
          }
          findMany: {
            args: Prisma.PostDIYHomesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>[]
          }
          create: {
            args: Prisma.PostDIYHomesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>
          }
          createMany: {
            args: Prisma.PostDIYHomesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostDIYHomesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>[]
          }
          delete: {
            args: Prisma.PostDIYHomesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>
          }
          update: {
            args: Prisma.PostDIYHomesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>
          }
          deleteMany: {
            args: Prisma.PostDIYHomesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostDIYHomesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostDIYHomesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>[]
          }
          upsert: {
            args: Prisma.PostDIYHomesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostDIYHomesPayload>
          }
          aggregate: {
            args: Prisma.PostDIYHomesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostDIYHomes>
          }
          groupBy: {
            args: Prisma.PostDIYHomesGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostDIYHomesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostDIYHomesCountArgs<ExtArgs>
            result: $Utils.Optional<PostDIYHomesCountAggregateOutputType> | number
          }
        }
      }
      ReviewDIYHomes: {
        payload: Prisma.$ReviewDIYHomesPayload<ExtArgs>
        fields: Prisma.ReviewDIYHomesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewDIYHomesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewDIYHomesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>
          }
          findFirst: {
            args: Prisma.ReviewDIYHomesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewDIYHomesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>
          }
          findMany: {
            args: Prisma.ReviewDIYHomesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>[]
          }
          create: {
            args: Prisma.ReviewDIYHomesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>
          }
          createMany: {
            args: Prisma.ReviewDIYHomesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewDIYHomesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>[]
          }
          delete: {
            args: Prisma.ReviewDIYHomesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>
          }
          update: {
            args: Prisma.ReviewDIYHomesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDIYHomesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewDIYHomesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewDIYHomesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>[]
          }
          upsert: {
            args: Prisma.ReviewDIYHomesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewDIYHomesPayload>
          }
          aggregate: {
            args: Prisma.ReviewDIYHomesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewDIYHomes>
          }
          groupBy: {
            args: Prisma.ReviewDIYHomesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewDIYHomesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewDIYHomesCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewDIYHomesCountAggregateOutputType> | number
          }
        }
      }
      LikeDIYHomes: {
        payload: Prisma.$LikeDIYHomesPayload<ExtArgs>
        fields: Prisma.LikeDIYHomesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeDIYHomesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeDIYHomesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>
          }
          findFirst: {
            args: Prisma.LikeDIYHomesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeDIYHomesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>
          }
          findMany: {
            args: Prisma.LikeDIYHomesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>[]
          }
          create: {
            args: Prisma.LikeDIYHomesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>
          }
          createMany: {
            args: Prisma.LikeDIYHomesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeDIYHomesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>[]
          }
          delete: {
            args: Prisma.LikeDIYHomesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>
          }
          update: {
            args: Prisma.LikeDIYHomesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>
          }
          deleteMany: {
            args: Prisma.LikeDIYHomesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeDIYHomesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LikeDIYHomesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>[]
          }
          upsert: {
            args: Prisma.LikeDIYHomesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeDIYHomesPayload>
          }
          aggregate: {
            args: Prisma.LikeDIYHomesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikeDIYHomes>
          }
          groupBy: {
            args: Prisma.LikeDIYHomesGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeDIYHomesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeDIYHomesCountArgs<ExtArgs>
            result: $Utils.Optional<LikeDIYHomesCountAggregateOutputType> | number
          }
        }
      }
      BookmarkDIYHomes: {
        payload: Prisma.$BookmarkDIYHomesPayload<ExtArgs>
        fields: Prisma.BookmarkDIYHomesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmarkDIYHomesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmarkDIYHomesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>
          }
          findFirst: {
            args: Prisma.BookmarkDIYHomesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmarkDIYHomesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>
          }
          findMany: {
            args: Prisma.BookmarkDIYHomesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>[]
          }
          create: {
            args: Prisma.BookmarkDIYHomesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>
          }
          createMany: {
            args: Prisma.BookmarkDIYHomesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookmarkDIYHomesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>[]
          }
          delete: {
            args: Prisma.BookmarkDIYHomesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>
          }
          update: {
            args: Prisma.BookmarkDIYHomesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>
          }
          deleteMany: {
            args: Prisma.BookmarkDIYHomesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmarkDIYHomesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookmarkDIYHomesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>[]
          }
          upsert: {
            args: Prisma.BookmarkDIYHomesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkDIYHomesPayload>
          }
          aggregate: {
            args: Prisma.BookmarkDIYHomesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmarkDIYHomes>
          }
          groupBy: {
            args: Prisma.BookmarkDIYHomesGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmarkDIYHomesGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmarkDIYHomesCountArgs<ExtArgs>
            result: $Utils.Optional<BookmarkDIYHomesCountAggregateOutputType> | number
          }
        }
      }
      ReportDIYHomes: {
        payload: Prisma.$ReportDIYHomesPayload<ExtArgs>
        fields: Prisma.ReportDIYHomesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportDIYHomesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportDIYHomesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>
          }
          findFirst: {
            args: Prisma.ReportDIYHomesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportDIYHomesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>
          }
          findMany: {
            args: Prisma.ReportDIYHomesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>[]
          }
          create: {
            args: Prisma.ReportDIYHomesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>
          }
          createMany: {
            args: Prisma.ReportDIYHomesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportDIYHomesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>[]
          }
          delete: {
            args: Prisma.ReportDIYHomesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>
          }
          update: {
            args: Prisma.ReportDIYHomesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>
          }
          deleteMany: {
            args: Prisma.ReportDIYHomesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportDIYHomesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportDIYHomesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>[]
          }
          upsert: {
            args: Prisma.ReportDIYHomesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDIYHomesPayload>
          }
          aggregate: {
            args: Prisma.ReportDIYHomesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportDIYHomes>
          }
          groupBy: {
            args: Prisma.ReportDIYHomesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportDIYHomesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportDIYHomesCountArgs<ExtArgs>
            result: $Utils.Optional<ReportDIYHomesCountAggregateOutputType> | number
          }
        }
      }
      PlaceUrbanExplorer: {
        payload: Prisma.$PlaceUrbanExplorerPayload<ExtArgs>
        fields: Prisma.PlaceUrbanExplorerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaceUrbanExplorerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaceUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>
          }
          findFirst: {
            args: Prisma.PlaceUrbanExplorerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaceUrbanExplorerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>
          }
          findMany: {
            args: Prisma.PlaceUrbanExplorerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>[]
          }
          create: {
            args: Prisma.PlaceUrbanExplorerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>
          }
          createMany: {
            args: Prisma.PlaceUrbanExplorerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlaceUrbanExplorerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>[]
          }
          delete: {
            args: Prisma.PlaceUrbanExplorerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>
          }
          update: {
            args: Prisma.PlaceUrbanExplorerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>
          }
          deleteMany: {
            args: Prisma.PlaceUrbanExplorerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlaceUrbanExplorerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlaceUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>[]
          }
          upsert: {
            args: Prisma.PlaceUrbanExplorerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaceUrbanExplorerPayload>
          }
          aggregate: {
            args: Prisma.PlaceUrbanExplorerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlaceUrbanExplorer>
          }
          groupBy: {
            args: Prisma.PlaceUrbanExplorerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlaceUrbanExplorerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaceUrbanExplorerCountArgs<ExtArgs>
            result: $Utils.Optional<PlaceUrbanExplorerCountAggregateOutputType> | number
          }
        }
      }
      ReviewUrbanExplorer: {
        payload: Prisma.$ReviewUrbanExplorerPayload<ExtArgs>
        fields: Prisma.ReviewUrbanExplorerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewUrbanExplorerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>
          }
          findFirst: {
            args: Prisma.ReviewUrbanExplorerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewUrbanExplorerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>
          }
          findMany: {
            args: Prisma.ReviewUrbanExplorerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>[]
          }
          create: {
            args: Prisma.ReviewUrbanExplorerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>
          }
          createMany: {
            args: Prisma.ReviewUrbanExplorerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewUrbanExplorerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>[]
          }
          delete: {
            args: Prisma.ReviewUrbanExplorerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>
          }
          update: {
            args: Prisma.ReviewUrbanExplorerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>
          }
          deleteMany: {
            args: Prisma.ReviewUrbanExplorerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUrbanExplorerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUrbanExplorerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewUrbanExplorerPayload>
          }
          aggregate: {
            args: Prisma.ReviewUrbanExplorerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewUrbanExplorer>
          }
          groupBy: {
            args: Prisma.ReviewUrbanExplorerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewUrbanExplorerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewUrbanExplorerCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewUrbanExplorerCountAggregateOutputType> | number
          }
        }
      }
      LikeUrbanExplorer: {
        payload: Prisma.$LikeUrbanExplorerPayload<ExtArgs>
        fields: Prisma.LikeUrbanExplorerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeUrbanExplorerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>
          }
          findFirst: {
            args: Prisma.LikeUrbanExplorerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeUrbanExplorerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>
          }
          findMany: {
            args: Prisma.LikeUrbanExplorerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>[]
          }
          create: {
            args: Prisma.LikeUrbanExplorerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>
          }
          createMany: {
            args: Prisma.LikeUrbanExplorerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeUrbanExplorerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>[]
          }
          delete: {
            args: Prisma.LikeUrbanExplorerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>
          }
          update: {
            args: Prisma.LikeUrbanExplorerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>
          }
          deleteMany: {
            args: Prisma.LikeUrbanExplorerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUrbanExplorerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LikeUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>[]
          }
          upsert: {
            args: Prisma.LikeUrbanExplorerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeUrbanExplorerPayload>
          }
          aggregate: {
            args: Prisma.LikeUrbanExplorerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikeUrbanExplorer>
          }
          groupBy: {
            args: Prisma.LikeUrbanExplorerGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeUrbanExplorerGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeUrbanExplorerCountArgs<ExtArgs>
            result: $Utils.Optional<LikeUrbanExplorerCountAggregateOutputType> | number
          }
        }
      }
      BookmarkUrbanExplorer: {
        payload: Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>
        fields: Prisma.BookmarkUrbanExplorerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmarkUrbanExplorerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmarkUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>
          }
          findFirst: {
            args: Prisma.BookmarkUrbanExplorerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmarkUrbanExplorerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>
          }
          findMany: {
            args: Prisma.BookmarkUrbanExplorerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>[]
          }
          create: {
            args: Prisma.BookmarkUrbanExplorerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>
          }
          createMany: {
            args: Prisma.BookmarkUrbanExplorerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookmarkUrbanExplorerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>[]
          }
          delete: {
            args: Prisma.BookmarkUrbanExplorerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>
          }
          update: {
            args: Prisma.BookmarkUrbanExplorerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>
          }
          deleteMany: {
            args: Prisma.BookmarkUrbanExplorerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmarkUrbanExplorerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookmarkUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>[]
          }
          upsert: {
            args: Prisma.BookmarkUrbanExplorerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkUrbanExplorerPayload>
          }
          aggregate: {
            args: Prisma.BookmarkUrbanExplorerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmarkUrbanExplorer>
          }
          groupBy: {
            args: Prisma.BookmarkUrbanExplorerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmarkUrbanExplorerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmarkUrbanExplorerCountArgs<ExtArgs>
            result: $Utils.Optional<BookmarkUrbanExplorerCountAggregateOutputType> | number
          }
        }
      }
      ReportUrbanExplorer: {
        payload: Prisma.$ReportUrbanExplorerPayload<ExtArgs>
        fields: Prisma.ReportUrbanExplorerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportUrbanExplorerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>
          }
          findFirst: {
            args: Prisma.ReportUrbanExplorerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportUrbanExplorerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>
          }
          findMany: {
            args: Prisma.ReportUrbanExplorerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>[]
          }
          create: {
            args: Prisma.ReportUrbanExplorerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>
          }
          createMany: {
            args: Prisma.ReportUrbanExplorerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportUrbanExplorerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>[]
          }
          delete: {
            args: Prisma.ReportUrbanExplorerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>
          }
          update: {
            args: Prisma.ReportUrbanExplorerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>
          }
          deleteMany: {
            args: Prisma.ReportUrbanExplorerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUrbanExplorerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>[]
          }
          upsert: {
            args: Prisma.ReportUrbanExplorerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportUrbanExplorerPayload>
          }
          aggregate: {
            args: Prisma.ReportUrbanExplorerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportUrbanExplorer>
          }
          groupBy: {
            args: Prisma.ReportUrbanExplorerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportUrbanExplorerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportUrbanExplorerCountArgs<ExtArgs>
            result: $Utils.Optional<ReportUrbanExplorerCountAggregateOutputType> | number
          }
        }
      }
      FoodieFood: {
        payload: Prisma.$FoodieFoodPayload<ExtArgs>
        fields: Prisma.FoodieFoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodieFoodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodieFoodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>
          }
          findFirst: {
            args: Prisma.FoodieFoodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodieFoodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>
          }
          findMany: {
            args: Prisma.FoodieFoodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>[]
          }
          create: {
            args: Prisma.FoodieFoodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>
          }
          createMany: {
            args: Prisma.FoodieFoodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodieFoodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>[]
          }
          delete: {
            args: Prisma.FoodieFoodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>
          }
          update: {
            args: Prisma.FoodieFoodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>
          }
          deleteMany: {
            args: Prisma.FoodieFoodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodieFoodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodieFoodUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>[]
          }
          upsert: {
            args: Prisma.FoodieFoodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieFoodPayload>
          }
          aggregate: {
            args: Prisma.FoodieFoodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodieFood>
          }
          groupBy: {
            args: Prisma.FoodieFoodGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodieFoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodieFoodCountArgs<ExtArgs>
            result: $Utils.Optional<FoodieFoodCountAggregateOutputType> | number
          }
        }
      }
      FoodieLocation: {
        payload: Prisma.$FoodieLocationPayload<ExtArgs>
        fields: Prisma.FoodieLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodieLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodieLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>
          }
          findFirst: {
            args: Prisma.FoodieLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodieLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>
          }
          findMany: {
            args: Prisma.FoodieLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>[]
          }
          create: {
            args: Prisma.FoodieLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>
          }
          createMany: {
            args: Prisma.FoodieLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodieLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>[]
          }
          delete: {
            args: Prisma.FoodieLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>
          }
          update: {
            args: Prisma.FoodieLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>
          }
          deleteMany: {
            args: Prisma.FoodieLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodieLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodieLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>[]
          }
          upsert: {
            args: Prisma.FoodieLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLocationPayload>
          }
          aggregate: {
            args: Prisma.FoodieLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodieLocation>
          }
          groupBy: {
            args: Prisma.FoodieLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodieLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodieLocationCountArgs<ExtArgs>
            result: $Utils.Optional<FoodieLocationCountAggregateOutputType> | number
          }
        }
      }
      FoodieReview: {
        payload: Prisma.$FoodieReviewPayload<ExtArgs>
        fields: Prisma.FoodieReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodieReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodieReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>
          }
          findFirst: {
            args: Prisma.FoodieReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodieReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>
          }
          findMany: {
            args: Prisma.FoodieReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>[]
          }
          create: {
            args: Prisma.FoodieReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>
          }
          createMany: {
            args: Prisma.FoodieReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodieReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>[]
          }
          delete: {
            args: Prisma.FoodieReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>
          }
          update: {
            args: Prisma.FoodieReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>
          }
          deleteMany: {
            args: Prisma.FoodieReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodieReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodieReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>[]
          }
          upsert: {
            args: Prisma.FoodieReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieReviewPayload>
          }
          aggregate: {
            args: Prisma.FoodieReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodieReview>
          }
          groupBy: {
            args: Prisma.FoodieReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodieReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodieReviewCountArgs<ExtArgs>
            result: $Utils.Optional<FoodieReviewCountAggregateOutputType> | number
          }
        }
      }
      FoodieLike: {
        payload: Prisma.$FoodieLikePayload<ExtArgs>
        fields: Prisma.FoodieLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodieLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodieLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>
          }
          findFirst: {
            args: Prisma.FoodieLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodieLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>
          }
          findMany: {
            args: Prisma.FoodieLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>[]
          }
          create: {
            args: Prisma.FoodieLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>
          }
          createMany: {
            args: Prisma.FoodieLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodieLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>[]
          }
          delete: {
            args: Prisma.FoodieLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>
          }
          update: {
            args: Prisma.FoodieLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>
          }
          deleteMany: {
            args: Prisma.FoodieLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodieLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodieLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>[]
          }
          upsert: {
            args: Prisma.FoodieLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodieLikePayload>
          }
          aggregate: {
            args: Prisma.FoodieLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodieLike>
          }
          groupBy: {
            args: Prisma.FoodieLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodieLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodieLikeCountArgs<ExtArgs>
            result: $Utils.Optional<FoodieLikeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    postDIYHomes?: PostDIYHomesOmit
    reviewDIYHomes?: ReviewDIYHomesOmit
    likeDIYHomes?: LikeDIYHomesOmit
    bookmarkDIYHomes?: BookmarkDIYHomesOmit
    reportDIYHomes?: ReportDIYHomesOmit
    placeUrbanExplorer?: PlaceUrbanExplorerOmit
    reviewUrbanExplorer?: ReviewUrbanExplorerOmit
    likeUrbanExplorer?: LikeUrbanExplorerOmit
    bookmarkUrbanExplorer?: BookmarkUrbanExplorerOmit
    reportUrbanExplorer?: ReportUrbanExplorerOmit
    foodieFood?: FoodieFoodOmit
    foodieLocation?: FoodieLocationOmit
    foodieReview?: FoodieReviewOmit
    foodieLike?: FoodieLikeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    posts: number
    reviews: number
    bookmarks: number
    Like: number
    Report: number
    PlaceUrbanExplorer: number
    ReviewUrbanExplorer: number
    LikeUrbanExplorer: number
    BookmarkUrbanExplorer: number
    ReportUrbanExplorer: number
    FoodieFood: number
    FoodieLocation: number
    FoodieReview: number
    FoodieLike: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
    bookmarks?: boolean | UserCountOutputTypeCountBookmarksArgs
    Like?: boolean | UserCountOutputTypeCountLikeArgs
    Report?: boolean | UserCountOutputTypeCountReportArgs
    PlaceUrbanExplorer?: boolean | UserCountOutputTypeCountPlaceUrbanExplorerArgs
    ReviewUrbanExplorer?: boolean | UserCountOutputTypeCountReviewUrbanExplorerArgs
    LikeUrbanExplorer?: boolean | UserCountOutputTypeCountLikeUrbanExplorerArgs
    BookmarkUrbanExplorer?: boolean | UserCountOutputTypeCountBookmarkUrbanExplorerArgs
    ReportUrbanExplorer?: boolean | UserCountOutputTypeCountReportUrbanExplorerArgs
    FoodieFood?: boolean | UserCountOutputTypeCountFoodieFoodArgs
    FoodieLocation?: boolean | UserCountOutputTypeCountFoodieLocationArgs
    FoodieReview?: boolean | UserCountOutputTypeCountFoodieReviewArgs
    FoodieLike?: boolean | UserCountOutputTypeCountFoodieLikeArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostDIYHomesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewDIYHomesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkDIYHomesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeDIYHomesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDIYHomesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlaceUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaceUrbanExplorerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewUrbanExplorerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikeUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeUrbanExplorerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookmarkUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkUrbanExplorerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportUrbanExplorerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoodieFoodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieFoodWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoodieLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieLocationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoodieReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoodieLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieLikeWhereInput
  }


  /**
   * Count Type PostDIYHomesCountOutputType
   */

  export type PostDIYHomesCountOutputType = {
    reviews: number
    bookmarks: number
    Like: number
    Report: number
  }

  export type PostDIYHomesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | PostDIYHomesCountOutputTypeCountReviewsArgs
    bookmarks?: boolean | PostDIYHomesCountOutputTypeCountBookmarksArgs
    Like?: boolean | PostDIYHomesCountOutputTypeCountLikeArgs
    Report?: boolean | PostDIYHomesCountOutputTypeCountReportArgs
  }

  // Custom InputTypes
  /**
   * PostDIYHomesCountOutputType without action
   */
  export type PostDIYHomesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomesCountOutputType
     */
    select?: PostDIYHomesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostDIYHomesCountOutputType without action
   */
  export type PostDIYHomesCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewDIYHomesWhereInput
  }

  /**
   * PostDIYHomesCountOutputType without action
   */
  export type PostDIYHomesCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkDIYHomesWhereInput
  }

  /**
   * PostDIYHomesCountOutputType without action
   */
  export type PostDIYHomesCountOutputTypeCountLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeDIYHomesWhereInput
  }

  /**
   * PostDIYHomesCountOutputType without action
   */
  export type PostDIYHomesCountOutputTypeCountReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDIYHomesWhereInput
  }


  /**
   * Count Type ReviewDIYHomesCountOutputType
   */

  export type ReviewDIYHomesCountOutputType = {
    Report: number
  }

  export type ReviewDIYHomesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Report?: boolean | ReviewDIYHomesCountOutputTypeCountReportArgs
  }

  // Custom InputTypes
  /**
   * ReviewDIYHomesCountOutputType without action
   */
  export type ReviewDIYHomesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomesCountOutputType
     */
    select?: ReviewDIYHomesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewDIYHomesCountOutputType without action
   */
  export type ReviewDIYHomesCountOutputTypeCountReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDIYHomesWhereInput
  }


  /**
   * Count Type PlaceUrbanExplorerCountOutputType
   */

  export type PlaceUrbanExplorerCountOutputType = {
    reviews: number
    bookmarks: number
    likes: number
    reports: number
  }

  export type PlaceUrbanExplorerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | PlaceUrbanExplorerCountOutputTypeCountReviewsArgs
    bookmarks?: boolean | PlaceUrbanExplorerCountOutputTypeCountBookmarksArgs
    likes?: boolean | PlaceUrbanExplorerCountOutputTypeCountLikesArgs
    reports?: boolean | PlaceUrbanExplorerCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * PlaceUrbanExplorerCountOutputType without action
   */
  export type PlaceUrbanExplorerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorerCountOutputType
     */
    select?: PlaceUrbanExplorerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlaceUrbanExplorerCountOutputType without action
   */
  export type PlaceUrbanExplorerCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewUrbanExplorerWhereInput
  }

  /**
   * PlaceUrbanExplorerCountOutputType without action
   */
  export type PlaceUrbanExplorerCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkUrbanExplorerWhereInput
  }

  /**
   * PlaceUrbanExplorerCountOutputType without action
   */
  export type PlaceUrbanExplorerCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeUrbanExplorerWhereInput
  }

  /**
   * PlaceUrbanExplorerCountOutputType without action
   */
  export type PlaceUrbanExplorerCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportUrbanExplorerWhereInput
  }


  /**
   * Count Type ReviewUrbanExplorerCountOutputType
   */

  export type ReviewUrbanExplorerCountOutputType = {
    reports: number
  }

  export type ReviewUrbanExplorerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | ReviewUrbanExplorerCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * ReviewUrbanExplorerCountOutputType without action
   */
  export type ReviewUrbanExplorerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorerCountOutputType
     */
    select?: ReviewUrbanExplorerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewUrbanExplorerCountOutputType without action
   */
  export type ReviewUrbanExplorerCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportUrbanExplorerWhereInput
  }


  /**
   * Count Type FoodieFoodCountOutputType
   */

  export type FoodieFoodCountOutputType = {
    locations: number
    reviews: number
    likes: number
  }

  export type FoodieFoodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locations?: boolean | FoodieFoodCountOutputTypeCountLocationsArgs
    reviews?: boolean | FoodieFoodCountOutputTypeCountReviewsArgs
    likes?: boolean | FoodieFoodCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * FoodieFoodCountOutputType without action
   */
  export type FoodieFoodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFoodCountOutputType
     */
    select?: FoodieFoodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodieFoodCountOutputType without action
   */
  export type FoodieFoodCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieLocationWhereInput
  }

  /**
   * FoodieFoodCountOutputType without action
   */
  export type FoodieFoodCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieReviewWhereInput
  }

  /**
   * FoodieFoodCountOutputType without action
   */
  export type FoodieFoodCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieLikeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    group: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    group: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    group: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    group?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    group?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    group?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    group: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    group?: boolean
    createdAt?: boolean
    posts?: boolean | User$postsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    bookmarks?: boolean | User$bookmarksArgs<ExtArgs>
    Like?: boolean | User$LikeArgs<ExtArgs>
    Report?: boolean | User$ReportArgs<ExtArgs>
    PlaceUrbanExplorer?: boolean | User$PlaceUrbanExplorerArgs<ExtArgs>
    ReviewUrbanExplorer?: boolean | User$ReviewUrbanExplorerArgs<ExtArgs>
    LikeUrbanExplorer?: boolean | User$LikeUrbanExplorerArgs<ExtArgs>
    BookmarkUrbanExplorer?: boolean | User$BookmarkUrbanExplorerArgs<ExtArgs>
    ReportUrbanExplorer?: boolean | User$ReportUrbanExplorerArgs<ExtArgs>
    FoodieFood?: boolean | User$FoodieFoodArgs<ExtArgs>
    FoodieLocation?: boolean | User$FoodieLocationArgs<ExtArgs>
    FoodieReview?: boolean | User$FoodieReviewArgs<ExtArgs>
    FoodieLike?: boolean | User$FoodieLikeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    group?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    group?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    group?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "group" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | User$postsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    bookmarks?: boolean | User$bookmarksArgs<ExtArgs>
    Like?: boolean | User$LikeArgs<ExtArgs>
    Report?: boolean | User$ReportArgs<ExtArgs>
    PlaceUrbanExplorer?: boolean | User$PlaceUrbanExplorerArgs<ExtArgs>
    ReviewUrbanExplorer?: boolean | User$ReviewUrbanExplorerArgs<ExtArgs>
    LikeUrbanExplorer?: boolean | User$LikeUrbanExplorerArgs<ExtArgs>
    BookmarkUrbanExplorer?: boolean | User$BookmarkUrbanExplorerArgs<ExtArgs>
    ReportUrbanExplorer?: boolean | User$ReportUrbanExplorerArgs<ExtArgs>
    FoodieFood?: boolean | User$FoodieFoodArgs<ExtArgs>
    FoodieLocation?: boolean | User$FoodieLocationArgs<ExtArgs>
    FoodieReview?: boolean | User$FoodieReviewArgs<ExtArgs>
    FoodieLike?: boolean | User$FoodieLikeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      posts: Prisma.$PostDIYHomesPayload<ExtArgs>[]
      reviews: Prisma.$ReviewDIYHomesPayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkDIYHomesPayload<ExtArgs>[]
      Like: Prisma.$LikeDIYHomesPayload<ExtArgs>[]
      Report: Prisma.$ReportDIYHomesPayload<ExtArgs>[]
      PlaceUrbanExplorer: Prisma.$PlaceUrbanExplorerPayload<ExtArgs>[]
      ReviewUrbanExplorer: Prisma.$ReviewUrbanExplorerPayload<ExtArgs>[]
      LikeUrbanExplorer: Prisma.$LikeUrbanExplorerPayload<ExtArgs>[]
      BookmarkUrbanExplorer: Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>[]
      ReportUrbanExplorer: Prisma.$ReportUrbanExplorerPayload<ExtArgs>[]
      FoodieFood: Prisma.$FoodieFoodPayload<ExtArgs>[]
      FoodieLocation: Prisma.$FoodieLocationPayload<ExtArgs>[]
      FoodieReview: Prisma.$FoodieReviewPayload<ExtArgs>[]
      FoodieLike: Prisma.$FoodieLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      group: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookmarks<T extends User$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, User$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Like<T extends User$LikeArgs<ExtArgs> = {}>(args?: Subset<T, User$LikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Report<T extends User$ReportArgs<ExtArgs> = {}>(args?: Subset<T, User$ReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PlaceUrbanExplorer<T extends User$PlaceUrbanExplorerArgs<ExtArgs> = {}>(args?: Subset<T, User$PlaceUrbanExplorerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ReviewUrbanExplorer<T extends User$ReviewUrbanExplorerArgs<ExtArgs> = {}>(args?: Subset<T, User$ReviewUrbanExplorerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    LikeUrbanExplorer<T extends User$LikeUrbanExplorerArgs<ExtArgs> = {}>(args?: Subset<T, User$LikeUrbanExplorerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BookmarkUrbanExplorer<T extends User$BookmarkUrbanExplorerArgs<ExtArgs> = {}>(args?: Subset<T, User$BookmarkUrbanExplorerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ReportUrbanExplorer<T extends User$ReportUrbanExplorerArgs<ExtArgs> = {}>(args?: Subset<T, User$ReportUrbanExplorerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FoodieFood<T extends User$FoodieFoodArgs<ExtArgs> = {}>(args?: Subset<T, User$FoodieFoodArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FoodieLocation<T extends User$FoodieLocationArgs<ExtArgs> = {}>(args?: Subset<T, User$FoodieLocationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FoodieReview<T extends User$FoodieReviewArgs<ExtArgs> = {}>(args?: Subset<T, User$FoodieReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FoodieLike<T extends User$FoodieLikeArgs<ExtArgs> = {}>(args?: Subset<T, User$FoodieLikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly group: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    where?: PostDIYHomesWhereInput
    orderBy?: PostDIYHomesOrderByWithRelationInput | PostDIYHomesOrderByWithRelationInput[]
    cursor?: PostDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostDIYHomesScalarFieldEnum | PostDIYHomesScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    where?: ReviewDIYHomesWhereInput
    orderBy?: ReviewDIYHomesOrderByWithRelationInput | ReviewDIYHomesOrderByWithRelationInput[]
    cursor?: ReviewDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewDIYHomesScalarFieldEnum | ReviewDIYHomesScalarFieldEnum[]
  }

  /**
   * User.bookmarks
   */
  export type User$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    where?: BookmarkDIYHomesWhereInput
    orderBy?: BookmarkDIYHomesOrderByWithRelationInput | BookmarkDIYHomesOrderByWithRelationInput[]
    cursor?: BookmarkDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkDIYHomesScalarFieldEnum | BookmarkDIYHomesScalarFieldEnum[]
  }

  /**
   * User.Like
   */
  export type User$LikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    where?: LikeDIYHomesWhereInput
    orderBy?: LikeDIYHomesOrderByWithRelationInput | LikeDIYHomesOrderByWithRelationInput[]
    cursor?: LikeDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeDIYHomesScalarFieldEnum | LikeDIYHomesScalarFieldEnum[]
  }

  /**
   * User.Report
   */
  export type User$ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    where?: ReportDIYHomesWhereInput
    orderBy?: ReportDIYHomesOrderByWithRelationInput | ReportDIYHomesOrderByWithRelationInput[]
    cursor?: ReportDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportDIYHomesScalarFieldEnum | ReportDIYHomesScalarFieldEnum[]
  }

  /**
   * User.PlaceUrbanExplorer
   */
  export type User$PlaceUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    where?: PlaceUrbanExplorerWhereInput
    orderBy?: PlaceUrbanExplorerOrderByWithRelationInput | PlaceUrbanExplorerOrderByWithRelationInput[]
    cursor?: PlaceUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaceUrbanExplorerScalarFieldEnum | PlaceUrbanExplorerScalarFieldEnum[]
  }

  /**
   * User.ReviewUrbanExplorer
   */
  export type User$ReviewUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    where?: ReviewUrbanExplorerWhereInput
    orderBy?: ReviewUrbanExplorerOrderByWithRelationInput | ReviewUrbanExplorerOrderByWithRelationInput[]
    cursor?: ReviewUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewUrbanExplorerScalarFieldEnum | ReviewUrbanExplorerScalarFieldEnum[]
  }

  /**
   * User.LikeUrbanExplorer
   */
  export type User$LikeUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    where?: LikeUrbanExplorerWhereInput
    orderBy?: LikeUrbanExplorerOrderByWithRelationInput | LikeUrbanExplorerOrderByWithRelationInput[]
    cursor?: LikeUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeUrbanExplorerScalarFieldEnum | LikeUrbanExplorerScalarFieldEnum[]
  }

  /**
   * User.BookmarkUrbanExplorer
   */
  export type User$BookmarkUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    where?: BookmarkUrbanExplorerWhereInput
    orderBy?: BookmarkUrbanExplorerOrderByWithRelationInput | BookmarkUrbanExplorerOrderByWithRelationInput[]
    cursor?: BookmarkUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkUrbanExplorerScalarFieldEnum | BookmarkUrbanExplorerScalarFieldEnum[]
  }

  /**
   * User.ReportUrbanExplorer
   */
  export type User$ReportUrbanExplorerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    where?: ReportUrbanExplorerWhereInput
    orderBy?: ReportUrbanExplorerOrderByWithRelationInput | ReportUrbanExplorerOrderByWithRelationInput[]
    cursor?: ReportUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportUrbanExplorerScalarFieldEnum | ReportUrbanExplorerScalarFieldEnum[]
  }

  /**
   * User.FoodieFood
   */
  export type User$FoodieFoodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    where?: FoodieFoodWhereInput
    orderBy?: FoodieFoodOrderByWithRelationInput | FoodieFoodOrderByWithRelationInput[]
    cursor?: FoodieFoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodieFoodScalarFieldEnum | FoodieFoodScalarFieldEnum[]
  }

  /**
   * User.FoodieLocation
   */
  export type User$FoodieLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    where?: FoodieLocationWhereInput
    orderBy?: FoodieLocationOrderByWithRelationInput | FoodieLocationOrderByWithRelationInput[]
    cursor?: FoodieLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodieLocationScalarFieldEnum | FoodieLocationScalarFieldEnum[]
  }

  /**
   * User.FoodieReview
   */
  export type User$FoodieReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    where?: FoodieReviewWhereInput
    orderBy?: FoodieReviewOrderByWithRelationInput | FoodieReviewOrderByWithRelationInput[]
    cursor?: FoodieReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodieReviewScalarFieldEnum | FoodieReviewScalarFieldEnum[]
  }

  /**
   * User.FoodieLike
   */
  export type User$FoodieLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    where?: FoodieLikeWhereInput
    orderBy?: FoodieLikeOrderByWithRelationInput | FoodieLikeOrderByWithRelationInput[]
    cursor?: FoodieLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodieLikeScalarFieldEnum | FoodieLikeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model PostDIYHomes
   */

  export type AggregatePostDIYHomes = {
    _count: PostDIYHomesCountAggregateOutputType | null
    _min: PostDIYHomesMinAggregateOutputType | null
    _max: PostDIYHomesMaxAggregateOutputType | null
  }

  export type PostDIYHomesMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    category: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type PostDIYHomesMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    category: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type PostDIYHomesCountAggregateOutputType = {
    id: number
    title: number
    content: number
    category: number
    userId: number
    createdAt: number
    _all: number
  }


  export type PostDIYHomesMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    category?: true
    userId?: true
    createdAt?: true
  }

  export type PostDIYHomesMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    category?: true
    userId?: true
    createdAt?: true
  }

  export type PostDIYHomesCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    category?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type PostDIYHomesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostDIYHomes to aggregate.
     */
    where?: PostDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostDIYHomes to fetch.
     */
    orderBy?: PostDIYHomesOrderByWithRelationInput | PostDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostDIYHomes
    **/
    _count?: true | PostDIYHomesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostDIYHomesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostDIYHomesMaxAggregateInputType
  }

  export type GetPostDIYHomesAggregateType<T extends PostDIYHomesAggregateArgs> = {
        [P in keyof T & keyof AggregatePostDIYHomes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostDIYHomes[P]>
      : GetScalarType<T[P], AggregatePostDIYHomes[P]>
  }




  export type PostDIYHomesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostDIYHomesWhereInput
    orderBy?: PostDIYHomesOrderByWithAggregationInput | PostDIYHomesOrderByWithAggregationInput[]
    by: PostDIYHomesScalarFieldEnum[] | PostDIYHomesScalarFieldEnum
    having?: PostDIYHomesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostDIYHomesCountAggregateInputType | true
    _min?: PostDIYHomesMinAggregateInputType
    _max?: PostDIYHomesMaxAggregateInputType
  }

  export type PostDIYHomesGroupByOutputType = {
    id: string
    title: string
    content: string
    category: string
    userId: string
    createdAt: Date
    _count: PostDIYHomesCountAggregateOutputType | null
    _min: PostDIYHomesMinAggregateOutputType | null
    _max: PostDIYHomesMaxAggregateOutputType | null
  }

  type GetPostDIYHomesGroupByPayload<T extends PostDIYHomesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostDIYHomesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostDIYHomesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostDIYHomesGroupByOutputType[P]>
            : GetScalarType<T[P], PostDIYHomesGroupByOutputType[P]>
        }
      >
    >


  export type PostDIYHomesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviews?: boolean | PostDIYHomes$reviewsArgs<ExtArgs>
    bookmarks?: boolean | PostDIYHomes$bookmarksArgs<ExtArgs>
    Like?: boolean | PostDIYHomes$LikeArgs<ExtArgs>
    Report?: boolean | PostDIYHomes$ReportArgs<ExtArgs>
    _count?: boolean | PostDIYHomesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postDIYHomes"]>

  export type PostDIYHomesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postDIYHomes"]>

  export type PostDIYHomesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postDIYHomes"]>

  export type PostDIYHomesSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type PostDIYHomesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "category" | "userId" | "createdAt", ExtArgs["result"]["postDIYHomes"]>
  export type PostDIYHomesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviews?: boolean | PostDIYHomes$reviewsArgs<ExtArgs>
    bookmarks?: boolean | PostDIYHomes$bookmarksArgs<ExtArgs>
    Like?: boolean | PostDIYHomes$LikeArgs<ExtArgs>
    Report?: boolean | PostDIYHomes$ReportArgs<ExtArgs>
    _count?: boolean | PostDIYHomesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostDIYHomesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PostDIYHomesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PostDIYHomesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostDIYHomes"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      reviews: Prisma.$ReviewDIYHomesPayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkDIYHomesPayload<ExtArgs>[]
      Like: Prisma.$LikeDIYHomesPayload<ExtArgs>[]
      Report: Prisma.$ReportDIYHomesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      category: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["postDIYHomes"]>
    composites: {}
  }

  type PostDIYHomesGetPayload<S extends boolean | null | undefined | PostDIYHomesDefaultArgs> = $Result.GetResult<Prisma.$PostDIYHomesPayload, S>

  type PostDIYHomesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostDIYHomesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostDIYHomesCountAggregateInputType | true
    }

  export interface PostDIYHomesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostDIYHomes'], meta: { name: 'PostDIYHomes' } }
    /**
     * Find zero or one PostDIYHomes that matches the filter.
     * @param {PostDIYHomesFindUniqueArgs} args - Arguments to find a PostDIYHomes
     * @example
     * // Get one PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostDIYHomesFindUniqueArgs>(args: SelectSubset<T, PostDIYHomesFindUniqueArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostDIYHomes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostDIYHomesFindUniqueOrThrowArgs} args - Arguments to find a PostDIYHomes
     * @example
     * // Get one PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostDIYHomesFindUniqueOrThrowArgs>(args: SelectSubset<T, PostDIYHomesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDIYHomesFindFirstArgs} args - Arguments to find a PostDIYHomes
     * @example
     * // Get one PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostDIYHomesFindFirstArgs>(args?: SelectSubset<T, PostDIYHomesFindFirstArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostDIYHomes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDIYHomesFindFirstOrThrowArgs} args - Arguments to find a PostDIYHomes
     * @example
     * // Get one PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostDIYHomesFindFirstOrThrowArgs>(args?: SelectSubset<T, PostDIYHomesFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDIYHomesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.findMany()
     * 
     * // Get first 10 PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postDIYHomesWithIdOnly = await prisma.postDIYHomes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostDIYHomesFindManyArgs>(args?: SelectSubset<T, PostDIYHomesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostDIYHomes.
     * @param {PostDIYHomesCreateArgs} args - Arguments to create a PostDIYHomes.
     * @example
     * // Create one PostDIYHomes
     * const PostDIYHomes = await prisma.postDIYHomes.create({
     *   data: {
     *     // ... data to create a PostDIYHomes
     *   }
     * })
     * 
     */
    create<T extends PostDIYHomesCreateArgs>(args: SelectSubset<T, PostDIYHomesCreateArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostDIYHomes.
     * @param {PostDIYHomesCreateManyArgs} args - Arguments to create many PostDIYHomes.
     * @example
     * // Create many PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostDIYHomesCreateManyArgs>(args?: SelectSubset<T, PostDIYHomesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostDIYHomes and returns the data saved in the database.
     * @param {PostDIYHomesCreateManyAndReturnArgs} args - Arguments to create many PostDIYHomes.
     * @example
     * // Create many PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostDIYHomes and only return the `id`
     * const postDIYHomesWithIdOnly = await prisma.postDIYHomes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostDIYHomesCreateManyAndReturnArgs>(args?: SelectSubset<T, PostDIYHomesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostDIYHomes.
     * @param {PostDIYHomesDeleteArgs} args - Arguments to delete one PostDIYHomes.
     * @example
     * // Delete one PostDIYHomes
     * const PostDIYHomes = await prisma.postDIYHomes.delete({
     *   where: {
     *     // ... filter to delete one PostDIYHomes
     *   }
     * })
     * 
     */
    delete<T extends PostDIYHomesDeleteArgs>(args: SelectSubset<T, PostDIYHomesDeleteArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostDIYHomes.
     * @param {PostDIYHomesUpdateArgs} args - Arguments to update one PostDIYHomes.
     * @example
     * // Update one PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostDIYHomesUpdateArgs>(args: SelectSubset<T, PostDIYHomesUpdateArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostDIYHomes.
     * @param {PostDIYHomesDeleteManyArgs} args - Arguments to filter PostDIYHomes to delete.
     * @example
     * // Delete a few PostDIYHomes
     * const { count } = await prisma.postDIYHomes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDIYHomesDeleteManyArgs>(args?: SelectSubset<T, PostDIYHomesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDIYHomesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostDIYHomesUpdateManyArgs>(args: SelectSubset<T, PostDIYHomesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostDIYHomes and returns the data updated in the database.
     * @param {PostDIYHomesUpdateManyAndReturnArgs} args - Arguments to update many PostDIYHomes.
     * @example
     * // Update many PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostDIYHomes and only return the `id`
     * const postDIYHomesWithIdOnly = await prisma.postDIYHomes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostDIYHomesUpdateManyAndReturnArgs>(args: SelectSubset<T, PostDIYHomesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostDIYHomes.
     * @param {PostDIYHomesUpsertArgs} args - Arguments to update or create a PostDIYHomes.
     * @example
     * // Update or create a PostDIYHomes
     * const postDIYHomes = await prisma.postDIYHomes.upsert({
     *   create: {
     *     // ... data to create a PostDIYHomes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostDIYHomes we want to update
     *   }
     * })
     */
    upsert<T extends PostDIYHomesUpsertArgs>(args: SelectSubset<T, PostDIYHomesUpsertArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDIYHomesCountArgs} args - Arguments to filter PostDIYHomes to count.
     * @example
     * // Count the number of PostDIYHomes
     * const count = await prisma.postDIYHomes.count({
     *   where: {
     *     // ... the filter for the PostDIYHomes we want to count
     *   }
     * })
    **/
    count<T extends PostDIYHomesCountArgs>(
      args?: Subset<T, PostDIYHomesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostDIYHomesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDIYHomesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostDIYHomesAggregateArgs>(args: Subset<T, PostDIYHomesAggregateArgs>): Prisma.PrismaPromise<GetPostDIYHomesAggregateType<T>>

    /**
     * Group by PostDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDIYHomesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostDIYHomesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostDIYHomesGroupByArgs['orderBy'] }
        : { orderBy?: PostDIYHomesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostDIYHomesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostDIYHomesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostDIYHomes model
   */
  readonly fields: PostDIYHomesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostDIYHomes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostDIYHomesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviews<T extends PostDIYHomes$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, PostDIYHomes$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookmarks<T extends PostDIYHomes$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, PostDIYHomes$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Like<T extends PostDIYHomes$LikeArgs<ExtArgs> = {}>(args?: Subset<T, PostDIYHomes$LikeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Report<T extends PostDIYHomes$ReportArgs<ExtArgs> = {}>(args?: Subset<T, PostDIYHomes$ReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostDIYHomes model
   */ 
  interface PostDIYHomesFieldRefs {
    readonly id: FieldRef<"PostDIYHomes", 'String'>
    readonly title: FieldRef<"PostDIYHomes", 'String'>
    readonly content: FieldRef<"PostDIYHomes", 'String'>
    readonly category: FieldRef<"PostDIYHomes", 'String'>
    readonly userId: FieldRef<"PostDIYHomes", 'String'>
    readonly createdAt: FieldRef<"PostDIYHomes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PostDIYHomes findUnique
   */
  export type PostDIYHomesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which PostDIYHomes to fetch.
     */
    where: PostDIYHomesWhereUniqueInput
  }

  /**
   * PostDIYHomes findUniqueOrThrow
   */
  export type PostDIYHomesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which PostDIYHomes to fetch.
     */
    where: PostDIYHomesWhereUniqueInput
  }

  /**
   * PostDIYHomes findFirst
   */
  export type PostDIYHomesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which PostDIYHomes to fetch.
     */
    where?: PostDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostDIYHomes to fetch.
     */
    orderBy?: PostDIYHomesOrderByWithRelationInput | PostDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostDIYHomes.
     */
    cursor?: PostDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostDIYHomes.
     */
    distinct?: PostDIYHomesScalarFieldEnum | PostDIYHomesScalarFieldEnum[]
  }

  /**
   * PostDIYHomes findFirstOrThrow
   */
  export type PostDIYHomesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which PostDIYHomes to fetch.
     */
    where?: PostDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostDIYHomes to fetch.
     */
    orderBy?: PostDIYHomesOrderByWithRelationInput | PostDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostDIYHomes.
     */
    cursor?: PostDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostDIYHomes.
     */
    distinct?: PostDIYHomesScalarFieldEnum | PostDIYHomesScalarFieldEnum[]
  }

  /**
   * PostDIYHomes findMany
   */
  export type PostDIYHomesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which PostDIYHomes to fetch.
     */
    where?: PostDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostDIYHomes to fetch.
     */
    orderBy?: PostDIYHomesOrderByWithRelationInput | PostDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostDIYHomes.
     */
    cursor?: PostDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostDIYHomes.
     */
    skip?: number
    distinct?: PostDIYHomesScalarFieldEnum | PostDIYHomesScalarFieldEnum[]
  }

  /**
   * PostDIYHomes create
   */
  export type PostDIYHomesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to create a PostDIYHomes.
     */
    data: XOR<PostDIYHomesCreateInput, PostDIYHomesUncheckedCreateInput>
  }

  /**
   * PostDIYHomes createMany
   */
  export type PostDIYHomesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostDIYHomes.
     */
    data: PostDIYHomesCreateManyInput | PostDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostDIYHomes createManyAndReturn
   */
  export type PostDIYHomesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to create many PostDIYHomes.
     */
    data: PostDIYHomesCreateManyInput | PostDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostDIYHomes update
   */
  export type PostDIYHomesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to update a PostDIYHomes.
     */
    data: XOR<PostDIYHomesUpdateInput, PostDIYHomesUncheckedUpdateInput>
    /**
     * Choose, which PostDIYHomes to update.
     */
    where: PostDIYHomesWhereUniqueInput
  }

  /**
   * PostDIYHomes updateMany
   */
  export type PostDIYHomesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostDIYHomes.
     */
    data: XOR<PostDIYHomesUpdateManyMutationInput, PostDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which PostDIYHomes to update
     */
    where?: PostDIYHomesWhereInput
    /**
     * Limit how many PostDIYHomes to update.
     */
    limit?: number
  }

  /**
   * PostDIYHomes updateManyAndReturn
   */
  export type PostDIYHomesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to update PostDIYHomes.
     */
    data: XOR<PostDIYHomesUpdateManyMutationInput, PostDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which PostDIYHomes to update
     */
    where?: PostDIYHomesWhereInput
    /**
     * Limit how many PostDIYHomes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostDIYHomes upsert
   */
  export type PostDIYHomesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * The filter to search for the PostDIYHomes to update in case it exists.
     */
    where: PostDIYHomesWhereUniqueInput
    /**
     * In case the PostDIYHomes found by the `where` argument doesn't exist, create a new PostDIYHomes with this data.
     */
    create: XOR<PostDIYHomesCreateInput, PostDIYHomesUncheckedCreateInput>
    /**
     * In case the PostDIYHomes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostDIYHomesUpdateInput, PostDIYHomesUncheckedUpdateInput>
  }

  /**
   * PostDIYHomes delete
   */
  export type PostDIYHomesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    /**
     * Filter which PostDIYHomes to delete.
     */
    where: PostDIYHomesWhereUniqueInput
  }

  /**
   * PostDIYHomes deleteMany
   */
  export type PostDIYHomesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostDIYHomes to delete
     */
    where?: PostDIYHomesWhereInput
    /**
     * Limit how many PostDIYHomes to delete.
     */
    limit?: number
  }

  /**
   * PostDIYHomes.reviews
   */
  export type PostDIYHomes$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    where?: ReviewDIYHomesWhereInput
    orderBy?: ReviewDIYHomesOrderByWithRelationInput | ReviewDIYHomesOrderByWithRelationInput[]
    cursor?: ReviewDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewDIYHomesScalarFieldEnum | ReviewDIYHomesScalarFieldEnum[]
  }

  /**
   * PostDIYHomes.bookmarks
   */
  export type PostDIYHomes$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    where?: BookmarkDIYHomesWhereInput
    orderBy?: BookmarkDIYHomesOrderByWithRelationInput | BookmarkDIYHomesOrderByWithRelationInput[]
    cursor?: BookmarkDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkDIYHomesScalarFieldEnum | BookmarkDIYHomesScalarFieldEnum[]
  }

  /**
   * PostDIYHomes.Like
   */
  export type PostDIYHomes$LikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    where?: LikeDIYHomesWhereInput
    orderBy?: LikeDIYHomesOrderByWithRelationInput | LikeDIYHomesOrderByWithRelationInput[]
    cursor?: LikeDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeDIYHomesScalarFieldEnum | LikeDIYHomesScalarFieldEnum[]
  }

  /**
   * PostDIYHomes.Report
   */
  export type PostDIYHomes$ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    where?: ReportDIYHomesWhereInput
    orderBy?: ReportDIYHomesOrderByWithRelationInput | ReportDIYHomesOrderByWithRelationInput[]
    cursor?: ReportDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportDIYHomesScalarFieldEnum | ReportDIYHomesScalarFieldEnum[]
  }

  /**
   * PostDIYHomes without action
   */
  export type PostDIYHomesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
  }


  /**
   * Model ReviewDIYHomes
   */

  export type AggregateReviewDIYHomes = {
    _count: ReviewDIYHomesCountAggregateOutputType | null
    _avg: ReviewDIYHomesAvgAggregateOutputType | null
    _sum: ReviewDIYHomesSumAggregateOutputType | null
    _min: ReviewDIYHomesMinAggregateOutputType | null
    _max: ReviewDIYHomesMaxAggregateOutputType | null
  }

  export type ReviewDIYHomesAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewDIYHomesSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewDIYHomesMinAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewDIYHomesMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewDIYHomesCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ReviewDIYHomesAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewDIYHomesSumAggregateInputType = {
    rating?: true
  }

  export type ReviewDIYHomesMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewDIYHomesMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewDIYHomesCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewDIYHomesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewDIYHomes to aggregate.
     */
    where?: ReviewDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewDIYHomes to fetch.
     */
    orderBy?: ReviewDIYHomesOrderByWithRelationInput | ReviewDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewDIYHomes
    **/
    _count?: true | ReviewDIYHomesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewDIYHomesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewDIYHomesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewDIYHomesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewDIYHomesMaxAggregateInputType
  }

  export type GetReviewDIYHomesAggregateType<T extends ReviewDIYHomesAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewDIYHomes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewDIYHomes[P]>
      : GetScalarType<T[P], AggregateReviewDIYHomes[P]>
  }




  export type ReviewDIYHomesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewDIYHomesWhereInput
    orderBy?: ReviewDIYHomesOrderByWithAggregationInput | ReviewDIYHomesOrderByWithAggregationInput[]
    by: ReviewDIYHomesScalarFieldEnum[] | ReviewDIYHomesScalarFieldEnum
    having?: ReviewDIYHomesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewDIYHomesCountAggregateInputType | true
    _avg?: ReviewDIYHomesAvgAggregateInputType
    _sum?: ReviewDIYHomesSumAggregateInputType
    _min?: ReviewDIYHomesMinAggregateInputType
    _max?: ReviewDIYHomesMaxAggregateInputType
  }

  export type ReviewDIYHomesGroupByOutputType = {
    id: string
    postId: string
    userId: string
    rating: number
    comment: string
    createdAt: Date
    _count: ReviewDIYHomesCountAggregateOutputType | null
    _avg: ReviewDIYHomesAvgAggregateOutputType | null
    _sum: ReviewDIYHomesSumAggregateOutputType | null
    _min: ReviewDIYHomesMinAggregateOutputType | null
    _max: ReviewDIYHomesMaxAggregateOutputType | null
  }

  type GetReviewDIYHomesGroupByPayload<T extends ReviewDIYHomesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewDIYHomesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewDIYHomesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewDIYHomesGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewDIYHomesGroupByOutputType[P]>
        }
      >
    >


  export type ReviewDIYHomesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
    Report?: boolean | ReviewDIYHomes$ReportArgs<ExtArgs>
    _count?: boolean | ReviewDIYHomesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewDIYHomes"]>

  export type ReviewDIYHomesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewDIYHomes"]>

  export type ReviewDIYHomesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewDIYHomes"]>

  export type ReviewDIYHomesSelectScalar = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ReviewDIYHomesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postId" | "userId" | "rating" | "comment" | "createdAt", ExtArgs["result"]["reviewDIYHomes"]>
  export type ReviewDIYHomesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
    Report?: boolean | ReviewDIYHomes$ReportArgs<ExtArgs>
    _count?: boolean | ReviewDIYHomesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReviewDIYHomesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }
  export type ReviewDIYHomesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }

  export type $ReviewDIYHomesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewDIYHomes"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostDIYHomesPayload<ExtArgs>
      Report: Prisma.$ReportDIYHomesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      userId: string
      rating: number
      comment: string
      createdAt: Date
    }, ExtArgs["result"]["reviewDIYHomes"]>
    composites: {}
  }

  type ReviewDIYHomesGetPayload<S extends boolean | null | undefined | ReviewDIYHomesDefaultArgs> = $Result.GetResult<Prisma.$ReviewDIYHomesPayload, S>

  type ReviewDIYHomesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewDIYHomesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewDIYHomesCountAggregateInputType | true
    }

  export interface ReviewDIYHomesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewDIYHomes'], meta: { name: 'ReviewDIYHomes' } }
    /**
     * Find zero or one ReviewDIYHomes that matches the filter.
     * @param {ReviewDIYHomesFindUniqueArgs} args - Arguments to find a ReviewDIYHomes
     * @example
     * // Get one ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewDIYHomesFindUniqueArgs>(args: SelectSubset<T, ReviewDIYHomesFindUniqueArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewDIYHomes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewDIYHomesFindUniqueOrThrowArgs} args - Arguments to find a ReviewDIYHomes
     * @example
     * // Get one ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewDIYHomesFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewDIYHomesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewDIYHomesFindFirstArgs} args - Arguments to find a ReviewDIYHomes
     * @example
     * // Get one ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewDIYHomesFindFirstArgs>(args?: SelectSubset<T, ReviewDIYHomesFindFirstArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewDIYHomes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewDIYHomesFindFirstOrThrowArgs} args - Arguments to find a ReviewDIYHomes
     * @example
     * // Get one ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewDIYHomesFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewDIYHomesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewDIYHomesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.findMany()
     * 
     * // Get first 10 ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewDIYHomesWithIdOnly = await prisma.reviewDIYHomes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewDIYHomesFindManyArgs>(args?: SelectSubset<T, ReviewDIYHomesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewDIYHomes.
     * @param {ReviewDIYHomesCreateArgs} args - Arguments to create a ReviewDIYHomes.
     * @example
     * // Create one ReviewDIYHomes
     * const ReviewDIYHomes = await prisma.reviewDIYHomes.create({
     *   data: {
     *     // ... data to create a ReviewDIYHomes
     *   }
     * })
     * 
     */
    create<T extends ReviewDIYHomesCreateArgs>(args: SelectSubset<T, ReviewDIYHomesCreateArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewDIYHomes.
     * @param {ReviewDIYHomesCreateManyArgs} args - Arguments to create many ReviewDIYHomes.
     * @example
     * // Create many ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewDIYHomesCreateManyArgs>(args?: SelectSubset<T, ReviewDIYHomesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewDIYHomes and returns the data saved in the database.
     * @param {ReviewDIYHomesCreateManyAndReturnArgs} args - Arguments to create many ReviewDIYHomes.
     * @example
     * // Create many ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewDIYHomes and only return the `id`
     * const reviewDIYHomesWithIdOnly = await prisma.reviewDIYHomes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewDIYHomesCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewDIYHomesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewDIYHomes.
     * @param {ReviewDIYHomesDeleteArgs} args - Arguments to delete one ReviewDIYHomes.
     * @example
     * // Delete one ReviewDIYHomes
     * const ReviewDIYHomes = await prisma.reviewDIYHomes.delete({
     *   where: {
     *     // ... filter to delete one ReviewDIYHomes
     *   }
     * })
     * 
     */
    delete<T extends ReviewDIYHomesDeleteArgs>(args: SelectSubset<T, ReviewDIYHomesDeleteArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewDIYHomes.
     * @param {ReviewDIYHomesUpdateArgs} args - Arguments to update one ReviewDIYHomes.
     * @example
     * // Update one ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewDIYHomesUpdateArgs>(args: SelectSubset<T, ReviewDIYHomesUpdateArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewDIYHomes.
     * @param {ReviewDIYHomesDeleteManyArgs} args - Arguments to filter ReviewDIYHomes to delete.
     * @example
     * // Delete a few ReviewDIYHomes
     * const { count } = await prisma.reviewDIYHomes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDIYHomesDeleteManyArgs>(args?: SelectSubset<T, ReviewDIYHomesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewDIYHomesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewDIYHomesUpdateManyArgs>(args: SelectSubset<T, ReviewDIYHomesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewDIYHomes and returns the data updated in the database.
     * @param {ReviewDIYHomesUpdateManyAndReturnArgs} args - Arguments to update many ReviewDIYHomes.
     * @example
     * // Update many ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewDIYHomes and only return the `id`
     * const reviewDIYHomesWithIdOnly = await prisma.reviewDIYHomes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewDIYHomesUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewDIYHomesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewDIYHomes.
     * @param {ReviewDIYHomesUpsertArgs} args - Arguments to update or create a ReviewDIYHomes.
     * @example
     * // Update or create a ReviewDIYHomes
     * const reviewDIYHomes = await prisma.reviewDIYHomes.upsert({
     *   create: {
     *     // ... data to create a ReviewDIYHomes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewDIYHomes we want to update
     *   }
     * })
     */
    upsert<T extends ReviewDIYHomesUpsertArgs>(args: SelectSubset<T, ReviewDIYHomesUpsertArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewDIYHomesCountArgs} args - Arguments to filter ReviewDIYHomes to count.
     * @example
     * // Count the number of ReviewDIYHomes
     * const count = await prisma.reviewDIYHomes.count({
     *   where: {
     *     // ... the filter for the ReviewDIYHomes we want to count
     *   }
     * })
    **/
    count<T extends ReviewDIYHomesCountArgs>(
      args?: Subset<T, ReviewDIYHomesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewDIYHomesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewDIYHomesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewDIYHomesAggregateArgs>(args: Subset<T, ReviewDIYHomesAggregateArgs>): Prisma.PrismaPromise<GetReviewDIYHomesAggregateType<T>>

    /**
     * Group by ReviewDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewDIYHomesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewDIYHomesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewDIYHomesGroupByArgs['orderBy'] }
        : { orderBy?: ReviewDIYHomesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewDIYHomesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewDIYHomesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewDIYHomes model
   */
  readonly fields: ReviewDIYHomesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewDIYHomes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewDIYHomesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDIYHomesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDIYHomesDefaultArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Report<T extends ReviewDIYHomes$ReportArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDIYHomes$ReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewDIYHomes model
   */ 
  interface ReviewDIYHomesFieldRefs {
    readonly id: FieldRef<"ReviewDIYHomes", 'String'>
    readonly postId: FieldRef<"ReviewDIYHomes", 'String'>
    readonly userId: FieldRef<"ReviewDIYHomes", 'String'>
    readonly rating: FieldRef<"ReviewDIYHomes", 'Int'>
    readonly comment: FieldRef<"ReviewDIYHomes", 'String'>
    readonly createdAt: FieldRef<"ReviewDIYHomes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReviewDIYHomes findUnique
   */
  export type ReviewDIYHomesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReviewDIYHomes to fetch.
     */
    where: ReviewDIYHomesWhereUniqueInput
  }

  /**
   * ReviewDIYHomes findUniqueOrThrow
   */
  export type ReviewDIYHomesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReviewDIYHomes to fetch.
     */
    where: ReviewDIYHomesWhereUniqueInput
  }

  /**
   * ReviewDIYHomes findFirst
   */
  export type ReviewDIYHomesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReviewDIYHomes to fetch.
     */
    where?: ReviewDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewDIYHomes to fetch.
     */
    orderBy?: ReviewDIYHomesOrderByWithRelationInput | ReviewDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewDIYHomes.
     */
    cursor?: ReviewDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewDIYHomes.
     */
    distinct?: ReviewDIYHomesScalarFieldEnum | ReviewDIYHomesScalarFieldEnum[]
  }

  /**
   * ReviewDIYHomes findFirstOrThrow
   */
  export type ReviewDIYHomesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReviewDIYHomes to fetch.
     */
    where?: ReviewDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewDIYHomes to fetch.
     */
    orderBy?: ReviewDIYHomesOrderByWithRelationInput | ReviewDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewDIYHomes.
     */
    cursor?: ReviewDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewDIYHomes.
     */
    distinct?: ReviewDIYHomesScalarFieldEnum | ReviewDIYHomesScalarFieldEnum[]
  }

  /**
   * ReviewDIYHomes findMany
   */
  export type ReviewDIYHomesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReviewDIYHomes to fetch.
     */
    where?: ReviewDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewDIYHomes to fetch.
     */
    orderBy?: ReviewDIYHomesOrderByWithRelationInput | ReviewDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewDIYHomes.
     */
    cursor?: ReviewDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewDIYHomes.
     */
    skip?: number
    distinct?: ReviewDIYHomesScalarFieldEnum | ReviewDIYHomesScalarFieldEnum[]
  }

  /**
   * ReviewDIYHomes create
   */
  export type ReviewDIYHomesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewDIYHomes.
     */
    data: XOR<ReviewDIYHomesCreateInput, ReviewDIYHomesUncheckedCreateInput>
  }

  /**
   * ReviewDIYHomes createMany
   */
  export type ReviewDIYHomesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewDIYHomes.
     */
    data: ReviewDIYHomesCreateManyInput | ReviewDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewDIYHomes createManyAndReturn
   */
  export type ReviewDIYHomesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewDIYHomes.
     */
    data: ReviewDIYHomesCreateManyInput | ReviewDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewDIYHomes update
   */
  export type ReviewDIYHomesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewDIYHomes.
     */
    data: XOR<ReviewDIYHomesUpdateInput, ReviewDIYHomesUncheckedUpdateInput>
    /**
     * Choose, which ReviewDIYHomes to update.
     */
    where: ReviewDIYHomesWhereUniqueInput
  }

  /**
   * ReviewDIYHomes updateMany
   */
  export type ReviewDIYHomesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewDIYHomes.
     */
    data: XOR<ReviewDIYHomesUpdateManyMutationInput, ReviewDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which ReviewDIYHomes to update
     */
    where?: ReviewDIYHomesWhereInput
    /**
     * Limit how many ReviewDIYHomes to update.
     */
    limit?: number
  }

  /**
   * ReviewDIYHomes updateManyAndReturn
   */
  export type ReviewDIYHomesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to update ReviewDIYHomes.
     */
    data: XOR<ReviewDIYHomesUpdateManyMutationInput, ReviewDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which ReviewDIYHomes to update
     */
    where?: ReviewDIYHomesWhereInput
    /**
     * Limit how many ReviewDIYHomes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewDIYHomes upsert
   */
  export type ReviewDIYHomesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewDIYHomes to update in case it exists.
     */
    where: ReviewDIYHomesWhereUniqueInput
    /**
     * In case the ReviewDIYHomes found by the `where` argument doesn't exist, create a new ReviewDIYHomes with this data.
     */
    create: XOR<ReviewDIYHomesCreateInput, ReviewDIYHomesUncheckedCreateInput>
    /**
     * In case the ReviewDIYHomes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewDIYHomesUpdateInput, ReviewDIYHomesUncheckedUpdateInput>
  }

  /**
   * ReviewDIYHomes delete
   */
  export type ReviewDIYHomesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    /**
     * Filter which ReviewDIYHomes to delete.
     */
    where: ReviewDIYHomesWhereUniqueInput
  }

  /**
   * ReviewDIYHomes deleteMany
   */
  export type ReviewDIYHomesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewDIYHomes to delete
     */
    where?: ReviewDIYHomesWhereInput
    /**
     * Limit how many ReviewDIYHomes to delete.
     */
    limit?: number
  }

  /**
   * ReviewDIYHomes.Report
   */
  export type ReviewDIYHomes$ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    where?: ReportDIYHomesWhereInput
    orderBy?: ReportDIYHomesOrderByWithRelationInput | ReportDIYHomesOrderByWithRelationInput[]
    cursor?: ReportDIYHomesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportDIYHomesScalarFieldEnum | ReportDIYHomesScalarFieldEnum[]
  }

  /**
   * ReviewDIYHomes without action
   */
  export type ReviewDIYHomesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
  }


  /**
   * Model LikeDIYHomes
   */

  export type AggregateLikeDIYHomes = {
    _count: LikeDIYHomesCountAggregateOutputType | null
    _min: LikeDIYHomesMinAggregateOutputType | null
    _max: LikeDIYHomesMaxAggregateOutputType | null
  }

  export type LikeDIYHomesMinAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeDIYHomesMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeDIYHomesCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LikeDIYHomesMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeDIYHomesMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeDIYHomesCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeDIYHomesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeDIYHomes to aggregate.
     */
    where?: LikeDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeDIYHomes to fetch.
     */
    orderBy?: LikeDIYHomesOrderByWithRelationInput | LikeDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikeDIYHomes
    **/
    _count?: true | LikeDIYHomesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeDIYHomesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeDIYHomesMaxAggregateInputType
  }

  export type GetLikeDIYHomesAggregateType<T extends LikeDIYHomesAggregateArgs> = {
        [P in keyof T & keyof AggregateLikeDIYHomes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikeDIYHomes[P]>
      : GetScalarType<T[P], AggregateLikeDIYHomes[P]>
  }




  export type LikeDIYHomesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeDIYHomesWhereInput
    orderBy?: LikeDIYHomesOrderByWithAggregationInput | LikeDIYHomesOrderByWithAggregationInput[]
    by: LikeDIYHomesScalarFieldEnum[] | LikeDIYHomesScalarFieldEnum
    having?: LikeDIYHomesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeDIYHomesCountAggregateInputType | true
    _min?: LikeDIYHomesMinAggregateInputType
    _max?: LikeDIYHomesMaxAggregateInputType
  }

  export type LikeDIYHomesGroupByOutputType = {
    id: string
    postId: string
    userId: string
    createdAt: Date
    _count: LikeDIYHomesCountAggregateOutputType | null
    _min: LikeDIYHomesMinAggregateOutputType | null
    _max: LikeDIYHomesMaxAggregateOutputType | null
  }

  type GetLikeDIYHomesGroupByPayload<T extends LikeDIYHomesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeDIYHomesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeDIYHomesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeDIYHomesGroupByOutputType[P]>
            : GetScalarType<T[P], LikeDIYHomesGroupByOutputType[P]>
        }
      >
    >


  export type LikeDIYHomesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeDIYHomes"]>

  export type LikeDIYHomesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeDIYHomes"]>

  export type LikeDIYHomesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeDIYHomes"]>

  export type LikeDIYHomesSelectScalar = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LikeDIYHomesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postId" | "userId" | "createdAt", ExtArgs["result"]["likeDIYHomes"]>
  export type LikeDIYHomesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }
  export type LikeDIYHomesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }
  export type LikeDIYHomesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }

  export type $LikeDIYHomesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LikeDIYHomes"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostDIYHomesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["likeDIYHomes"]>
    composites: {}
  }

  type LikeDIYHomesGetPayload<S extends boolean | null | undefined | LikeDIYHomesDefaultArgs> = $Result.GetResult<Prisma.$LikeDIYHomesPayload, S>

  type LikeDIYHomesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LikeDIYHomesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LikeDIYHomesCountAggregateInputType | true
    }

  export interface LikeDIYHomesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LikeDIYHomes'], meta: { name: 'LikeDIYHomes' } }
    /**
     * Find zero or one LikeDIYHomes that matches the filter.
     * @param {LikeDIYHomesFindUniqueArgs} args - Arguments to find a LikeDIYHomes
     * @example
     * // Get one LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeDIYHomesFindUniqueArgs>(args: SelectSubset<T, LikeDIYHomesFindUniqueArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LikeDIYHomes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LikeDIYHomesFindUniqueOrThrowArgs} args - Arguments to find a LikeDIYHomes
     * @example
     * // Get one LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeDIYHomesFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeDIYHomesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LikeDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeDIYHomesFindFirstArgs} args - Arguments to find a LikeDIYHomes
     * @example
     * // Get one LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeDIYHomesFindFirstArgs>(args?: SelectSubset<T, LikeDIYHomesFindFirstArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LikeDIYHomes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeDIYHomesFindFirstOrThrowArgs} args - Arguments to find a LikeDIYHomes
     * @example
     * // Get one LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeDIYHomesFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeDIYHomesFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LikeDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeDIYHomesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.findMany()
     * 
     * // Get first 10 LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeDIYHomesWithIdOnly = await prisma.likeDIYHomes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeDIYHomesFindManyArgs>(args?: SelectSubset<T, LikeDIYHomesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LikeDIYHomes.
     * @param {LikeDIYHomesCreateArgs} args - Arguments to create a LikeDIYHomes.
     * @example
     * // Create one LikeDIYHomes
     * const LikeDIYHomes = await prisma.likeDIYHomes.create({
     *   data: {
     *     // ... data to create a LikeDIYHomes
     *   }
     * })
     * 
     */
    create<T extends LikeDIYHomesCreateArgs>(args: SelectSubset<T, LikeDIYHomesCreateArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LikeDIYHomes.
     * @param {LikeDIYHomesCreateManyArgs} args - Arguments to create many LikeDIYHomes.
     * @example
     * // Create many LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeDIYHomesCreateManyArgs>(args?: SelectSubset<T, LikeDIYHomesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LikeDIYHomes and returns the data saved in the database.
     * @param {LikeDIYHomesCreateManyAndReturnArgs} args - Arguments to create many LikeDIYHomes.
     * @example
     * // Create many LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LikeDIYHomes and only return the `id`
     * const likeDIYHomesWithIdOnly = await prisma.likeDIYHomes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikeDIYHomesCreateManyAndReturnArgs>(args?: SelectSubset<T, LikeDIYHomesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LikeDIYHomes.
     * @param {LikeDIYHomesDeleteArgs} args - Arguments to delete one LikeDIYHomes.
     * @example
     * // Delete one LikeDIYHomes
     * const LikeDIYHomes = await prisma.likeDIYHomes.delete({
     *   where: {
     *     // ... filter to delete one LikeDIYHomes
     *   }
     * })
     * 
     */
    delete<T extends LikeDIYHomesDeleteArgs>(args: SelectSubset<T, LikeDIYHomesDeleteArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LikeDIYHomes.
     * @param {LikeDIYHomesUpdateArgs} args - Arguments to update one LikeDIYHomes.
     * @example
     * // Update one LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeDIYHomesUpdateArgs>(args: SelectSubset<T, LikeDIYHomesUpdateArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LikeDIYHomes.
     * @param {LikeDIYHomesDeleteManyArgs} args - Arguments to filter LikeDIYHomes to delete.
     * @example
     * // Delete a few LikeDIYHomes
     * const { count } = await prisma.likeDIYHomes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeDIYHomesDeleteManyArgs>(args?: SelectSubset<T, LikeDIYHomesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeDIYHomesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeDIYHomesUpdateManyArgs>(args: SelectSubset<T, LikeDIYHomesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeDIYHomes and returns the data updated in the database.
     * @param {LikeDIYHomesUpdateManyAndReturnArgs} args - Arguments to update many LikeDIYHomes.
     * @example
     * // Update many LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LikeDIYHomes and only return the `id`
     * const likeDIYHomesWithIdOnly = await prisma.likeDIYHomes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LikeDIYHomesUpdateManyAndReturnArgs>(args: SelectSubset<T, LikeDIYHomesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LikeDIYHomes.
     * @param {LikeDIYHomesUpsertArgs} args - Arguments to update or create a LikeDIYHomes.
     * @example
     * // Update or create a LikeDIYHomes
     * const likeDIYHomes = await prisma.likeDIYHomes.upsert({
     *   create: {
     *     // ... data to create a LikeDIYHomes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikeDIYHomes we want to update
     *   }
     * })
     */
    upsert<T extends LikeDIYHomesUpsertArgs>(args: SelectSubset<T, LikeDIYHomesUpsertArgs<ExtArgs>>): Prisma__LikeDIYHomesClient<$Result.GetResult<Prisma.$LikeDIYHomesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LikeDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeDIYHomesCountArgs} args - Arguments to filter LikeDIYHomes to count.
     * @example
     * // Count the number of LikeDIYHomes
     * const count = await prisma.likeDIYHomes.count({
     *   where: {
     *     // ... the filter for the LikeDIYHomes we want to count
     *   }
     * })
    **/
    count<T extends LikeDIYHomesCountArgs>(
      args?: Subset<T, LikeDIYHomesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeDIYHomesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikeDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeDIYHomesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeDIYHomesAggregateArgs>(args: Subset<T, LikeDIYHomesAggregateArgs>): Prisma.PrismaPromise<GetLikeDIYHomesAggregateType<T>>

    /**
     * Group by LikeDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeDIYHomesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeDIYHomesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeDIYHomesGroupByArgs['orderBy'] }
        : { orderBy?: LikeDIYHomesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeDIYHomesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeDIYHomesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LikeDIYHomes model
   */
  readonly fields: LikeDIYHomesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LikeDIYHomes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeDIYHomesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDIYHomesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDIYHomesDefaultArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LikeDIYHomes model
   */ 
  interface LikeDIYHomesFieldRefs {
    readonly id: FieldRef<"LikeDIYHomes", 'String'>
    readonly postId: FieldRef<"LikeDIYHomes", 'String'>
    readonly userId: FieldRef<"LikeDIYHomes", 'String'>
    readonly createdAt: FieldRef<"LikeDIYHomes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LikeDIYHomes findUnique
   */
  export type LikeDIYHomesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which LikeDIYHomes to fetch.
     */
    where: LikeDIYHomesWhereUniqueInput
  }

  /**
   * LikeDIYHomes findUniqueOrThrow
   */
  export type LikeDIYHomesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which LikeDIYHomes to fetch.
     */
    where: LikeDIYHomesWhereUniqueInput
  }

  /**
   * LikeDIYHomes findFirst
   */
  export type LikeDIYHomesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which LikeDIYHomes to fetch.
     */
    where?: LikeDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeDIYHomes to fetch.
     */
    orderBy?: LikeDIYHomesOrderByWithRelationInput | LikeDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeDIYHomes.
     */
    cursor?: LikeDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeDIYHomes.
     */
    distinct?: LikeDIYHomesScalarFieldEnum | LikeDIYHomesScalarFieldEnum[]
  }

  /**
   * LikeDIYHomes findFirstOrThrow
   */
  export type LikeDIYHomesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which LikeDIYHomes to fetch.
     */
    where?: LikeDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeDIYHomes to fetch.
     */
    orderBy?: LikeDIYHomesOrderByWithRelationInput | LikeDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeDIYHomes.
     */
    cursor?: LikeDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeDIYHomes.
     */
    distinct?: LikeDIYHomesScalarFieldEnum | LikeDIYHomesScalarFieldEnum[]
  }

  /**
   * LikeDIYHomes findMany
   */
  export type LikeDIYHomesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which LikeDIYHomes to fetch.
     */
    where?: LikeDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeDIYHomes to fetch.
     */
    orderBy?: LikeDIYHomesOrderByWithRelationInput | LikeDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikeDIYHomes.
     */
    cursor?: LikeDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeDIYHomes.
     */
    skip?: number
    distinct?: LikeDIYHomesScalarFieldEnum | LikeDIYHomesScalarFieldEnum[]
  }

  /**
   * LikeDIYHomes create
   */
  export type LikeDIYHomesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to create a LikeDIYHomes.
     */
    data: XOR<LikeDIYHomesCreateInput, LikeDIYHomesUncheckedCreateInput>
  }

  /**
   * LikeDIYHomes createMany
   */
  export type LikeDIYHomesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LikeDIYHomes.
     */
    data: LikeDIYHomesCreateManyInput | LikeDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LikeDIYHomes createManyAndReturn
   */
  export type LikeDIYHomesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to create many LikeDIYHomes.
     */
    data: LikeDIYHomesCreateManyInput | LikeDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LikeDIYHomes update
   */
  export type LikeDIYHomesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to update a LikeDIYHomes.
     */
    data: XOR<LikeDIYHomesUpdateInput, LikeDIYHomesUncheckedUpdateInput>
    /**
     * Choose, which LikeDIYHomes to update.
     */
    where: LikeDIYHomesWhereUniqueInput
  }

  /**
   * LikeDIYHomes updateMany
   */
  export type LikeDIYHomesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LikeDIYHomes.
     */
    data: XOR<LikeDIYHomesUpdateManyMutationInput, LikeDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which LikeDIYHomes to update
     */
    where?: LikeDIYHomesWhereInput
    /**
     * Limit how many LikeDIYHomes to update.
     */
    limit?: number
  }

  /**
   * LikeDIYHomes updateManyAndReturn
   */
  export type LikeDIYHomesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to update LikeDIYHomes.
     */
    data: XOR<LikeDIYHomesUpdateManyMutationInput, LikeDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which LikeDIYHomes to update
     */
    where?: LikeDIYHomesWhereInput
    /**
     * Limit how many LikeDIYHomes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LikeDIYHomes upsert
   */
  export type LikeDIYHomesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * The filter to search for the LikeDIYHomes to update in case it exists.
     */
    where: LikeDIYHomesWhereUniqueInput
    /**
     * In case the LikeDIYHomes found by the `where` argument doesn't exist, create a new LikeDIYHomes with this data.
     */
    create: XOR<LikeDIYHomesCreateInput, LikeDIYHomesUncheckedCreateInput>
    /**
     * In case the LikeDIYHomes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeDIYHomesUpdateInput, LikeDIYHomesUncheckedUpdateInput>
  }

  /**
   * LikeDIYHomes delete
   */
  export type LikeDIYHomesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
    /**
     * Filter which LikeDIYHomes to delete.
     */
    where: LikeDIYHomesWhereUniqueInput
  }

  /**
   * LikeDIYHomes deleteMany
   */
  export type LikeDIYHomesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeDIYHomes to delete
     */
    where?: LikeDIYHomesWhereInput
    /**
     * Limit how many LikeDIYHomes to delete.
     */
    limit?: number
  }

  /**
   * LikeDIYHomes without action
   */
  export type LikeDIYHomesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeDIYHomes
     */
    select?: LikeDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeDIYHomes
     */
    omit?: LikeDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeDIYHomesInclude<ExtArgs> | null
  }


  /**
   * Model BookmarkDIYHomes
   */

  export type AggregateBookmarkDIYHomes = {
    _count: BookmarkDIYHomesCountAggregateOutputType | null
    _min: BookmarkDIYHomesMinAggregateOutputType | null
    _max: BookmarkDIYHomesMaxAggregateOutputType | null
  }

  export type BookmarkDIYHomesMinAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BookmarkDIYHomesMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BookmarkDIYHomesCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type BookmarkDIYHomesMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type BookmarkDIYHomesMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
  }

  export type BookmarkDIYHomesCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type BookmarkDIYHomesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmarkDIYHomes to aggregate.
     */
    where?: BookmarkDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkDIYHomes to fetch.
     */
    orderBy?: BookmarkDIYHomesOrderByWithRelationInput | BookmarkDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmarkDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookmarkDIYHomes
    **/
    _count?: true | BookmarkDIYHomesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkDIYHomesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkDIYHomesMaxAggregateInputType
  }

  export type GetBookmarkDIYHomesAggregateType<T extends BookmarkDIYHomesAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmarkDIYHomes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmarkDIYHomes[P]>
      : GetScalarType<T[P], AggregateBookmarkDIYHomes[P]>
  }




  export type BookmarkDIYHomesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkDIYHomesWhereInput
    orderBy?: BookmarkDIYHomesOrderByWithAggregationInput | BookmarkDIYHomesOrderByWithAggregationInput[]
    by: BookmarkDIYHomesScalarFieldEnum[] | BookmarkDIYHomesScalarFieldEnum
    having?: BookmarkDIYHomesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkDIYHomesCountAggregateInputType | true
    _min?: BookmarkDIYHomesMinAggregateInputType
    _max?: BookmarkDIYHomesMaxAggregateInputType
  }

  export type BookmarkDIYHomesGroupByOutputType = {
    id: string
    postId: string
    userId: string
    createdAt: Date
    _count: BookmarkDIYHomesCountAggregateOutputType | null
    _min: BookmarkDIYHomesMinAggregateOutputType | null
    _max: BookmarkDIYHomesMaxAggregateOutputType | null
  }

  type GetBookmarkDIYHomesGroupByPayload<T extends BookmarkDIYHomesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkDIYHomesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkDIYHomesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkDIYHomesGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkDIYHomesGroupByOutputType[P]>
        }
      >
    >


  export type BookmarkDIYHomesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkDIYHomes"]>

  export type BookmarkDIYHomesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkDIYHomes"]>

  export type BookmarkDIYHomesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkDIYHomes"]>

  export type BookmarkDIYHomesSelectScalar = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type BookmarkDIYHomesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postId" | "userId" | "createdAt", ExtArgs["result"]["bookmarkDIYHomes"]>
  export type BookmarkDIYHomesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }
  export type BookmarkDIYHomesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }
  export type BookmarkDIYHomesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDIYHomesDefaultArgs<ExtArgs>
  }

  export type $BookmarkDIYHomesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookmarkDIYHomes"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostDIYHomesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["bookmarkDIYHomes"]>
    composites: {}
  }

  type BookmarkDIYHomesGetPayload<S extends boolean | null | undefined | BookmarkDIYHomesDefaultArgs> = $Result.GetResult<Prisma.$BookmarkDIYHomesPayload, S>

  type BookmarkDIYHomesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookmarkDIYHomesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmarkDIYHomesCountAggregateInputType | true
    }

  export interface BookmarkDIYHomesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookmarkDIYHomes'], meta: { name: 'BookmarkDIYHomes' } }
    /**
     * Find zero or one BookmarkDIYHomes that matches the filter.
     * @param {BookmarkDIYHomesFindUniqueArgs} args - Arguments to find a BookmarkDIYHomes
     * @example
     * // Get one BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmarkDIYHomesFindUniqueArgs>(args: SelectSubset<T, BookmarkDIYHomesFindUniqueArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookmarkDIYHomes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookmarkDIYHomesFindUniqueOrThrowArgs} args - Arguments to find a BookmarkDIYHomes
     * @example
     * // Get one BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmarkDIYHomesFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmarkDIYHomesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmarkDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkDIYHomesFindFirstArgs} args - Arguments to find a BookmarkDIYHomes
     * @example
     * // Get one BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmarkDIYHomesFindFirstArgs>(args?: SelectSubset<T, BookmarkDIYHomesFindFirstArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmarkDIYHomes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkDIYHomesFindFirstOrThrowArgs} args - Arguments to find a BookmarkDIYHomes
     * @example
     * // Get one BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmarkDIYHomesFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmarkDIYHomesFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookmarkDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkDIYHomesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.findMany()
     * 
     * // Get first 10 BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmarkDIYHomesWithIdOnly = await prisma.bookmarkDIYHomes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookmarkDIYHomesFindManyArgs>(args?: SelectSubset<T, BookmarkDIYHomesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookmarkDIYHomes.
     * @param {BookmarkDIYHomesCreateArgs} args - Arguments to create a BookmarkDIYHomes.
     * @example
     * // Create one BookmarkDIYHomes
     * const BookmarkDIYHomes = await prisma.bookmarkDIYHomes.create({
     *   data: {
     *     // ... data to create a BookmarkDIYHomes
     *   }
     * })
     * 
     */
    create<T extends BookmarkDIYHomesCreateArgs>(args: SelectSubset<T, BookmarkDIYHomesCreateArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookmarkDIYHomes.
     * @param {BookmarkDIYHomesCreateManyArgs} args - Arguments to create many BookmarkDIYHomes.
     * @example
     * // Create many BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmarkDIYHomesCreateManyArgs>(args?: SelectSubset<T, BookmarkDIYHomesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookmarkDIYHomes and returns the data saved in the database.
     * @param {BookmarkDIYHomesCreateManyAndReturnArgs} args - Arguments to create many BookmarkDIYHomes.
     * @example
     * // Create many BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookmarkDIYHomes and only return the `id`
     * const bookmarkDIYHomesWithIdOnly = await prisma.bookmarkDIYHomes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookmarkDIYHomesCreateManyAndReturnArgs>(args?: SelectSubset<T, BookmarkDIYHomesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookmarkDIYHomes.
     * @param {BookmarkDIYHomesDeleteArgs} args - Arguments to delete one BookmarkDIYHomes.
     * @example
     * // Delete one BookmarkDIYHomes
     * const BookmarkDIYHomes = await prisma.bookmarkDIYHomes.delete({
     *   where: {
     *     // ... filter to delete one BookmarkDIYHomes
     *   }
     * })
     * 
     */
    delete<T extends BookmarkDIYHomesDeleteArgs>(args: SelectSubset<T, BookmarkDIYHomesDeleteArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookmarkDIYHomes.
     * @param {BookmarkDIYHomesUpdateArgs} args - Arguments to update one BookmarkDIYHomes.
     * @example
     * // Update one BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmarkDIYHomesUpdateArgs>(args: SelectSubset<T, BookmarkDIYHomesUpdateArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookmarkDIYHomes.
     * @param {BookmarkDIYHomesDeleteManyArgs} args - Arguments to filter BookmarkDIYHomes to delete.
     * @example
     * // Delete a few BookmarkDIYHomes
     * const { count } = await prisma.bookmarkDIYHomes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmarkDIYHomesDeleteManyArgs>(args?: SelectSubset<T, BookmarkDIYHomesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmarkDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkDIYHomesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmarkDIYHomesUpdateManyArgs>(args: SelectSubset<T, BookmarkDIYHomesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmarkDIYHomes and returns the data updated in the database.
     * @param {BookmarkDIYHomesUpdateManyAndReturnArgs} args - Arguments to update many BookmarkDIYHomes.
     * @example
     * // Update many BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookmarkDIYHomes and only return the `id`
     * const bookmarkDIYHomesWithIdOnly = await prisma.bookmarkDIYHomes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookmarkDIYHomesUpdateManyAndReturnArgs>(args: SelectSubset<T, BookmarkDIYHomesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookmarkDIYHomes.
     * @param {BookmarkDIYHomesUpsertArgs} args - Arguments to update or create a BookmarkDIYHomes.
     * @example
     * // Update or create a BookmarkDIYHomes
     * const bookmarkDIYHomes = await prisma.bookmarkDIYHomes.upsert({
     *   create: {
     *     // ... data to create a BookmarkDIYHomes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookmarkDIYHomes we want to update
     *   }
     * })
     */
    upsert<T extends BookmarkDIYHomesUpsertArgs>(args: SelectSubset<T, BookmarkDIYHomesUpsertArgs<ExtArgs>>): Prisma__BookmarkDIYHomesClient<$Result.GetResult<Prisma.$BookmarkDIYHomesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookmarkDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkDIYHomesCountArgs} args - Arguments to filter BookmarkDIYHomes to count.
     * @example
     * // Count the number of BookmarkDIYHomes
     * const count = await prisma.bookmarkDIYHomes.count({
     *   where: {
     *     // ... the filter for the BookmarkDIYHomes we want to count
     *   }
     * })
    **/
    count<T extends BookmarkDIYHomesCountArgs>(
      args?: Subset<T, BookmarkDIYHomesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkDIYHomesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookmarkDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkDIYHomesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkDIYHomesAggregateArgs>(args: Subset<T, BookmarkDIYHomesAggregateArgs>): Prisma.PrismaPromise<GetBookmarkDIYHomesAggregateType<T>>

    /**
     * Group by BookmarkDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkDIYHomesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmarkDIYHomesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmarkDIYHomesGroupByArgs['orderBy'] }
        : { orderBy?: BookmarkDIYHomesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmarkDIYHomesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkDIYHomesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookmarkDIYHomes model
   */
  readonly fields: BookmarkDIYHomesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookmarkDIYHomes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmarkDIYHomesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDIYHomesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDIYHomesDefaultArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookmarkDIYHomes model
   */ 
  interface BookmarkDIYHomesFieldRefs {
    readonly id: FieldRef<"BookmarkDIYHomes", 'String'>
    readonly postId: FieldRef<"BookmarkDIYHomes", 'String'>
    readonly userId: FieldRef<"BookmarkDIYHomes", 'String'>
    readonly createdAt: FieldRef<"BookmarkDIYHomes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookmarkDIYHomes findUnique
   */
  export type BookmarkDIYHomesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkDIYHomes to fetch.
     */
    where: BookmarkDIYHomesWhereUniqueInput
  }

  /**
   * BookmarkDIYHomes findUniqueOrThrow
   */
  export type BookmarkDIYHomesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkDIYHomes to fetch.
     */
    where: BookmarkDIYHomesWhereUniqueInput
  }

  /**
   * BookmarkDIYHomes findFirst
   */
  export type BookmarkDIYHomesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkDIYHomes to fetch.
     */
    where?: BookmarkDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkDIYHomes to fetch.
     */
    orderBy?: BookmarkDIYHomesOrderByWithRelationInput | BookmarkDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmarkDIYHomes.
     */
    cursor?: BookmarkDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmarkDIYHomes.
     */
    distinct?: BookmarkDIYHomesScalarFieldEnum | BookmarkDIYHomesScalarFieldEnum[]
  }

  /**
   * BookmarkDIYHomes findFirstOrThrow
   */
  export type BookmarkDIYHomesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkDIYHomes to fetch.
     */
    where?: BookmarkDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkDIYHomes to fetch.
     */
    orderBy?: BookmarkDIYHomesOrderByWithRelationInput | BookmarkDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmarkDIYHomes.
     */
    cursor?: BookmarkDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmarkDIYHomes.
     */
    distinct?: BookmarkDIYHomesScalarFieldEnum | BookmarkDIYHomesScalarFieldEnum[]
  }

  /**
   * BookmarkDIYHomes findMany
   */
  export type BookmarkDIYHomesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkDIYHomes to fetch.
     */
    where?: BookmarkDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkDIYHomes to fetch.
     */
    orderBy?: BookmarkDIYHomesOrderByWithRelationInput | BookmarkDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookmarkDIYHomes.
     */
    cursor?: BookmarkDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkDIYHomes.
     */
    skip?: number
    distinct?: BookmarkDIYHomesScalarFieldEnum | BookmarkDIYHomesScalarFieldEnum[]
  }

  /**
   * BookmarkDIYHomes create
   */
  export type BookmarkDIYHomesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to create a BookmarkDIYHomes.
     */
    data: XOR<BookmarkDIYHomesCreateInput, BookmarkDIYHomesUncheckedCreateInput>
  }

  /**
   * BookmarkDIYHomes createMany
   */
  export type BookmarkDIYHomesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookmarkDIYHomes.
     */
    data: BookmarkDIYHomesCreateManyInput | BookmarkDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookmarkDIYHomes createManyAndReturn
   */
  export type BookmarkDIYHomesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to create many BookmarkDIYHomes.
     */
    data: BookmarkDIYHomesCreateManyInput | BookmarkDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmarkDIYHomes update
   */
  export type BookmarkDIYHomesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to update a BookmarkDIYHomes.
     */
    data: XOR<BookmarkDIYHomesUpdateInput, BookmarkDIYHomesUncheckedUpdateInput>
    /**
     * Choose, which BookmarkDIYHomes to update.
     */
    where: BookmarkDIYHomesWhereUniqueInput
  }

  /**
   * BookmarkDIYHomes updateMany
   */
  export type BookmarkDIYHomesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookmarkDIYHomes.
     */
    data: XOR<BookmarkDIYHomesUpdateManyMutationInput, BookmarkDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which BookmarkDIYHomes to update
     */
    where?: BookmarkDIYHomesWhereInput
    /**
     * Limit how many BookmarkDIYHomes to update.
     */
    limit?: number
  }

  /**
   * BookmarkDIYHomes updateManyAndReturn
   */
  export type BookmarkDIYHomesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to update BookmarkDIYHomes.
     */
    data: XOR<BookmarkDIYHomesUpdateManyMutationInput, BookmarkDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which BookmarkDIYHomes to update
     */
    where?: BookmarkDIYHomesWhereInput
    /**
     * Limit how many BookmarkDIYHomes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmarkDIYHomes upsert
   */
  export type BookmarkDIYHomesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * The filter to search for the BookmarkDIYHomes to update in case it exists.
     */
    where: BookmarkDIYHomesWhereUniqueInput
    /**
     * In case the BookmarkDIYHomes found by the `where` argument doesn't exist, create a new BookmarkDIYHomes with this data.
     */
    create: XOR<BookmarkDIYHomesCreateInput, BookmarkDIYHomesUncheckedCreateInput>
    /**
     * In case the BookmarkDIYHomes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmarkDIYHomesUpdateInput, BookmarkDIYHomesUncheckedUpdateInput>
  }

  /**
   * BookmarkDIYHomes delete
   */
  export type BookmarkDIYHomesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
    /**
     * Filter which BookmarkDIYHomes to delete.
     */
    where: BookmarkDIYHomesWhereUniqueInput
  }

  /**
   * BookmarkDIYHomes deleteMany
   */
  export type BookmarkDIYHomesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmarkDIYHomes to delete
     */
    where?: BookmarkDIYHomesWhereInput
    /**
     * Limit how many BookmarkDIYHomes to delete.
     */
    limit?: number
  }

  /**
   * BookmarkDIYHomes without action
   */
  export type BookmarkDIYHomesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkDIYHomes
     */
    select?: BookmarkDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkDIYHomes
     */
    omit?: BookmarkDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkDIYHomesInclude<ExtArgs> | null
  }


  /**
   * Model ReportDIYHomes
   */

  export type AggregateReportDIYHomes = {
    _count: ReportDIYHomesCountAggregateOutputType | null
    _min: ReportDIYHomesMinAggregateOutputType | null
    _max: ReportDIYHomesMaxAggregateOutputType | null
  }

  export type ReportDIYHomesMinAggregateOutputType = {
    id: string | null
    postId: string | null
    reviewId: string | null
    userId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportDIYHomesMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    reviewId: string | null
    userId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportDIYHomesCountAggregateOutputType = {
    id: number
    postId: number
    reviewId: number
    userId: number
    reason: number
    createdAt: number
    _all: number
  }


  export type ReportDIYHomesMinAggregateInputType = {
    id?: true
    postId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportDIYHomesMaxAggregateInputType = {
    id?: true
    postId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportDIYHomesCountAggregateInputType = {
    id?: true
    postId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type ReportDIYHomesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportDIYHomes to aggregate.
     */
    where?: ReportDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDIYHomes to fetch.
     */
    orderBy?: ReportDIYHomesOrderByWithRelationInput | ReportDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportDIYHomes
    **/
    _count?: true | ReportDIYHomesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportDIYHomesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportDIYHomesMaxAggregateInputType
  }

  export type GetReportDIYHomesAggregateType<T extends ReportDIYHomesAggregateArgs> = {
        [P in keyof T & keyof AggregateReportDIYHomes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportDIYHomes[P]>
      : GetScalarType<T[P], AggregateReportDIYHomes[P]>
  }




  export type ReportDIYHomesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDIYHomesWhereInput
    orderBy?: ReportDIYHomesOrderByWithAggregationInput | ReportDIYHomesOrderByWithAggregationInput[]
    by: ReportDIYHomesScalarFieldEnum[] | ReportDIYHomesScalarFieldEnum
    having?: ReportDIYHomesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportDIYHomesCountAggregateInputType | true
    _min?: ReportDIYHomesMinAggregateInputType
    _max?: ReportDIYHomesMaxAggregateInputType
  }

  export type ReportDIYHomesGroupByOutputType = {
    id: string
    postId: string | null
    reviewId: string | null
    userId: string
    reason: string
    createdAt: Date
    _count: ReportDIYHomesCountAggregateOutputType | null
    _min: ReportDIYHomesMinAggregateOutputType | null
    _max: ReportDIYHomesMaxAggregateOutputType | null
  }

  type GetReportDIYHomesGroupByPayload<T extends ReportDIYHomesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportDIYHomesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportDIYHomesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportDIYHomesGroupByOutputType[P]>
            : GetScalarType<T[P], ReportDIYHomesGroupByOutputType[P]>
        }
      >
    >


  export type ReportDIYHomesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ReportDIYHomes$postArgs<ExtArgs>
    review?: boolean | ReportDIYHomes$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportDIYHomes"]>

  export type ReportDIYHomesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ReportDIYHomes$postArgs<ExtArgs>
    review?: boolean | ReportDIYHomes$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportDIYHomes"]>

  export type ReportDIYHomesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ReportDIYHomes$postArgs<ExtArgs>
    review?: boolean | ReportDIYHomes$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportDIYHomes"]>

  export type ReportDIYHomesSelectScalar = {
    id?: boolean
    postId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type ReportDIYHomesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postId" | "reviewId" | "userId" | "reason" | "createdAt", ExtArgs["result"]["reportDIYHomes"]>
  export type ReportDIYHomesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ReportDIYHomes$postArgs<ExtArgs>
    review?: boolean | ReportDIYHomes$reviewArgs<ExtArgs>
  }
  export type ReportDIYHomesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ReportDIYHomes$postArgs<ExtArgs>
    review?: boolean | ReportDIYHomes$reviewArgs<ExtArgs>
  }
  export type ReportDIYHomesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | ReportDIYHomes$postArgs<ExtArgs>
    review?: boolean | ReportDIYHomes$reviewArgs<ExtArgs>
  }

  export type $ReportDIYHomesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportDIYHomes"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostDIYHomesPayload<ExtArgs> | null
      review: Prisma.$ReviewDIYHomesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string | null
      reviewId: string | null
      userId: string
      reason: string
      createdAt: Date
    }, ExtArgs["result"]["reportDIYHomes"]>
    composites: {}
  }

  type ReportDIYHomesGetPayload<S extends boolean | null | undefined | ReportDIYHomesDefaultArgs> = $Result.GetResult<Prisma.$ReportDIYHomesPayload, S>

  type ReportDIYHomesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportDIYHomesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportDIYHomesCountAggregateInputType | true
    }

  export interface ReportDIYHomesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportDIYHomes'], meta: { name: 'ReportDIYHomes' } }
    /**
     * Find zero or one ReportDIYHomes that matches the filter.
     * @param {ReportDIYHomesFindUniqueArgs} args - Arguments to find a ReportDIYHomes
     * @example
     * // Get one ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportDIYHomesFindUniqueArgs>(args: SelectSubset<T, ReportDIYHomesFindUniqueArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportDIYHomes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportDIYHomesFindUniqueOrThrowArgs} args - Arguments to find a ReportDIYHomes
     * @example
     * // Get one ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportDIYHomesFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportDIYHomesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDIYHomesFindFirstArgs} args - Arguments to find a ReportDIYHomes
     * @example
     * // Get one ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportDIYHomesFindFirstArgs>(args?: SelectSubset<T, ReportDIYHomesFindFirstArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportDIYHomes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDIYHomesFindFirstOrThrowArgs} args - Arguments to find a ReportDIYHomes
     * @example
     * // Get one ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportDIYHomesFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportDIYHomesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportDIYHomes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDIYHomesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.findMany()
     * 
     * // Get first 10 ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportDIYHomesWithIdOnly = await prisma.reportDIYHomes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportDIYHomesFindManyArgs>(args?: SelectSubset<T, ReportDIYHomesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportDIYHomes.
     * @param {ReportDIYHomesCreateArgs} args - Arguments to create a ReportDIYHomes.
     * @example
     * // Create one ReportDIYHomes
     * const ReportDIYHomes = await prisma.reportDIYHomes.create({
     *   data: {
     *     // ... data to create a ReportDIYHomes
     *   }
     * })
     * 
     */
    create<T extends ReportDIYHomesCreateArgs>(args: SelectSubset<T, ReportDIYHomesCreateArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportDIYHomes.
     * @param {ReportDIYHomesCreateManyArgs} args - Arguments to create many ReportDIYHomes.
     * @example
     * // Create many ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportDIYHomesCreateManyArgs>(args?: SelectSubset<T, ReportDIYHomesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportDIYHomes and returns the data saved in the database.
     * @param {ReportDIYHomesCreateManyAndReturnArgs} args - Arguments to create many ReportDIYHomes.
     * @example
     * // Create many ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportDIYHomes and only return the `id`
     * const reportDIYHomesWithIdOnly = await prisma.reportDIYHomes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportDIYHomesCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportDIYHomesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportDIYHomes.
     * @param {ReportDIYHomesDeleteArgs} args - Arguments to delete one ReportDIYHomes.
     * @example
     * // Delete one ReportDIYHomes
     * const ReportDIYHomes = await prisma.reportDIYHomes.delete({
     *   where: {
     *     // ... filter to delete one ReportDIYHomes
     *   }
     * })
     * 
     */
    delete<T extends ReportDIYHomesDeleteArgs>(args: SelectSubset<T, ReportDIYHomesDeleteArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportDIYHomes.
     * @param {ReportDIYHomesUpdateArgs} args - Arguments to update one ReportDIYHomes.
     * @example
     * // Update one ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportDIYHomesUpdateArgs>(args: SelectSubset<T, ReportDIYHomesUpdateArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportDIYHomes.
     * @param {ReportDIYHomesDeleteManyArgs} args - Arguments to filter ReportDIYHomes to delete.
     * @example
     * // Delete a few ReportDIYHomes
     * const { count } = await prisma.reportDIYHomes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDIYHomesDeleteManyArgs>(args?: SelectSubset<T, ReportDIYHomesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDIYHomesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportDIYHomesUpdateManyArgs>(args: SelectSubset<T, ReportDIYHomesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportDIYHomes and returns the data updated in the database.
     * @param {ReportDIYHomesUpdateManyAndReturnArgs} args - Arguments to update many ReportDIYHomes.
     * @example
     * // Update many ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportDIYHomes and only return the `id`
     * const reportDIYHomesWithIdOnly = await prisma.reportDIYHomes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportDIYHomesUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportDIYHomesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportDIYHomes.
     * @param {ReportDIYHomesUpsertArgs} args - Arguments to update or create a ReportDIYHomes.
     * @example
     * // Update or create a ReportDIYHomes
     * const reportDIYHomes = await prisma.reportDIYHomes.upsert({
     *   create: {
     *     // ... data to create a ReportDIYHomes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportDIYHomes we want to update
     *   }
     * })
     */
    upsert<T extends ReportDIYHomesUpsertArgs>(args: SelectSubset<T, ReportDIYHomesUpsertArgs<ExtArgs>>): Prisma__ReportDIYHomesClient<$Result.GetResult<Prisma.$ReportDIYHomesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDIYHomesCountArgs} args - Arguments to filter ReportDIYHomes to count.
     * @example
     * // Count the number of ReportDIYHomes
     * const count = await prisma.reportDIYHomes.count({
     *   where: {
     *     // ... the filter for the ReportDIYHomes we want to count
     *   }
     * })
    **/
    count<T extends ReportDIYHomesCountArgs>(
      args?: Subset<T, ReportDIYHomesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportDIYHomesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDIYHomesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportDIYHomesAggregateArgs>(args: Subset<T, ReportDIYHomesAggregateArgs>): Prisma.PrismaPromise<GetReportDIYHomesAggregateType<T>>

    /**
     * Group by ReportDIYHomes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDIYHomesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportDIYHomesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportDIYHomesGroupByArgs['orderBy'] }
        : { orderBy?: ReportDIYHomesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportDIYHomesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportDIYHomesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportDIYHomes model
   */
  readonly fields: ReportDIYHomesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportDIYHomes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportDIYHomesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends ReportDIYHomes$postArgs<ExtArgs> = {}>(args?: Subset<T, ReportDIYHomes$postArgs<ExtArgs>>): Prisma__PostDIYHomesClient<$Result.GetResult<Prisma.$PostDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    review<T extends ReportDIYHomes$reviewArgs<ExtArgs> = {}>(args?: Subset<T, ReportDIYHomes$reviewArgs<ExtArgs>>): Prisma__ReviewDIYHomesClient<$Result.GetResult<Prisma.$ReviewDIYHomesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportDIYHomes model
   */ 
  interface ReportDIYHomesFieldRefs {
    readonly id: FieldRef<"ReportDIYHomes", 'String'>
    readonly postId: FieldRef<"ReportDIYHomes", 'String'>
    readonly reviewId: FieldRef<"ReportDIYHomes", 'String'>
    readonly userId: FieldRef<"ReportDIYHomes", 'String'>
    readonly reason: FieldRef<"ReportDIYHomes", 'String'>
    readonly createdAt: FieldRef<"ReportDIYHomes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportDIYHomes findUnique
   */
  export type ReportDIYHomesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReportDIYHomes to fetch.
     */
    where: ReportDIYHomesWhereUniqueInput
  }

  /**
   * ReportDIYHomes findUniqueOrThrow
   */
  export type ReportDIYHomesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReportDIYHomes to fetch.
     */
    where: ReportDIYHomesWhereUniqueInput
  }

  /**
   * ReportDIYHomes findFirst
   */
  export type ReportDIYHomesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReportDIYHomes to fetch.
     */
    where?: ReportDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDIYHomes to fetch.
     */
    orderBy?: ReportDIYHomesOrderByWithRelationInput | ReportDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportDIYHomes.
     */
    cursor?: ReportDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportDIYHomes.
     */
    distinct?: ReportDIYHomesScalarFieldEnum | ReportDIYHomesScalarFieldEnum[]
  }

  /**
   * ReportDIYHomes findFirstOrThrow
   */
  export type ReportDIYHomesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReportDIYHomes to fetch.
     */
    where?: ReportDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDIYHomes to fetch.
     */
    orderBy?: ReportDIYHomesOrderByWithRelationInput | ReportDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportDIYHomes.
     */
    cursor?: ReportDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDIYHomes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportDIYHomes.
     */
    distinct?: ReportDIYHomesScalarFieldEnum | ReportDIYHomesScalarFieldEnum[]
  }

  /**
   * ReportDIYHomes findMany
   */
  export type ReportDIYHomesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * Filter, which ReportDIYHomes to fetch.
     */
    where?: ReportDIYHomesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportDIYHomes to fetch.
     */
    orderBy?: ReportDIYHomesOrderByWithRelationInput | ReportDIYHomesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportDIYHomes.
     */
    cursor?: ReportDIYHomesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportDIYHomes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportDIYHomes.
     */
    skip?: number
    distinct?: ReportDIYHomesScalarFieldEnum | ReportDIYHomesScalarFieldEnum[]
  }

  /**
   * ReportDIYHomes create
   */
  export type ReportDIYHomesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportDIYHomes.
     */
    data: XOR<ReportDIYHomesCreateInput, ReportDIYHomesUncheckedCreateInput>
  }

  /**
   * ReportDIYHomes createMany
   */
  export type ReportDIYHomesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportDIYHomes.
     */
    data: ReportDIYHomesCreateManyInput | ReportDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportDIYHomes createManyAndReturn
   */
  export type ReportDIYHomesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to create many ReportDIYHomes.
     */
    data: ReportDIYHomesCreateManyInput | ReportDIYHomesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportDIYHomes update
   */
  export type ReportDIYHomesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportDIYHomes.
     */
    data: XOR<ReportDIYHomesUpdateInput, ReportDIYHomesUncheckedUpdateInput>
    /**
     * Choose, which ReportDIYHomes to update.
     */
    where: ReportDIYHomesWhereUniqueInput
  }

  /**
   * ReportDIYHomes updateMany
   */
  export type ReportDIYHomesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportDIYHomes.
     */
    data: XOR<ReportDIYHomesUpdateManyMutationInput, ReportDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which ReportDIYHomes to update
     */
    where?: ReportDIYHomesWhereInput
    /**
     * Limit how many ReportDIYHomes to update.
     */
    limit?: number
  }

  /**
   * ReportDIYHomes updateManyAndReturn
   */
  export type ReportDIYHomesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * The data used to update ReportDIYHomes.
     */
    data: XOR<ReportDIYHomesUpdateManyMutationInput, ReportDIYHomesUncheckedUpdateManyInput>
    /**
     * Filter which ReportDIYHomes to update
     */
    where?: ReportDIYHomesWhereInput
    /**
     * Limit how many ReportDIYHomes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportDIYHomes upsert
   */
  export type ReportDIYHomesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportDIYHomes to update in case it exists.
     */
    where: ReportDIYHomesWhereUniqueInput
    /**
     * In case the ReportDIYHomes found by the `where` argument doesn't exist, create a new ReportDIYHomes with this data.
     */
    create: XOR<ReportDIYHomesCreateInput, ReportDIYHomesUncheckedCreateInput>
    /**
     * In case the ReportDIYHomes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportDIYHomesUpdateInput, ReportDIYHomesUncheckedUpdateInput>
  }

  /**
   * ReportDIYHomes delete
   */
  export type ReportDIYHomesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
    /**
     * Filter which ReportDIYHomes to delete.
     */
    where: ReportDIYHomesWhereUniqueInput
  }

  /**
   * ReportDIYHomes deleteMany
   */
  export type ReportDIYHomesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportDIYHomes to delete
     */
    where?: ReportDIYHomesWhereInput
    /**
     * Limit how many ReportDIYHomes to delete.
     */
    limit?: number
  }

  /**
   * ReportDIYHomes.post
   */
  export type ReportDIYHomes$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostDIYHomes
     */
    select?: PostDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostDIYHomes
     */
    omit?: PostDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostDIYHomesInclude<ExtArgs> | null
    where?: PostDIYHomesWhereInput
  }

  /**
   * ReportDIYHomes.review
   */
  export type ReportDIYHomes$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewDIYHomes
     */
    select?: ReviewDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewDIYHomes
     */
    omit?: ReviewDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewDIYHomesInclude<ExtArgs> | null
    where?: ReviewDIYHomesWhereInput
  }

  /**
   * ReportDIYHomes without action
   */
  export type ReportDIYHomesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportDIYHomes
     */
    select?: ReportDIYHomesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportDIYHomes
     */
    omit?: ReportDIYHomesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDIYHomesInclude<ExtArgs> | null
  }


  /**
   * Model PlaceUrbanExplorer
   */

  export type AggregatePlaceUrbanExplorer = {
    _count: PlaceUrbanExplorerCountAggregateOutputType | null
    _min: PlaceUrbanExplorerMinAggregateOutputType | null
    _max: PlaceUrbanExplorerMaxAggregateOutputType | null
  }

  export type PlaceUrbanExplorerMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    location: string | null
    description: string | null
    ownerId: string | null
    createdAt: Date | null
    validated: boolean | null
  }

  export type PlaceUrbanExplorerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    location: string | null
    description: string | null
    ownerId: string | null
    createdAt: Date | null
    validated: boolean | null
  }

  export type PlaceUrbanExplorerCountAggregateOutputType = {
    id: number
    name: number
    category: number
    location: number
    description: number
    ownerId: number
    createdAt: number
    validated: number
    _all: number
  }


  export type PlaceUrbanExplorerMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    location?: true
    description?: true
    ownerId?: true
    createdAt?: true
    validated?: true
  }

  export type PlaceUrbanExplorerMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    location?: true
    description?: true
    ownerId?: true
    createdAt?: true
    validated?: true
  }

  export type PlaceUrbanExplorerCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    location?: true
    description?: true
    ownerId?: true
    createdAt?: true
    validated?: true
    _all?: true
  }

  export type PlaceUrbanExplorerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaceUrbanExplorer to aggregate.
     */
    where?: PlaceUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaceUrbanExplorers to fetch.
     */
    orderBy?: PlaceUrbanExplorerOrderByWithRelationInput | PlaceUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaceUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaceUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaceUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlaceUrbanExplorers
    **/
    _count?: true | PlaceUrbanExplorerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaceUrbanExplorerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaceUrbanExplorerMaxAggregateInputType
  }

  export type GetPlaceUrbanExplorerAggregateType<T extends PlaceUrbanExplorerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaceUrbanExplorer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaceUrbanExplorer[P]>
      : GetScalarType<T[P], AggregatePlaceUrbanExplorer[P]>
  }




  export type PlaceUrbanExplorerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaceUrbanExplorerWhereInput
    orderBy?: PlaceUrbanExplorerOrderByWithAggregationInput | PlaceUrbanExplorerOrderByWithAggregationInput[]
    by: PlaceUrbanExplorerScalarFieldEnum[] | PlaceUrbanExplorerScalarFieldEnum
    having?: PlaceUrbanExplorerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaceUrbanExplorerCountAggregateInputType | true
    _min?: PlaceUrbanExplorerMinAggregateInputType
    _max?: PlaceUrbanExplorerMaxAggregateInputType
  }

  export type PlaceUrbanExplorerGroupByOutputType = {
    id: string
    name: string
    category: string
    location: string
    description: string
    ownerId: string
    createdAt: Date
    validated: boolean
    _count: PlaceUrbanExplorerCountAggregateOutputType | null
    _min: PlaceUrbanExplorerMinAggregateOutputType | null
    _max: PlaceUrbanExplorerMaxAggregateOutputType | null
  }

  type GetPlaceUrbanExplorerGroupByPayload<T extends PlaceUrbanExplorerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaceUrbanExplorerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaceUrbanExplorerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaceUrbanExplorerGroupByOutputType[P]>
            : GetScalarType<T[P], PlaceUrbanExplorerGroupByOutputType[P]>
        }
      >
    >


  export type PlaceUrbanExplorerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    location?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    validated?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    reviews?: boolean | PlaceUrbanExplorer$reviewsArgs<ExtArgs>
    bookmarks?: boolean | PlaceUrbanExplorer$bookmarksArgs<ExtArgs>
    likes?: boolean | PlaceUrbanExplorer$likesArgs<ExtArgs>
    reports?: boolean | PlaceUrbanExplorer$reportsArgs<ExtArgs>
    _count?: boolean | PlaceUrbanExplorerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["placeUrbanExplorer"]>

  export type PlaceUrbanExplorerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    location?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    validated?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["placeUrbanExplorer"]>

  export type PlaceUrbanExplorerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    location?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    validated?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["placeUrbanExplorer"]>

  export type PlaceUrbanExplorerSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    location?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    validated?: boolean
  }

  export type PlaceUrbanExplorerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "location" | "description" | "ownerId" | "createdAt" | "validated", ExtArgs["result"]["placeUrbanExplorer"]>
  export type PlaceUrbanExplorerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    reviews?: boolean | PlaceUrbanExplorer$reviewsArgs<ExtArgs>
    bookmarks?: boolean | PlaceUrbanExplorer$bookmarksArgs<ExtArgs>
    likes?: boolean | PlaceUrbanExplorer$likesArgs<ExtArgs>
    reports?: boolean | PlaceUrbanExplorer$reportsArgs<ExtArgs>
    _count?: boolean | PlaceUrbanExplorerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlaceUrbanExplorerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PlaceUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PlaceUrbanExplorerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlaceUrbanExplorer"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      reviews: Prisma.$ReviewUrbanExplorerPayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>[]
      likes: Prisma.$LikeUrbanExplorerPayload<ExtArgs>[]
      reports: Prisma.$ReportUrbanExplorerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
      location: string
      description: string
      ownerId: string
      createdAt: Date
      validated: boolean
    }, ExtArgs["result"]["placeUrbanExplorer"]>
    composites: {}
  }

  type PlaceUrbanExplorerGetPayload<S extends boolean | null | undefined | PlaceUrbanExplorerDefaultArgs> = $Result.GetResult<Prisma.$PlaceUrbanExplorerPayload, S>

  type PlaceUrbanExplorerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlaceUrbanExplorerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlaceUrbanExplorerCountAggregateInputType | true
    }

  export interface PlaceUrbanExplorerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlaceUrbanExplorer'], meta: { name: 'PlaceUrbanExplorer' } }
    /**
     * Find zero or one PlaceUrbanExplorer that matches the filter.
     * @param {PlaceUrbanExplorerFindUniqueArgs} args - Arguments to find a PlaceUrbanExplorer
     * @example
     * // Get one PlaceUrbanExplorer
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlaceUrbanExplorerFindUniqueArgs>(args: SelectSubset<T, PlaceUrbanExplorerFindUniqueArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlaceUrbanExplorer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlaceUrbanExplorerFindUniqueOrThrowArgs} args - Arguments to find a PlaceUrbanExplorer
     * @example
     * // Get one PlaceUrbanExplorer
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlaceUrbanExplorerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlaceUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlaceUrbanExplorer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUrbanExplorerFindFirstArgs} args - Arguments to find a PlaceUrbanExplorer
     * @example
     * // Get one PlaceUrbanExplorer
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlaceUrbanExplorerFindFirstArgs>(args?: SelectSubset<T, PlaceUrbanExplorerFindFirstArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlaceUrbanExplorer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUrbanExplorerFindFirstOrThrowArgs} args - Arguments to find a PlaceUrbanExplorer
     * @example
     * // Get one PlaceUrbanExplorer
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlaceUrbanExplorerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlaceUrbanExplorerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlaceUrbanExplorers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUrbanExplorerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlaceUrbanExplorers
     * const placeUrbanExplorers = await prisma.placeUrbanExplorer.findMany()
     * 
     * // Get first 10 PlaceUrbanExplorers
     * const placeUrbanExplorers = await prisma.placeUrbanExplorer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const placeUrbanExplorerWithIdOnly = await prisma.placeUrbanExplorer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlaceUrbanExplorerFindManyArgs>(args?: SelectSubset<T, PlaceUrbanExplorerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlaceUrbanExplorer.
     * @param {PlaceUrbanExplorerCreateArgs} args - Arguments to create a PlaceUrbanExplorer.
     * @example
     * // Create one PlaceUrbanExplorer
     * const PlaceUrbanExplorer = await prisma.placeUrbanExplorer.create({
     *   data: {
     *     // ... data to create a PlaceUrbanExplorer
     *   }
     * })
     * 
     */
    create<T extends PlaceUrbanExplorerCreateArgs>(args: SelectSubset<T, PlaceUrbanExplorerCreateArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlaceUrbanExplorers.
     * @param {PlaceUrbanExplorerCreateManyArgs} args - Arguments to create many PlaceUrbanExplorers.
     * @example
     * // Create many PlaceUrbanExplorers
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlaceUrbanExplorerCreateManyArgs>(args?: SelectSubset<T, PlaceUrbanExplorerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlaceUrbanExplorers and returns the data saved in the database.
     * @param {PlaceUrbanExplorerCreateManyAndReturnArgs} args - Arguments to create many PlaceUrbanExplorers.
     * @example
     * // Create many PlaceUrbanExplorers
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlaceUrbanExplorers and only return the `id`
     * const placeUrbanExplorerWithIdOnly = await prisma.placeUrbanExplorer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlaceUrbanExplorerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlaceUrbanExplorerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlaceUrbanExplorer.
     * @param {PlaceUrbanExplorerDeleteArgs} args - Arguments to delete one PlaceUrbanExplorer.
     * @example
     * // Delete one PlaceUrbanExplorer
     * const PlaceUrbanExplorer = await prisma.placeUrbanExplorer.delete({
     *   where: {
     *     // ... filter to delete one PlaceUrbanExplorer
     *   }
     * })
     * 
     */
    delete<T extends PlaceUrbanExplorerDeleteArgs>(args: SelectSubset<T, PlaceUrbanExplorerDeleteArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlaceUrbanExplorer.
     * @param {PlaceUrbanExplorerUpdateArgs} args - Arguments to update one PlaceUrbanExplorer.
     * @example
     * // Update one PlaceUrbanExplorer
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlaceUrbanExplorerUpdateArgs>(args: SelectSubset<T, PlaceUrbanExplorerUpdateArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlaceUrbanExplorers.
     * @param {PlaceUrbanExplorerDeleteManyArgs} args - Arguments to filter PlaceUrbanExplorers to delete.
     * @example
     * // Delete a few PlaceUrbanExplorers
     * const { count } = await prisma.placeUrbanExplorer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlaceUrbanExplorerDeleteManyArgs>(args?: SelectSubset<T, PlaceUrbanExplorerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlaceUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUrbanExplorerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlaceUrbanExplorers
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlaceUrbanExplorerUpdateManyArgs>(args: SelectSubset<T, PlaceUrbanExplorerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlaceUrbanExplorers and returns the data updated in the database.
     * @param {PlaceUrbanExplorerUpdateManyAndReturnArgs} args - Arguments to update many PlaceUrbanExplorers.
     * @example
     * // Update many PlaceUrbanExplorers
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlaceUrbanExplorers and only return the `id`
     * const placeUrbanExplorerWithIdOnly = await prisma.placeUrbanExplorer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlaceUrbanExplorerUpdateManyAndReturnArgs>(args: SelectSubset<T, PlaceUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlaceUrbanExplorer.
     * @param {PlaceUrbanExplorerUpsertArgs} args - Arguments to update or create a PlaceUrbanExplorer.
     * @example
     * // Update or create a PlaceUrbanExplorer
     * const placeUrbanExplorer = await prisma.placeUrbanExplorer.upsert({
     *   create: {
     *     // ... data to create a PlaceUrbanExplorer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlaceUrbanExplorer we want to update
     *   }
     * })
     */
    upsert<T extends PlaceUrbanExplorerUpsertArgs>(args: SelectSubset<T, PlaceUrbanExplorerUpsertArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlaceUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUrbanExplorerCountArgs} args - Arguments to filter PlaceUrbanExplorers to count.
     * @example
     * // Count the number of PlaceUrbanExplorers
     * const count = await prisma.placeUrbanExplorer.count({
     *   where: {
     *     // ... the filter for the PlaceUrbanExplorers we want to count
     *   }
     * })
    **/
    count<T extends PlaceUrbanExplorerCountArgs>(
      args?: Subset<T, PlaceUrbanExplorerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaceUrbanExplorerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlaceUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUrbanExplorerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaceUrbanExplorerAggregateArgs>(args: Subset<T, PlaceUrbanExplorerAggregateArgs>): Prisma.PrismaPromise<GetPlaceUrbanExplorerAggregateType<T>>

    /**
     * Group by PlaceUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUrbanExplorerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaceUrbanExplorerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaceUrbanExplorerGroupByArgs['orderBy'] }
        : { orderBy?: PlaceUrbanExplorerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaceUrbanExplorerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaceUrbanExplorerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlaceUrbanExplorer model
   */
  readonly fields: PlaceUrbanExplorerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlaceUrbanExplorer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaceUrbanExplorerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviews<T extends PlaceUrbanExplorer$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, PlaceUrbanExplorer$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookmarks<T extends PlaceUrbanExplorer$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, PlaceUrbanExplorer$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends PlaceUrbanExplorer$likesArgs<ExtArgs> = {}>(args?: Subset<T, PlaceUrbanExplorer$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends PlaceUrbanExplorer$reportsArgs<ExtArgs> = {}>(args?: Subset<T, PlaceUrbanExplorer$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlaceUrbanExplorer model
   */ 
  interface PlaceUrbanExplorerFieldRefs {
    readonly id: FieldRef<"PlaceUrbanExplorer", 'String'>
    readonly name: FieldRef<"PlaceUrbanExplorer", 'String'>
    readonly category: FieldRef<"PlaceUrbanExplorer", 'String'>
    readonly location: FieldRef<"PlaceUrbanExplorer", 'String'>
    readonly description: FieldRef<"PlaceUrbanExplorer", 'String'>
    readonly ownerId: FieldRef<"PlaceUrbanExplorer", 'String'>
    readonly createdAt: FieldRef<"PlaceUrbanExplorer", 'DateTime'>
    readonly validated: FieldRef<"PlaceUrbanExplorer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PlaceUrbanExplorer findUnique
   */
  export type PlaceUrbanExplorerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which PlaceUrbanExplorer to fetch.
     */
    where: PlaceUrbanExplorerWhereUniqueInput
  }

  /**
   * PlaceUrbanExplorer findUniqueOrThrow
   */
  export type PlaceUrbanExplorerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which PlaceUrbanExplorer to fetch.
     */
    where: PlaceUrbanExplorerWhereUniqueInput
  }

  /**
   * PlaceUrbanExplorer findFirst
   */
  export type PlaceUrbanExplorerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which PlaceUrbanExplorer to fetch.
     */
    where?: PlaceUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaceUrbanExplorers to fetch.
     */
    orderBy?: PlaceUrbanExplorerOrderByWithRelationInput | PlaceUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaceUrbanExplorers.
     */
    cursor?: PlaceUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaceUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaceUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaceUrbanExplorers.
     */
    distinct?: PlaceUrbanExplorerScalarFieldEnum | PlaceUrbanExplorerScalarFieldEnum[]
  }

  /**
   * PlaceUrbanExplorer findFirstOrThrow
   */
  export type PlaceUrbanExplorerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which PlaceUrbanExplorer to fetch.
     */
    where?: PlaceUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaceUrbanExplorers to fetch.
     */
    orderBy?: PlaceUrbanExplorerOrderByWithRelationInput | PlaceUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaceUrbanExplorers.
     */
    cursor?: PlaceUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaceUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaceUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaceUrbanExplorers.
     */
    distinct?: PlaceUrbanExplorerScalarFieldEnum | PlaceUrbanExplorerScalarFieldEnum[]
  }

  /**
   * PlaceUrbanExplorer findMany
   */
  export type PlaceUrbanExplorerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which PlaceUrbanExplorers to fetch.
     */
    where?: PlaceUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaceUrbanExplorers to fetch.
     */
    orderBy?: PlaceUrbanExplorerOrderByWithRelationInput | PlaceUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlaceUrbanExplorers.
     */
    cursor?: PlaceUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaceUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaceUrbanExplorers.
     */
    skip?: number
    distinct?: PlaceUrbanExplorerScalarFieldEnum | PlaceUrbanExplorerScalarFieldEnum[]
  }

  /**
   * PlaceUrbanExplorer create
   */
  export type PlaceUrbanExplorerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to create a PlaceUrbanExplorer.
     */
    data: XOR<PlaceUrbanExplorerCreateInput, PlaceUrbanExplorerUncheckedCreateInput>
  }

  /**
   * PlaceUrbanExplorer createMany
   */
  export type PlaceUrbanExplorerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlaceUrbanExplorers.
     */
    data: PlaceUrbanExplorerCreateManyInput | PlaceUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlaceUrbanExplorer createManyAndReturn
   */
  export type PlaceUrbanExplorerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to create many PlaceUrbanExplorers.
     */
    data: PlaceUrbanExplorerCreateManyInput | PlaceUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlaceUrbanExplorer update
   */
  export type PlaceUrbanExplorerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to update a PlaceUrbanExplorer.
     */
    data: XOR<PlaceUrbanExplorerUpdateInput, PlaceUrbanExplorerUncheckedUpdateInput>
    /**
     * Choose, which PlaceUrbanExplorer to update.
     */
    where: PlaceUrbanExplorerWhereUniqueInput
  }

  /**
   * PlaceUrbanExplorer updateMany
   */
  export type PlaceUrbanExplorerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlaceUrbanExplorers.
     */
    data: XOR<PlaceUrbanExplorerUpdateManyMutationInput, PlaceUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which PlaceUrbanExplorers to update
     */
    where?: PlaceUrbanExplorerWhereInput
    /**
     * Limit how many PlaceUrbanExplorers to update.
     */
    limit?: number
  }

  /**
   * PlaceUrbanExplorer updateManyAndReturn
   */
  export type PlaceUrbanExplorerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to update PlaceUrbanExplorers.
     */
    data: XOR<PlaceUrbanExplorerUpdateManyMutationInput, PlaceUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which PlaceUrbanExplorers to update
     */
    where?: PlaceUrbanExplorerWhereInput
    /**
     * Limit how many PlaceUrbanExplorers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlaceUrbanExplorer upsert
   */
  export type PlaceUrbanExplorerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * The filter to search for the PlaceUrbanExplorer to update in case it exists.
     */
    where: PlaceUrbanExplorerWhereUniqueInput
    /**
     * In case the PlaceUrbanExplorer found by the `where` argument doesn't exist, create a new PlaceUrbanExplorer with this data.
     */
    create: XOR<PlaceUrbanExplorerCreateInput, PlaceUrbanExplorerUncheckedCreateInput>
    /**
     * In case the PlaceUrbanExplorer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaceUrbanExplorerUpdateInput, PlaceUrbanExplorerUncheckedUpdateInput>
  }

  /**
   * PlaceUrbanExplorer delete
   */
  export type PlaceUrbanExplorerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter which PlaceUrbanExplorer to delete.
     */
    where: PlaceUrbanExplorerWhereUniqueInput
  }

  /**
   * PlaceUrbanExplorer deleteMany
   */
  export type PlaceUrbanExplorerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaceUrbanExplorers to delete
     */
    where?: PlaceUrbanExplorerWhereInput
    /**
     * Limit how many PlaceUrbanExplorers to delete.
     */
    limit?: number
  }

  /**
   * PlaceUrbanExplorer.reviews
   */
  export type PlaceUrbanExplorer$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    where?: ReviewUrbanExplorerWhereInput
    orderBy?: ReviewUrbanExplorerOrderByWithRelationInput | ReviewUrbanExplorerOrderByWithRelationInput[]
    cursor?: ReviewUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewUrbanExplorerScalarFieldEnum | ReviewUrbanExplorerScalarFieldEnum[]
  }

  /**
   * PlaceUrbanExplorer.bookmarks
   */
  export type PlaceUrbanExplorer$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    where?: BookmarkUrbanExplorerWhereInput
    orderBy?: BookmarkUrbanExplorerOrderByWithRelationInput | BookmarkUrbanExplorerOrderByWithRelationInput[]
    cursor?: BookmarkUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkUrbanExplorerScalarFieldEnum | BookmarkUrbanExplorerScalarFieldEnum[]
  }

  /**
   * PlaceUrbanExplorer.likes
   */
  export type PlaceUrbanExplorer$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    where?: LikeUrbanExplorerWhereInput
    orderBy?: LikeUrbanExplorerOrderByWithRelationInput | LikeUrbanExplorerOrderByWithRelationInput[]
    cursor?: LikeUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeUrbanExplorerScalarFieldEnum | LikeUrbanExplorerScalarFieldEnum[]
  }

  /**
   * PlaceUrbanExplorer.reports
   */
  export type PlaceUrbanExplorer$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    where?: ReportUrbanExplorerWhereInput
    orderBy?: ReportUrbanExplorerOrderByWithRelationInput | ReportUrbanExplorerOrderByWithRelationInput[]
    cursor?: ReportUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportUrbanExplorerScalarFieldEnum | ReportUrbanExplorerScalarFieldEnum[]
  }

  /**
   * PlaceUrbanExplorer without action
   */
  export type PlaceUrbanExplorerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
  }


  /**
   * Model ReviewUrbanExplorer
   */

  export type AggregateReviewUrbanExplorer = {
    _count: ReviewUrbanExplorerCountAggregateOutputType | null
    _avg: ReviewUrbanExplorerAvgAggregateOutputType | null
    _sum: ReviewUrbanExplorerSumAggregateOutputType | null
    _min: ReviewUrbanExplorerMinAggregateOutputType | null
    _max: ReviewUrbanExplorerMaxAggregateOutputType | null
  }

  export type ReviewUrbanExplorerAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewUrbanExplorerSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewUrbanExplorerMinAggregateOutputType = {
    id: string | null
    placeId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewUrbanExplorerMaxAggregateOutputType = {
    id: string | null
    placeId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewUrbanExplorerCountAggregateOutputType = {
    id: number
    placeId: number
    userId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ReviewUrbanExplorerAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewUrbanExplorerSumAggregateInputType = {
    rating?: true
  }

  export type ReviewUrbanExplorerMinAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewUrbanExplorerMaxAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewUrbanExplorerCountAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewUrbanExplorerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewUrbanExplorer to aggregate.
     */
    where?: ReviewUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewUrbanExplorers to fetch.
     */
    orderBy?: ReviewUrbanExplorerOrderByWithRelationInput | ReviewUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewUrbanExplorers
    **/
    _count?: true | ReviewUrbanExplorerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewUrbanExplorerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewUrbanExplorerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewUrbanExplorerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewUrbanExplorerMaxAggregateInputType
  }

  export type GetReviewUrbanExplorerAggregateType<T extends ReviewUrbanExplorerAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewUrbanExplorer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewUrbanExplorer[P]>
      : GetScalarType<T[P], AggregateReviewUrbanExplorer[P]>
  }




  export type ReviewUrbanExplorerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewUrbanExplorerWhereInput
    orderBy?: ReviewUrbanExplorerOrderByWithAggregationInput | ReviewUrbanExplorerOrderByWithAggregationInput[]
    by: ReviewUrbanExplorerScalarFieldEnum[] | ReviewUrbanExplorerScalarFieldEnum
    having?: ReviewUrbanExplorerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewUrbanExplorerCountAggregateInputType | true
    _avg?: ReviewUrbanExplorerAvgAggregateInputType
    _sum?: ReviewUrbanExplorerSumAggregateInputType
    _min?: ReviewUrbanExplorerMinAggregateInputType
    _max?: ReviewUrbanExplorerMaxAggregateInputType
  }

  export type ReviewUrbanExplorerGroupByOutputType = {
    id: string
    placeId: string
    userId: string
    rating: number
    comment: string
    createdAt: Date
    _count: ReviewUrbanExplorerCountAggregateOutputType | null
    _avg: ReviewUrbanExplorerAvgAggregateOutputType | null
    _sum: ReviewUrbanExplorerSumAggregateOutputType | null
    _min: ReviewUrbanExplorerMinAggregateOutputType | null
    _max: ReviewUrbanExplorerMaxAggregateOutputType | null
  }

  type GetReviewUrbanExplorerGroupByPayload<T extends ReviewUrbanExplorerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewUrbanExplorerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewUrbanExplorerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewUrbanExplorerGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewUrbanExplorerGroupByOutputType[P]>
        }
      >
    >


  export type ReviewUrbanExplorerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
    reports?: boolean | ReviewUrbanExplorer$reportsArgs<ExtArgs>
    _count?: boolean | ReviewUrbanExplorerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewUrbanExplorer"]>

  export type ReviewUrbanExplorerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewUrbanExplorer"]>

  export type ReviewUrbanExplorerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewUrbanExplorer"]>

  export type ReviewUrbanExplorerSelectScalar = {
    id?: boolean
    placeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ReviewUrbanExplorerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "placeId" | "userId" | "rating" | "comment" | "createdAt", ExtArgs["result"]["reviewUrbanExplorer"]>
  export type ReviewUrbanExplorerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
    reports?: boolean | ReviewUrbanExplorer$reportsArgs<ExtArgs>
    _count?: boolean | ReviewUrbanExplorerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReviewUrbanExplorerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }
  export type ReviewUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }

  export type $ReviewUrbanExplorerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewUrbanExplorer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      place: Prisma.$PlaceUrbanExplorerPayload<ExtArgs>
      reports: Prisma.$ReportUrbanExplorerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      placeId: string
      userId: string
      rating: number
      comment: string
      createdAt: Date
    }, ExtArgs["result"]["reviewUrbanExplorer"]>
    composites: {}
  }

  type ReviewUrbanExplorerGetPayload<S extends boolean | null | undefined | ReviewUrbanExplorerDefaultArgs> = $Result.GetResult<Prisma.$ReviewUrbanExplorerPayload, S>

  type ReviewUrbanExplorerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewUrbanExplorerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewUrbanExplorerCountAggregateInputType | true
    }

  export interface ReviewUrbanExplorerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewUrbanExplorer'], meta: { name: 'ReviewUrbanExplorer' } }
    /**
     * Find zero or one ReviewUrbanExplorer that matches the filter.
     * @param {ReviewUrbanExplorerFindUniqueArgs} args - Arguments to find a ReviewUrbanExplorer
     * @example
     * // Get one ReviewUrbanExplorer
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewUrbanExplorerFindUniqueArgs>(args: SelectSubset<T, ReviewUrbanExplorerFindUniqueArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewUrbanExplorer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewUrbanExplorerFindUniqueOrThrowArgs} args - Arguments to find a ReviewUrbanExplorer
     * @example
     * // Get one ReviewUrbanExplorer
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewUrbanExplorerFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewUrbanExplorer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUrbanExplorerFindFirstArgs} args - Arguments to find a ReviewUrbanExplorer
     * @example
     * // Get one ReviewUrbanExplorer
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewUrbanExplorerFindFirstArgs>(args?: SelectSubset<T, ReviewUrbanExplorerFindFirstArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewUrbanExplorer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUrbanExplorerFindFirstOrThrowArgs} args - Arguments to find a ReviewUrbanExplorer
     * @example
     * // Get one ReviewUrbanExplorer
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewUrbanExplorerFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewUrbanExplorerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewUrbanExplorers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUrbanExplorerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewUrbanExplorers
     * const reviewUrbanExplorers = await prisma.reviewUrbanExplorer.findMany()
     * 
     * // Get first 10 ReviewUrbanExplorers
     * const reviewUrbanExplorers = await prisma.reviewUrbanExplorer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewUrbanExplorerWithIdOnly = await prisma.reviewUrbanExplorer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewUrbanExplorerFindManyArgs>(args?: SelectSubset<T, ReviewUrbanExplorerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewUrbanExplorer.
     * @param {ReviewUrbanExplorerCreateArgs} args - Arguments to create a ReviewUrbanExplorer.
     * @example
     * // Create one ReviewUrbanExplorer
     * const ReviewUrbanExplorer = await prisma.reviewUrbanExplorer.create({
     *   data: {
     *     // ... data to create a ReviewUrbanExplorer
     *   }
     * })
     * 
     */
    create<T extends ReviewUrbanExplorerCreateArgs>(args: SelectSubset<T, ReviewUrbanExplorerCreateArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewUrbanExplorers.
     * @param {ReviewUrbanExplorerCreateManyArgs} args - Arguments to create many ReviewUrbanExplorers.
     * @example
     * // Create many ReviewUrbanExplorers
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewUrbanExplorerCreateManyArgs>(args?: SelectSubset<T, ReviewUrbanExplorerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewUrbanExplorers and returns the data saved in the database.
     * @param {ReviewUrbanExplorerCreateManyAndReturnArgs} args - Arguments to create many ReviewUrbanExplorers.
     * @example
     * // Create many ReviewUrbanExplorers
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewUrbanExplorers and only return the `id`
     * const reviewUrbanExplorerWithIdOnly = await prisma.reviewUrbanExplorer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewUrbanExplorerCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewUrbanExplorerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewUrbanExplorer.
     * @param {ReviewUrbanExplorerDeleteArgs} args - Arguments to delete one ReviewUrbanExplorer.
     * @example
     * // Delete one ReviewUrbanExplorer
     * const ReviewUrbanExplorer = await prisma.reviewUrbanExplorer.delete({
     *   where: {
     *     // ... filter to delete one ReviewUrbanExplorer
     *   }
     * })
     * 
     */
    delete<T extends ReviewUrbanExplorerDeleteArgs>(args: SelectSubset<T, ReviewUrbanExplorerDeleteArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewUrbanExplorer.
     * @param {ReviewUrbanExplorerUpdateArgs} args - Arguments to update one ReviewUrbanExplorer.
     * @example
     * // Update one ReviewUrbanExplorer
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUrbanExplorerUpdateArgs>(args: SelectSubset<T, ReviewUrbanExplorerUpdateArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewUrbanExplorers.
     * @param {ReviewUrbanExplorerDeleteManyArgs} args - Arguments to filter ReviewUrbanExplorers to delete.
     * @example
     * // Delete a few ReviewUrbanExplorers
     * const { count } = await prisma.reviewUrbanExplorer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewUrbanExplorerDeleteManyArgs>(args?: SelectSubset<T, ReviewUrbanExplorerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUrbanExplorerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewUrbanExplorers
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUrbanExplorerUpdateManyArgs>(args: SelectSubset<T, ReviewUrbanExplorerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewUrbanExplorers and returns the data updated in the database.
     * @param {ReviewUrbanExplorerUpdateManyAndReturnArgs} args - Arguments to update many ReviewUrbanExplorers.
     * @example
     * // Update many ReviewUrbanExplorers
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewUrbanExplorers and only return the `id`
     * const reviewUrbanExplorerWithIdOnly = await prisma.reviewUrbanExplorer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUrbanExplorerUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewUrbanExplorer.
     * @param {ReviewUrbanExplorerUpsertArgs} args - Arguments to update or create a ReviewUrbanExplorer.
     * @example
     * // Update or create a ReviewUrbanExplorer
     * const reviewUrbanExplorer = await prisma.reviewUrbanExplorer.upsert({
     *   create: {
     *     // ... data to create a ReviewUrbanExplorer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewUrbanExplorer we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUrbanExplorerUpsertArgs>(args: SelectSubset<T, ReviewUrbanExplorerUpsertArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUrbanExplorerCountArgs} args - Arguments to filter ReviewUrbanExplorers to count.
     * @example
     * // Count the number of ReviewUrbanExplorers
     * const count = await prisma.reviewUrbanExplorer.count({
     *   where: {
     *     // ... the filter for the ReviewUrbanExplorers we want to count
     *   }
     * })
    **/
    count<T extends ReviewUrbanExplorerCountArgs>(
      args?: Subset<T, ReviewUrbanExplorerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewUrbanExplorerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUrbanExplorerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewUrbanExplorerAggregateArgs>(args: Subset<T, ReviewUrbanExplorerAggregateArgs>): Prisma.PrismaPromise<GetReviewUrbanExplorerAggregateType<T>>

    /**
     * Group by ReviewUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUrbanExplorerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewUrbanExplorerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewUrbanExplorerGroupByArgs['orderBy'] }
        : { orderBy?: ReviewUrbanExplorerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewUrbanExplorerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewUrbanExplorerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewUrbanExplorer model
   */
  readonly fields: ReviewUrbanExplorerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewUrbanExplorer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewUrbanExplorerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    place<T extends PlaceUrbanExplorerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaceUrbanExplorerDefaultArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reports<T extends ReviewUrbanExplorer$reportsArgs<ExtArgs> = {}>(args?: Subset<T, ReviewUrbanExplorer$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewUrbanExplorer model
   */ 
  interface ReviewUrbanExplorerFieldRefs {
    readonly id: FieldRef<"ReviewUrbanExplorer", 'String'>
    readonly placeId: FieldRef<"ReviewUrbanExplorer", 'String'>
    readonly userId: FieldRef<"ReviewUrbanExplorer", 'String'>
    readonly rating: FieldRef<"ReviewUrbanExplorer", 'Int'>
    readonly comment: FieldRef<"ReviewUrbanExplorer", 'String'>
    readonly createdAt: FieldRef<"ReviewUrbanExplorer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReviewUrbanExplorer findUnique
   */
  export type ReviewUrbanExplorerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReviewUrbanExplorer to fetch.
     */
    where: ReviewUrbanExplorerWhereUniqueInput
  }

  /**
   * ReviewUrbanExplorer findUniqueOrThrow
   */
  export type ReviewUrbanExplorerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReviewUrbanExplorer to fetch.
     */
    where: ReviewUrbanExplorerWhereUniqueInput
  }

  /**
   * ReviewUrbanExplorer findFirst
   */
  export type ReviewUrbanExplorerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReviewUrbanExplorer to fetch.
     */
    where?: ReviewUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewUrbanExplorers to fetch.
     */
    orderBy?: ReviewUrbanExplorerOrderByWithRelationInput | ReviewUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewUrbanExplorers.
     */
    cursor?: ReviewUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewUrbanExplorers.
     */
    distinct?: ReviewUrbanExplorerScalarFieldEnum | ReviewUrbanExplorerScalarFieldEnum[]
  }

  /**
   * ReviewUrbanExplorer findFirstOrThrow
   */
  export type ReviewUrbanExplorerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReviewUrbanExplorer to fetch.
     */
    where?: ReviewUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewUrbanExplorers to fetch.
     */
    orderBy?: ReviewUrbanExplorerOrderByWithRelationInput | ReviewUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewUrbanExplorers.
     */
    cursor?: ReviewUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewUrbanExplorers.
     */
    distinct?: ReviewUrbanExplorerScalarFieldEnum | ReviewUrbanExplorerScalarFieldEnum[]
  }

  /**
   * ReviewUrbanExplorer findMany
   */
  export type ReviewUrbanExplorerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReviewUrbanExplorers to fetch.
     */
    where?: ReviewUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewUrbanExplorers to fetch.
     */
    orderBy?: ReviewUrbanExplorerOrderByWithRelationInput | ReviewUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewUrbanExplorers.
     */
    cursor?: ReviewUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewUrbanExplorers.
     */
    skip?: number
    distinct?: ReviewUrbanExplorerScalarFieldEnum | ReviewUrbanExplorerScalarFieldEnum[]
  }

  /**
   * ReviewUrbanExplorer create
   */
  export type ReviewUrbanExplorerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewUrbanExplorer.
     */
    data: XOR<ReviewUrbanExplorerCreateInput, ReviewUrbanExplorerUncheckedCreateInput>
  }

  /**
   * ReviewUrbanExplorer createMany
   */
  export type ReviewUrbanExplorerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewUrbanExplorers.
     */
    data: ReviewUrbanExplorerCreateManyInput | ReviewUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewUrbanExplorer createManyAndReturn
   */
  export type ReviewUrbanExplorerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewUrbanExplorers.
     */
    data: ReviewUrbanExplorerCreateManyInput | ReviewUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewUrbanExplorer update
   */
  export type ReviewUrbanExplorerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewUrbanExplorer.
     */
    data: XOR<ReviewUrbanExplorerUpdateInput, ReviewUrbanExplorerUncheckedUpdateInput>
    /**
     * Choose, which ReviewUrbanExplorer to update.
     */
    where: ReviewUrbanExplorerWhereUniqueInput
  }

  /**
   * ReviewUrbanExplorer updateMany
   */
  export type ReviewUrbanExplorerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewUrbanExplorers.
     */
    data: XOR<ReviewUrbanExplorerUpdateManyMutationInput, ReviewUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which ReviewUrbanExplorers to update
     */
    where?: ReviewUrbanExplorerWhereInput
    /**
     * Limit how many ReviewUrbanExplorers to update.
     */
    limit?: number
  }

  /**
   * ReviewUrbanExplorer updateManyAndReturn
   */
  export type ReviewUrbanExplorerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to update ReviewUrbanExplorers.
     */
    data: XOR<ReviewUrbanExplorerUpdateManyMutationInput, ReviewUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which ReviewUrbanExplorers to update
     */
    where?: ReviewUrbanExplorerWhereInput
    /**
     * Limit how many ReviewUrbanExplorers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewUrbanExplorer upsert
   */
  export type ReviewUrbanExplorerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewUrbanExplorer to update in case it exists.
     */
    where: ReviewUrbanExplorerWhereUniqueInput
    /**
     * In case the ReviewUrbanExplorer found by the `where` argument doesn't exist, create a new ReviewUrbanExplorer with this data.
     */
    create: XOR<ReviewUrbanExplorerCreateInput, ReviewUrbanExplorerUncheckedCreateInput>
    /**
     * In case the ReviewUrbanExplorer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUrbanExplorerUpdateInput, ReviewUrbanExplorerUncheckedUpdateInput>
  }

  /**
   * ReviewUrbanExplorer delete
   */
  export type ReviewUrbanExplorerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter which ReviewUrbanExplorer to delete.
     */
    where: ReviewUrbanExplorerWhereUniqueInput
  }

  /**
   * ReviewUrbanExplorer deleteMany
   */
  export type ReviewUrbanExplorerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewUrbanExplorers to delete
     */
    where?: ReviewUrbanExplorerWhereInput
    /**
     * Limit how many ReviewUrbanExplorers to delete.
     */
    limit?: number
  }

  /**
   * ReviewUrbanExplorer.reports
   */
  export type ReviewUrbanExplorer$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    where?: ReportUrbanExplorerWhereInput
    orderBy?: ReportUrbanExplorerOrderByWithRelationInput | ReportUrbanExplorerOrderByWithRelationInput[]
    cursor?: ReportUrbanExplorerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportUrbanExplorerScalarFieldEnum | ReportUrbanExplorerScalarFieldEnum[]
  }

  /**
   * ReviewUrbanExplorer without action
   */
  export type ReviewUrbanExplorerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
  }


  /**
   * Model LikeUrbanExplorer
   */

  export type AggregateLikeUrbanExplorer = {
    _count: LikeUrbanExplorerCountAggregateOutputType | null
    _min: LikeUrbanExplorerMinAggregateOutputType | null
    _max: LikeUrbanExplorerMaxAggregateOutputType | null
  }

  export type LikeUrbanExplorerMinAggregateOutputType = {
    id: string | null
    placeId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeUrbanExplorerMaxAggregateOutputType = {
    id: string | null
    placeId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeUrbanExplorerCountAggregateOutputType = {
    id: number
    placeId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LikeUrbanExplorerMinAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeUrbanExplorerMaxAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeUrbanExplorerCountAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeUrbanExplorerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeUrbanExplorer to aggregate.
     */
    where?: LikeUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeUrbanExplorers to fetch.
     */
    orderBy?: LikeUrbanExplorerOrderByWithRelationInput | LikeUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikeUrbanExplorers
    **/
    _count?: true | LikeUrbanExplorerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeUrbanExplorerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeUrbanExplorerMaxAggregateInputType
  }

  export type GetLikeUrbanExplorerAggregateType<T extends LikeUrbanExplorerAggregateArgs> = {
        [P in keyof T & keyof AggregateLikeUrbanExplorer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikeUrbanExplorer[P]>
      : GetScalarType<T[P], AggregateLikeUrbanExplorer[P]>
  }




  export type LikeUrbanExplorerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeUrbanExplorerWhereInput
    orderBy?: LikeUrbanExplorerOrderByWithAggregationInput | LikeUrbanExplorerOrderByWithAggregationInput[]
    by: LikeUrbanExplorerScalarFieldEnum[] | LikeUrbanExplorerScalarFieldEnum
    having?: LikeUrbanExplorerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeUrbanExplorerCountAggregateInputType | true
    _min?: LikeUrbanExplorerMinAggregateInputType
    _max?: LikeUrbanExplorerMaxAggregateInputType
  }

  export type LikeUrbanExplorerGroupByOutputType = {
    id: string
    placeId: string
    userId: string
    createdAt: Date
    _count: LikeUrbanExplorerCountAggregateOutputType | null
    _min: LikeUrbanExplorerMinAggregateOutputType | null
    _max: LikeUrbanExplorerMaxAggregateOutputType | null
  }

  type GetLikeUrbanExplorerGroupByPayload<T extends LikeUrbanExplorerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeUrbanExplorerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeUrbanExplorerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeUrbanExplorerGroupByOutputType[P]>
            : GetScalarType<T[P], LikeUrbanExplorerGroupByOutputType[P]>
        }
      >
    >


  export type LikeUrbanExplorerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeUrbanExplorer"]>

  export type LikeUrbanExplorerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeUrbanExplorer"]>

  export type LikeUrbanExplorerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeUrbanExplorer"]>

  export type LikeUrbanExplorerSelectScalar = {
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LikeUrbanExplorerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "placeId" | "userId" | "createdAt", ExtArgs["result"]["likeUrbanExplorer"]>
  export type LikeUrbanExplorerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }
  export type LikeUrbanExplorerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }
  export type LikeUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }

  export type $LikeUrbanExplorerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LikeUrbanExplorer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      place: Prisma.$PlaceUrbanExplorerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      placeId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["likeUrbanExplorer"]>
    composites: {}
  }

  type LikeUrbanExplorerGetPayload<S extends boolean | null | undefined | LikeUrbanExplorerDefaultArgs> = $Result.GetResult<Prisma.$LikeUrbanExplorerPayload, S>

  type LikeUrbanExplorerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LikeUrbanExplorerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LikeUrbanExplorerCountAggregateInputType | true
    }

  export interface LikeUrbanExplorerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LikeUrbanExplorer'], meta: { name: 'LikeUrbanExplorer' } }
    /**
     * Find zero or one LikeUrbanExplorer that matches the filter.
     * @param {LikeUrbanExplorerFindUniqueArgs} args - Arguments to find a LikeUrbanExplorer
     * @example
     * // Get one LikeUrbanExplorer
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeUrbanExplorerFindUniqueArgs>(args: SelectSubset<T, LikeUrbanExplorerFindUniqueArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LikeUrbanExplorer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LikeUrbanExplorerFindUniqueOrThrowArgs} args - Arguments to find a LikeUrbanExplorer
     * @example
     * // Get one LikeUrbanExplorer
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeUrbanExplorerFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LikeUrbanExplorer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUrbanExplorerFindFirstArgs} args - Arguments to find a LikeUrbanExplorer
     * @example
     * // Get one LikeUrbanExplorer
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeUrbanExplorerFindFirstArgs>(args?: SelectSubset<T, LikeUrbanExplorerFindFirstArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LikeUrbanExplorer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUrbanExplorerFindFirstOrThrowArgs} args - Arguments to find a LikeUrbanExplorer
     * @example
     * // Get one LikeUrbanExplorer
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeUrbanExplorerFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeUrbanExplorerFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LikeUrbanExplorers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUrbanExplorerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikeUrbanExplorers
     * const likeUrbanExplorers = await prisma.likeUrbanExplorer.findMany()
     * 
     * // Get first 10 LikeUrbanExplorers
     * const likeUrbanExplorers = await prisma.likeUrbanExplorer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeUrbanExplorerWithIdOnly = await prisma.likeUrbanExplorer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeUrbanExplorerFindManyArgs>(args?: SelectSubset<T, LikeUrbanExplorerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LikeUrbanExplorer.
     * @param {LikeUrbanExplorerCreateArgs} args - Arguments to create a LikeUrbanExplorer.
     * @example
     * // Create one LikeUrbanExplorer
     * const LikeUrbanExplorer = await prisma.likeUrbanExplorer.create({
     *   data: {
     *     // ... data to create a LikeUrbanExplorer
     *   }
     * })
     * 
     */
    create<T extends LikeUrbanExplorerCreateArgs>(args: SelectSubset<T, LikeUrbanExplorerCreateArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LikeUrbanExplorers.
     * @param {LikeUrbanExplorerCreateManyArgs} args - Arguments to create many LikeUrbanExplorers.
     * @example
     * // Create many LikeUrbanExplorers
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeUrbanExplorerCreateManyArgs>(args?: SelectSubset<T, LikeUrbanExplorerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LikeUrbanExplorers and returns the data saved in the database.
     * @param {LikeUrbanExplorerCreateManyAndReturnArgs} args - Arguments to create many LikeUrbanExplorers.
     * @example
     * // Create many LikeUrbanExplorers
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LikeUrbanExplorers and only return the `id`
     * const likeUrbanExplorerWithIdOnly = await prisma.likeUrbanExplorer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikeUrbanExplorerCreateManyAndReturnArgs>(args?: SelectSubset<T, LikeUrbanExplorerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LikeUrbanExplorer.
     * @param {LikeUrbanExplorerDeleteArgs} args - Arguments to delete one LikeUrbanExplorer.
     * @example
     * // Delete one LikeUrbanExplorer
     * const LikeUrbanExplorer = await prisma.likeUrbanExplorer.delete({
     *   where: {
     *     // ... filter to delete one LikeUrbanExplorer
     *   }
     * })
     * 
     */
    delete<T extends LikeUrbanExplorerDeleteArgs>(args: SelectSubset<T, LikeUrbanExplorerDeleteArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LikeUrbanExplorer.
     * @param {LikeUrbanExplorerUpdateArgs} args - Arguments to update one LikeUrbanExplorer.
     * @example
     * // Update one LikeUrbanExplorer
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeUrbanExplorerUpdateArgs>(args: SelectSubset<T, LikeUrbanExplorerUpdateArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LikeUrbanExplorers.
     * @param {LikeUrbanExplorerDeleteManyArgs} args - Arguments to filter LikeUrbanExplorers to delete.
     * @example
     * // Delete a few LikeUrbanExplorers
     * const { count } = await prisma.likeUrbanExplorer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeUrbanExplorerDeleteManyArgs>(args?: SelectSubset<T, LikeUrbanExplorerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUrbanExplorerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikeUrbanExplorers
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeUrbanExplorerUpdateManyArgs>(args: SelectSubset<T, LikeUrbanExplorerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeUrbanExplorers and returns the data updated in the database.
     * @param {LikeUrbanExplorerUpdateManyAndReturnArgs} args - Arguments to update many LikeUrbanExplorers.
     * @example
     * // Update many LikeUrbanExplorers
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LikeUrbanExplorers and only return the `id`
     * const likeUrbanExplorerWithIdOnly = await prisma.likeUrbanExplorer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LikeUrbanExplorerUpdateManyAndReturnArgs>(args: SelectSubset<T, LikeUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LikeUrbanExplorer.
     * @param {LikeUrbanExplorerUpsertArgs} args - Arguments to update or create a LikeUrbanExplorer.
     * @example
     * // Update or create a LikeUrbanExplorer
     * const likeUrbanExplorer = await prisma.likeUrbanExplorer.upsert({
     *   create: {
     *     // ... data to create a LikeUrbanExplorer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikeUrbanExplorer we want to update
     *   }
     * })
     */
    upsert<T extends LikeUrbanExplorerUpsertArgs>(args: SelectSubset<T, LikeUrbanExplorerUpsertArgs<ExtArgs>>): Prisma__LikeUrbanExplorerClient<$Result.GetResult<Prisma.$LikeUrbanExplorerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LikeUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUrbanExplorerCountArgs} args - Arguments to filter LikeUrbanExplorers to count.
     * @example
     * // Count the number of LikeUrbanExplorers
     * const count = await prisma.likeUrbanExplorer.count({
     *   where: {
     *     // ... the filter for the LikeUrbanExplorers we want to count
     *   }
     * })
    **/
    count<T extends LikeUrbanExplorerCountArgs>(
      args?: Subset<T, LikeUrbanExplorerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeUrbanExplorerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikeUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUrbanExplorerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeUrbanExplorerAggregateArgs>(args: Subset<T, LikeUrbanExplorerAggregateArgs>): Prisma.PrismaPromise<GetLikeUrbanExplorerAggregateType<T>>

    /**
     * Group by LikeUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUrbanExplorerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeUrbanExplorerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeUrbanExplorerGroupByArgs['orderBy'] }
        : { orderBy?: LikeUrbanExplorerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeUrbanExplorerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeUrbanExplorerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LikeUrbanExplorer model
   */
  readonly fields: LikeUrbanExplorerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LikeUrbanExplorer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeUrbanExplorerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    place<T extends PlaceUrbanExplorerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaceUrbanExplorerDefaultArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LikeUrbanExplorer model
   */ 
  interface LikeUrbanExplorerFieldRefs {
    readonly id: FieldRef<"LikeUrbanExplorer", 'String'>
    readonly placeId: FieldRef<"LikeUrbanExplorer", 'String'>
    readonly userId: FieldRef<"LikeUrbanExplorer", 'String'>
    readonly createdAt: FieldRef<"LikeUrbanExplorer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LikeUrbanExplorer findUnique
   */
  export type LikeUrbanExplorerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which LikeUrbanExplorer to fetch.
     */
    where: LikeUrbanExplorerWhereUniqueInput
  }

  /**
   * LikeUrbanExplorer findUniqueOrThrow
   */
  export type LikeUrbanExplorerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which LikeUrbanExplorer to fetch.
     */
    where: LikeUrbanExplorerWhereUniqueInput
  }

  /**
   * LikeUrbanExplorer findFirst
   */
  export type LikeUrbanExplorerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which LikeUrbanExplorer to fetch.
     */
    where?: LikeUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeUrbanExplorers to fetch.
     */
    orderBy?: LikeUrbanExplorerOrderByWithRelationInput | LikeUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeUrbanExplorers.
     */
    cursor?: LikeUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeUrbanExplorers.
     */
    distinct?: LikeUrbanExplorerScalarFieldEnum | LikeUrbanExplorerScalarFieldEnum[]
  }

  /**
   * LikeUrbanExplorer findFirstOrThrow
   */
  export type LikeUrbanExplorerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which LikeUrbanExplorer to fetch.
     */
    where?: LikeUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeUrbanExplorers to fetch.
     */
    orderBy?: LikeUrbanExplorerOrderByWithRelationInput | LikeUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeUrbanExplorers.
     */
    cursor?: LikeUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeUrbanExplorers.
     */
    distinct?: LikeUrbanExplorerScalarFieldEnum | LikeUrbanExplorerScalarFieldEnum[]
  }

  /**
   * LikeUrbanExplorer findMany
   */
  export type LikeUrbanExplorerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which LikeUrbanExplorers to fetch.
     */
    where?: LikeUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeUrbanExplorers to fetch.
     */
    orderBy?: LikeUrbanExplorerOrderByWithRelationInput | LikeUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikeUrbanExplorers.
     */
    cursor?: LikeUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeUrbanExplorers.
     */
    skip?: number
    distinct?: LikeUrbanExplorerScalarFieldEnum | LikeUrbanExplorerScalarFieldEnum[]
  }

  /**
   * LikeUrbanExplorer create
   */
  export type LikeUrbanExplorerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to create a LikeUrbanExplorer.
     */
    data: XOR<LikeUrbanExplorerCreateInput, LikeUrbanExplorerUncheckedCreateInput>
  }

  /**
   * LikeUrbanExplorer createMany
   */
  export type LikeUrbanExplorerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LikeUrbanExplorers.
     */
    data: LikeUrbanExplorerCreateManyInput | LikeUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LikeUrbanExplorer createManyAndReturn
   */
  export type LikeUrbanExplorerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to create many LikeUrbanExplorers.
     */
    data: LikeUrbanExplorerCreateManyInput | LikeUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LikeUrbanExplorer update
   */
  export type LikeUrbanExplorerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to update a LikeUrbanExplorer.
     */
    data: XOR<LikeUrbanExplorerUpdateInput, LikeUrbanExplorerUncheckedUpdateInput>
    /**
     * Choose, which LikeUrbanExplorer to update.
     */
    where: LikeUrbanExplorerWhereUniqueInput
  }

  /**
   * LikeUrbanExplorer updateMany
   */
  export type LikeUrbanExplorerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LikeUrbanExplorers.
     */
    data: XOR<LikeUrbanExplorerUpdateManyMutationInput, LikeUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which LikeUrbanExplorers to update
     */
    where?: LikeUrbanExplorerWhereInput
    /**
     * Limit how many LikeUrbanExplorers to update.
     */
    limit?: number
  }

  /**
   * LikeUrbanExplorer updateManyAndReturn
   */
  export type LikeUrbanExplorerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to update LikeUrbanExplorers.
     */
    data: XOR<LikeUrbanExplorerUpdateManyMutationInput, LikeUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which LikeUrbanExplorers to update
     */
    where?: LikeUrbanExplorerWhereInput
    /**
     * Limit how many LikeUrbanExplorers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LikeUrbanExplorer upsert
   */
  export type LikeUrbanExplorerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * The filter to search for the LikeUrbanExplorer to update in case it exists.
     */
    where: LikeUrbanExplorerWhereUniqueInput
    /**
     * In case the LikeUrbanExplorer found by the `where` argument doesn't exist, create a new LikeUrbanExplorer with this data.
     */
    create: XOR<LikeUrbanExplorerCreateInput, LikeUrbanExplorerUncheckedCreateInput>
    /**
     * In case the LikeUrbanExplorer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUrbanExplorerUpdateInput, LikeUrbanExplorerUncheckedUpdateInput>
  }

  /**
   * LikeUrbanExplorer delete
   */
  export type LikeUrbanExplorerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter which LikeUrbanExplorer to delete.
     */
    where: LikeUrbanExplorerWhereUniqueInput
  }

  /**
   * LikeUrbanExplorer deleteMany
   */
  export type LikeUrbanExplorerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeUrbanExplorers to delete
     */
    where?: LikeUrbanExplorerWhereInput
    /**
     * Limit how many LikeUrbanExplorers to delete.
     */
    limit?: number
  }

  /**
   * LikeUrbanExplorer without action
   */
  export type LikeUrbanExplorerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeUrbanExplorer
     */
    select?: LikeUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeUrbanExplorer
     */
    omit?: LikeUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeUrbanExplorerInclude<ExtArgs> | null
  }


  /**
   * Model BookmarkUrbanExplorer
   */

  export type AggregateBookmarkUrbanExplorer = {
    _count: BookmarkUrbanExplorerCountAggregateOutputType | null
    _min: BookmarkUrbanExplorerMinAggregateOutputType | null
    _max: BookmarkUrbanExplorerMaxAggregateOutputType | null
  }

  export type BookmarkUrbanExplorerMinAggregateOutputType = {
    id: string | null
    placeId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BookmarkUrbanExplorerMaxAggregateOutputType = {
    id: string | null
    placeId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BookmarkUrbanExplorerCountAggregateOutputType = {
    id: number
    placeId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type BookmarkUrbanExplorerMinAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    createdAt?: true
  }

  export type BookmarkUrbanExplorerMaxAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    createdAt?: true
  }

  export type BookmarkUrbanExplorerCountAggregateInputType = {
    id?: true
    placeId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type BookmarkUrbanExplorerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmarkUrbanExplorer to aggregate.
     */
    where?: BookmarkUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkUrbanExplorers to fetch.
     */
    orderBy?: BookmarkUrbanExplorerOrderByWithRelationInput | BookmarkUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmarkUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookmarkUrbanExplorers
    **/
    _count?: true | BookmarkUrbanExplorerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkUrbanExplorerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkUrbanExplorerMaxAggregateInputType
  }

  export type GetBookmarkUrbanExplorerAggregateType<T extends BookmarkUrbanExplorerAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmarkUrbanExplorer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmarkUrbanExplorer[P]>
      : GetScalarType<T[P], AggregateBookmarkUrbanExplorer[P]>
  }




  export type BookmarkUrbanExplorerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkUrbanExplorerWhereInput
    orderBy?: BookmarkUrbanExplorerOrderByWithAggregationInput | BookmarkUrbanExplorerOrderByWithAggregationInput[]
    by: BookmarkUrbanExplorerScalarFieldEnum[] | BookmarkUrbanExplorerScalarFieldEnum
    having?: BookmarkUrbanExplorerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkUrbanExplorerCountAggregateInputType | true
    _min?: BookmarkUrbanExplorerMinAggregateInputType
    _max?: BookmarkUrbanExplorerMaxAggregateInputType
  }

  export type BookmarkUrbanExplorerGroupByOutputType = {
    id: string
    placeId: string
    userId: string
    createdAt: Date
    _count: BookmarkUrbanExplorerCountAggregateOutputType | null
    _min: BookmarkUrbanExplorerMinAggregateOutputType | null
    _max: BookmarkUrbanExplorerMaxAggregateOutputType | null
  }

  type GetBookmarkUrbanExplorerGroupByPayload<T extends BookmarkUrbanExplorerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkUrbanExplorerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkUrbanExplorerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkUrbanExplorerGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkUrbanExplorerGroupByOutputType[P]>
        }
      >
    >


  export type BookmarkUrbanExplorerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkUrbanExplorer"]>

  export type BookmarkUrbanExplorerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkUrbanExplorer"]>

  export type BookmarkUrbanExplorerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkUrbanExplorer"]>

  export type BookmarkUrbanExplorerSelectScalar = {
    id?: boolean
    placeId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type BookmarkUrbanExplorerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "placeId" | "userId" | "createdAt", ExtArgs["result"]["bookmarkUrbanExplorer"]>
  export type BookmarkUrbanExplorerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }
  export type BookmarkUrbanExplorerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }
  export type BookmarkUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | PlaceUrbanExplorerDefaultArgs<ExtArgs>
  }

  export type $BookmarkUrbanExplorerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookmarkUrbanExplorer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      place: Prisma.$PlaceUrbanExplorerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      placeId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["bookmarkUrbanExplorer"]>
    composites: {}
  }

  type BookmarkUrbanExplorerGetPayload<S extends boolean | null | undefined | BookmarkUrbanExplorerDefaultArgs> = $Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload, S>

  type BookmarkUrbanExplorerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookmarkUrbanExplorerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmarkUrbanExplorerCountAggregateInputType | true
    }

  export interface BookmarkUrbanExplorerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookmarkUrbanExplorer'], meta: { name: 'BookmarkUrbanExplorer' } }
    /**
     * Find zero or one BookmarkUrbanExplorer that matches the filter.
     * @param {BookmarkUrbanExplorerFindUniqueArgs} args - Arguments to find a BookmarkUrbanExplorer
     * @example
     * // Get one BookmarkUrbanExplorer
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmarkUrbanExplorerFindUniqueArgs>(args: SelectSubset<T, BookmarkUrbanExplorerFindUniqueArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookmarkUrbanExplorer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookmarkUrbanExplorerFindUniqueOrThrowArgs} args - Arguments to find a BookmarkUrbanExplorer
     * @example
     * // Get one BookmarkUrbanExplorer
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmarkUrbanExplorerFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmarkUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmarkUrbanExplorer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUrbanExplorerFindFirstArgs} args - Arguments to find a BookmarkUrbanExplorer
     * @example
     * // Get one BookmarkUrbanExplorer
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmarkUrbanExplorerFindFirstArgs>(args?: SelectSubset<T, BookmarkUrbanExplorerFindFirstArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmarkUrbanExplorer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUrbanExplorerFindFirstOrThrowArgs} args - Arguments to find a BookmarkUrbanExplorer
     * @example
     * // Get one BookmarkUrbanExplorer
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmarkUrbanExplorerFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmarkUrbanExplorerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookmarkUrbanExplorers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUrbanExplorerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookmarkUrbanExplorers
     * const bookmarkUrbanExplorers = await prisma.bookmarkUrbanExplorer.findMany()
     * 
     * // Get first 10 BookmarkUrbanExplorers
     * const bookmarkUrbanExplorers = await prisma.bookmarkUrbanExplorer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmarkUrbanExplorerWithIdOnly = await prisma.bookmarkUrbanExplorer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookmarkUrbanExplorerFindManyArgs>(args?: SelectSubset<T, BookmarkUrbanExplorerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookmarkUrbanExplorer.
     * @param {BookmarkUrbanExplorerCreateArgs} args - Arguments to create a BookmarkUrbanExplorer.
     * @example
     * // Create one BookmarkUrbanExplorer
     * const BookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.create({
     *   data: {
     *     // ... data to create a BookmarkUrbanExplorer
     *   }
     * })
     * 
     */
    create<T extends BookmarkUrbanExplorerCreateArgs>(args: SelectSubset<T, BookmarkUrbanExplorerCreateArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookmarkUrbanExplorers.
     * @param {BookmarkUrbanExplorerCreateManyArgs} args - Arguments to create many BookmarkUrbanExplorers.
     * @example
     * // Create many BookmarkUrbanExplorers
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmarkUrbanExplorerCreateManyArgs>(args?: SelectSubset<T, BookmarkUrbanExplorerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookmarkUrbanExplorers and returns the data saved in the database.
     * @param {BookmarkUrbanExplorerCreateManyAndReturnArgs} args - Arguments to create many BookmarkUrbanExplorers.
     * @example
     * // Create many BookmarkUrbanExplorers
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookmarkUrbanExplorers and only return the `id`
     * const bookmarkUrbanExplorerWithIdOnly = await prisma.bookmarkUrbanExplorer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookmarkUrbanExplorerCreateManyAndReturnArgs>(args?: SelectSubset<T, BookmarkUrbanExplorerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookmarkUrbanExplorer.
     * @param {BookmarkUrbanExplorerDeleteArgs} args - Arguments to delete one BookmarkUrbanExplorer.
     * @example
     * // Delete one BookmarkUrbanExplorer
     * const BookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.delete({
     *   where: {
     *     // ... filter to delete one BookmarkUrbanExplorer
     *   }
     * })
     * 
     */
    delete<T extends BookmarkUrbanExplorerDeleteArgs>(args: SelectSubset<T, BookmarkUrbanExplorerDeleteArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookmarkUrbanExplorer.
     * @param {BookmarkUrbanExplorerUpdateArgs} args - Arguments to update one BookmarkUrbanExplorer.
     * @example
     * // Update one BookmarkUrbanExplorer
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmarkUrbanExplorerUpdateArgs>(args: SelectSubset<T, BookmarkUrbanExplorerUpdateArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookmarkUrbanExplorers.
     * @param {BookmarkUrbanExplorerDeleteManyArgs} args - Arguments to filter BookmarkUrbanExplorers to delete.
     * @example
     * // Delete a few BookmarkUrbanExplorers
     * const { count } = await prisma.bookmarkUrbanExplorer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmarkUrbanExplorerDeleteManyArgs>(args?: SelectSubset<T, BookmarkUrbanExplorerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmarkUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUrbanExplorerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookmarkUrbanExplorers
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmarkUrbanExplorerUpdateManyArgs>(args: SelectSubset<T, BookmarkUrbanExplorerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmarkUrbanExplorers and returns the data updated in the database.
     * @param {BookmarkUrbanExplorerUpdateManyAndReturnArgs} args - Arguments to update many BookmarkUrbanExplorers.
     * @example
     * // Update many BookmarkUrbanExplorers
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookmarkUrbanExplorers and only return the `id`
     * const bookmarkUrbanExplorerWithIdOnly = await prisma.bookmarkUrbanExplorer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookmarkUrbanExplorerUpdateManyAndReturnArgs>(args: SelectSubset<T, BookmarkUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookmarkUrbanExplorer.
     * @param {BookmarkUrbanExplorerUpsertArgs} args - Arguments to update or create a BookmarkUrbanExplorer.
     * @example
     * // Update or create a BookmarkUrbanExplorer
     * const bookmarkUrbanExplorer = await prisma.bookmarkUrbanExplorer.upsert({
     *   create: {
     *     // ... data to create a BookmarkUrbanExplorer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookmarkUrbanExplorer we want to update
     *   }
     * })
     */
    upsert<T extends BookmarkUrbanExplorerUpsertArgs>(args: SelectSubset<T, BookmarkUrbanExplorerUpsertArgs<ExtArgs>>): Prisma__BookmarkUrbanExplorerClient<$Result.GetResult<Prisma.$BookmarkUrbanExplorerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookmarkUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUrbanExplorerCountArgs} args - Arguments to filter BookmarkUrbanExplorers to count.
     * @example
     * // Count the number of BookmarkUrbanExplorers
     * const count = await prisma.bookmarkUrbanExplorer.count({
     *   where: {
     *     // ... the filter for the BookmarkUrbanExplorers we want to count
     *   }
     * })
    **/
    count<T extends BookmarkUrbanExplorerCountArgs>(
      args?: Subset<T, BookmarkUrbanExplorerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkUrbanExplorerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookmarkUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUrbanExplorerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkUrbanExplorerAggregateArgs>(args: Subset<T, BookmarkUrbanExplorerAggregateArgs>): Prisma.PrismaPromise<GetBookmarkUrbanExplorerAggregateType<T>>

    /**
     * Group by BookmarkUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUrbanExplorerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmarkUrbanExplorerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmarkUrbanExplorerGroupByArgs['orderBy'] }
        : { orderBy?: BookmarkUrbanExplorerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmarkUrbanExplorerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkUrbanExplorerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookmarkUrbanExplorer model
   */
  readonly fields: BookmarkUrbanExplorerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookmarkUrbanExplorer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmarkUrbanExplorerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    place<T extends PlaceUrbanExplorerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaceUrbanExplorerDefaultArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookmarkUrbanExplorer model
   */ 
  interface BookmarkUrbanExplorerFieldRefs {
    readonly id: FieldRef<"BookmarkUrbanExplorer", 'String'>
    readonly placeId: FieldRef<"BookmarkUrbanExplorer", 'String'>
    readonly userId: FieldRef<"BookmarkUrbanExplorer", 'String'>
    readonly createdAt: FieldRef<"BookmarkUrbanExplorer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookmarkUrbanExplorer findUnique
   */
  export type BookmarkUrbanExplorerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkUrbanExplorer to fetch.
     */
    where: BookmarkUrbanExplorerWhereUniqueInput
  }

  /**
   * BookmarkUrbanExplorer findUniqueOrThrow
   */
  export type BookmarkUrbanExplorerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkUrbanExplorer to fetch.
     */
    where: BookmarkUrbanExplorerWhereUniqueInput
  }

  /**
   * BookmarkUrbanExplorer findFirst
   */
  export type BookmarkUrbanExplorerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkUrbanExplorer to fetch.
     */
    where?: BookmarkUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkUrbanExplorers to fetch.
     */
    orderBy?: BookmarkUrbanExplorerOrderByWithRelationInput | BookmarkUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmarkUrbanExplorers.
     */
    cursor?: BookmarkUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmarkUrbanExplorers.
     */
    distinct?: BookmarkUrbanExplorerScalarFieldEnum | BookmarkUrbanExplorerScalarFieldEnum[]
  }

  /**
   * BookmarkUrbanExplorer findFirstOrThrow
   */
  export type BookmarkUrbanExplorerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkUrbanExplorer to fetch.
     */
    where?: BookmarkUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkUrbanExplorers to fetch.
     */
    orderBy?: BookmarkUrbanExplorerOrderByWithRelationInput | BookmarkUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmarkUrbanExplorers.
     */
    cursor?: BookmarkUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmarkUrbanExplorers.
     */
    distinct?: BookmarkUrbanExplorerScalarFieldEnum | BookmarkUrbanExplorerScalarFieldEnum[]
  }

  /**
   * BookmarkUrbanExplorer findMany
   */
  export type BookmarkUrbanExplorerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkUrbanExplorers to fetch.
     */
    where?: BookmarkUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkUrbanExplorers to fetch.
     */
    orderBy?: BookmarkUrbanExplorerOrderByWithRelationInput | BookmarkUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookmarkUrbanExplorers.
     */
    cursor?: BookmarkUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkUrbanExplorers.
     */
    skip?: number
    distinct?: BookmarkUrbanExplorerScalarFieldEnum | BookmarkUrbanExplorerScalarFieldEnum[]
  }

  /**
   * BookmarkUrbanExplorer create
   */
  export type BookmarkUrbanExplorerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to create a BookmarkUrbanExplorer.
     */
    data: XOR<BookmarkUrbanExplorerCreateInput, BookmarkUrbanExplorerUncheckedCreateInput>
  }

  /**
   * BookmarkUrbanExplorer createMany
   */
  export type BookmarkUrbanExplorerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookmarkUrbanExplorers.
     */
    data: BookmarkUrbanExplorerCreateManyInput | BookmarkUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookmarkUrbanExplorer createManyAndReturn
   */
  export type BookmarkUrbanExplorerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to create many BookmarkUrbanExplorers.
     */
    data: BookmarkUrbanExplorerCreateManyInput | BookmarkUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmarkUrbanExplorer update
   */
  export type BookmarkUrbanExplorerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to update a BookmarkUrbanExplorer.
     */
    data: XOR<BookmarkUrbanExplorerUpdateInput, BookmarkUrbanExplorerUncheckedUpdateInput>
    /**
     * Choose, which BookmarkUrbanExplorer to update.
     */
    where: BookmarkUrbanExplorerWhereUniqueInput
  }

  /**
   * BookmarkUrbanExplorer updateMany
   */
  export type BookmarkUrbanExplorerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookmarkUrbanExplorers.
     */
    data: XOR<BookmarkUrbanExplorerUpdateManyMutationInput, BookmarkUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which BookmarkUrbanExplorers to update
     */
    where?: BookmarkUrbanExplorerWhereInput
    /**
     * Limit how many BookmarkUrbanExplorers to update.
     */
    limit?: number
  }

  /**
   * BookmarkUrbanExplorer updateManyAndReturn
   */
  export type BookmarkUrbanExplorerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to update BookmarkUrbanExplorers.
     */
    data: XOR<BookmarkUrbanExplorerUpdateManyMutationInput, BookmarkUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which BookmarkUrbanExplorers to update
     */
    where?: BookmarkUrbanExplorerWhereInput
    /**
     * Limit how many BookmarkUrbanExplorers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmarkUrbanExplorer upsert
   */
  export type BookmarkUrbanExplorerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * The filter to search for the BookmarkUrbanExplorer to update in case it exists.
     */
    where: BookmarkUrbanExplorerWhereUniqueInput
    /**
     * In case the BookmarkUrbanExplorer found by the `where` argument doesn't exist, create a new BookmarkUrbanExplorer with this data.
     */
    create: XOR<BookmarkUrbanExplorerCreateInput, BookmarkUrbanExplorerUncheckedCreateInput>
    /**
     * In case the BookmarkUrbanExplorer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmarkUrbanExplorerUpdateInput, BookmarkUrbanExplorerUncheckedUpdateInput>
  }

  /**
   * BookmarkUrbanExplorer delete
   */
  export type BookmarkUrbanExplorerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter which BookmarkUrbanExplorer to delete.
     */
    where: BookmarkUrbanExplorerWhereUniqueInput
  }

  /**
   * BookmarkUrbanExplorer deleteMany
   */
  export type BookmarkUrbanExplorerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmarkUrbanExplorers to delete
     */
    where?: BookmarkUrbanExplorerWhereInput
    /**
     * Limit how many BookmarkUrbanExplorers to delete.
     */
    limit?: number
  }

  /**
   * BookmarkUrbanExplorer without action
   */
  export type BookmarkUrbanExplorerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkUrbanExplorer
     */
    select?: BookmarkUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkUrbanExplorer
     */
    omit?: BookmarkUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkUrbanExplorerInclude<ExtArgs> | null
  }


  /**
   * Model ReportUrbanExplorer
   */

  export type AggregateReportUrbanExplorer = {
    _count: ReportUrbanExplorerCountAggregateOutputType | null
    _min: ReportUrbanExplorerMinAggregateOutputType | null
    _max: ReportUrbanExplorerMaxAggregateOutputType | null
  }

  export type ReportUrbanExplorerMinAggregateOutputType = {
    id: string | null
    placeId: string | null
    reviewId: string | null
    userId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportUrbanExplorerMaxAggregateOutputType = {
    id: string | null
    placeId: string | null
    reviewId: string | null
    userId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportUrbanExplorerCountAggregateOutputType = {
    id: number
    placeId: number
    reviewId: number
    userId: number
    reason: number
    createdAt: number
    _all: number
  }


  export type ReportUrbanExplorerMinAggregateInputType = {
    id?: true
    placeId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportUrbanExplorerMaxAggregateInputType = {
    id?: true
    placeId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportUrbanExplorerCountAggregateInputType = {
    id?: true
    placeId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type ReportUrbanExplorerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportUrbanExplorer to aggregate.
     */
    where?: ReportUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportUrbanExplorers to fetch.
     */
    orderBy?: ReportUrbanExplorerOrderByWithRelationInput | ReportUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportUrbanExplorers
    **/
    _count?: true | ReportUrbanExplorerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportUrbanExplorerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportUrbanExplorerMaxAggregateInputType
  }

  export type GetReportUrbanExplorerAggregateType<T extends ReportUrbanExplorerAggregateArgs> = {
        [P in keyof T & keyof AggregateReportUrbanExplorer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportUrbanExplorer[P]>
      : GetScalarType<T[P], AggregateReportUrbanExplorer[P]>
  }




  export type ReportUrbanExplorerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportUrbanExplorerWhereInput
    orderBy?: ReportUrbanExplorerOrderByWithAggregationInput | ReportUrbanExplorerOrderByWithAggregationInput[]
    by: ReportUrbanExplorerScalarFieldEnum[] | ReportUrbanExplorerScalarFieldEnum
    having?: ReportUrbanExplorerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportUrbanExplorerCountAggregateInputType | true
    _min?: ReportUrbanExplorerMinAggregateInputType
    _max?: ReportUrbanExplorerMaxAggregateInputType
  }

  export type ReportUrbanExplorerGroupByOutputType = {
    id: string
    placeId: string | null
    reviewId: string | null
    userId: string
    reason: string
    createdAt: Date
    _count: ReportUrbanExplorerCountAggregateOutputType | null
    _min: ReportUrbanExplorerMinAggregateOutputType | null
    _max: ReportUrbanExplorerMaxAggregateOutputType | null
  }

  type GetReportUrbanExplorerGroupByPayload<T extends ReportUrbanExplorerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportUrbanExplorerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportUrbanExplorerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportUrbanExplorerGroupByOutputType[P]>
            : GetScalarType<T[P], ReportUrbanExplorerGroupByOutputType[P]>
        }
      >
    >


  export type ReportUrbanExplorerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | ReportUrbanExplorer$placeArgs<ExtArgs>
    review?: boolean | ReportUrbanExplorer$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportUrbanExplorer"]>

  export type ReportUrbanExplorerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | ReportUrbanExplorer$placeArgs<ExtArgs>
    review?: boolean | ReportUrbanExplorer$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportUrbanExplorer"]>

  export type ReportUrbanExplorerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | ReportUrbanExplorer$placeArgs<ExtArgs>
    review?: boolean | ReportUrbanExplorer$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportUrbanExplorer"]>

  export type ReportUrbanExplorerSelectScalar = {
    id?: boolean
    placeId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type ReportUrbanExplorerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "placeId" | "reviewId" | "userId" | "reason" | "createdAt", ExtArgs["result"]["reportUrbanExplorer"]>
  export type ReportUrbanExplorerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | ReportUrbanExplorer$placeArgs<ExtArgs>
    review?: boolean | ReportUrbanExplorer$reviewArgs<ExtArgs>
  }
  export type ReportUrbanExplorerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | ReportUrbanExplorer$placeArgs<ExtArgs>
    review?: boolean | ReportUrbanExplorer$reviewArgs<ExtArgs>
  }
  export type ReportUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    place?: boolean | ReportUrbanExplorer$placeArgs<ExtArgs>
    review?: boolean | ReportUrbanExplorer$reviewArgs<ExtArgs>
  }

  export type $ReportUrbanExplorerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportUrbanExplorer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      place: Prisma.$PlaceUrbanExplorerPayload<ExtArgs> | null
      review: Prisma.$ReviewUrbanExplorerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      placeId: string | null
      reviewId: string | null
      userId: string
      reason: string
      createdAt: Date
    }, ExtArgs["result"]["reportUrbanExplorer"]>
    composites: {}
  }

  type ReportUrbanExplorerGetPayload<S extends boolean | null | undefined | ReportUrbanExplorerDefaultArgs> = $Result.GetResult<Prisma.$ReportUrbanExplorerPayload, S>

  type ReportUrbanExplorerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportUrbanExplorerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportUrbanExplorerCountAggregateInputType | true
    }

  export interface ReportUrbanExplorerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportUrbanExplorer'], meta: { name: 'ReportUrbanExplorer' } }
    /**
     * Find zero or one ReportUrbanExplorer that matches the filter.
     * @param {ReportUrbanExplorerFindUniqueArgs} args - Arguments to find a ReportUrbanExplorer
     * @example
     * // Get one ReportUrbanExplorer
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportUrbanExplorerFindUniqueArgs>(args: SelectSubset<T, ReportUrbanExplorerFindUniqueArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportUrbanExplorer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportUrbanExplorerFindUniqueOrThrowArgs} args - Arguments to find a ReportUrbanExplorer
     * @example
     * // Get one ReportUrbanExplorer
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportUrbanExplorerFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportUrbanExplorerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportUrbanExplorer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUrbanExplorerFindFirstArgs} args - Arguments to find a ReportUrbanExplorer
     * @example
     * // Get one ReportUrbanExplorer
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportUrbanExplorerFindFirstArgs>(args?: SelectSubset<T, ReportUrbanExplorerFindFirstArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportUrbanExplorer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUrbanExplorerFindFirstOrThrowArgs} args - Arguments to find a ReportUrbanExplorer
     * @example
     * // Get one ReportUrbanExplorer
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportUrbanExplorerFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportUrbanExplorerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportUrbanExplorers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUrbanExplorerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportUrbanExplorers
     * const reportUrbanExplorers = await prisma.reportUrbanExplorer.findMany()
     * 
     * // Get first 10 ReportUrbanExplorers
     * const reportUrbanExplorers = await prisma.reportUrbanExplorer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportUrbanExplorerWithIdOnly = await prisma.reportUrbanExplorer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportUrbanExplorerFindManyArgs>(args?: SelectSubset<T, ReportUrbanExplorerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportUrbanExplorer.
     * @param {ReportUrbanExplorerCreateArgs} args - Arguments to create a ReportUrbanExplorer.
     * @example
     * // Create one ReportUrbanExplorer
     * const ReportUrbanExplorer = await prisma.reportUrbanExplorer.create({
     *   data: {
     *     // ... data to create a ReportUrbanExplorer
     *   }
     * })
     * 
     */
    create<T extends ReportUrbanExplorerCreateArgs>(args: SelectSubset<T, ReportUrbanExplorerCreateArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportUrbanExplorers.
     * @param {ReportUrbanExplorerCreateManyArgs} args - Arguments to create many ReportUrbanExplorers.
     * @example
     * // Create many ReportUrbanExplorers
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportUrbanExplorerCreateManyArgs>(args?: SelectSubset<T, ReportUrbanExplorerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportUrbanExplorers and returns the data saved in the database.
     * @param {ReportUrbanExplorerCreateManyAndReturnArgs} args - Arguments to create many ReportUrbanExplorers.
     * @example
     * // Create many ReportUrbanExplorers
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportUrbanExplorers and only return the `id`
     * const reportUrbanExplorerWithIdOnly = await prisma.reportUrbanExplorer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportUrbanExplorerCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportUrbanExplorerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportUrbanExplorer.
     * @param {ReportUrbanExplorerDeleteArgs} args - Arguments to delete one ReportUrbanExplorer.
     * @example
     * // Delete one ReportUrbanExplorer
     * const ReportUrbanExplorer = await prisma.reportUrbanExplorer.delete({
     *   where: {
     *     // ... filter to delete one ReportUrbanExplorer
     *   }
     * })
     * 
     */
    delete<T extends ReportUrbanExplorerDeleteArgs>(args: SelectSubset<T, ReportUrbanExplorerDeleteArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportUrbanExplorer.
     * @param {ReportUrbanExplorerUpdateArgs} args - Arguments to update one ReportUrbanExplorer.
     * @example
     * // Update one ReportUrbanExplorer
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUrbanExplorerUpdateArgs>(args: SelectSubset<T, ReportUrbanExplorerUpdateArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportUrbanExplorers.
     * @param {ReportUrbanExplorerDeleteManyArgs} args - Arguments to filter ReportUrbanExplorers to delete.
     * @example
     * // Delete a few ReportUrbanExplorers
     * const { count } = await prisma.reportUrbanExplorer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportUrbanExplorerDeleteManyArgs>(args?: SelectSubset<T, ReportUrbanExplorerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUrbanExplorerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportUrbanExplorers
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUrbanExplorerUpdateManyArgs>(args: SelectSubset<T, ReportUrbanExplorerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportUrbanExplorers and returns the data updated in the database.
     * @param {ReportUrbanExplorerUpdateManyAndReturnArgs} args - Arguments to update many ReportUrbanExplorers.
     * @example
     * // Update many ReportUrbanExplorers
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportUrbanExplorers and only return the `id`
     * const reportUrbanExplorerWithIdOnly = await prisma.reportUrbanExplorer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportUrbanExplorerUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportUrbanExplorerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportUrbanExplorer.
     * @param {ReportUrbanExplorerUpsertArgs} args - Arguments to update or create a ReportUrbanExplorer.
     * @example
     * // Update or create a ReportUrbanExplorer
     * const reportUrbanExplorer = await prisma.reportUrbanExplorer.upsert({
     *   create: {
     *     // ... data to create a ReportUrbanExplorer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportUrbanExplorer we want to update
     *   }
     * })
     */
    upsert<T extends ReportUrbanExplorerUpsertArgs>(args: SelectSubset<T, ReportUrbanExplorerUpsertArgs<ExtArgs>>): Prisma__ReportUrbanExplorerClient<$Result.GetResult<Prisma.$ReportUrbanExplorerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportUrbanExplorers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUrbanExplorerCountArgs} args - Arguments to filter ReportUrbanExplorers to count.
     * @example
     * // Count the number of ReportUrbanExplorers
     * const count = await prisma.reportUrbanExplorer.count({
     *   where: {
     *     // ... the filter for the ReportUrbanExplorers we want to count
     *   }
     * })
    **/
    count<T extends ReportUrbanExplorerCountArgs>(
      args?: Subset<T, ReportUrbanExplorerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportUrbanExplorerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUrbanExplorerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportUrbanExplorerAggregateArgs>(args: Subset<T, ReportUrbanExplorerAggregateArgs>): Prisma.PrismaPromise<GetReportUrbanExplorerAggregateType<T>>

    /**
     * Group by ReportUrbanExplorer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUrbanExplorerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportUrbanExplorerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportUrbanExplorerGroupByArgs['orderBy'] }
        : { orderBy?: ReportUrbanExplorerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportUrbanExplorerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportUrbanExplorerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportUrbanExplorer model
   */
  readonly fields: ReportUrbanExplorerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportUrbanExplorer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportUrbanExplorerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    place<T extends ReportUrbanExplorer$placeArgs<ExtArgs> = {}>(args?: Subset<T, ReportUrbanExplorer$placeArgs<ExtArgs>>): Prisma__PlaceUrbanExplorerClient<$Result.GetResult<Prisma.$PlaceUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    review<T extends ReportUrbanExplorer$reviewArgs<ExtArgs> = {}>(args?: Subset<T, ReportUrbanExplorer$reviewArgs<ExtArgs>>): Prisma__ReviewUrbanExplorerClient<$Result.GetResult<Prisma.$ReviewUrbanExplorerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportUrbanExplorer model
   */ 
  interface ReportUrbanExplorerFieldRefs {
    readonly id: FieldRef<"ReportUrbanExplorer", 'String'>
    readonly placeId: FieldRef<"ReportUrbanExplorer", 'String'>
    readonly reviewId: FieldRef<"ReportUrbanExplorer", 'String'>
    readonly userId: FieldRef<"ReportUrbanExplorer", 'String'>
    readonly reason: FieldRef<"ReportUrbanExplorer", 'String'>
    readonly createdAt: FieldRef<"ReportUrbanExplorer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportUrbanExplorer findUnique
   */
  export type ReportUrbanExplorerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReportUrbanExplorer to fetch.
     */
    where: ReportUrbanExplorerWhereUniqueInput
  }

  /**
   * ReportUrbanExplorer findUniqueOrThrow
   */
  export type ReportUrbanExplorerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReportUrbanExplorer to fetch.
     */
    where: ReportUrbanExplorerWhereUniqueInput
  }

  /**
   * ReportUrbanExplorer findFirst
   */
  export type ReportUrbanExplorerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReportUrbanExplorer to fetch.
     */
    where?: ReportUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportUrbanExplorers to fetch.
     */
    orderBy?: ReportUrbanExplorerOrderByWithRelationInput | ReportUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportUrbanExplorers.
     */
    cursor?: ReportUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportUrbanExplorers.
     */
    distinct?: ReportUrbanExplorerScalarFieldEnum | ReportUrbanExplorerScalarFieldEnum[]
  }

  /**
   * ReportUrbanExplorer findFirstOrThrow
   */
  export type ReportUrbanExplorerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReportUrbanExplorer to fetch.
     */
    where?: ReportUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportUrbanExplorers to fetch.
     */
    orderBy?: ReportUrbanExplorerOrderByWithRelationInput | ReportUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportUrbanExplorers.
     */
    cursor?: ReportUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportUrbanExplorers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportUrbanExplorers.
     */
    distinct?: ReportUrbanExplorerScalarFieldEnum | ReportUrbanExplorerScalarFieldEnum[]
  }

  /**
   * ReportUrbanExplorer findMany
   */
  export type ReportUrbanExplorerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter, which ReportUrbanExplorers to fetch.
     */
    where?: ReportUrbanExplorerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportUrbanExplorers to fetch.
     */
    orderBy?: ReportUrbanExplorerOrderByWithRelationInput | ReportUrbanExplorerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportUrbanExplorers.
     */
    cursor?: ReportUrbanExplorerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportUrbanExplorers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportUrbanExplorers.
     */
    skip?: number
    distinct?: ReportUrbanExplorerScalarFieldEnum | ReportUrbanExplorerScalarFieldEnum[]
  }

  /**
   * ReportUrbanExplorer create
   */
  export type ReportUrbanExplorerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportUrbanExplorer.
     */
    data: XOR<ReportUrbanExplorerCreateInput, ReportUrbanExplorerUncheckedCreateInput>
  }

  /**
   * ReportUrbanExplorer createMany
   */
  export type ReportUrbanExplorerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportUrbanExplorers.
     */
    data: ReportUrbanExplorerCreateManyInput | ReportUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportUrbanExplorer createManyAndReturn
   */
  export type ReportUrbanExplorerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to create many ReportUrbanExplorers.
     */
    data: ReportUrbanExplorerCreateManyInput | ReportUrbanExplorerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportUrbanExplorer update
   */
  export type ReportUrbanExplorerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportUrbanExplorer.
     */
    data: XOR<ReportUrbanExplorerUpdateInput, ReportUrbanExplorerUncheckedUpdateInput>
    /**
     * Choose, which ReportUrbanExplorer to update.
     */
    where: ReportUrbanExplorerWhereUniqueInput
  }

  /**
   * ReportUrbanExplorer updateMany
   */
  export type ReportUrbanExplorerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportUrbanExplorers.
     */
    data: XOR<ReportUrbanExplorerUpdateManyMutationInput, ReportUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which ReportUrbanExplorers to update
     */
    where?: ReportUrbanExplorerWhereInput
    /**
     * Limit how many ReportUrbanExplorers to update.
     */
    limit?: number
  }

  /**
   * ReportUrbanExplorer updateManyAndReturn
   */
  export type ReportUrbanExplorerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * The data used to update ReportUrbanExplorers.
     */
    data: XOR<ReportUrbanExplorerUpdateManyMutationInput, ReportUrbanExplorerUncheckedUpdateManyInput>
    /**
     * Filter which ReportUrbanExplorers to update
     */
    where?: ReportUrbanExplorerWhereInput
    /**
     * Limit how many ReportUrbanExplorers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportUrbanExplorer upsert
   */
  export type ReportUrbanExplorerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportUrbanExplorer to update in case it exists.
     */
    where: ReportUrbanExplorerWhereUniqueInput
    /**
     * In case the ReportUrbanExplorer found by the `where` argument doesn't exist, create a new ReportUrbanExplorer with this data.
     */
    create: XOR<ReportUrbanExplorerCreateInput, ReportUrbanExplorerUncheckedCreateInput>
    /**
     * In case the ReportUrbanExplorer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUrbanExplorerUpdateInput, ReportUrbanExplorerUncheckedUpdateInput>
  }

  /**
   * ReportUrbanExplorer delete
   */
  export type ReportUrbanExplorerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
    /**
     * Filter which ReportUrbanExplorer to delete.
     */
    where: ReportUrbanExplorerWhereUniqueInput
  }

  /**
   * ReportUrbanExplorer deleteMany
   */
  export type ReportUrbanExplorerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportUrbanExplorers to delete
     */
    where?: ReportUrbanExplorerWhereInput
    /**
     * Limit how many ReportUrbanExplorers to delete.
     */
    limit?: number
  }

  /**
   * ReportUrbanExplorer.place
   */
  export type ReportUrbanExplorer$placeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceUrbanExplorer
     */
    select?: PlaceUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaceUrbanExplorer
     */
    omit?: PlaceUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceUrbanExplorerInclude<ExtArgs> | null
    where?: PlaceUrbanExplorerWhereInput
  }

  /**
   * ReportUrbanExplorer.review
   */
  export type ReportUrbanExplorer$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewUrbanExplorer
     */
    select?: ReviewUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewUrbanExplorer
     */
    omit?: ReviewUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewUrbanExplorerInclude<ExtArgs> | null
    where?: ReviewUrbanExplorerWhereInput
  }

  /**
   * ReportUrbanExplorer without action
   */
  export type ReportUrbanExplorerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportUrbanExplorer
     */
    select?: ReportUrbanExplorerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportUrbanExplorer
     */
    omit?: ReportUrbanExplorerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportUrbanExplorerInclude<ExtArgs> | null
  }


  /**
   * Model FoodieFood
   */

  export type AggregateFoodieFood = {
    _count: FoodieFoodCountAggregateOutputType | null
    _min: FoodieFoodMinAggregateOutputType | null
    _max: FoodieFoodMaxAggregateOutputType | null
  }

  export type FoodieFoodMinAggregateOutputType = {
    id: string | null
    name: string | null
    cuisine: string | null
    origin: string | null
    description: string | null
    submittedBy: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type FoodieFoodMaxAggregateOutputType = {
    id: string | null
    name: string | null
    cuisine: string | null
    origin: string | null
    description: string | null
    submittedBy: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type FoodieFoodCountAggregateOutputType = {
    id: number
    name: number
    cuisine: number
    origin: number
    description: number
    submittedBy: number
    validated: number
    createdAt: number
    _all: number
  }


  export type FoodieFoodMinAggregateInputType = {
    id?: true
    name?: true
    cuisine?: true
    origin?: true
    description?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
  }

  export type FoodieFoodMaxAggregateInputType = {
    id?: true
    name?: true
    cuisine?: true
    origin?: true
    description?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
  }

  export type FoodieFoodCountAggregateInputType = {
    id?: true
    name?: true
    cuisine?: true
    origin?: true
    description?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type FoodieFoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieFood to aggregate.
     */
    where?: FoodieFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieFoods to fetch.
     */
    orderBy?: FoodieFoodOrderByWithRelationInput | FoodieFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodieFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodieFoods
    **/
    _count?: true | FoodieFoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodieFoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodieFoodMaxAggregateInputType
  }

  export type GetFoodieFoodAggregateType<T extends FoodieFoodAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodieFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodieFood[P]>
      : GetScalarType<T[P], AggregateFoodieFood[P]>
  }




  export type FoodieFoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieFoodWhereInput
    orderBy?: FoodieFoodOrderByWithAggregationInput | FoodieFoodOrderByWithAggregationInput[]
    by: FoodieFoodScalarFieldEnum[] | FoodieFoodScalarFieldEnum
    having?: FoodieFoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodieFoodCountAggregateInputType | true
    _min?: FoodieFoodMinAggregateInputType
    _max?: FoodieFoodMaxAggregateInputType
  }

  export type FoodieFoodGroupByOutputType = {
    id: string
    name: string
    cuisine: string
    origin: string
    description: string
    submittedBy: string
    validated: boolean
    createdAt: Date
    _count: FoodieFoodCountAggregateOutputType | null
    _min: FoodieFoodMinAggregateOutputType | null
    _max: FoodieFoodMaxAggregateOutputType | null
  }

  type GetFoodieFoodGroupByPayload<T extends FoodieFoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodieFoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodieFoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodieFoodGroupByOutputType[P]>
            : GetScalarType<T[P], FoodieFoodGroupByOutputType[P]>
        }
      >
    >


  export type FoodieFoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cuisine?: boolean
    origin?: boolean
    description?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    locations?: boolean | FoodieFood$locationsArgs<ExtArgs>
    reviews?: boolean | FoodieFood$reviewsArgs<ExtArgs>
    likes?: boolean | FoodieFood$likesArgs<ExtArgs>
    _count?: boolean | FoodieFoodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieFood"]>

  export type FoodieFoodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cuisine?: boolean
    origin?: boolean
    description?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieFood"]>

  export type FoodieFoodSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cuisine?: boolean
    origin?: boolean
    description?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieFood"]>

  export type FoodieFoodSelectScalar = {
    id?: boolean
    name?: boolean
    cuisine?: boolean
    origin?: boolean
    description?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type FoodieFoodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "cuisine" | "origin" | "description" | "submittedBy" | "validated" | "createdAt", ExtArgs["result"]["foodieFood"]>
  export type FoodieFoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    locations?: boolean | FoodieFood$locationsArgs<ExtArgs>
    reviews?: boolean | FoodieFood$reviewsArgs<ExtArgs>
    likes?: boolean | FoodieFood$likesArgs<ExtArgs>
    _count?: boolean | FoodieFoodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodieFoodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FoodieFoodIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FoodieFoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodieFood"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      locations: Prisma.$FoodieLocationPayload<ExtArgs>[]
      reviews: Prisma.$FoodieReviewPayload<ExtArgs>[]
      likes: Prisma.$FoodieLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      cuisine: string
      origin: string
      description: string
      submittedBy: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["foodieFood"]>
    composites: {}
  }

  type FoodieFoodGetPayload<S extends boolean | null | undefined | FoodieFoodDefaultArgs> = $Result.GetResult<Prisma.$FoodieFoodPayload, S>

  type FoodieFoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodieFoodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodieFoodCountAggregateInputType | true
    }

  export interface FoodieFoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodieFood'], meta: { name: 'FoodieFood' } }
    /**
     * Find zero or one FoodieFood that matches the filter.
     * @param {FoodieFoodFindUniqueArgs} args - Arguments to find a FoodieFood
     * @example
     * // Get one FoodieFood
     * const foodieFood = await prisma.foodieFood.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodieFoodFindUniqueArgs>(args: SelectSubset<T, FoodieFoodFindUniqueArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodieFood that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodieFoodFindUniqueOrThrowArgs} args - Arguments to find a FoodieFood
     * @example
     * // Get one FoodieFood
     * const foodieFood = await prisma.foodieFood.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodieFoodFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodieFoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieFood that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieFoodFindFirstArgs} args - Arguments to find a FoodieFood
     * @example
     * // Get one FoodieFood
     * const foodieFood = await prisma.foodieFood.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodieFoodFindFirstArgs>(args?: SelectSubset<T, FoodieFoodFindFirstArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieFood that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieFoodFindFirstOrThrowArgs} args - Arguments to find a FoodieFood
     * @example
     * // Get one FoodieFood
     * const foodieFood = await prisma.foodieFood.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodieFoodFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodieFoodFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodieFoods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieFoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodieFoods
     * const foodieFoods = await prisma.foodieFood.findMany()
     * 
     * // Get first 10 FoodieFoods
     * const foodieFoods = await prisma.foodieFood.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodieFoodWithIdOnly = await prisma.foodieFood.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodieFoodFindManyArgs>(args?: SelectSubset<T, FoodieFoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodieFood.
     * @param {FoodieFoodCreateArgs} args - Arguments to create a FoodieFood.
     * @example
     * // Create one FoodieFood
     * const FoodieFood = await prisma.foodieFood.create({
     *   data: {
     *     // ... data to create a FoodieFood
     *   }
     * })
     * 
     */
    create<T extends FoodieFoodCreateArgs>(args: SelectSubset<T, FoodieFoodCreateArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodieFoods.
     * @param {FoodieFoodCreateManyArgs} args - Arguments to create many FoodieFoods.
     * @example
     * // Create many FoodieFoods
     * const foodieFood = await prisma.foodieFood.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodieFoodCreateManyArgs>(args?: SelectSubset<T, FoodieFoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodieFoods and returns the data saved in the database.
     * @param {FoodieFoodCreateManyAndReturnArgs} args - Arguments to create many FoodieFoods.
     * @example
     * // Create many FoodieFoods
     * const foodieFood = await prisma.foodieFood.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodieFoods and only return the `id`
     * const foodieFoodWithIdOnly = await prisma.foodieFood.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodieFoodCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodieFoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodieFood.
     * @param {FoodieFoodDeleteArgs} args - Arguments to delete one FoodieFood.
     * @example
     * // Delete one FoodieFood
     * const FoodieFood = await prisma.foodieFood.delete({
     *   where: {
     *     // ... filter to delete one FoodieFood
     *   }
     * })
     * 
     */
    delete<T extends FoodieFoodDeleteArgs>(args: SelectSubset<T, FoodieFoodDeleteArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodieFood.
     * @param {FoodieFoodUpdateArgs} args - Arguments to update one FoodieFood.
     * @example
     * // Update one FoodieFood
     * const foodieFood = await prisma.foodieFood.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodieFoodUpdateArgs>(args: SelectSubset<T, FoodieFoodUpdateArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodieFoods.
     * @param {FoodieFoodDeleteManyArgs} args - Arguments to filter FoodieFoods to delete.
     * @example
     * // Delete a few FoodieFoods
     * const { count } = await prisma.foodieFood.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodieFoodDeleteManyArgs>(args?: SelectSubset<T, FoodieFoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieFoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieFoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodieFoods
     * const foodieFood = await prisma.foodieFood.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodieFoodUpdateManyArgs>(args: SelectSubset<T, FoodieFoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieFoods and returns the data updated in the database.
     * @param {FoodieFoodUpdateManyAndReturnArgs} args - Arguments to update many FoodieFoods.
     * @example
     * // Update many FoodieFoods
     * const foodieFood = await prisma.foodieFood.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodieFoods and only return the `id`
     * const foodieFoodWithIdOnly = await prisma.foodieFood.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodieFoodUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodieFoodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodieFood.
     * @param {FoodieFoodUpsertArgs} args - Arguments to update or create a FoodieFood.
     * @example
     * // Update or create a FoodieFood
     * const foodieFood = await prisma.foodieFood.upsert({
     *   create: {
     *     // ... data to create a FoodieFood
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodieFood we want to update
     *   }
     * })
     */
    upsert<T extends FoodieFoodUpsertArgs>(args: SelectSubset<T, FoodieFoodUpsertArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodieFoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieFoodCountArgs} args - Arguments to filter FoodieFoods to count.
     * @example
     * // Count the number of FoodieFoods
     * const count = await prisma.foodieFood.count({
     *   where: {
     *     // ... the filter for the FoodieFoods we want to count
     *   }
     * })
    **/
    count<T extends FoodieFoodCountArgs>(
      args?: Subset<T, FoodieFoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodieFoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodieFood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieFoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodieFoodAggregateArgs>(args: Subset<T, FoodieFoodAggregateArgs>): Prisma.PrismaPromise<GetFoodieFoodAggregateType<T>>

    /**
     * Group by FoodieFood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieFoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodieFoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodieFoodGroupByArgs['orderBy'] }
        : { orderBy?: FoodieFoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodieFoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodieFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodieFood model
   */
  readonly fields: FoodieFoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodieFood.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodieFoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    locations<T extends FoodieFood$locationsArgs<ExtArgs> = {}>(args?: Subset<T, FoodieFood$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends FoodieFood$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, FoodieFood$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends FoodieFood$likesArgs<ExtArgs> = {}>(args?: Subset<T, FoodieFood$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodieFood model
   */ 
  interface FoodieFoodFieldRefs {
    readonly id: FieldRef<"FoodieFood", 'String'>
    readonly name: FieldRef<"FoodieFood", 'String'>
    readonly cuisine: FieldRef<"FoodieFood", 'String'>
    readonly origin: FieldRef<"FoodieFood", 'String'>
    readonly description: FieldRef<"FoodieFood", 'String'>
    readonly submittedBy: FieldRef<"FoodieFood", 'String'>
    readonly validated: FieldRef<"FoodieFood", 'Boolean'>
    readonly createdAt: FieldRef<"FoodieFood", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodieFood findUnique
   */
  export type FoodieFoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * Filter, which FoodieFood to fetch.
     */
    where: FoodieFoodWhereUniqueInput
  }

  /**
   * FoodieFood findUniqueOrThrow
   */
  export type FoodieFoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * Filter, which FoodieFood to fetch.
     */
    where: FoodieFoodWhereUniqueInput
  }

  /**
   * FoodieFood findFirst
   */
  export type FoodieFoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * Filter, which FoodieFood to fetch.
     */
    where?: FoodieFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieFoods to fetch.
     */
    orderBy?: FoodieFoodOrderByWithRelationInput | FoodieFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieFoods.
     */
    cursor?: FoodieFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieFoods.
     */
    distinct?: FoodieFoodScalarFieldEnum | FoodieFoodScalarFieldEnum[]
  }

  /**
   * FoodieFood findFirstOrThrow
   */
  export type FoodieFoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * Filter, which FoodieFood to fetch.
     */
    where?: FoodieFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieFoods to fetch.
     */
    orderBy?: FoodieFoodOrderByWithRelationInput | FoodieFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieFoods.
     */
    cursor?: FoodieFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieFoods.
     */
    distinct?: FoodieFoodScalarFieldEnum | FoodieFoodScalarFieldEnum[]
  }

  /**
   * FoodieFood findMany
   */
  export type FoodieFoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * Filter, which FoodieFoods to fetch.
     */
    where?: FoodieFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieFoods to fetch.
     */
    orderBy?: FoodieFoodOrderByWithRelationInput | FoodieFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodieFoods.
     */
    cursor?: FoodieFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieFoods.
     */
    skip?: number
    distinct?: FoodieFoodScalarFieldEnum | FoodieFoodScalarFieldEnum[]
  }

  /**
   * FoodieFood create
   */
  export type FoodieFoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodieFood.
     */
    data: XOR<FoodieFoodCreateInput, FoodieFoodUncheckedCreateInput>
  }

  /**
   * FoodieFood createMany
   */
  export type FoodieFoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodieFoods.
     */
    data: FoodieFoodCreateManyInput | FoodieFoodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodieFood createManyAndReturn
   */
  export type FoodieFoodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * The data used to create many FoodieFoods.
     */
    data: FoodieFoodCreateManyInput | FoodieFoodCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieFood update
   */
  export type FoodieFoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodieFood.
     */
    data: XOR<FoodieFoodUpdateInput, FoodieFoodUncheckedUpdateInput>
    /**
     * Choose, which FoodieFood to update.
     */
    where: FoodieFoodWhereUniqueInput
  }

  /**
   * FoodieFood updateMany
   */
  export type FoodieFoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodieFoods.
     */
    data: XOR<FoodieFoodUpdateManyMutationInput, FoodieFoodUncheckedUpdateManyInput>
    /**
     * Filter which FoodieFoods to update
     */
    where?: FoodieFoodWhereInput
    /**
     * Limit how many FoodieFoods to update.
     */
    limit?: number
  }

  /**
   * FoodieFood updateManyAndReturn
   */
  export type FoodieFoodUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * The data used to update FoodieFoods.
     */
    data: XOR<FoodieFoodUpdateManyMutationInput, FoodieFoodUncheckedUpdateManyInput>
    /**
     * Filter which FoodieFoods to update
     */
    where?: FoodieFoodWhereInput
    /**
     * Limit how many FoodieFoods to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieFood upsert
   */
  export type FoodieFoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodieFood to update in case it exists.
     */
    where: FoodieFoodWhereUniqueInput
    /**
     * In case the FoodieFood found by the `where` argument doesn't exist, create a new FoodieFood with this data.
     */
    create: XOR<FoodieFoodCreateInput, FoodieFoodUncheckedCreateInput>
    /**
     * In case the FoodieFood was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodieFoodUpdateInput, FoodieFoodUncheckedUpdateInput>
  }

  /**
   * FoodieFood delete
   */
  export type FoodieFoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
    /**
     * Filter which FoodieFood to delete.
     */
    where: FoodieFoodWhereUniqueInput
  }

  /**
   * FoodieFood deleteMany
   */
  export type FoodieFoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieFoods to delete
     */
    where?: FoodieFoodWhereInput
    /**
     * Limit how many FoodieFoods to delete.
     */
    limit?: number
  }

  /**
   * FoodieFood.locations
   */
  export type FoodieFood$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    where?: FoodieLocationWhereInput
    orderBy?: FoodieLocationOrderByWithRelationInput | FoodieLocationOrderByWithRelationInput[]
    cursor?: FoodieLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodieLocationScalarFieldEnum | FoodieLocationScalarFieldEnum[]
  }

  /**
   * FoodieFood.reviews
   */
  export type FoodieFood$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    where?: FoodieReviewWhereInput
    orderBy?: FoodieReviewOrderByWithRelationInput | FoodieReviewOrderByWithRelationInput[]
    cursor?: FoodieReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodieReviewScalarFieldEnum | FoodieReviewScalarFieldEnum[]
  }

  /**
   * FoodieFood.likes
   */
  export type FoodieFood$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    where?: FoodieLikeWhereInput
    orderBy?: FoodieLikeOrderByWithRelationInput | FoodieLikeOrderByWithRelationInput[]
    cursor?: FoodieLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodieLikeScalarFieldEnum | FoodieLikeScalarFieldEnum[]
  }

  /**
   * FoodieFood without action
   */
  export type FoodieFoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieFood
     */
    select?: FoodieFoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieFood
     */
    omit?: FoodieFoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieFoodInclude<ExtArgs> | null
  }


  /**
   * Model FoodieLocation
   */

  export type AggregateFoodieLocation = {
    _count: FoodieLocationCountAggregateOutputType | null
    _min: FoodieLocationMinAggregateOutputType | null
    _max: FoodieLocationMaxAggregateOutputType | null
  }

  export type FoodieLocationMinAggregateOutputType = {
    id: string | null
    foodId: string | null
    locationName: string | null
    address: string | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type FoodieLocationMaxAggregateOutputType = {
    id: string | null
    foodId: string | null
    locationName: string | null
    address: string | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type FoodieLocationCountAggregateOutputType = {
    id: number
    foodId: number
    locationName: number
    address: number
    submittedBy: number
    createdAt: number
    _all: number
  }


  export type FoodieLocationMinAggregateInputType = {
    id?: true
    foodId?: true
    locationName?: true
    address?: true
    submittedBy?: true
    createdAt?: true
  }

  export type FoodieLocationMaxAggregateInputType = {
    id?: true
    foodId?: true
    locationName?: true
    address?: true
    submittedBy?: true
    createdAt?: true
  }

  export type FoodieLocationCountAggregateInputType = {
    id?: true
    foodId?: true
    locationName?: true
    address?: true
    submittedBy?: true
    createdAt?: true
    _all?: true
  }

  export type FoodieLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieLocation to aggregate.
     */
    where?: FoodieLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLocations to fetch.
     */
    orderBy?: FoodieLocationOrderByWithRelationInput | FoodieLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodieLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodieLocations
    **/
    _count?: true | FoodieLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodieLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodieLocationMaxAggregateInputType
  }

  export type GetFoodieLocationAggregateType<T extends FoodieLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodieLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodieLocation[P]>
      : GetScalarType<T[P], AggregateFoodieLocation[P]>
  }




  export type FoodieLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieLocationWhereInput
    orderBy?: FoodieLocationOrderByWithAggregationInput | FoodieLocationOrderByWithAggregationInput[]
    by: FoodieLocationScalarFieldEnum[] | FoodieLocationScalarFieldEnum
    having?: FoodieLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodieLocationCountAggregateInputType | true
    _min?: FoodieLocationMinAggregateInputType
    _max?: FoodieLocationMaxAggregateInputType
  }

  export type FoodieLocationGroupByOutputType = {
    id: string
    foodId: string
    locationName: string
    address: string
    submittedBy: string
    createdAt: Date
    _count: FoodieLocationCountAggregateOutputType | null
    _min: FoodieLocationMinAggregateOutputType | null
    _max: FoodieLocationMaxAggregateOutputType | null
  }

  type GetFoodieLocationGroupByPayload<T extends FoodieLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodieLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodieLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodieLocationGroupByOutputType[P]>
            : GetScalarType<T[P], FoodieLocationGroupByOutputType[P]>
        }
      >
    >


  export type FoodieLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    locationName?: boolean
    address?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieLocation"]>

  export type FoodieLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    locationName?: boolean
    address?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieLocation"]>

  export type FoodieLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    locationName?: boolean
    address?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieLocation"]>

  export type FoodieLocationSelectScalar = {
    id?: boolean
    foodId?: boolean
    locationName?: boolean
    address?: boolean
    submittedBy?: boolean
    createdAt?: boolean
  }

  export type FoodieLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "foodId" | "locationName" | "address" | "submittedBy" | "createdAt", ExtArgs["result"]["foodieLocation"]>
  export type FoodieLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }
  export type FoodieLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }
  export type FoodieLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }

  export type $FoodieLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodieLocation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      food: Prisma.$FoodieFoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      foodId: string
      locationName: string
      address: string
      submittedBy: string
      createdAt: Date
    }, ExtArgs["result"]["foodieLocation"]>
    composites: {}
  }

  type FoodieLocationGetPayload<S extends boolean | null | undefined | FoodieLocationDefaultArgs> = $Result.GetResult<Prisma.$FoodieLocationPayload, S>

  type FoodieLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodieLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodieLocationCountAggregateInputType | true
    }

  export interface FoodieLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodieLocation'], meta: { name: 'FoodieLocation' } }
    /**
     * Find zero or one FoodieLocation that matches the filter.
     * @param {FoodieLocationFindUniqueArgs} args - Arguments to find a FoodieLocation
     * @example
     * // Get one FoodieLocation
     * const foodieLocation = await prisma.foodieLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodieLocationFindUniqueArgs>(args: SelectSubset<T, FoodieLocationFindUniqueArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodieLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodieLocationFindUniqueOrThrowArgs} args - Arguments to find a FoodieLocation
     * @example
     * // Get one FoodieLocation
     * const foodieLocation = await prisma.foodieLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodieLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodieLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLocationFindFirstArgs} args - Arguments to find a FoodieLocation
     * @example
     * // Get one FoodieLocation
     * const foodieLocation = await prisma.foodieLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodieLocationFindFirstArgs>(args?: SelectSubset<T, FoodieLocationFindFirstArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLocationFindFirstOrThrowArgs} args - Arguments to find a FoodieLocation
     * @example
     * // Get one FoodieLocation
     * const foodieLocation = await prisma.foodieLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodieLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodieLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodieLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodieLocations
     * const foodieLocations = await prisma.foodieLocation.findMany()
     * 
     * // Get first 10 FoodieLocations
     * const foodieLocations = await prisma.foodieLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodieLocationWithIdOnly = await prisma.foodieLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodieLocationFindManyArgs>(args?: SelectSubset<T, FoodieLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodieLocation.
     * @param {FoodieLocationCreateArgs} args - Arguments to create a FoodieLocation.
     * @example
     * // Create one FoodieLocation
     * const FoodieLocation = await prisma.foodieLocation.create({
     *   data: {
     *     // ... data to create a FoodieLocation
     *   }
     * })
     * 
     */
    create<T extends FoodieLocationCreateArgs>(args: SelectSubset<T, FoodieLocationCreateArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodieLocations.
     * @param {FoodieLocationCreateManyArgs} args - Arguments to create many FoodieLocations.
     * @example
     * // Create many FoodieLocations
     * const foodieLocation = await prisma.foodieLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodieLocationCreateManyArgs>(args?: SelectSubset<T, FoodieLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodieLocations and returns the data saved in the database.
     * @param {FoodieLocationCreateManyAndReturnArgs} args - Arguments to create many FoodieLocations.
     * @example
     * // Create many FoodieLocations
     * const foodieLocation = await prisma.foodieLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodieLocations and only return the `id`
     * const foodieLocationWithIdOnly = await prisma.foodieLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodieLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodieLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodieLocation.
     * @param {FoodieLocationDeleteArgs} args - Arguments to delete one FoodieLocation.
     * @example
     * // Delete one FoodieLocation
     * const FoodieLocation = await prisma.foodieLocation.delete({
     *   where: {
     *     // ... filter to delete one FoodieLocation
     *   }
     * })
     * 
     */
    delete<T extends FoodieLocationDeleteArgs>(args: SelectSubset<T, FoodieLocationDeleteArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodieLocation.
     * @param {FoodieLocationUpdateArgs} args - Arguments to update one FoodieLocation.
     * @example
     * // Update one FoodieLocation
     * const foodieLocation = await prisma.foodieLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodieLocationUpdateArgs>(args: SelectSubset<T, FoodieLocationUpdateArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodieLocations.
     * @param {FoodieLocationDeleteManyArgs} args - Arguments to filter FoodieLocations to delete.
     * @example
     * // Delete a few FoodieLocations
     * const { count } = await prisma.foodieLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodieLocationDeleteManyArgs>(args?: SelectSubset<T, FoodieLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodieLocations
     * const foodieLocation = await prisma.foodieLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodieLocationUpdateManyArgs>(args: SelectSubset<T, FoodieLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieLocations and returns the data updated in the database.
     * @param {FoodieLocationUpdateManyAndReturnArgs} args - Arguments to update many FoodieLocations.
     * @example
     * // Update many FoodieLocations
     * const foodieLocation = await prisma.foodieLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodieLocations and only return the `id`
     * const foodieLocationWithIdOnly = await prisma.foodieLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodieLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodieLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodieLocation.
     * @param {FoodieLocationUpsertArgs} args - Arguments to update or create a FoodieLocation.
     * @example
     * // Update or create a FoodieLocation
     * const foodieLocation = await prisma.foodieLocation.upsert({
     *   create: {
     *     // ... data to create a FoodieLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodieLocation we want to update
     *   }
     * })
     */
    upsert<T extends FoodieLocationUpsertArgs>(args: SelectSubset<T, FoodieLocationUpsertArgs<ExtArgs>>): Prisma__FoodieLocationClient<$Result.GetResult<Prisma.$FoodieLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodieLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLocationCountArgs} args - Arguments to filter FoodieLocations to count.
     * @example
     * // Count the number of FoodieLocations
     * const count = await prisma.foodieLocation.count({
     *   where: {
     *     // ... the filter for the FoodieLocations we want to count
     *   }
     * })
    **/
    count<T extends FoodieLocationCountArgs>(
      args?: Subset<T, FoodieLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodieLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodieLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodieLocationAggregateArgs>(args: Subset<T, FoodieLocationAggregateArgs>): Prisma.PrismaPromise<GetFoodieLocationAggregateType<T>>

    /**
     * Group by FoodieLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodieLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodieLocationGroupByArgs['orderBy'] }
        : { orderBy?: FoodieLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodieLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodieLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodieLocation model
   */
  readonly fields: FoodieLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodieLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodieLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    food<T extends FoodieFoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodieFoodDefaultArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodieLocation model
   */ 
  interface FoodieLocationFieldRefs {
    readonly id: FieldRef<"FoodieLocation", 'String'>
    readonly foodId: FieldRef<"FoodieLocation", 'String'>
    readonly locationName: FieldRef<"FoodieLocation", 'String'>
    readonly address: FieldRef<"FoodieLocation", 'String'>
    readonly submittedBy: FieldRef<"FoodieLocation", 'String'>
    readonly createdAt: FieldRef<"FoodieLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodieLocation findUnique
   */
  export type FoodieLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLocation to fetch.
     */
    where: FoodieLocationWhereUniqueInput
  }

  /**
   * FoodieLocation findUniqueOrThrow
   */
  export type FoodieLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLocation to fetch.
     */
    where: FoodieLocationWhereUniqueInput
  }

  /**
   * FoodieLocation findFirst
   */
  export type FoodieLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLocation to fetch.
     */
    where?: FoodieLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLocations to fetch.
     */
    orderBy?: FoodieLocationOrderByWithRelationInput | FoodieLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieLocations.
     */
    cursor?: FoodieLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieLocations.
     */
    distinct?: FoodieLocationScalarFieldEnum | FoodieLocationScalarFieldEnum[]
  }

  /**
   * FoodieLocation findFirstOrThrow
   */
  export type FoodieLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLocation to fetch.
     */
    where?: FoodieLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLocations to fetch.
     */
    orderBy?: FoodieLocationOrderByWithRelationInput | FoodieLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieLocations.
     */
    cursor?: FoodieLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieLocations.
     */
    distinct?: FoodieLocationScalarFieldEnum | FoodieLocationScalarFieldEnum[]
  }

  /**
   * FoodieLocation findMany
   */
  export type FoodieLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLocations to fetch.
     */
    where?: FoodieLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLocations to fetch.
     */
    orderBy?: FoodieLocationOrderByWithRelationInput | FoodieLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodieLocations.
     */
    cursor?: FoodieLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLocations.
     */
    skip?: number
    distinct?: FoodieLocationScalarFieldEnum | FoodieLocationScalarFieldEnum[]
  }

  /**
   * FoodieLocation create
   */
  export type FoodieLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodieLocation.
     */
    data: XOR<FoodieLocationCreateInput, FoodieLocationUncheckedCreateInput>
  }

  /**
   * FoodieLocation createMany
   */
  export type FoodieLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodieLocations.
     */
    data: FoodieLocationCreateManyInput | FoodieLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodieLocation createManyAndReturn
   */
  export type FoodieLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * The data used to create many FoodieLocations.
     */
    data: FoodieLocationCreateManyInput | FoodieLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieLocation update
   */
  export type FoodieLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodieLocation.
     */
    data: XOR<FoodieLocationUpdateInput, FoodieLocationUncheckedUpdateInput>
    /**
     * Choose, which FoodieLocation to update.
     */
    where: FoodieLocationWhereUniqueInput
  }

  /**
   * FoodieLocation updateMany
   */
  export type FoodieLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodieLocations.
     */
    data: XOR<FoodieLocationUpdateManyMutationInput, FoodieLocationUncheckedUpdateManyInput>
    /**
     * Filter which FoodieLocations to update
     */
    where?: FoodieLocationWhereInput
    /**
     * Limit how many FoodieLocations to update.
     */
    limit?: number
  }

  /**
   * FoodieLocation updateManyAndReturn
   */
  export type FoodieLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * The data used to update FoodieLocations.
     */
    data: XOR<FoodieLocationUpdateManyMutationInput, FoodieLocationUncheckedUpdateManyInput>
    /**
     * Filter which FoodieLocations to update
     */
    where?: FoodieLocationWhereInput
    /**
     * Limit how many FoodieLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieLocation upsert
   */
  export type FoodieLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodieLocation to update in case it exists.
     */
    where: FoodieLocationWhereUniqueInput
    /**
     * In case the FoodieLocation found by the `where` argument doesn't exist, create a new FoodieLocation with this data.
     */
    create: XOR<FoodieLocationCreateInput, FoodieLocationUncheckedCreateInput>
    /**
     * In case the FoodieLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodieLocationUpdateInput, FoodieLocationUncheckedUpdateInput>
  }

  /**
   * FoodieLocation delete
   */
  export type FoodieLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
    /**
     * Filter which FoodieLocation to delete.
     */
    where: FoodieLocationWhereUniqueInput
  }

  /**
   * FoodieLocation deleteMany
   */
  export type FoodieLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieLocations to delete
     */
    where?: FoodieLocationWhereInput
    /**
     * Limit how many FoodieLocations to delete.
     */
    limit?: number
  }

  /**
   * FoodieLocation without action
   */
  export type FoodieLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLocation
     */
    select?: FoodieLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLocation
     */
    omit?: FoodieLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLocationInclude<ExtArgs> | null
  }


  /**
   * Model FoodieReview
   */

  export type AggregateFoodieReview = {
    _count: FoodieReviewCountAggregateOutputType | null
    _avg: FoodieReviewAvgAggregateOutputType | null
    _sum: FoodieReviewSumAggregateOutputType | null
    _min: FoodieReviewMinAggregateOutputType | null
    _max: FoodieReviewMaxAggregateOutputType | null
  }

  export type FoodieReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type FoodieReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type FoodieReviewMinAggregateOutputType = {
    id: string | null
    foodId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type FoodieReviewMaxAggregateOutputType = {
    id: string | null
    foodId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type FoodieReviewCountAggregateOutputType = {
    id: number
    foodId: number
    userId: number
    rating: number
    comment: number
    validated: number
    createdAt: number
    _all: number
  }


  export type FoodieReviewAvgAggregateInputType = {
    rating?: true
  }

  export type FoodieReviewSumAggregateInputType = {
    rating?: true
  }

  export type FoodieReviewMinAggregateInputType = {
    id?: true
    foodId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
  }

  export type FoodieReviewMaxAggregateInputType = {
    id?: true
    foodId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
  }

  export type FoodieReviewCountAggregateInputType = {
    id?: true
    foodId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type FoodieReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieReview to aggregate.
     */
    where?: FoodieReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieReviews to fetch.
     */
    orderBy?: FoodieReviewOrderByWithRelationInput | FoodieReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodieReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodieReviews
    **/
    _count?: true | FoodieReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodieReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodieReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodieReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodieReviewMaxAggregateInputType
  }

  export type GetFoodieReviewAggregateType<T extends FoodieReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodieReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodieReview[P]>
      : GetScalarType<T[P], AggregateFoodieReview[P]>
  }




  export type FoodieReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieReviewWhereInput
    orderBy?: FoodieReviewOrderByWithAggregationInput | FoodieReviewOrderByWithAggregationInput[]
    by: FoodieReviewScalarFieldEnum[] | FoodieReviewScalarFieldEnum
    having?: FoodieReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodieReviewCountAggregateInputType | true
    _avg?: FoodieReviewAvgAggregateInputType
    _sum?: FoodieReviewSumAggregateInputType
    _min?: FoodieReviewMinAggregateInputType
    _max?: FoodieReviewMaxAggregateInputType
  }

  export type FoodieReviewGroupByOutputType = {
    id: string
    foodId: string
    userId: string
    rating: number
    comment: string
    validated: boolean
    createdAt: Date
    _count: FoodieReviewCountAggregateOutputType | null
    _avg: FoodieReviewAvgAggregateOutputType | null
    _sum: FoodieReviewSumAggregateOutputType | null
    _min: FoodieReviewMinAggregateOutputType | null
    _max: FoodieReviewMaxAggregateOutputType | null
  }

  type GetFoodieReviewGroupByPayload<T extends FoodieReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodieReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodieReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodieReviewGroupByOutputType[P]>
            : GetScalarType<T[P], FoodieReviewGroupByOutputType[P]>
        }
      >
    >


  export type FoodieReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieReview"]>

  export type FoodieReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieReview"]>

  export type FoodieReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieReview"]>

  export type FoodieReviewSelectScalar = {
    id?: boolean
    foodId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type FoodieReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "foodId" | "userId" | "rating" | "comment" | "validated" | "createdAt", ExtArgs["result"]["foodieReview"]>
  export type FoodieReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }
  export type FoodieReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }
  export type FoodieReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }

  export type $FoodieReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodieReview"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      food: Prisma.$FoodieFoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      foodId: string
      userId: string
      rating: number
      comment: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["foodieReview"]>
    composites: {}
  }

  type FoodieReviewGetPayload<S extends boolean | null | undefined | FoodieReviewDefaultArgs> = $Result.GetResult<Prisma.$FoodieReviewPayload, S>

  type FoodieReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodieReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodieReviewCountAggregateInputType | true
    }

  export interface FoodieReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodieReview'], meta: { name: 'FoodieReview' } }
    /**
     * Find zero or one FoodieReview that matches the filter.
     * @param {FoodieReviewFindUniqueArgs} args - Arguments to find a FoodieReview
     * @example
     * // Get one FoodieReview
     * const foodieReview = await prisma.foodieReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodieReviewFindUniqueArgs>(args: SelectSubset<T, FoodieReviewFindUniqueArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodieReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodieReviewFindUniqueOrThrowArgs} args - Arguments to find a FoodieReview
     * @example
     * // Get one FoodieReview
     * const foodieReview = await prisma.foodieReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodieReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodieReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieReviewFindFirstArgs} args - Arguments to find a FoodieReview
     * @example
     * // Get one FoodieReview
     * const foodieReview = await prisma.foodieReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodieReviewFindFirstArgs>(args?: SelectSubset<T, FoodieReviewFindFirstArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieReviewFindFirstOrThrowArgs} args - Arguments to find a FoodieReview
     * @example
     * // Get one FoodieReview
     * const foodieReview = await prisma.foodieReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodieReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodieReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodieReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodieReviews
     * const foodieReviews = await prisma.foodieReview.findMany()
     * 
     * // Get first 10 FoodieReviews
     * const foodieReviews = await prisma.foodieReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodieReviewWithIdOnly = await prisma.foodieReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodieReviewFindManyArgs>(args?: SelectSubset<T, FoodieReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodieReview.
     * @param {FoodieReviewCreateArgs} args - Arguments to create a FoodieReview.
     * @example
     * // Create one FoodieReview
     * const FoodieReview = await prisma.foodieReview.create({
     *   data: {
     *     // ... data to create a FoodieReview
     *   }
     * })
     * 
     */
    create<T extends FoodieReviewCreateArgs>(args: SelectSubset<T, FoodieReviewCreateArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodieReviews.
     * @param {FoodieReviewCreateManyArgs} args - Arguments to create many FoodieReviews.
     * @example
     * // Create many FoodieReviews
     * const foodieReview = await prisma.foodieReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodieReviewCreateManyArgs>(args?: SelectSubset<T, FoodieReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodieReviews and returns the data saved in the database.
     * @param {FoodieReviewCreateManyAndReturnArgs} args - Arguments to create many FoodieReviews.
     * @example
     * // Create many FoodieReviews
     * const foodieReview = await prisma.foodieReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodieReviews and only return the `id`
     * const foodieReviewWithIdOnly = await prisma.foodieReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodieReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodieReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodieReview.
     * @param {FoodieReviewDeleteArgs} args - Arguments to delete one FoodieReview.
     * @example
     * // Delete one FoodieReview
     * const FoodieReview = await prisma.foodieReview.delete({
     *   where: {
     *     // ... filter to delete one FoodieReview
     *   }
     * })
     * 
     */
    delete<T extends FoodieReviewDeleteArgs>(args: SelectSubset<T, FoodieReviewDeleteArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodieReview.
     * @param {FoodieReviewUpdateArgs} args - Arguments to update one FoodieReview.
     * @example
     * // Update one FoodieReview
     * const foodieReview = await prisma.foodieReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodieReviewUpdateArgs>(args: SelectSubset<T, FoodieReviewUpdateArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodieReviews.
     * @param {FoodieReviewDeleteManyArgs} args - Arguments to filter FoodieReviews to delete.
     * @example
     * // Delete a few FoodieReviews
     * const { count } = await prisma.foodieReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodieReviewDeleteManyArgs>(args?: SelectSubset<T, FoodieReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodieReviews
     * const foodieReview = await prisma.foodieReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodieReviewUpdateManyArgs>(args: SelectSubset<T, FoodieReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieReviews and returns the data updated in the database.
     * @param {FoodieReviewUpdateManyAndReturnArgs} args - Arguments to update many FoodieReviews.
     * @example
     * // Update many FoodieReviews
     * const foodieReview = await prisma.foodieReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodieReviews and only return the `id`
     * const foodieReviewWithIdOnly = await prisma.foodieReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodieReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodieReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodieReview.
     * @param {FoodieReviewUpsertArgs} args - Arguments to update or create a FoodieReview.
     * @example
     * // Update or create a FoodieReview
     * const foodieReview = await prisma.foodieReview.upsert({
     *   create: {
     *     // ... data to create a FoodieReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodieReview we want to update
     *   }
     * })
     */
    upsert<T extends FoodieReviewUpsertArgs>(args: SelectSubset<T, FoodieReviewUpsertArgs<ExtArgs>>): Prisma__FoodieReviewClient<$Result.GetResult<Prisma.$FoodieReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodieReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieReviewCountArgs} args - Arguments to filter FoodieReviews to count.
     * @example
     * // Count the number of FoodieReviews
     * const count = await prisma.foodieReview.count({
     *   where: {
     *     // ... the filter for the FoodieReviews we want to count
     *   }
     * })
    **/
    count<T extends FoodieReviewCountArgs>(
      args?: Subset<T, FoodieReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodieReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodieReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodieReviewAggregateArgs>(args: Subset<T, FoodieReviewAggregateArgs>): Prisma.PrismaPromise<GetFoodieReviewAggregateType<T>>

    /**
     * Group by FoodieReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodieReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodieReviewGroupByArgs['orderBy'] }
        : { orderBy?: FoodieReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodieReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodieReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodieReview model
   */
  readonly fields: FoodieReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodieReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodieReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    food<T extends FoodieFoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodieFoodDefaultArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodieReview model
   */ 
  interface FoodieReviewFieldRefs {
    readonly id: FieldRef<"FoodieReview", 'String'>
    readonly foodId: FieldRef<"FoodieReview", 'String'>
    readonly userId: FieldRef<"FoodieReview", 'String'>
    readonly rating: FieldRef<"FoodieReview", 'Int'>
    readonly comment: FieldRef<"FoodieReview", 'String'>
    readonly validated: FieldRef<"FoodieReview", 'Boolean'>
    readonly createdAt: FieldRef<"FoodieReview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodieReview findUnique
   */
  export type FoodieReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * Filter, which FoodieReview to fetch.
     */
    where: FoodieReviewWhereUniqueInput
  }

  /**
   * FoodieReview findUniqueOrThrow
   */
  export type FoodieReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * Filter, which FoodieReview to fetch.
     */
    where: FoodieReviewWhereUniqueInput
  }

  /**
   * FoodieReview findFirst
   */
  export type FoodieReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * Filter, which FoodieReview to fetch.
     */
    where?: FoodieReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieReviews to fetch.
     */
    orderBy?: FoodieReviewOrderByWithRelationInput | FoodieReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieReviews.
     */
    cursor?: FoodieReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieReviews.
     */
    distinct?: FoodieReviewScalarFieldEnum | FoodieReviewScalarFieldEnum[]
  }

  /**
   * FoodieReview findFirstOrThrow
   */
  export type FoodieReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * Filter, which FoodieReview to fetch.
     */
    where?: FoodieReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieReviews to fetch.
     */
    orderBy?: FoodieReviewOrderByWithRelationInput | FoodieReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieReviews.
     */
    cursor?: FoodieReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieReviews.
     */
    distinct?: FoodieReviewScalarFieldEnum | FoodieReviewScalarFieldEnum[]
  }

  /**
   * FoodieReview findMany
   */
  export type FoodieReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * Filter, which FoodieReviews to fetch.
     */
    where?: FoodieReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieReviews to fetch.
     */
    orderBy?: FoodieReviewOrderByWithRelationInput | FoodieReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodieReviews.
     */
    cursor?: FoodieReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieReviews.
     */
    skip?: number
    distinct?: FoodieReviewScalarFieldEnum | FoodieReviewScalarFieldEnum[]
  }

  /**
   * FoodieReview create
   */
  export type FoodieReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodieReview.
     */
    data: XOR<FoodieReviewCreateInput, FoodieReviewUncheckedCreateInput>
  }

  /**
   * FoodieReview createMany
   */
  export type FoodieReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodieReviews.
     */
    data: FoodieReviewCreateManyInput | FoodieReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodieReview createManyAndReturn
   */
  export type FoodieReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * The data used to create many FoodieReviews.
     */
    data: FoodieReviewCreateManyInput | FoodieReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieReview update
   */
  export type FoodieReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodieReview.
     */
    data: XOR<FoodieReviewUpdateInput, FoodieReviewUncheckedUpdateInput>
    /**
     * Choose, which FoodieReview to update.
     */
    where: FoodieReviewWhereUniqueInput
  }

  /**
   * FoodieReview updateMany
   */
  export type FoodieReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodieReviews.
     */
    data: XOR<FoodieReviewUpdateManyMutationInput, FoodieReviewUncheckedUpdateManyInput>
    /**
     * Filter which FoodieReviews to update
     */
    where?: FoodieReviewWhereInput
    /**
     * Limit how many FoodieReviews to update.
     */
    limit?: number
  }

  /**
   * FoodieReview updateManyAndReturn
   */
  export type FoodieReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * The data used to update FoodieReviews.
     */
    data: XOR<FoodieReviewUpdateManyMutationInput, FoodieReviewUncheckedUpdateManyInput>
    /**
     * Filter which FoodieReviews to update
     */
    where?: FoodieReviewWhereInput
    /**
     * Limit how many FoodieReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieReview upsert
   */
  export type FoodieReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodieReview to update in case it exists.
     */
    where: FoodieReviewWhereUniqueInput
    /**
     * In case the FoodieReview found by the `where` argument doesn't exist, create a new FoodieReview with this data.
     */
    create: XOR<FoodieReviewCreateInput, FoodieReviewUncheckedCreateInput>
    /**
     * In case the FoodieReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodieReviewUpdateInput, FoodieReviewUncheckedUpdateInput>
  }

  /**
   * FoodieReview delete
   */
  export type FoodieReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
    /**
     * Filter which FoodieReview to delete.
     */
    where: FoodieReviewWhereUniqueInput
  }

  /**
   * FoodieReview deleteMany
   */
  export type FoodieReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieReviews to delete
     */
    where?: FoodieReviewWhereInput
    /**
     * Limit how many FoodieReviews to delete.
     */
    limit?: number
  }

  /**
   * FoodieReview without action
   */
  export type FoodieReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieReview
     */
    select?: FoodieReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieReview
     */
    omit?: FoodieReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieReviewInclude<ExtArgs> | null
  }


  /**
   * Model FoodieLike
   */

  export type AggregateFoodieLike = {
    _count: FoodieLikeCountAggregateOutputType | null
    _min: FoodieLikeMinAggregateOutputType | null
    _max: FoodieLikeMaxAggregateOutputType | null
  }

  export type FoodieLikeMinAggregateOutputType = {
    id: string | null
    foodId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type FoodieLikeMaxAggregateOutputType = {
    id: string | null
    foodId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type FoodieLikeCountAggregateOutputType = {
    id: number
    foodId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type FoodieLikeMinAggregateInputType = {
    id?: true
    foodId?: true
    userId?: true
    createdAt?: true
  }

  export type FoodieLikeMaxAggregateInputType = {
    id?: true
    foodId?: true
    userId?: true
    createdAt?: true
  }

  export type FoodieLikeCountAggregateInputType = {
    id?: true
    foodId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type FoodieLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieLike to aggregate.
     */
    where?: FoodieLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLikes to fetch.
     */
    orderBy?: FoodieLikeOrderByWithRelationInput | FoodieLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodieLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodieLikes
    **/
    _count?: true | FoodieLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodieLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodieLikeMaxAggregateInputType
  }

  export type GetFoodieLikeAggregateType<T extends FoodieLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodieLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodieLike[P]>
      : GetScalarType<T[P], AggregateFoodieLike[P]>
  }




  export type FoodieLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodieLikeWhereInput
    orderBy?: FoodieLikeOrderByWithAggregationInput | FoodieLikeOrderByWithAggregationInput[]
    by: FoodieLikeScalarFieldEnum[] | FoodieLikeScalarFieldEnum
    having?: FoodieLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodieLikeCountAggregateInputType | true
    _min?: FoodieLikeMinAggregateInputType
    _max?: FoodieLikeMaxAggregateInputType
  }

  export type FoodieLikeGroupByOutputType = {
    id: string
    foodId: string
    userId: string
    createdAt: Date
    _count: FoodieLikeCountAggregateOutputType | null
    _min: FoodieLikeMinAggregateOutputType | null
    _max: FoodieLikeMaxAggregateOutputType | null
  }

  type GetFoodieLikeGroupByPayload<T extends FoodieLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodieLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodieLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodieLikeGroupByOutputType[P]>
            : GetScalarType<T[P], FoodieLikeGroupByOutputType[P]>
        }
      >
    >


  export type FoodieLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieLike"]>

  export type FoodieLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieLike"]>

  export type FoodieLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    foodId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodieLike"]>

  export type FoodieLikeSelectScalar = {
    id?: boolean
    foodId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type FoodieLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "foodId" | "userId" | "createdAt", ExtArgs["result"]["foodieLike"]>
  export type FoodieLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }
  export type FoodieLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }
  export type FoodieLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodieFoodDefaultArgs<ExtArgs>
  }

  export type $FoodieLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodieLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      food: Prisma.$FoodieFoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      foodId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["foodieLike"]>
    composites: {}
  }

  type FoodieLikeGetPayload<S extends boolean | null | undefined | FoodieLikeDefaultArgs> = $Result.GetResult<Prisma.$FoodieLikePayload, S>

  type FoodieLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodieLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodieLikeCountAggregateInputType | true
    }

  export interface FoodieLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodieLike'], meta: { name: 'FoodieLike' } }
    /**
     * Find zero or one FoodieLike that matches the filter.
     * @param {FoodieLikeFindUniqueArgs} args - Arguments to find a FoodieLike
     * @example
     * // Get one FoodieLike
     * const foodieLike = await prisma.foodieLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodieLikeFindUniqueArgs>(args: SelectSubset<T, FoodieLikeFindUniqueArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodieLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodieLikeFindUniqueOrThrowArgs} args - Arguments to find a FoodieLike
     * @example
     * // Get one FoodieLike
     * const foodieLike = await prisma.foodieLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodieLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodieLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLikeFindFirstArgs} args - Arguments to find a FoodieLike
     * @example
     * // Get one FoodieLike
     * const foodieLike = await prisma.foodieLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodieLikeFindFirstArgs>(args?: SelectSubset<T, FoodieLikeFindFirstArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodieLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLikeFindFirstOrThrowArgs} args - Arguments to find a FoodieLike
     * @example
     * // Get one FoodieLike
     * const foodieLike = await prisma.foodieLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodieLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodieLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodieLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodieLikes
     * const foodieLikes = await prisma.foodieLike.findMany()
     * 
     * // Get first 10 FoodieLikes
     * const foodieLikes = await prisma.foodieLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodieLikeWithIdOnly = await prisma.foodieLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodieLikeFindManyArgs>(args?: SelectSubset<T, FoodieLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodieLike.
     * @param {FoodieLikeCreateArgs} args - Arguments to create a FoodieLike.
     * @example
     * // Create one FoodieLike
     * const FoodieLike = await prisma.foodieLike.create({
     *   data: {
     *     // ... data to create a FoodieLike
     *   }
     * })
     * 
     */
    create<T extends FoodieLikeCreateArgs>(args: SelectSubset<T, FoodieLikeCreateArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodieLikes.
     * @param {FoodieLikeCreateManyArgs} args - Arguments to create many FoodieLikes.
     * @example
     * // Create many FoodieLikes
     * const foodieLike = await prisma.foodieLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodieLikeCreateManyArgs>(args?: SelectSubset<T, FoodieLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodieLikes and returns the data saved in the database.
     * @param {FoodieLikeCreateManyAndReturnArgs} args - Arguments to create many FoodieLikes.
     * @example
     * // Create many FoodieLikes
     * const foodieLike = await prisma.foodieLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodieLikes and only return the `id`
     * const foodieLikeWithIdOnly = await prisma.foodieLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodieLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodieLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodieLike.
     * @param {FoodieLikeDeleteArgs} args - Arguments to delete one FoodieLike.
     * @example
     * // Delete one FoodieLike
     * const FoodieLike = await prisma.foodieLike.delete({
     *   where: {
     *     // ... filter to delete one FoodieLike
     *   }
     * })
     * 
     */
    delete<T extends FoodieLikeDeleteArgs>(args: SelectSubset<T, FoodieLikeDeleteArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodieLike.
     * @param {FoodieLikeUpdateArgs} args - Arguments to update one FoodieLike.
     * @example
     * // Update one FoodieLike
     * const foodieLike = await prisma.foodieLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodieLikeUpdateArgs>(args: SelectSubset<T, FoodieLikeUpdateArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodieLikes.
     * @param {FoodieLikeDeleteManyArgs} args - Arguments to filter FoodieLikes to delete.
     * @example
     * // Delete a few FoodieLikes
     * const { count } = await prisma.foodieLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodieLikeDeleteManyArgs>(args?: SelectSubset<T, FoodieLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodieLikes
     * const foodieLike = await prisma.foodieLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodieLikeUpdateManyArgs>(args: SelectSubset<T, FoodieLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodieLikes and returns the data updated in the database.
     * @param {FoodieLikeUpdateManyAndReturnArgs} args - Arguments to update many FoodieLikes.
     * @example
     * // Update many FoodieLikes
     * const foodieLike = await prisma.foodieLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodieLikes and only return the `id`
     * const foodieLikeWithIdOnly = await prisma.foodieLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodieLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodieLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodieLike.
     * @param {FoodieLikeUpsertArgs} args - Arguments to update or create a FoodieLike.
     * @example
     * // Update or create a FoodieLike
     * const foodieLike = await prisma.foodieLike.upsert({
     *   create: {
     *     // ... data to create a FoodieLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodieLike we want to update
     *   }
     * })
     */
    upsert<T extends FoodieLikeUpsertArgs>(args: SelectSubset<T, FoodieLikeUpsertArgs<ExtArgs>>): Prisma__FoodieLikeClient<$Result.GetResult<Prisma.$FoodieLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodieLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLikeCountArgs} args - Arguments to filter FoodieLikes to count.
     * @example
     * // Count the number of FoodieLikes
     * const count = await prisma.foodieLike.count({
     *   where: {
     *     // ... the filter for the FoodieLikes we want to count
     *   }
     * })
    **/
    count<T extends FoodieLikeCountArgs>(
      args?: Subset<T, FoodieLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodieLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodieLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodieLikeAggregateArgs>(args: Subset<T, FoodieLikeAggregateArgs>): Prisma.PrismaPromise<GetFoodieLikeAggregateType<T>>

    /**
     * Group by FoodieLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodieLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodieLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodieLikeGroupByArgs['orderBy'] }
        : { orderBy?: FoodieLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodieLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodieLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodieLike model
   */
  readonly fields: FoodieLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodieLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodieLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    food<T extends FoodieFoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodieFoodDefaultArgs<ExtArgs>>): Prisma__FoodieFoodClient<$Result.GetResult<Prisma.$FoodieFoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodieLike model
   */ 
  interface FoodieLikeFieldRefs {
    readonly id: FieldRef<"FoodieLike", 'String'>
    readonly foodId: FieldRef<"FoodieLike", 'String'>
    readonly userId: FieldRef<"FoodieLike", 'String'>
    readonly createdAt: FieldRef<"FoodieLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodieLike findUnique
   */
  export type FoodieLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLike to fetch.
     */
    where: FoodieLikeWhereUniqueInput
  }

  /**
   * FoodieLike findUniqueOrThrow
   */
  export type FoodieLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLike to fetch.
     */
    where: FoodieLikeWhereUniqueInput
  }

  /**
   * FoodieLike findFirst
   */
  export type FoodieLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLike to fetch.
     */
    where?: FoodieLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLikes to fetch.
     */
    orderBy?: FoodieLikeOrderByWithRelationInput | FoodieLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieLikes.
     */
    cursor?: FoodieLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieLikes.
     */
    distinct?: FoodieLikeScalarFieldEnum | FoodieLikeScalarFieldEnum[]
  }

  /**
   * FoodieLike findFirstOrThrow
   */
  export type FoodieLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLike to fetch.
     */
    where?: FoodieLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLikes to fetch.
     */
    orderBy?: FoodieLikeOrderByWithRelationInput | FoodieLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodieLikes.
     */
    cursor?: FoodieLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodieLikes.
     */
    distinct?: FoodieLikeScalarFieldEnum | FoodieLikeScalarFieldEnum[]
  }

  /**
   * FoodieLike findMany
   */
  export type FoodieLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * Filter, which FoodieLikes to fetch.
     */
    where?: FoodieLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodieLikes to fetch.
     */
    orderBy?: FoodieLikeOrderByWithRelationInput | FoodieLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodieLikes.
     */
    cursor?: FoodieLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodieLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodieLikes.
     */
    skip?: number
    distinct?: FoodieLikeScalarFieldEnum | FoodieLikeScalarFieldEnum[]
  }

  /**
   * FoodieLike create
   */
  export type FoodieLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodieLike.
     */
    data: XOR<FoodieLikeCreateInput, FoodieLikeUncheckedCreateInput>
  }

  /**
   * FoodieLike createMany
   */
  export type FoodieLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodieLikes.
     */
    data: FoodieLikeCreateManyInput | FoodieLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodieLike createManyAndReturn
   */
  export type FoodieLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * The data used to create many FoodieLikes.
     */
    data: FoodieLikeCreateManyInput | FoodieLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieLike update
   */
  export type FoodieLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodieLike.
     */
    data: XOR<FoodieLikeUpdateInput, FoodieLikeUncheckedUpdateInput>
    /**
     * Choose, which FoodieLike to update.
     */
    where: FoodieLikeWhereUniqueInput
  }

  /**
   * FoodieLike updateMany
   */
  export type FoodieLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodieLikes.
     */
    data: XOR<FoodieLikeUpdateManyMutationInput, FoodieLikeUncheckedUpdateManyInput>
    /**
     * Filter which FoodieLikes to update
     */
    where?: FoodieLikeWhereInput
    /**
     * Limit how many FoodieLikes to update.
     */
    limit?: number
  }

  /**
   * FoodieLike updateManyAndReturn
   */
  export type FoodieLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * The data used to update FoodieLikes.
     */
    data: XOR<FoodieLikeUpdateManyMutationInput, FoodieLikeUncheckedUpdateManyInput>
    /**
     * Filter which FoodieLikes to update
     */
    where?: FoodieLikeWhereInput
    /**
     * Limit how many FoodieLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodieLike upsert
   */
  export type FoodieLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodieLike to update in case it exists.
     */
    where: FoodieLikeWhereUniqueInput
    /**
     * In case the FoodieLike found by the `where` argument doesn't exist, create a new FoodieLike with this data.
     */
    create: XOR<FoodieLikeCreateInput, FoodieLikeUncheckedCreateInput>
    /**
     * In case the FoodieLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodieLikeUpdateInput, FoodieLikeUncheckedUpdateInput>
  }

  /**
   * FoodieLike delete
   */
  export type FoodieLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
    /**
     * Filter which FoodieLike to delete.
     */
    where: FoodieLikeWhereUniqueInput
  }

  /**
   * FoodieLike deleteMany
   */
  export type FoodieLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodieLikes to delete
     */
    where?: FoodieLikeWhereInput
    /**
     * Limit how many FoodieLikes to delete.
     */
    limit?: number
  }

  /**
   * FoodieLike without action
   */
  export type FoodieLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodieLike
     */
    select?: FoodieLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodieLike
     */
    omit?: FoodieLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodieLikeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    group: 'group',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PostDIYHomesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    category: 'category',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type PostDIYHomesScalarFieldEnum = (typeof PostDIYHomesScalarFieldEnum)[keyof typeof PostDIYHomesScalarFieldEnum]


  export const ReviewDIYHomesScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ReviewDIYHomesScalarFieldEnum = (typeof ReviewDIYHomesScalarFieldEnum)[keyof typeof ReviewDIYHomesScalarFieldEnum]


  export const LikeDIYHomesScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LikeDIYHomesScalarFieldEnum = (typeof LikeDIYHomesScalarFieldEnum)[keyof typeof LikeDIYHomesScalarFieldEnum]


  export const BookmarkDIYHomesScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type BookmarkDIYHomesScalarFieldEnum = (typeof BookmarkDIYHomesScalarFieldEnum)[keyof typeof BookmarkDIYHomesScalarFieldEnum]


  export const ReportDIYHomesScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    reviewId: 'reviewId',
    userId: 'userId',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type ReportDIYHomesScalarFieldEnum = (typeof ReportDIYHomesScalarFieldEnum)[keyof typeof ReportDIYHomesScalarFieldEnum]


  export const PlaceUrbanExplorerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    location: 'location',
    description: 'description',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    validated: 'validated'
  };

  export type PlaceUrbanExplorerScalarFieldEnum = (typeof PlaceUrbanExplorerScalarFieldEnum)[keyof typeof PlaceUrbanExplorerScalarFieldEnum]


  export const ReviewUrbanExplorerScalarFieldEnum: {
    id: 'id',
    placeId: 'placeId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ReviewUrbanExplorerScalarFieldEnum = (typeof ReviewUrbanExplorerScalarFieldEnum)[keyof typeof ReviewUrbanExplorerScalarFieldEnum]


  export const LikeUrbanExplorerScalarFieldEnum: {
    id: 'id',
    placeId: 'placeId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LikeUrbanExplorerScalarFieldEnum = (typeof LikeUrbanExplorerScalarFieldEnum)[keyof typeof LikeUrbanExplorerScalarFieldEnum]


  export const BookmarkUrbanExplorerScalarFieldEnum: {
    id: 'id',
    placeId: 'placeId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type BookmarkUrbanExplorerScalarFieldEnum = (typeof BookmarkUrbanExplorerScalarFieldEnum)[keyof typeof BookmarkUrbanExplorerScalarFieldEnum]


  export const ReportUrbanExplorerScalarFieldEnum: {
    id: 'id',
    placeId: 'placeId',
    reviewId: 'reviewId',
    userId: 'userId',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type ReportUrbanExplorerScalarFieldEnum = (typeof ReportUrbanExplorerScalarFieldEnum)[keyof typeof ReportUrbanExplorerScalarFieldEnum]


  export const FoodieFoodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cuisine: 'cuisine',
    origin: 'origin',
    description: 'description',
    submittedBy: 'submittedBy',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type FoodieFoodScalarFieldEnum = (typeof FoodieFoodScalarFieldEnum)[keyof typeof FoodieFoodScalarFieldEnum]


  export const FoodieLocationScalarFieldEnum: {
    id: 'id',
    foodId: 'foodId',
    locationName: 'locationName',
    address: 'address',
    submittedBy: 'submittedBy',
    createdAt: 'createdAt'
  };

  export type FoodieLocationScalarFieldEnum = (typeof FoodieLocationScalarFieldEnum)[keyof typeof FoodieLocationScalarFieldEnum]


  export const FoodieReviewScalarFieldEnum: {
    id: 'id',
    foodId: 'foodId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type FoodieReviewScalarFieldEnum = (typeof FoodieReviewScalarFieldEnum)[keyof typeof FoodieReviewScalarFieldEnum]


  export const FoodieLikeScalarFieldEnum: {
    id: 'id',
    foodId: 'foodId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type FoodieLikeScalarFieldEnum = (typeof FoodieLikeScalarFieldEnum)[keyof typeof FoodieLikeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    group?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    posts?: PostDIYHomesListRelationFilter
    reviews?: ReviewDIYHomesListRelationFilter
    bookmarks?: BookmarkDIYHomesListRelationFilter
    Like?: LikeDIYHomesListRelationFilter
    Report?: ReportDIYHomesListRelationFilter
    PlaceUrbanExplorer?: PlaceUrbanExplorerListRelationFilter
    ReviewUrbanExplorer?: ReviewUrbanExplorerListRelationFilter
    LikeUrbanExplorer?: LikeUrbanExplorerListRelationFilter
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerListRelationFilter
    ReportUrbanExplorer?: ReportUrbanExplorerListRelationFilter
    FoodieFood?: FoodieFoodListRelationFilter
    FoodieLocation?: FoodieLocationListRelationFilter
    FoodieReview?: FoodieReviewListRelationFilter
    FoodieLike?: FoodieLikeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
    posts?: PostDIYHomesOrderByRelationAggregateInput
    reviews?: ReviewDIYHomesOrderByRelationAggregateInput
    bookmarks?: BookmarkDIYHomesOrderByRelationAggregateInput
    Like?: LikeDIYHomesOrderByRelationAggregateInput
    Report?: ReportDIYHomesOrderByRelationAggregateInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerOrderByRelationAggregateInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerOrderByRelationAggregateInput
    LikeUrbanExplorer?: LikeUrbanExplorerOrderByRelationAggregateInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerOrderByRelationAggregateInput
    ReportUrbanExplorer?: ReportUrbanExplorerOrderByRelationAggregateInput
    FoodieFood?: FoodieFoodOrderByRelationAggregateInput
    FoodieLocation?: FoodieLocationOrderByRelationAggregateInput
    FoodieReview?: FoodieReviewOrderByRelationAggregateInput
    FoodieLike?: FoodieLikeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    group?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    posts?: PostDIYHomesListRelationFilter
    reviews?: ReviewDIYHomesListRelationFilter
    bookmarks?: BookmarkDIYHomesListRelationFilter
    Like?: LikeDIYHomesListRelationFilter
    Report?: ReportDIYHomesListRelationFilter
    PlaceUrbanExplorer?: PlaceUrbanExplorerListRelationFilter
    ReviewUrbanExplorer?: ReviewUrbanExplorerListRelationFilter
    LikeUrbanExplorer?: LikeUrbanExplorerListRelationFilter
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerListRelationFilter
    ReportUrbanExplorer?: ReportUrbanExplorerListRelationFilter
    FoodieFood?: FoodieFoodListRelationFilter
    FoodieLocation?: FoodieLocationListRelationFilter
    FoodieReview?: FoodieReviewListRelationFilter
    FoodieLike?: FoodieLikeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    group?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PostDIYHomesWhereInput = {
    AND?: PostDIYHomesWhereInput | PostDIYHomesWhereInput[]
    OR?: PostDIYHomesWhereInput[]
    NOT?: PostDIYHomesWhereInput | PostDIYHomesWhereInput[]
    id?: StringFilter<"PostDIYHomes"> | string
    title?: StringFilter<"PostDIYHomes"> | string
    content?: StringFilter<"PostDIYHomes"> | string
    category?: StringFilter<"PostDIYHomes"> | string
    userId?: StringFilter<"PostDIYHomes"> | string
    createdAt?: DateTimeFilter<"PostDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviews?: ReviewDIYHomesListRelationFilter
    bookmarks?: BookmarkDIYHomesListRelationFilter
    Like?: LikeDIYHomesListRelationFilter
    Report?: ReportDIYHomesListRelationFilter
  }

  export type PostDIYHomesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    reviews?: ReviewDIYHomesOrderByRelationAggregateInput
    bookmarks?: BookmarkDIYHomesOrderByRelationAggregateInput
    Like?: LikeDIYHomesOrderByRelationAggregateInput
    Report?: ReportDIYHomesOrderByRelationAggregateInput
  }

  export type PostDIYHomesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostDIYHomesWhereInput | PostDIYHomesWhereInput[]
    OR?: PostDIYHomesWhereInput[]
    NOT?: PostDIYHomesWhereInput | PostDIYHomesWhereInput[]
    title?: StringFilter<"PostDIYHomes"> | string
    content?: StringFilter<"PostDIYHomes"> | string
    category?: StringFilter<"PostDIYHomes"> | string
    userId?: StringFilter<"PostDIYHomes"> | string
    createdAt?: DateTimeFilter<"PostDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviews?: ReviewDIYHomesListRelationFilter
    bookmarks?: BookmarkDIYHomesListRelationFilter
    Like?: LikeDIYHomesListRelationFilter
    Report?: ReportDIYHomesListRelationFilter
  }, "id">

  export type PostDIYHomesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: PostDIYHomesCountOrderByAggregateInput
    _max?: PostDIYHomesMaxOrderByAggregateInput
    _min?: PostDIYHomesMinOrderByAggregateInput
  }

  export type PostDIYHomesScalarWhereWithAggregatesInput = {
    AND?: PostDIYHomesScalarWhereWithAggregatesInput | PostDIYHomesScalarWhereWithAggregatesInput[]
    OR?: PostDIYHomesScalarWhereWithAggregatesInput[]
    NOT?: PostDIYHomesScalarWhereWithAggregatesInput | PostDIYHomesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PostDIYHomes"> | string
    title?: StringWithAggregatesFilter<"PostDIYHomes"> | string
    content?: StringWithAggregatesFilter<"PostDIYHomes"> | string
    category?: StringWithAggregatesFilter<"PostDIYHomes"> | string
    userId?: StringWithAggregatesFilter<"PostDIYHomes"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PostDIYHomes"> | Date | string
  }

  export type ReviewDIYHomesWhereInput = {
    AND?: ReviewDIYHomesWhereInput | ReviewDIYHomesWhereInput[]
    OR?: ReviewDIYHomesWhereInput[]
    NOT?: ReviewDIYHomesWhereInput | ReviewDIYHomesWhereInput[]
    id?: StringFilter<"ReviewDIYHomes"> | string
    postId?: StringFilter<"ReviewDIYHomes"> | string
    userId?: StringFilter<"ReviewDIYHomes"> | string
    rating?: IntFilter<"ReviewDIYHomes"> | number
    comment?: StringFilter<"ReviewDIYHomes"> | string
    createdAt?: DateTimeFilter<"ReviewDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesScalarRelationFilter, PostDIYHomesWhereInput>
    Report?: ReportDIYHomesListRelationFilter
  }

  export type ReviewDIYHomesOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostDIYHomesOrderByWithRelationInput
    Report?: ReportDIYHomesOrderByRelationAggregateInput
  }

  export type ReviewDIYHomesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewDIYHomesWhereInput | ReviewDIYHomesWhereInput[]
    OR?: ReviewDIYHomesWhereInput[]
    NOT?: ReviewDIYHomesWhereInput | ReviewDIYHomesWhereInput[]
    postId?: StringFilter<"ReviewDIYHomes"> | string
    userId?: StringFilter<"ReviewDIYHomes"> | string
    rating?: IntFilter<"ReviewDIYHomes"> | number
    comment?: StringFilter<"ReviewDIYHomes"> | string
    createdAt?: DateTimeFilter<"ReviewDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesScalarRelationFilter, PostDIYHomesWhereInput>
    Report?: ReportDIYHomesListRelationFilter
  }, "id">

  export type ReviewDIYHomesOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    _count?: ReviewDIYHomesCountOrderByAggregateInput
    _avg?: ReviewDIYHomesAvgOrderByAggregateInput
    _max?: ReviewDIYHomesMaxOrderByAggregateInput
    _min?: ReviewDIYHomesMinOrderByAggregateInput
    _sum?: ReviewDIYHomesSumOrderByAggregateInput
  }

  export type ReviewDIYHomesScalarWhereWithAggregatesInput = {
    AND?: ReviewDIYHomesScalarWhereWithAggregatesInput | ReviewDIYHomesScalarWhereWithAggregatesInput[]
    OR?: ReviewDIYHomesScalarWhereWithAggregatesInput[]
    NOT?: ReviewDIYHomesScalarWhereWithAggregatesInput | ReviewDIYHomesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReviewDIYHomes"> | string
    postId?: StringWithAggregatesFilter<"ReviewDIYHomes"> | string
    userId?: StringWithAggregatesFilter<"ReviewDIYHomes"> | string
    rating?: IntWithAggregatesFilter<"ReviewDIYHomes"> | number
    comment?: StringWithAggregatesFilter<"ReviewDIYHomes"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReviewDIYHomes"> | Date | string
  }

  export type LikeDIYHomesWhereInput = {
    AND?: LikeDIYHomesWhereInput | LikeDIYHomesWhereInput[]
    OR?: LikeDIYHomesWhereInput[]
    NOT?: LikeDIYHomesWhereInput | LikeDIYHomesWhereInput[]
    id?: StringFilter<"LikeDIYHomes"> | string
    postId?: StringFilter<"LikeDIYHomes"> | string
    userId?: StringFilter<"LikeDIYHomes"> | string
    createdAt?: DateTimeFilter<"LikeDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesScalarRelationFilter, PostDIYHomesWhereInput>
  }

  export type LikeDIYHomesOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostDIYHomesOrderByWithRelationInput
  }

  export type LikeDIYHomesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    postId_userId?: LikeDIYHomesPostIdUserIdCompoundUniqueInput
    AND?: LikeDIYHomesWhereInput | LikeDIYHomesWhereInput[]
    OR?: LikeDIYHomesWhereInput[]
    NOT?: LikeDIYHomesWhereInput | LikeDIYHomesWhereInput[]
    postId?: StringFilter<"LikeDIYHomes"> | string
    userId?: StringFilter<"LikeDIYHomes"> | string
    createdAt?: DateTimeFilter<"LikeDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesScalarRelationFilter, PostDIYHomesWhereInput>
  }, "id" | "postId_userId">

  export type LikeDIYHomesOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeDIYHomesCountOrderByAggregateInput
    _max?: LikeDIYHomesMaxOrderByAggregateInput
    _min?: LikeDIYHomesMinOrderByAggregateInput
  }

  export type LikeDIYHomesScalarWhereWithAggregatesInput = {
    AND?: LikeDIYHomesScalarWhereWithAggregatesInput | LikeDIYHomesScalarWhereWithAggregatesInput[]
    OR?: LikeDIYHomesScalarWhereWithAggregatesInput[]
    NOT?: LikeDIYHomesScalarWhereWithAggregatesInput | LikeDIYHomesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LikeDIYHomes"> | string
    postId?: StringWithAggregatesFilter<"LikeDIYHomes"> | string
    userId?: StringWithAggregatesFilter<"LikeDIYHomes"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LikeDIYHomes"> | Date | string
  }

  export type BookmarkDIYHomesWhereInput = {
    AND?: BookmarkDIYHomesWhereInput | BookmarkDIYHomesWhereInput[]
    OR?: BookmarkDIYHomesWhereInput[]
    NOT?: BookmarkDIYHomesWhereInput | BookmarkDIYHomesWhereInput[]
    id?: StringFilter<"BookmarkDIYHomes"> | string
    postId?: StringFilter<"BookmarkDIYHomes"> | string
    userId?: StringFilter<"BookmarkDIYHomes"> | string
    createdAt?: DateTimeFilter<"BookmarkDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesScalarRelationFilter, PostDIYHomesWhereInput>
  }

  export type BookmarkDIYHomesOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostDIYHomesOrderByWithRelationInput
  }

  export type BookmarkDIYHomesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    postId_userId?: BookmarkDIYHomesPostIdUserIdCompoundUniqueInput
    AND?: BookmarkDIYHomesWhereInput | BookmarkDIYHomesWhereInput[]
    OR?: BookmarkDIYHomesWhereInput[]
    NOT?: BookmarkDIYHomesWhereInput | BookmarkDIYHomesWhereInput[]
    postId?: StringFilter<"BookmarkDIYHomes"> | string
    userId?: StringFilter<"BookmarkDIYHomes"> | string
    createdAt?: DateTimeFilter<"BookmarkDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesScalarRelationFilter, PostDIYHomesWhereInput>
  }, "id" | "postId_userId">

  export type BookmarkDIYHomesOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: BookmarkDIYHomesCountOrderByAggregateInput
    _max?: BookmarkDIYHomesMaxOrderByAggregateInput
    _min?: BookmarkDIYHomesMinOrderByAggregateInput
  }

  export type BookmarkDIYHomesScalarWhereWithAggregatesInput = {
    AND?: BookmarkDIYHomesScalarWhereWithAggregatesInput | BookmarkDIYHomesScalarWhereWithAggregatesInput[]
    OR?: BookmarkDIYHomesScalarWhereWithAggregatesInput[]
    NOT?: BookmarkDIYHomesScalarWhereWithAggregatesInput | BookmarkDIYHomesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BookmarkDIYHomes"> | string
    postId?: StringWithAggregatesFilter<"BookmarkDIYHomes"> | string
    userId?: StringWithAggregatesFilter<"BookmarkDIYHomes"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BookmarkDIYHomes"> | Date | string
  }

  export type ReportDIYHomesWhereInput = {
    AND?: ReportDIYHomesWhereInput | ReportDIYHomesWhereInput[]
    OR?: ReportDIYHomesWhereInput[]
    NOT?: ReportDIYHomesWhereInput | ReportDIYHomesWhereInput[]
    id?: StringFilter<"ReportDIYHomes"> | string
    postId?: StringNullableFilter<"ReportDIYHomes"> | string | null
    reviewId?: StringNullableFilter<"ReportDIYHomes"> | string | null
    userId?: StringFilter<"ReportDIYHomes"> | string
    reason?: StringFilter<"ReportDIYHomes"> | string
    createdAt?: DateTimeFilter<"ReportDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesNullableScalarRelationFilter, PostDIYHomesWhereInput> | null
    review?: XOR<ReviewDIYHomesNullableScalarRelationFilter, ReviewDIYHomesWhereInput> | null
  }

  export type ReportDIYHomesOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrderInput | SortOrder
    reviewId?: SortOrderInput | SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostDIYHomesOrderByWithRelationInput
    review?: ReviewDIYHomesOrderByWithRelationInput
  }

  export type ReportDIYHomesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportDIYHomesWhereInput | ReportDIYHomesWhereInput[]
    OR?: ReportDIYHomesWhereInput[]
    NOT?: ReportDIYHomesWhereInput | ReportDIYHomesWhereInput[]
    postId?: StringNullableFilter<"ReportDIYHomes"> | string | null
    reviewId?: StringNullableFilter<"ReportDIYHomes"> | string | null
    userId?: StringFilter<"ReportDIYHomes"> | string
    reason?: StringFilter<"ReportDIYHomes"> | string
    createdAt?: DateTimeFilter<"ReportDIYHomes"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    post?: XOR<PostDIYHomesNullableScalarRelationFilter, PostDIYHomesWhereInput> | null
    review?: XOR<ReviewDIYHomesNullableScalarRelationFilter, ReviewDIYHomesWhereInput> | null
  }, "id">

  export type ReportDIYHomesOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrderInput | SortOrder
    reviewId?: SortOrderInput | SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: ReportDIYHomesCountOrderByAggregateInput
    _max?: ReportDIYHomesMaxOrderByAggregateInput
    _min?: ReportDIYHomesMinOrderByAggregateInput
  }

  export type ReportDIYHomesScalarWhereWithAggregatesInput = {
    AND?: ReportDIYHomesScalarWhereWithAggregatesInput | ReportDIYHomesScalarWhereWithAggregatesInput[]
    OR?: ReportDIYHomesScalarWhereWithAggregatesInput[]
    NOT?: ReportDIYHomesScalarWhereWithAggregatesInput | ReportDIYHomesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportDIYHomes"> | string
    postId?: StringNullableWithAggregatesFilter<"ReportDIYHomes"> | string | null
    reviewId?: StringNullableWithAggregatesFilter<"ReportDIYHomes"> | string | null
    userId?: StringWithAggregatesFilter<"ReportDIYHomes"> | string
    reason?: StringWithAggregatesFilter<"ReportDIYHomes"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportDIYHomes"> | Date | string
  }

  export type PlaceUrbanExplorerWhereInput = {
    AND?: PlaceUrbanExplorerWhereInput | PlaceUrbanExplorerWhereInput[]
    OR?: PlaceUrbanExplorerWhereInput[]
    NOT?: PlaceUrbanExplorerWhereInput | PlaceUrbanExplorerWhereInput[]
    id?: StringFilter<"PlaceUrbanExplorer"> | string
    name?: StringFilter<"PlaceUrbanExplorer"> | string
    category?: StringFilter<"PlaceUrbanExplorer"> | string
    location?: StringFilter<"PlaceUrbanExplorer"> | string
    description?: StringFilter<"PlaceUrbanExplorer"> | string
    ownerId?: StringFilter<"PlaceUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"PlaceUrbanExplorer"> | Date | string
    validated?: BoolFilter<"PlaceUrbanExplorer"> | boolean
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviews?: ReviewUrbanExplorerListRelationFilter
    bookmarks?: BookmarkUrbanExplorerListRelationFilter
    likes?: LikeUrbanExplorerListRelationFilter
    reports?: ReportUrbanExplorerListRelationFilter
  }

  export type PlaceUrbanExplorerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    location?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    validated?: SortOrder
    owner?: UserOrderByWithRelationInput
    reviews?: ReviewUrbanExplorerOrderByRelationAggregateInput
    bookmarks?: BookmarkUrbanExplorerOrderByRelationAggregateInput
    likes?: LikeUrbanExplorerOrderByRelationAggregateInput
    reports?: ReportUrbanExplorerOrderByRelationAggregateInput
  }

  export type PlaceUrbanExplorerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlaceUrbanExplorerWhereInput | PlaceUrbanExplorerWhereInput[]
    OR?: PlaceUrbanExplorerWhereInput[]
    NOT?: PlaceUrbanExplorerWhereInput | PlaceUrbanExplorerWhereInput[]
    name?: StringFilter<"PlaceUrbanExplorer"> | string
    category?: StringFilter<"PlaceUrbanExplorer"> | string
    location?: StringFilter<"PlaceUrbanExplorer"> | string
    description?: StringFilter<"PlaceUrbanExplorer"> | string
    ownerId?: StringFilter<"PlaceUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"PlaceUrbanExplorer"> | Date | string
    validated?: BoolFilter<"PlaceUrbanExplorer"> | boolean
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviews?: ReviewUrbanExplorerListRelationFilter
    bookmarks?: BookmarkUrbanExplorerListRelationFilter
    likes?: LikeUrbanExplorerListRelationFilter
    reports?: ReportUrbanExplorerListRelationFilter
  }, "id">

  export type PlaceUrbanExplorerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    location?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    validated?: SortOrder
    _count?: PlaceUrbanExplorerCountOrderByAggregateInput
    _max?: PlaceUrbanExplorerMaxOrderByAggregateInput
    _min?: PlaceUrbanExplorerMinOrderByAggregateInput
  }

  export type PlaceUrbanExplorerScalarWhereWithAggregatesInput = {
    AND?: PlaceUrbanExplorerScalarWhereWithAggregatesInput | PlaceUrbanExplorerScalarWhereWithAggregatesInput[]
    OR?: PlaceUrbanExplorerScalarWhereWithAggregatesInput[]
    NOT?: PlaceUrbanExplorerScalarWhereWithAggregatesInput | PlaceUrbanExplorerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlaceUrbanExplorer"> | string
    name?: StringWithAggregatesFilter<"PlaceUrbanExplorer"> | string
    category?: StringWithAggregatesFilter<"PlaceUrbanExplorer"> | string
    location?: StringWithAggregatesFilter<"PlaceUrbanExplorer"> | string
    description?: StringWithAggregatesFilter<"PlaceUrbanExplorer"> | string
    ownerId?: StringWithAggregatesFilter<"PlaceUrbanExplorer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PlaceUrbanExplorer"> | Date | string
    validated?: BoolWithAggregatesFilter<"PlaceUrbanExplorer"> | boolean
  }

  export type ReviewUrbanExplorerWhereInput = {
    AND?: ReviewUrbanExplorerWhereInput | ReviewUrbanExplorerWhereInput[]
    OR?: ReviewUrbanExplorerWhereInput[]
    NOT?: ReviewUrbanExplorerWhereInput | ReviewUrbanExplorerWhereInput[]
    id?: StringFilter<"ReviewUrbanExplorer"> | string
    placeId?: StringFilter<"ReviewUrbanExplorer"> | string
    userId?: StringFilter<"ReviewUrbanExplorer"> | string
    rating?: IntFilter<"ReviewUrbanExplorer"> | number
    comment?: StringFilter<"ReviewUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"ReviewUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerScalarRelationFilter, PlaceUrbanExplorerWhereInput>
    reports?: ReportUrbanExplorerListRelationFilter
  }

  export type ReviewUrbanExplorerOrderByWithRelationInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    place?: PlaceUrbanExplorerOrderByWithRelationInput
    reports?: ReportUrbanExplorerOrderByRelationAggregateInput
  }

  export type ReviewUrbanExplorerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewUrbanExplorerWhereInput | ReviewUrbanExplorerWhereInput[]
    OR?: ReviewUrbanExplorerWhereInput[]
    NOT?: ReviewUrbanExplorerWhereInput | ReviewUrbanExplorerWhereInput[]
    placeId?: StringFilter<"ReviewUrbanExplorer"> | string
    userId?: StringFilter<"ReviewUrbanExplorer"> | string
    rating?: IntFilter<"ReviewUrbanExplorer"> | number
    comment?: StringFilter<"ReviewUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"ReviewUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerScalarRelationFilter, PlaceUrbanExplorerWhereInput>
    reports?: ReportUrbanExplorerListRelationFilter
  }, "id">

  export type ReviewUrbanExplorerOrderByWithAggregationInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    _count?: ReviewUrbanExplorerCountOrderByAggregateInput
    _avg?: ReviewUrbanExplorerAvgOrderByAggregateInput
    _max?: ReviewUrbanExplorerMaxOrderByAggregateInput
    _min?: ReviewUrbanExplorerMinOrderByAggregateInput
    _sum?: ReviewUrbanExplorerSumOrderByAggregateInput
  }

  export type ReviewUrbanExplorerScalarWhereWithAggregatesInput = {
    AND?: ReviewUrbanExplorerScalarWhereWithAggregatesInput | ReviewUrbanExplorerScalarWhereWithAggregatesInput[]
    OR?: ReviewUrbanExplorerScalarWhereWithAggregatesInput[]
    NOT?: ReviewUrbanExplorerScalarWhereWithAggregatesInput | ReviewUrbanExplorerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReviewUrbanExplorer"> | string
    placeId?: StringWithAggregatesFilter<"ReviewUrbanExplorer"> | string
    userId?: StringWithAggregatesFilter<"ReviewUrbanExplorer"> | string
    rating?: IntWithAggregatesFilter<"ReviewUrbanExplorer"> | number
    comment?: StringWithAggregatesFilter<"ReviewUrbanExplorer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReviewUrbanExplorer"> | Date | string
  }

  export type LikeUrbanExplorerWhereInput = {
    AND?: LikeUrbanExplorerWhereInput | LikeUrbanExplorerWhereInput[]
    OR?: LikeUrbanExplorerWhereInput[]
    NOT?: LikeUrbanExplorerWhereInput | LikeUrbanExplorerWhereInput[]
    id?: StringFilter<"LikeUrbanExplorer"> | string
    placeId?: StringFilter<"LikeUrbanExplorer"> | string
    userId?: StringFilter<"LikeUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"LikeUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerScalarRelationFilter, PlaceUrbanExplorerWhereInput>
  }

  export type LikeUrbanExplorerOrderByWithRelationInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    place?: PlaceUrbanExplorerOrderByWithRelationInput
  }

  export type LikeUrbanExplorerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    placeId_userId?: LikeUrbanExplorerPlaceIdUserIdCompoundUniqueInput
    AND?: LikeUrbanExplorerWhereInput | LikeUrbanExplorerWhereInput[]
    OR?: LikeUrbanExplorerWhereInput[]
    NOT?: LikeUrbanExplorerWhereInput | LikeUrbanExplorerWhereInput[]
    placeId?: StringFilter<"LikeUrbanExplorer"> | string
    userId?: StringFilter<"LikeUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"LikeUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerScalarRelationFilter, PlaceUrbanExplorerWhereInput>
  }, "id" | "placeId_userId">

  export type LikeUrbanExplorerOrderByWithAggregationInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeUrbanExplorerCountOrderByAggregateInput
    _max?: LikeUrbanExplorerMaxOrderByAggregateInput
    _min?: LikeUrbanExplorerMinOrderByAggregateInput
  }

  export type LikeUrbanExplorerScalarWhereWithAggregatesInput = {
    AND?: LikeUrbanExplorerScalarWhereWithAggregatesInput | LikeUrbanExplorerScalarWhereWithAggregatesInput[]
    OR?: LikeUrbanExplorerScalarWhereWithAggregatesInput[]
    NOT?: LikeUrbanExplorerScalarWhereWithAggregatesInput | LikeUrbanExplorerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LikeUrbanExplorer"> | string
    placeId?: StringWithAggregatesFilter<"LikeUrbanExplorer"> | string
    userId?: StringWithAggregatesFilter<"LikeUrbanExplorer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LikeUrbanExplorer"> | Date | string
  }

  export type BookmarkUrbanExplorerWhereInput = {
    AND?: BookmarkUrbanExplorerWhereInput | BookmarkUrbanExplorerWhereInput[]
    OR?: BookmarkUrbanExplorerWhereInput[]
    NOT?: BookmarkUrbanExplorerWhereInput | BookmarkUrbanExplorerWhereInput[]
    id?: StringFilter<"BookmarkUrbanExplorer"> | string
    placeId?: StringFilter<"BookmarkUrbanExplorer"> | string
    userId?: StringFilter<"BookmarkUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"BookmarkUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerScalarRelationFilter, PlaceUrbanExplorerWhereInput>
  }

  export type BookmarkUrbanExplorerOrderByWithRelationInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    place?: PlaceUrbanExplorerOrderByWithRelationInput
  }

  export type BookmarkUrbanExplorerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    placeId_userId?: BookmarkUrbanExplorerPlaceIdUserIdCompoundUniqueInput
    AND?: BookmarkUrbanExplorerWhereInput | BookmarkUrbanExplorerWhereInput[]
    OR?: BookmarkUrbanExplorerWhereInput[]
    NOT?: BookmarkUrbanExplorerWhereInput | BookmarkUrbanExplorerWhereInput[]
    placeId?: StringFilter<"BookmarkUrbanExplorer"> | string
    userId?: StringFilter<"BookmarkUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"BookmarkUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerScalarRelationFilter, PlaceUrbanExplorerWhereInput>
  }, "id" | "placeId_userId">

  export type BookmarkUrbanExplorerOrderByWithAggregationInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: BookmarkUrbanExplorerCountOrderByAggregateInput
    _max?: BookmarkUrbanExplorerMaxOrderByAggregateInput
    _min?: BookmarkUrbanExplorerMinOrderByAggregateInput
  }

  export type BookmarkUrbanExplorerScalarWhereWithAggregatesInput = {
    AND?: BookmarkUrbanExplorerScalarWhereWithAggregatesInput | BookmarkUrbanExplorerScalarWhereWithAggregatesInput[]
    OR?: BookmarkUrbanExplorerScalarWhereWithAggregatesInput[]
    NOT?: BookmarkUrbanExplorerScalarWhereWithAggregatesInput | BookmarkUrbanExplorerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BookmarkUrbanExplorer"> | string
    placeId?: StringWithAggregatesFilter<"BookmarkUrbanExplorer"> | string
    userId?: StringWithAggregatesFilter<"BookmarkUrbanExplorer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BookmarkUrbanExplorer"> | Date | string
  }

  export type ReportUrbanExplorerWhereInput = {
    AND?: ReportUrbanExplorerWhereInput | ReportUrbanExplorerWhereInput[]
    OR?: ReportUrbanExplorerWhereInput[]
    NOT?: ReportUrbanExplorerWhereInput | ReportUrbanExplorerWhereInput[]
    id?: StringFilter<"ReportUrbanExplorer"> | string
    placeId?: StringNullableFilter<"ReportUrbanExplorer"> | string | null
    reviewId?: StringNullableFilter<"ReportUrbanExplorer"> | string | null
    userId?: StringFilter<"ReportUrbanExplorer"> | string
    reason?: StringFilter<"ReportUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"ReportUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerNullableScalarRelationFilter, PlaceUrbanExplorerWhereInput> | null
    review?: XOR<ReviewUrbanExplorerNullableScalarRelationFilter, ReviewUrbanExplorerWhereInput> | null
  }

  export type ReportUrbanExplorerOrderByWithRelationInput = {
    id?: SortOrder
    placeId?: SortOrderInput | SortOrder
    reviewId?: SortOrderInput | SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    place?: PlaceUrbanExplorerOrderByWithRelationInput
    review?: ReviewUrbanExplorerOrderByWithRelationInput
  }

  export type ReportUrbanExplorerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportUrbanExplorerWhereInput | ReportUrbanExplorerWhereInput[]
    OR?: ReportUrbanExplorerWhereInput[]
    NOT?: ReportUrbanExplorerWhereInput | ReportUrbanExplorerWhereInput[]
    placeId?: StringNullableFilter<"ReportUrbanExplorer"> | string | null
    reviewId?: StringNullableFilter<"ReportUrbanExplorer"> | string | null
    userId?: StringFilter<"ReportUrbanExplorer"> | string
    reason?: StringFilter<"ReportUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"ReportUrbanExplorer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    place?: XOR<PlaceUrbanExplorerNullableScalarRelationFilter, PlaceUrbanExplorerWhereInput> | null
    review?: XOR<ReviewUrbanExplorerNullableScalarRelationFilter, ReviewUrbanExplorerWhereInput> | null
  }, "id">

  export type ReportUrbanExplorerOrderByWithAggregationInput = {
    id?: SortOrder
    placeId?: SortOrderInput | SortOrder
    reviewId?: SortOrderInput | SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: ReportUrbanExplorerCountOrderByAggregateInput
    _max?: ReportUrbanExplorerMaxOrderByAggregateInput
    _min?: ReportUrbanExplorerMinOrderByAggregateInput
  }

  export type ReportUrbanExplorerScalarWhereWithAggregatesInput = {
    AND?: ReportUrbanExplorerScalarWhereWithAggregatesInput | ReportUrbanExplorerScalarWhereWithAggregatesInput[]
    OR?: ReportUrbanExplorerScalarWhereWithAggregatesInput[]
    NOT?: ReportUrbanExplorerScalarWhereWithAggregatesInput | ReportUrbanExplorerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportUrbanExplorer"> | string
    placeId?: StringNullableWithAggregatesFilter<"ReportUrbanExplorer"> | string | null
    reviewId?: StringNullableWithAggregatesFilter<"ReportUrbanExplorer"> | string | null
    userId?: StringWithAggregatesFilter<"ReportUrbanExplorer"> | string
    reason?: StringWithAggregatesFilter<"ReportUrbanExplorer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportUrbanExplorer"> | Date | string
  }

  export type FoodieFoodWhereInput = {
    AND?: FoodieFoodWhereInput | FoodieFoodWhereInput[]
    OR?: FoodieFoodWhereInput[]
    NOT?: FoodieFoodWhereInput | FoodieFoodWhereInput[]
    id?: StringFilter<"FoodieFood"> | string
    name?: StringFilter<"FoodieFood"> | string
    cuisine?: StringFilter<"FoodieFood"> | string
    origin?: StringFilter<"FoodieFood"> | string
    description?: StringFilter<"FoodieFood"> | string
    submittedBy?: StringFilter<"FoodieFood"> | string
    validated?: BoolFilter<"FoodieFood"> | boolean
    createdAt?: DateTimeFilter<"FoodieFood"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    locations?: FoodieLocationListRelationFilter
    reviews?: FoodieReviewListRelationFilter
    likes?: FoodieLikeListRelationFilter
  }

  export type FoodieFoodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cuisine?: SortOrder
    origin?: SortOrder
    description?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    locations?: FoodieLocationOrderByRelationAggregateInput
    reviews?: FoodieReviewOrderByRelationAggregateInput
    likes?: FoodieLikeOrderByRelationAggregateInput
  }

  export type FoodieFoodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FoodieFoodWhereInput | FoodieFoodWhereInput[]
    OR?: FoodieFoodWhereInput[]
    NOT?: FoodieFoodWhereInput | FoodieFoodWhereInput[]
    name?: StringFilter<"FoodieFood"> | string
    cuisine?: StringFilter<"FoodieFood"> | string
    origin?: StringFilter<"FoodieFood"> | string
    description?: StringFilter<"FoodieFood"> | string
    submittedBy?: StringFilter<"FoodieFood"> | string
    validated?: BoolFilter<"FoodieFood"> | boolean
    createdAt?: DateTimeFilter<"FoodieFood"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    locations?: FoodieLocationListRelationFilter
    reviews?: FoodieReviewListRelationFilter
    likes?: FoodieLikeListRelationFilter
  }, "id">

  export type FoodieFoodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cuisine?: SortOrder
    origin?: SortOrder
    description?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: FoodieFoodCountOrderByAggregateInput
    _max?: FoodieFoodMaxOrderByAggregateInput
    _min?: FoodieFoodMinOrderByAggregateInput
  }

  export type FoodieFoodScalarWhereWithAggregatesInput = {
    AND?: FoodieFoodScalarWhereWithAggregatesInput | FoodieFoodScalarWhereWithAggregatesInput[]
    OR?: FoodieFoodScalarWhereWithAggregatesInput[]
    NOT?: FoodieFoodScalarWhereWithAggregatesInput | FoodieFoodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodieFood"> | string
    name?: StringWithAggregatesFilter<"FoodieFood"> | string
    cuisine?: StringWithAggregatesFilter<"FoodieFood"> | string
    origin?: StringWithAggregatesFilter<"FoodieFood"> | string
    description?: StringWithAggregatesFilter<"FoodieFood"> | string
    submittedBy?: StringWithAggregatesFilter<"FoodieFood"> | string
    validated?: BoolWithAggregatesFilter<"FoodieFood"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"FoodieFood"> | Date | string
  }

  export type FoodieLocationWhereInput = {
    AND?: FoodieLocationWhereInput | FoodieLocationWhereInput[]
    OR?: FoodieLocationWhereInput[]
    NOT?: FoodieLocationWhereInput | FoodieLocationWhereInput[]
    id?: StringFilter<"FoodieLocation"> | string
    foodId?: StringFilter<"FoodieLocation"> | string
    locationName?: StringFilter<"FoodieLocation"> | string
    address?: StringFilter<"FoodieLocation"> | string
    submittedBy?: StringFilter<"FoodieLocation"> | string
    createdAt?: DateTimeFilter<"FoodieLocation"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodieFoodScalarRelationFilter, FoodieFoodWhereInput>
  }

  export type FoodieLocationOrderByWithRelationInput = {
    id?: SortOrder
    foodId?: SortOrder
    locationName?: SortOrder
    address?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    food?: FoodieFoodOrderByWithRelationInput
  }

  export type FoodieLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FoodieLocationWhereInput | FoodieLocationWhereInput[]
    OR?: FoodieLocationWhereInput[]
    NOT?: FoodieLocationWhereInput | FoodieLocationWhereInput[]
    foodId?: StringFilter<"FoodieLocation"> | string
    locationName?: StringFilter<"FoodieLocation"> | string
    address?: StringFilter<"FoodieLocation"> | string
    submittedBy?: StringFilter<"FoodieLocation"> | string
    createdAt?: DateTimeFilter<"FoodieLocation"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodieFoodScalarRelationFilter, FoodieFoodWhereInput>
  }, "id">

  export type FoodieLocationOrderByWithAggregationInput = {
    id?: SortOrder
    foodId?: SortOrder
    locationName?: SortOrder
    address?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
    _count?: FoodieLocationCountOrderByAggregateInput
    _max?: FoodieLocationMaxOrderByAggregateInput
    _min?: FoodieLocationMinOrderByAggregateInput
  }

  export type FoodieLocationScalarWhereWithAggregatesInput = {
    AND?: FoodieLocationScalarWhereWithAggregatesInput | FoodieLocationScalarWhereWithAggregatesInput[]
    OR?: FoodieLocationScalarWhereWithAggregatesInput[]
    NOT?: FoodieLocationScalarWhereWithAggregatesInput | FoodieLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodieLocation"> | string
    foodId?: StringWithAggregatesFilter<"FoodieLocation"> | string
    locationName?: StringWithAggregatesFilter<"FoodieLocation"> | string
    address?: StringWithAggregatesFilter<"FoodieLocation"> | string
    submittedBy?: StringWithAggregatesFilter<"FoodieLocation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FoodieLocation"> | Date | string
  }

  export type FoodieReviewWhereInput = {
    AND?: FoodieReviewWhereInput | FoodieReviewWhereInput[]
    OR?: FoodieReviewWhereInput[]
    NOT?: FoodieReviewWhereInput | FoodieReviewWhereInput[]
    id?: StringFilter<"FoodieReview"> | string
    foodId?: StringFilter<"FoodieReview"> | string
    userId?: StringFilter<"FoodieReview"> | string
    rating?: IntFilter<"FoodieReview"> | number
    comment?: StringFilter<"FoodieReview"> | string
    validated?: BoolFilter<"FoodieReview"> | boolean
    createdAt?: DateTimeFilter<"FoodieReview"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodieFoodScalarRelationFilter, FoodieFoodWhereInput>
  }

  export type FoodieReviewOrderByWithRelationInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    food?: FoodieFoodOrderByWithRelationInput
  }

  export type FoodieReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FoodieReviewWhereInput | FoodieReviewWhereInput[]
    OR?: FoodieReviewWhereInput[]
    NOT?: FoodieReviewWhereInput | FoodieReviewWhereInput[]
    foodId?: StringFilter<"FoodieReview"> | string
    userId?: StringFilter<"FoodieReview"> | string
    rating?: IntFilter<"FoodieReview"> | number
    comment?: StringFilter<"FoodieReview"> | string
    validated?: BoolFilter<"FoodieReview"> | boolean
    createdAt?: DateTimeFilter<"FoodieReview"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodieFoodScalarRelationFilter, FoodieFoodWhereInput>
  }, "id">

  export type FoodieReviewOrderByWithAggregationInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: FoodieReviewCountOrderByAggregateInput
    _avg?: FoodieReviewAvgOrderByAggregateInput
    _max?: FoodieReviewMaxOrderByAggregateInput
    _min?: FoodieReviewMinOrderByAggregateInput
    _sum?: FoodieReviewSumOrderByAggregateInput
  }

  export type FoodieReviewScalarWhereWithAggregatesInput = {
    AND?: FoodieReviewScalarWhereWithAggregatesInput | FoodieReviewScalarWhereWithAggregatesInput[]
    OR?: FoodieReviewScalarWhereWithAggregatesInput[]
    NOT?: FoodieReviewScalarWhereWithAggregatesInput | FoodieReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodieReview"> | string
    foodId?: StringWithAggregatesFilter<"FoodieReview"> | string
    userId?: StringWithAggregatesFilter<"FoodieReview"> | string
    rating?: IntWithAggregatesFilter<"FoodieReview"> | number
    comment?: StringWithAggregatesFilter<"FoodieReview"> | string
    validated?: BoolWithAggregatesFilter<"FoodieReview"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"FoodieReview"> | Date | string
  }

  export type FoodieLikeWhereInput = {
    AND?: FoodieLikeWhereInput | FoodieLikeWhereInput[]
    OR?: FoodieLikeWhereInput[]
    NOT?: FoodieLikeWhereInput | FoodieLikeWhereInput[]
    id?: StringFilter<"FoodieLike"> | string
    foodId?: StringFilter<"FoodieLike"> | string
    userId?: StringFilter<"FoodieLike"> | string
    createdAt?: DateTimeFilter<"FoodieLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodieFoodScalarRelationFilter, FoodieFoodWhereInput>
  }

  export type FoodieLikeOrderByWithRelationInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    food?: FoodieFoodOrderByWithRelationInput
  }

  export type FoodieLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    foodId_userId?: FoodieLikeFoodIdUserIdCompoundUniqueInput
    AND?: FoodieLikeWhereInput | FoodieLikeWhereInput[]
    OR?: FoodieLikeWhereInput[]
    NOT?: FoodieLikeWhereInput | FoodieLikeWhereInput[]
    foodId?: StringFilter<"FoodieLike"> | string
    userId?: StringFilter<"FoodieLike"> | string
    createdAt?: DateTimeFilter<"FoodieLike"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodieFoodScalarRelationFilter, FoodieFoodWhereInput>
  }, "id" | "foodId_userId">

  export type FoodieLikeOrderByWithAggregationInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: FoodieLikeCountOrderByAggregateInput
    _max?: FoodieLikeMaxOrderByAggregateInput
    _min?: FoodieLikeMinOrderByAggregateInput
  }

  export type FoodieLikeScalarWhereWithAggregatesInput = {
    AND?: FoodieLikeScalarWhereWithAggregatesInput | FoodieLikeScalarWhereWithAggregatesInput[]
    OR?: FoodieLikeScalarWhereWithAggregatesInput[]
    NOT?: FoodieLikeScalarWhereWithAggregatesInput | FoodieLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodieLike"> | string
    foodId?: StringWithAggregatesFilter<"FoodieLike"> | string
    userId?: StringWithAggregatesFilter<"FoodieLike"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FoodieLike"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostDIYHomesCreateInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostsInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    category: string
    userId: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesCreateManyInput = {
    id?: string
    title: string
    content: string
    category: string
    userId: string
    createdAt?: Date | string
  }

  export type PostDIYHomesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostDIYHomesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewDIYHomesCreateInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    post: PostDIYHomesCreateNestedOneWithoutReviewsInput
    Report?: ReportDIYHomesCreateNestedManyWithoutReviewInput
  }

  export type ReviewDIYHomesUncheckedCreateInput = {
    id?: string
    postId: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewDIYHomesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    post?: PostDIYHomesUpdateOneRequiredWithoutReviewsNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutReviewNestedInput
  }

  export type ReviewDIYHomesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewDIYHomesCreateManyInput = {
    id?: string
    postId: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type ReviewDIYHomesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewDIYHomesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeDIYHomesCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikeInput
    post: PostDIYHomesCreateNestedOneWithoutLikeInput
  }

  export type LikeDIYHomesUncheckedCreateInput = {
    id?: string
    postId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeDIYHomesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikeNestedInput
    post?: PostDIYHomesUpdateOneRequiredWithoutLikeNestedInput
  }

  export type LikeDIYHomesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeDIYHomesCreateManyInput = {
    id?: string
    postId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeDIYHomesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeDIYHomesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkDIYHomesCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBookmarksInput
    post: PostDIYHomesCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkDIYHomesUncheckedCreateInput = {
    id?: string
    postId: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkDIYHomesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookmarksNestedInput
    post?: PostDIYHomesUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkDIYHomesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkDIYHomesCreateManyInput = {
    id?: string
    postId: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkDIYHomesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkDIYHomesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesCreateInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReportInput
    post?: PostDIYHomesCreateNestedOneWithoutReportInput
    review?: ReviewDIYHomesCreateNestedOneWithoutReportInput
  }

  export type ReportDIYHomesUncheckedCreateInput = {
    id?: string
    postId?: string | null
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportNestedInput
    post?: PostDIYHomesUpdateOneWithoutReportNestedInput
    review?: ReviewDIYHomesUpdateOneWithoutReportNestedInput
  }

  export type ReportDIYHomesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesCreateManyInput = {
    id?: string
    postId?: string | null
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaceUrbanExplorerCreateInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
    owner: UserCreateNestedOneWithoutPlaceUrbanExplorerInput
    reviews?: ReviewUrbanExplorerCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerUncheckedCreateInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    ownerId: string
    createdAt?: Date | string
    validated?: boolean
    reviews?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutPlaceUrbanExplorerNestedInput
    reviews?: ReviewUrbanExplorerUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerCreateManyInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    ownerId: string
    createdAt?: Date | string
    validated?: boolean
  }

  export type PlaceUrbanExplorerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlaceUrbanExplorerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReviewUrbanExplorerCreateInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewUrbanExplorerInput
    place: PlaceUrbanExplorerCreateNestedOneWithoutReviewsInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutReviewInput
  }

  export type ReviewUrbanExplorerUncheckedCreateInput = {
    id?: string
    placeId: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewUrbanExplorerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewUrbanExplorerNestedInput
    place?: PlaceUrbanExplorerUpdateOneRequiredWithoutReviewsNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUrbanExplorerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUrbanExplorerCreateManyInput = {
    id?: string
    placeId: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type ReviewUrbanExplorerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUrbanExplorerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUrbanExplorerCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikeUrbanExplorerInput
    place: PlaceUrbanExplorerCreateNestedOneWithoutLikesInput
  }

  export type LikeUrbanExplorerUncheckedCreateInput = {
    id?: string
    placeId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeUrbanExplorerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikeUrbanExplorerNestedInput
    place?: PlaceUrbanExplorerUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUrbanExplorerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUrbanExplorerCreateManyInput = {
    id?: string
    placeId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeUrbanExplorerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUrbanExplorerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUrbanExplorerCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBookmarkUrbanExplorerInput
    place: PlaceUrbanExplorerCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUrbanExplorerUncheckedCreateInput = {
    id?: string
    placeId: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkUrbanExplorerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookmarkUrbanExplorerNestedInput
    place?: PlaceUrbanExplorerUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUrbanExplorerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUrbanExplorerCreateManyInput = {
    id?: string
    placeId: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkUrbanExplorerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUrbanExplorerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerCreateInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReportUrbanExplorerInput
    place?: PlaceUrbanExplorerCreateNestedOneWithoutReportsInput
    review?: ReviewUrbanExplorerCreateNestedOneWithoutReportsInput
  }

  export type ReportUrbanExplorerUncheckedCreateInput = {
    id?: string
    placeId?: string | null
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportUrbanExplorerNestedInput
    place?: PlaceUrbanExplorerUpdateOneWithoutReportsNestedInput
    review?: ReviewUrbanExplorerUpdateOneWithoutReportsNestedInput
  }

  export type ReportUrbanExplorerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerCreateManyInput = {
    id?: string
    placeId?: string | null
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieFoodCreateInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    validated?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieFoodInput
    locations?: FoodieLocationCreateNestedManyWithoutFoodInput
    reviews?: FoodieReviewCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodUncheckedCreateInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    locations?: FoodieLocationUncheckedCreateNestedManyWithoutFoodInput
    reviews?: FoodieReviewUncheckedCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieFoodNestedInput
    locations?: FoodieLocationUpdateManyWithoutFoodNestedInput
    reviews?: FoodieReviewUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUpdateManyWithoutFoodNestedInput
  }

  export type FoodieFoodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: FoodieLocationUncheckedUpdateManyWithoutFoodNestedInput
    reviews?: FoodieReviewUncheckedUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodieFoodCreateManyInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieFoodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieFoodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLocationCreateInput = {
    id?: string
    locationName: string
    address: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieLocationInput
    food: FoodieFoodCreateNestedOneWithoutLocationsInput
  }

  export type FoodieLocationUncheckedCreateInput = {
    id?: string
    foodId: string
    locationName: string
    address: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type FoodieLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieLocationNestedInput
    food?: FoodieFoodUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type FoodieLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLocationCreateManyInput = {
    id?: string
    foodId: string
    locationName: string
    address: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type FoodieLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieReviewCreateInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieReviewInput
    food: FoodieFoodCreateNestedOneWithoutReviewsInput
  }

  export type FoodieReviewUncheckedCreateInput = {
    id?: string
    foodId: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieReviewNestedInput
    food?: FoodieFoodUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type FoodieReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieReviewCreateManyInput = {
    id?: string
    foodId: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLikeCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieLikeInput
    food: FoodieFoodCreateNestedOneWithoutLikesInput
  }

  export type FoodieLikeUncheckedCreateInput = {
    id?: string
    foodId: string
    userId: string
    createdAt?: Date | string
  }

  export type FoodieLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieLikeNestedInput
    food?: FoodieFoodUpdateOneRequiredWithoutLikesNestedInput
  }

  export type FoodieLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLikeCreateManyInput = {
    id?: string
    foodId: string
    userId: string
    createdAt?: Date | string
  }

  export type FoodieLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PostDIYHomesListRelationFilter = {
    every?: PostDIYHomesWhereInput
    some?: PostDIYHomesWhereInput
    none?: PostDIYHomesWhereInput
  }

  export type ReviewDIYHomesListRelationFilter = {
    every?: ReviewDIYHomesWhereInput
    some?: ReviewDIYHomesWhereInput
    none?: ReviewDIYHomesWhereInput
  }

  export type BookmarkDIYHomesListRelationFilter = {
    every?: BookmarkDIYHomesWhereInput
    some?: BookmarkDIYHomesWhereInput
    none?: BookmarkDIYHomesWhereInput
  }

  export type LikeDIYHomesListRelationFilter = {
    every?: LikeDIYHomesWhereInput
    some?: LikeDIYHomesWhereInput
    none?: LikeDIYHomesWhereInput
  }

  export type ReportDIYHomesListRelationFilter = {
    every?: ReportDIYHomesWhereInput
    some?: ReportDIYHomesWhereInput
    none?: ReportDIYHomesWhereInput
  }

  export type PlaceUrbanExplorerListRelationFilter = {
    every?: PlaceUrbanExplorerWhereInput
    some?: PlaceUrbanExplorerWhereInput
    none?: PlaceUrbanExplorerWhereInput
  }

  export type ReviewUrbanExplorerListRelationFilter = {
    every?: ReviewUrbanExplorerWhereInput
    some?: ReviewUrbanExplorerWhereInput
    none?: ReviewUrbanExplorerWhereInput
  }

  export type LikeUrbanExplorerListRelationFilter = {
    every?: LikeUrbanExplorerWhereInput
    some?: LikeUrbanExplorerWhereInput
    none?: LikeUrbanExplorerWhereInput
  }

  export type BookmarkUrbanExplorerListRelationFilter = {
    every?: BookmarkUrbanExplorerWhereInput
    some?: BookmarkUrbanExplorerWhereInput
    none?: BookmarkUrbanExplorerWhereInput
  }

  export type ReportUrbanExplorerListRelationFilter = {
    every?: ReportUrbanExplorerWhereInput
    some?: ReportUrbanExplorerWhereInput
    none?: ReportUrbanExplorerWhereInput
  }

  export type FoodieFoodListRelationFilter = {
    every?: FoodieFoodWhereInput
    some?: FoodieFoodWhereInput
    none?: FoodieFoodWhereInput
  }

  export type FoodieLocationListRelationFilter = {
    every?: FoodieLocationWhereInput
    some?: FoodieLocationWhereInput
    none?: FoodieLocationWhereInput
  }

  export type FoodieReviewListRelationFilter = {
    every?: FoodieReviewWhereInput
    some?: FoodieReviewWhereInput
    none?: FoodieReviewWhereInput
  }

  export type FoodieLikeListRelationFilter = {
    every?: FoodieLikeWhereInput
    some?: FoodieLikeWhereInput
    none?: FoodieLikeWhereInput
  }

  export type PostDIYHomesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewDIYHomesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmarkDIYHomesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeDIYHomesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportDIYHomesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaceUrbanExplorerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewUrbanExplorerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeUrbanExplorerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmarkUrbanExplorerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportUrbanExplorerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodieFoodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodieLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodieReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodieLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    group?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PostDIYHomesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PostDIYHomesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PostDIYHomesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PostDIYHomesScalarRelationFilter = {
    is?: PostDIYHomesWhereInput
    isNot?: PostDIYHomesWhereInput
  }

  export type ReviewDIYHomesCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewDIYHomesAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewDIYHomesMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewDIYHomesMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewDIYHomesSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type LikeDIYHomesPostIdUserIdCompoundUniqueInput = {
    postId: string
    userId: string
  }

  export type LikeDIYHomesCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeDIYHomesMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeDIYHomesMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkDIYHomesPostIdUserIdCompoundUniqueInput = {
    postId: string
    userId: string
  }

  export type BookmarkDIYHomesCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkDIYHomesMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkDIYHomesMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PostDIYHomesNullableScalarRelationFilter = {
    is?: PostDIYHomesWhereInput | null
    isNot?: PostDIYHomesWhereInput | null
  }

  export type ReviewDIYHomesNullableScalarRelationFilter = {
    is?: ReviewDIYHomesWhereInput | null
    isNot?: ReviewDIYHomesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReportDIYHomesCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportDIYHomesMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportDIYHomesMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PlaceUrbanExplorerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    location?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    validated?: SortOrder
  }

  export type PlaceUrbanExplorerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    location?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    validated?: SortOrder
  }

  export type PlaceUrbanExplorerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    location?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    validated?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PlaceUrbanExplorerScalarRelationFilter = {
    is?: PlaceUrbanExplorerWhereInput
    isNot?: PlaceUrbanExplorerWhereInput
  }

  export type ReviewUrbanExplorerCountOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewUrbanExplorerAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewUrbanExplorerMaxOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewUrbanExplorerMinOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewUrbanExplorerSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type LikeUrbanExplorerPlaceIdUserIdCompoundUniqueInput = {
    placeId: string
    userId: string
  }

  export type LikeUrbanExplorerCountOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeUrbanExplorerMaxOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeUrbanExplorerMinOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkUrbanExplorerPlaceIdUserIdCompoundUniqueInput = {
    placeId: string
    userId: string
  }

  export type BookmarkUrbanExplorerCountOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkUrbanExplorerMaxOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkUrbanExplorerMinOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PlaceUrbanExplorerNullableScalarRelationFilter = {
    is?: PlaceUrbanExplorerWhereInput | null
    isNot?: PlaceUrbanExplorerWhereInput | null
  }

  export type ReviewUrbanExplorerNullableScalarRelationFilter = {
    is?: ReviewUrbanExplorerWhereInput | null
    isNot?: ReviewUrbanExplorerWhereInput | null
  }

  export type ReportUrbanExplorerCountOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportUrbanExplorerMaxOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportUrbanExplorerMinOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieFoodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cuisine?: SortOrder
    origin?: SortOrder
    description?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieFoodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cuisine?: SortOrder
    origin?: SortOrder
    description?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieFoodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cuisine?: SortOrder
    origin?: SortOrder
    description?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieFoodScalarRelationFilter = {
    is?: FoodieFoodWhereInput
    isNot?: FoodieFoodWhereInput
  }

  export type FoodieLocationCountOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    locationName?: SortOrder
    address?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    locationName?: SortOrder
    address?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieLocationMinOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    locationName?: SortOrder
    address?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieReviewCountOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FoodieReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieReviewMinOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FoodieLikeFoodIdUserIdCompoundUniqueInput = {
    foodId: string
    userId: string
  }

  export type FoodieLikeCountOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodieLikeMinOrderByAggregateInput = {
    id?: SortOrder
    foodId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PostDIYHomesCreateNestedManyWithoutUserInput = {
    create?: XOR<PostDIYHomesCreateWithoutUserInput, PostDIYHomesUncheckedCreateWithoutUserInput> | PostDIYHomesCreateWithoutUserInput[] | PostDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutUserInput | PostDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: PostDIYHomesCreateManyUserInputEnvelope
    connect?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
  }

  export type ReviewDIYHomesCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutUserInput, ReviewDIYHomesUncheckedCreateWithoutUserInput> | ReviewDIYHomesCreateWithoutUserInput[] | ReviewDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutUserInput | ReviewDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: ReviewDIYHomesCreateManyUserInputEnvelope
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
  }

  export type BookmarkDIYHomesCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutUserInput, BookmarkDIYHomesUncheckedCreateWithoutUserInput> | BookmarkDIYHomesCreateWithoutUserInput[] | BookmarkDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutUserInput | BookmarkDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkDIYHomesCreateManyUserInputEnvelope
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
  }

  export type LikeDIYHomesCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeDIYHomesCreateWithoutUserInput, LikeDIYHomesUncheckedCreateWithoutUserInput> | LikeDIYHomesCreateWithoutUserInput[] | LikeDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutUserInput | LikeDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: LikeDIYHomesCreateManyUserInputEnvelope
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
  }

  export type ReportDIYHomesCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportDIYHomesCreateWithoutUserInput, ReportDIYHomesUncheckedCreateWithoutUserInput> | ReportDIYHomesCreateWithoutUserInput[] | ReportDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutUserInput | ReportDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: ReportDIYHomesCreateManyUserInputEnvelope
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
  }

  export type PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutOwnerInput, PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput> | PlaceUrbanExplorerCreateWithoutOwnerInput[] | PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput | PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput[]
    createMany?: PlaceUrbanExplorerCreateManyOwnerInputEnvelope
    connect?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
  }

  export type ReviewUrbanExplorerCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutUserInput, ReviewUrbanExplorerUncheckedCreateWithoutUserInput> | ReviewUrbanExplorerCreateWithoutUserInput[] | ReviewUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutUserInput | ReviewUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: ReviewUrbanExplorerCreateManyUserInputEnvelope
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
  }

  export type LikeUrbanExplorerCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutUserInput, LikeUrbanExplorerUncheckedCreateWithoutUserInput> | LikeUrbanExplorerCreateWithoutUserInput[] | LikeUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutUserInput | LikeUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: LikeUrbanExplorerCreateManyUserInputEnvelope
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
  }

  export type BookmarkUrbanExplorerCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutUserInput, BookmarkUrbanExplorerUncheckedCreateWithoutUserInput> | BookmarkUrbanExplorerCreateWithoutUserInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutUserInput | BookmarkUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkUrbanExplorerCreateManyUserInputEnvelope
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
  }

  export type ReportUrbanExplorerCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutUserInput, ReportUrbanExplorerUncheckedCreateWithoutUserInput> | ReportUrbanExplorerCreateWithoutUserInput[] | ReportUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutUserInput | ReportUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: ReportUrbanExplorerCreateManyUserInputEnvelope
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
  }

  export type FoodieFoodCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieFoodCreateWithoutUserInput, FoodieFoodUncheckedCreateWithoutUserInput> | FoodieFoodCreateWithoutUserInput[] | FoodieFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutUserInput | FoodieFoodCreateOrConnectWithoutUserInput[]
    createMany?: FoodieFoodCreateManyUserInputEnvelope
    connect?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
  }

  export type FoodieLocationCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieLocationCreateWithoutUserInput, FoodieLocationUncheckedCreateWithoutUserInput> | FoodieLocationCreateWithoutUserInput[] | FoodieLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutUserInput | FoodieLocationCreateOrConnectWithoutUserInput[]
    createMany?: FoodieLocationCreateManyUserInputEnvelope
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
  }

  export type FoodieReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieReviewCreateWithoutUserInput, FoodieReviewUncheckedCreateWithoutUserInput> | FoodieReviewCreateWithoutUserInput[] | FoodieReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutUserInput | FoodieReviewCreateOrConnectWithoutUserInput[]
    createMany?: FoodieReviewCreateManyUserInputEnvelope
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
  }

  export type FoodieLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieLikeCreateWithoutUserInput, FoodieLikeUncheckedCreateWithoutUserInput> | FoodieLikeCreateWithoutUserInput[] | FoodieLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutUserInput | FoodieLikeCreateOrConnectWithoutUserInput[]
    createMany?: FoodieLikeCreateManyUserInputEnvelope
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
  }

  export type PostDIYHomesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostDIYHomesCreateWithoutUserInput, PostDIYHomesUncheckedCreateWithoutUserInput> | PostDIYHomesCreateWithoutUserInput[] | PostDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutUserInput | PostDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: PostDIYHomesCreateManyUserInputEnvelope
    connect?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
  }

  export type ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutUserInput, ReviewDIYHomesUncheckedCreateWithoutUserInput> | ReviewDIYHomesCreateWithoutUserInput[] | ReviewDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutUserInput | ReviewDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: ReviewDIYHomesCreateManyUserInputEnvelope
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
  }

  export type BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutUserInput, BookmarkDIYHomesUncheckedCreateWithoutUserInput> | BookmarkDIYHomesCreateWithoutUserInput[] | BookmarkDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutUserInput | BookmarkDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkDIYHomesCreateManyUserInputEnvelope
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
  }

  export type LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeDIYHomesCreateWithoutUserInput, LikeDIYHomesUncheckedCreateWithoutUserInput> | LikeDIYHomesCreateWithoutUserInput[] | LikeDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutUserInput | LikeDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: LikeDIYHomesCreateManyUserInputEnvelope
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
  }

  export type ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportDIYHomesCreateWithoutUserInput, ReportDIYHomesUncheckedCreateWithoutUserInput> | ReportDIYHomesCreateWithoutUserInput[] | ReportDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutUserInput | ReportDIYHomesCreateOrConnectWithoutUserInput[]
    createMany?: ReportDIYHomesCreateManyUserInputEnvelope
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
  }

  export type PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutOwnerInput, PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput> | PlaceUrbanExplorerCreateWithoutOwnerInput[] | PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput | PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput[]
    createMany?: PlaceUrbanExplorerCreateManyOwnerInputEnvelope
    connect?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
  }

  export type ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutUserInput, ReviewUrbanExplorerUncheckedCreateWithoutUserInput> | ReviewUrbanExplorerCreateWithoutUserInput[] | ReviewUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutUserInput | ReviewUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: ReviewUrbanExplorerCreateManyUserInputEnvelope
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
  }

  export type LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutUserInput, LikeUrbanExplorerUncheckedCreateWithoutUserInput> | LikeUrbanExplorerCreateWithoutUserInput[] | LikeUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutUserInput | LikeUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: LikeUrbanExplorerCreateManyUserInputEnvelope
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
  }

  export type BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutUserInput, BookmarkUrbanExplorerUncheckedCreateWithoutUserInput> | BookmarkUrbanExplorerCreateWithoutUserInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutUserInput | BookmarkUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkUrbanExplorerCreateManyUserInputEnvelope
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
  }

  export type ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutUserInput, ReportUrbanExplorerUncheckedCreateWithoutUserInput> | ReportUrbanExplorerCreateWithoutUserInput[] | ReportUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutUserInput | ReportUrbanExplorerCreateOrConnectWithoutUserInput[]
    createMany?: ReportUrbanExplorerCreateManyUserInputEnvelope
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
  }

  export type FoodieFoodUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieFoodCreateWithoutUserInput, FoodieFoodUncheckedCreateWithoutUserInput> | FoodieFoodCreateWithoutUserInput[] | FoodieFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutUserInput | FoodieFoodCreateOrConnectWithoutUserInput[]
    createMany?: FoodieFoodCreateManyUserInputEnvelope
    connect?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
  }

  export type FoodieLocationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieLocationCreateWithoutUserInput, FoodieLocationUncheckedCreateWithoutUserInput> | FoodieLocationCreateWithoutUserInput[] | FoodieLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutUserInput | FoodieLocationCreateOrConnectWithoutUserInput[]
    createMany?: FoodieLocationCreateManyUserInputEnvelope
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
  }

  export type FoodieReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieReviewCreateWithoutUserInput, FoodieReviewUncheckedCreateWithoutUserInput> | FoodieReviewCreateWithoutUserInput[] | FoodieReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutUserInput | FoodieReviewCreateOrConnectWithoutUserInput[]
    createMany?: FoodieReviewCreateManyUserInputEnvelope
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
  }

  export type FoodieLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodieLikeCreateWithoutUserInput, FoodieLikeUncheckedCreateWithoutUserInput> | FoodieLikeCreateWithoutUserInput[] | FoodieLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutUserInput | FoodieLikeCreateOrConnectWithoutUserInput[]
    createMany?: FoodieLikeCreateManyUserInputEnvelope
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PostDIYHomesUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostDIYHomesCreateWithoutUserInput, PostDIYHomesUncheckedCreateWithoutUserInput> | PostDIYHomesCreateWithoutUserInput[] | PostDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutUserInput | PostDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: PostDIYHomesUpsertWithWhereUniqueWithoutUserInput | PostDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostDIYHomesCreateManyUserInputEnvelope
    set?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    disconnect?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    delete?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    connect?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    update?: PostDIYHomesUpdateWithWhereUniqueWithoutUserInput | PostDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostDIYHomesUpdateManyWithWhereWithoutUserInput | PostDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostDIYHomesScalarWhereInput | PostDIYHomesScalarWhereInput[]
  }

  export type ReviewDIYHomesUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutUserInput, ReviewDIYHomesUncheckedCreateWithoutUserInput> | ReviewDIYHomesCreateWithoutUserInput[] | ReviewDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutUserInput | ReviewDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: ReviewDIYHomesUpsertWithWhereUniqueWithoutUserInput | ReviewDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewDIYHomesCreateManyUserInputEnvelope
    set?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    disconnect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    delete?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    update?: ReviewDIYHomesUpdateWithWhereUniqueWithoutUserInput | ReviewDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewDIYHomesUpdateManyWithWhereWithoutUserInput | ReviewDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewDIYHomesScalarWhereInput | ReviewDIYHomesScalarWhereInput[]
  }

  export type BookmarkDIYHomesUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutUserInput, BookmarkDIYHomesUncheckedCreateWithoutUserInput> | BookmarkDIYHomesCreateWithoutUserInput[] | BookmarkDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutUserInput | BookmarkDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkDIYHomesUpsertWithWhereUniqueWithoutUserInput | BookmarkDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkDIYHomesCreateManyUserInputEnvelope
    set?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    disconnect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    delete?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    update?: BookmarkDIYHomesUpdateWithWhereUniqueWithoutUserInput | BookmarkDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkDIYHomesUpdateManyWithWhereWithoutUserInput | BookmarkDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkDIYHomesScalarWhereInput | BookmarkDIYHomesScalarWhereInput[]
  }

  export type LikeDIYHomesUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeDIYHomesCreateWithoutUserInput, LikeDIYHomesUncheckedCreateWithoutUserInput> | LikeDIYHomesCreateWithoutUserInput[] | LikeDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutUserInput | LikeDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: LikeDIYHomesUpsertWithWhereUniqueWithoutUserInput | LikeDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeDIYHomesCreateManyUserInputEnvelope
    set?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    disconnect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    delete?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    update?: LikeDIYHomesUpdateWithWhereUniqueWithoutUserInput | LikeDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeDIYHomesUpdateManyWithWhereWithoutUserInput | LikeDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeDIYHomesScalarWhereInput | LikeDIYHomesScalarWhereInput[]
  }

  export type ReportDIYHomesUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportDIYHomesCreateWithoutUserInput, ReportDIYHomesUncheckedCreateWithoutUserInput> | ReportDIYHomesCreateWithoutUserInput[] | ReportDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutUserInput | ReportDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: ReportDIYHomesUpsertWithWhereUniqueWithoutUserInput | ReportDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportDIYHomesCreateManyUserInputEnvelope
    set?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    disconnect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    delete?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    update?: ReportDIYHomesUpdateWithWhereUniqueWithoutUserInput | ReportDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportDIYHomesUpdateManyWithWhereWithoutUserInput | ReportDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
  }

  export type PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutOwnerInput, PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput> | PlaceUrbanExplorerCreateWithoutOwnerInput[] | PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput | PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput[]
    upsert?: PlaceUrbanExplorerUpsertWithWhereUniqueWithoutOwnerInput | PlaceUrbanExplorerUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PlaceUrbanExplorerCreateManyOwnerInputEnvelope
    set?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    disconnect?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    delete?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    connect?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    update?: PlaceUrbanExplorerUpdateWithWhereUniqueWithoutOwnerInput | PlaceUrbanExplorerUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PlaceUrbanExplorerUpdateManyWithWhereWithoutOwnerInput | PlaceUrbanExplorerUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PlaceUrbanExplorerScalarWhereInput | PlaceUrbanExplorerScalarWhereInput[]
  }

  export type ReviewUrbanExplorerUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutUserInput, ReviewUrbanExplorerUncheckedCreateWithoutUserInput> | ReviewUrbanExplorerCreateWithoutUserInput[] | ReviewUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutUserInput | ReviewUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | ReviewUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewUrbanExplorerCreateManyUserInputEnvelope
    set?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    disconnect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    delete?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    update?: ReviewUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | ReviewUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUrbanExplorerUpdateManyWithWhereWithoutUserInput | ReviewUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewUrbanExplorerScalarWhereInput | ReviewUrbanExplorerScalarWhereInput[]
  }

  export type LikeUrbanExplorerUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutUserInput, LikeUrbanExplorerUncheckedCreateWithoutUserInput> | LikeUrbanExplorerCreateWithoutUserInput[] | LikeUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutUserInput | LikeUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: LikeUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | LikeUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeUrbanExplorerCreateManyUserInputEnvelope
    set?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    disconnect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    delete?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    update?: LikeUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | LikeUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUrbanExplorerUpdateManyWithWhereWithoutUserInput | LikeUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeUrbanExplorerScalarWhereInput | LikeUrbanExplorerScalarWhereInput[]
  }

  export type BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutUserInput, BookmarkUrbanExplorerUncheckedCreateWithoutUserInput> | BookmarkUrbanExplorerCreateWithoutUserInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutUserInput | BookmarkUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkUrbanExplorerCreateManyUserInputEnvelope
    set?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    disconnect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    delete?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    update?: BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUrbanExplorerUpdateManyWithWhereWithoutUserInput | BookmarkUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkUrbanExplorerScalarWhereInput | BookmarkUrbanExplorerScalarWhereInput[]
  }

  export type ReportUrbanExplorerUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutUserInput, ReportUrbanExplorerUncheckedCreateWithoutUserInput> | ReportUrbanExplorerCreateWithoutUserInput[] | ReportUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutUserInput | ReportUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: ReportUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | ReportUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportUrbanExplorerCreateManyUserInputEnvelope
    set?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    disconnect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    delete?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    update?: ReportUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | ReportUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUrbanExplorerUpdateManyWithWhereWithoutUserInput | ReportUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
  }

  export type FoodieFoodUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieFoodCreateWithoutUserInput, FoodieFoodUncheckedCreateWithoutUserInput> | FoodieFoodCreateWithoutUserInput[] | FoodieFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutUserInput | FoodieFoodCreateOrConnectWithoutUserInput[]
    upsert?: FoodieFoodUpsertWithWhereUniqueWithoutUserInput | FoodieFoodUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieFoodCreateManyUserInputEnvelope
    set?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    disconnect?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    delete?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    connect?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    update?: FoodieFoodUpdateWithWhereUniqueWithoutUserInput | FoodieFoodUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieFoodUpdateManyWithWhereWithoutUserInput | FoodieFoodUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieFoodScalarWhereInput | FoodieFoodScalarWhereInput[]
  }

  export type FoodieLocationUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieLocationCreateWithoutUserInput, FoodieLocationUncheckedCreateWithoutUserInput> | FoodieLocationCreateWithoutUserInput[] | FoodieLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutUserInput | FoodieLocationCreateOrConnectWithoutUserInput[]
    upsert?: FoodieLocationUpsertWithWhereUniqueWithoutUserInput | FoodieLocationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieLocationCreateManyUserInputEnvelope
    set?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    disconnect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    delete?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    update?: FoodieLocationUpdateWithWhereUniqueWithoutUserInput | FoodieLocationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieLocationUpdateManyWithWhereWithoutUserInput | FoodieLocationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieLocationScalarWhereInput | FoodieLocationScalarWhereInput[]
  }

  export type FoodieReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieReviewCreateWithoutUserInput, FoodieReviewUncheckedCreateWithoutUserInput> | FoodieReviewCreateWithoutUserInput[] | FoodieReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutUserInput | FoodieReviewCreateOrConnectWithoutUserInput[]
    upsert?: FoodieReviewUpsertWithWhereUniqueWithoutUserInput | FoodieReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieReviewCreateManyUserInputEnvelope
    set?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    disconnect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    delete?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    update?: FoodieReviewUpdateWithWhereUniqueWithoutUserInput | FoodieReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieReviewUpdateManyWithWhereWithoutUserInput | FoodieReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieReviewScalarWhereInput | FoodieReviewScalarWhereInput[]
  }

  export type FoodieLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieLikeCreateWithoutUserInput, FoodieLikeUncheckedCreateWithoutUserInput> | FoodieLikeCreateWithoutUserInput[] | FoodieLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutUserInput | FoodieLikeCreateOrConnectWithoutUserInput[]
    upsert?: FoodieLikeUpsertWithWhereUniqueWithoutUserInput | FoodieLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieLikeCreateManyUserInputEnvelope
    set?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    disconnect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    delete?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    update?: FoodieLikeUpdateWithWhereUniqueWithoutUserInput | FoodieLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieLikeUpdateManyWithWhereWithoutUserInput | FoodieLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieLikeScalarWhereInput | FoodieLikeScalarWhereInput[]
  }

  export type PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostDIYHomesCreateWithoutUserInput, PostDIYHomesUncheckedCreateWithoutUserInput> | PostDIYHomesCreateWithoutUserInput[] | PostDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutUserInput | PostDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: PostDIYHomesUpsertWithWhereUniqueWithoutUserInput | PostDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostDIYHomesCreateManyUserInputEnvelope
    set?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    disconnect?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    delete?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    connect?: PostDIYHomesWhereUniqueInput | PostDIYHomesWhereUniqueInput[]
    update?: PostDIYHomesUpdateWithWhereUniqueWithoutUserInput | PostDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostDIYHomesUpdateManyWithWhereWithoutUserInput | PostDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostDIYHomesScalarWhereInput | PostDIYHomesScalarWhereInput[]
  }

  export type ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutUserInput, ReviewDIYHomesUncheckedCreateWithoutUserInput> | ReviewDIYHomesCreateWithoutUserInput[] | ReviewDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutUserInput | ReviewDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: ReviewDIYHomesUpsertWithWhereUniqueWithoutUserInput | ReviewDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewDIYHomesCreateManyUserInputEnvelope
    set?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    disconnect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    delete?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    update?: ReviewDIYHomesUpdateWithWhereUniqueWithoutUserInput | ReviewDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewDIYHomesUpdateManyWithWhereWithoutUserInput | ReviewDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewDIYHomesScalarWhereInput | ReviewDIYHomesScalarWhereInput[]
  }

  export type BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutUserInput, BookmarkDIYHomesUncheckedCreateWithoutUserInput> | BookmarkDIYHomesCreateWithoutUserInput[] | BookmarkDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutUserInput | BookmarkDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkDIYHomesUpsertWithWhereUniqueWithoutUserInput | BookmarkDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkDIYHomesCreateManyUserInputEnvelope
    set?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    disconnect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    delete?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    update?: BookmarkDIYHomesUpdateWithWhereUniqueWithoutUserInput | BookmarkDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkDIYHomesUpdateManyWithWhereWithoutUserInput | BookmarkDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkDIYHomesScalarWhereInput | BookmarkDIYHomesScalarWhereInput[]
  }

  export type LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeDIYHomesCreateWithoutUserInput, LikeDIYHomesUncheckedCreateWithoutUserInput> | LikeDIYHomesCreateWithoutUserInput[] | LikeDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutUserInput | LikeDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: LikeDIYHomesUpsertWithWhereUniqueWithoutUserInput | LikeDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeDIYHomesCreateManyUserInputEnvelope
    set?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    disconnect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    delete?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    update?: LikeDIYHomesUpdateWithWhereUniqueWithoutUserInput | LikeDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeDIYHomesUpdateManyWithWhereWithoutUserInput | LikeDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeDIYHomesScalarWhereInput | LikeDIYHomesScalarWhereInput[]
  }

  export type ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportDIYHomesCreateWithoutUserInput, ReportDIYHomesUncheckedCreateWithoutUserInput> | ReportDIYHomesCreateWithoutUserInput[] | ReportDIYHomesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutUserInput | ReportDIYHomesCreateOrConnectWithoutUserInput[]
    upsert?: ReportDIYHomesUpsertWithWhereUniqueWithoutUserInput | ReportDIYHomesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportDIYHomesCreateManyUserInputEnvelope
    set?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    disconnect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    delete?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    update?: ReportDIYHomesUpdateWithWhereUniqueWithoutUserInput | ReportDIYHomesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportDIYHomesUpdateManyWithWhereWithoutUserInput | ReportDIYHomesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
  }

  export type PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutOwnerInput, PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput> | PlaceUrbanExplorerCreateWithoutOwnerInput[] | PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput | PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput[]
    upsert?: PlaceUrbanExplorerUpsertWithWhereUniqueWithoutOwnerInput | PlaceUrbanExplorerUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PlaceUrbanExplorerCreateManyOwnerInputEnvelope
    set?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    disconnect?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    delete?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    connect?: PlaceUrbanExplorerWhereUniqueInput | PlaceUrbanExplorerWhereUniqueInput[]
    update?: PlaceUrbanExplorerUpdateWithWhereUniqueWithoutOwnerInput | PlaceUrbanExplorerUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PlaceUrbanExplorerUpdateManyWithWhereWithoutOwnerInput | PlaceUrbanExplorerUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PlaceUrbanExplorerScalarWhereInput | PlaceUrbanExplorerScalarWhereInput[]
  }

  export type ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutUserInput, ReviewUrbanExplorerUncheckedCreateWithoutUserInput> | ReviewUrbanExplorerCreateWithoutUserInput[] | ReviewUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutUserInput | ReviewUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | ReviewUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewUrbanExplorerCreateManyUserInputEnvelope
    set?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    disconnect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    delete?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    update?: ReviewUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | ReviewUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUrbanExplorerUpdateManyWithWhereWithoutUserInput | ReviewUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewUrbanExplorerScalarWhereInput | ReviewUrbanExplorerScalarWhereInput[]
  }

  export type LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutUserInput, LikeUrbanExplorerUncheckedCreateWithoutUserInput> | LikeUrbanExplorerCreateWithoutUserInput[] | LikeUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutUserInput | LikeUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: LikeUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | LikeUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeUrbanExplorerCreateManyUserInputEnvelope
    set?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    disconnect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    delete?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    update?: LikeUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | LikeUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUrbanExplorerUpdateManyWithWhereWithoutUserInput | LikeUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeUrbanExplorerScalarWhereInput | LikeUrbanExplorerScalarWhereInput[]
  }

  export type BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutUserInput, BookmarkUrbanExplorerUncheckedCreateWithoutUserInput> | BookmarkUrbanExplorerCreateWithoutUserInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutUserInput | BookmarkUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkUrbanExplorerCreateManyUserInputEnvelope
    set?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    disconnect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    delete?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    update?: BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUrbanExplorerUpdateManyWithWhereWithoutUserInput | BookmarkUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkUrbanExplorerScalarWhereInput | BookmarkUrbanExplorerScalarWhereInput[]
  }

  export type ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutUserInput, ReportUrbanExplorerUncheckedCreateWithoutUserInput> | ReportUrbanExplorerCreateWithoutUserInput[] | ReportUrbanExplorerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutUserInput | ReportUrbanExplorerCreateOrConnectWithoutUserInput[]
    upsert?: ReportUrbanExplorerUpsertWithWhereUniqueWithoutUserInput | ReportUrbanExplorerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportUrbanExplorerCreateManyUserInputEnvelope
    set?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    disconnect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    delete?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    update?: ReportUrbanExplorerUpdateWithWhereUniqueWithoutUserInput | ReportUrbanExplorerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUrbanExplorerUpdateManyWithWhereWithoutUserInput | ReportUrbanExplorerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
  }

  export type FoodieFoodUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieFoodCreateWithoutUserInput, FoodieFoodUncheckedCreateWithoutUserInput> | FoodieFoodCreateWithoutUserInput[] | FoodieFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutUserInput | FoodieFoodCreateOrConnectWithoutUserInput[]
    upsert?: FoodieFoodUpsertWithWhereUniqueWithoutUserInput | FoodieFoodUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieFoodCreateManyUserInputEnvelope
    set?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    disconnect?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    delete?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    connect?: FoodieFoodWhereUniqueInput | FoodieFoodWhereUniqueInput[]
    update?: FoodieFoodUpdateWithWhereUniqueWithoutUserInput | FoodieFoodUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieFoodUpdateManyWithWhereWithoutUserInput | FoodieFoodUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieFoodScalarWhereInput | FoodieFoodScalarWhereInput[]
  }

  export type FoodieLocationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieLocationCreateWithoutUserInput, FoodieLocationUncheckedCreateWithoutUserInput> | FoodieLocationCreateWithoutUserInput[] | FoodieLocationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutUserInput | FoodieLocationCreateOrConnectWithoutUserInput[]
    upsert?: FoodieLocationUpsertWithWhereUniqueWithoutUserInput | FoodieLocationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieLocationCreateManyUserInputEnvelope
    set?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    disconnect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    delete?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    update?: FoodieLocationUpdateWithWhereUniqueWithoutUserInput | FoodieLocationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieLocationUpdateManyWithWhereWithoutUserInput | FoodieLocationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieLocationScalarWhereInput | FoodieLocationScalarWhereInput[]
  }

  export type FoodieReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieReviewCreateWithoutUserInput, FoodieReviewUncheckedCreateWithoutUserInput> | FoodieReviewCreateWithoutUserInput[] | FoodieReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutUserInput | FoodieReviewCreateOrConnectWithoutUserInput[]
    upsert?: FoodieReviewUpsertWithWhereUniqueWithoutUserInput | FoodieReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieReviewCreateManyUserInputEnvelope
    set?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    disconnect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    delete?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    update?: FoodieReviewUpdateWithWhereUniqueWithoutUserInput | FoodieReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieReviewUpdateManyWithWhereWithoutUserInput | FoodieReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieReviewScalarWhereInput | FoodieReviewScalarWhereInput[]
  }

  export type FoodieLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodieLikeCreateWithoutUserInput, FoodieLikeUncheckedCreateWithoutUserInput> | FoodieLikeCreateWithoutUserInput[] | FoodieLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutUserInput | FoodieLikeCreateOrConnectWithoutUserInput[]
    upsert?: FoodieLikeUpsertWithWhereUniqueWithoutUserInput | FoodieLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodieLikeCreateManyUserInputEnvelope
    set?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    disconnect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    delete?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    update?: FoodieLikeUpdateWithWhereUniqueWithoutUserInput | FoodieLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodieLikeUpdateManyWithWhereWithoutUserInput | FoodieLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodieLikeScalarWhereInput | FoodieLikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type ReviewDIYHomesCreateNestedManyWithoutPostInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutPostInput, ReviewDIYHomesUncheckedCreateWithoutPostInput> | ReviewDIYHomesCreateWithoutPostInput[] | ReviewDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutPostInput | ReviewDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: ReviewDIYHomesCreateManyPostInputEnvelope
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
  }

  export type BookmarkDIYHomesCreateNestedManyWithoutPostInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutPostInput, BookmarkDIYHomesUncheckedCreateWithoutPostInput> | BookmarkDIYHomesCreateWithoutPostInput[] | BookmarkDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutPostInput | BookmarkDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: BookmarkDIYHomesCreateManyPostInputEnvelope
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
  }

  export type LikeDIYHomesCreateNestedManyWithoutPostInput = {
    create?: XOR<LikeDIYHomesCreateWithoutPostInput, LikeDIYHomesUncheckedCreateWithoutPostInput> | LikeDIYHomesCreateWithoutPostInput[] | LikeDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutPostInput | LikeDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: LikeDIYHomesCreateManyPostInputEnvelope
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
  }

  export type ReportDIYHomesCreateNestedManyWithoutPostInput = {
    create?: XOR<ReportDIYHomesCreateWithoutPostInput, ReportDIYHomesUncheckedCreateWithoutPostInput> | ReportDIYHomesCreateWithoutPostInput[] | ReportDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutPostInput | ReportDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: ReportDIYHomesCreateManyPostInputEnvelope
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
  }

  export type ReviewDIYHomesUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutPostInput, ReviewDIYHomesUncheckedCreateWithoutPostInput> | ReviewDIYHomesCreateWithoutPostInput[] | ReviewDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutPostInput | ReviewDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: ReviewDIYHomesCreateManyPostInputEnvelope
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
  }

  export type BookmarkDIYHomesUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutPostInput, BookmarkDIYHomesUncheckedCreateWithoutPostInput> | BookmarkDIYHomesCreateWithoutPostInput[] | BookmarkDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutPostInput | BookmarkDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: BookmarkDIYHomesCreateManyPostInputEnvelope
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
  }

  export type LikeDIYHomesUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<LikeDIYHomesCreateWithoutPostInput, LikeDIYHomesUncheckedCreateWithoutPostInput> | LikeDIYHomesCreateWithoutPostInput[] | LikeDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutPostInput | LikeDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: LikeDIYHomesCreateManyPostInputEnvelope
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
  }

  export type ReportDIYHomesUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ReportDIYHomesCreateWithoutPostInput, ReportDIYHomesUncheckedCreateWithoutPostInput> | ReportDIYHomesCreateWithoutPostInput[] | ReportDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutPostInput | ReportDIYHomesCreateOrConnectWithoutPostInput[]
    createMany?: ReportDIYHomesCreateManyPostInputEnvelope
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type ReviewDIYHomesUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutPostInput, ReviewDIYHomesUncheckedCreateWithoutPostInput> | ReviewDIYHomesCreateWithoutPostInput[] | ReviewDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutPostInput | ReviewDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: ReviewDIYHomesUpsertWithWhereUniqueWithoutPostInput | ReviewDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReviewDIYHomesCreateManyPostInputEnvelope
    set?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    disconnect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    delete?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    update?: ReviewDIYHomesUpdateWithWhereUniqueWithoutPostInput | ReviewDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReviewDIYHomesUpdateManyWithWhereWithoutPostInput | ReviewDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReviewDIYHomesScalarWhereInput | ReviewDIYHomesScalarWhereInput[]
  }

  export type BookmarkDIYHomesUpdateManyWithoutPostNestedInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutPostInput, BookmarkDIYHomesUncheckedCreateWithoutPostInput> | BookmarkDIYHomesCreateWithoutPostInput[] | BookmarkDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutPostInput | BookmarkDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: BookmarkDIYHomesUpsertWithWhereUniqueWithoutPostInput | BookmarkDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: BookmarkDIYHomesCreateManyPostInputEnvelope
    set?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    disconnect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    delete?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    update?: BookmarkDIYHomesUpdateWithWhereUniqueWithoutPostInput | BookmarkDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: BookmarkDIYHomesUpdateManyWithWhereWithoutPostInput | BookmarkDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: BookmarkDIYHomesScalarWhereInput | BookmarkDIYHomesScalarWhereInput[]
  }

  export type LikeDIYHomesUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikeDIYHomesCreateWithoutPostInput, LikeDIYHomesUncheckedCreateWithoutPostInput> | LikeDIYHomesCreateWithoutPostInput[] | LikeDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutPostInput | LikeDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: LikeDIYHomesUpsertWithWhereUniqueWithoutPostInput | LikeDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikeDIYHomesCreateManyPostInputEnvelope
    set?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    disconnect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    delete?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    update?: LikeDIYHomesUpdateWithWhereUniqueWithoutPostInput | LikeDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikeDIYHomesUpdateManyWithWhereWithoutPostInput | LikeDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikeDIYHomesScalarWhereInput | LikeDIYHomesScalarWhereInput[]
  }

  export type ReportDIYHomesUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReportDIYHomesCreateWithoutPostInput, ReportDIYHomesUncheckedCreateWithoutPostInput> | ReportDIYHomesCreateWithoutPostInput[] | ReportDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutPostInput | ReportDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: ReportDIYHomesUpsertWithWhereUniqueWithoutPostInput | ReportDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReportDIYHomesCreateManyPostInputEnvelope
    set?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    disconnect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    delete?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    update?: ReportDIYHomesUpdateWithWhereUniqueWithoutPostInput | ReportDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReportDIYHomesUpdateManyWithWhereWithoutPostInput | ReportDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
  }

  export type ReviewDIYHomesUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutPostInput, ReviewDIYHomesUncheckedCreateWithoutPostInput> | ReviewDIYHomesCreateWithoutPostInput[] | ReviewDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutPostInput | ReviewDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: ReviewDIYHomesUpsertWithWhereUniqueWithoutPostInput | ReviewDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReviewDIYHomesCreateManyPostInputEnvelope
    set?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    disconnect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    delete?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    connect?: ReviewDIYHomesWhereUniqueInput | ReviewDIYHomesWhereUniqueInput[]
    update?: ReviewDIYHomesUpdateWithWhereUniqueWithoutPostInput | ReviewDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReviewDIYHomesUpdateManyWithWhereWithoutPostInput | ReviewDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReviewDIYHomesScalarWhereInput | ReviewDIYHomesScalarWhereInput[]
  }

  export type BookmarkDIYHomesUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<BookmarkDIYHomesCreateWithoutPostInput, BookmarkDIYHomesUncheckedCreateWithoutPostInput> | BookmarkDIYHomesCreateWithoutPostInput[] | BookmarkDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkDIYHomesCreateOrConnectWithoutPostInput | BookmarkDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: BookmarkDIYHomesUpsertWithWhereUniqueWithoutPostInput | BookmarkDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: BookmarkDIYHomesCreateManyPostInputEnvelope
    set?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    disconnect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    delete?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    connect?: BookmarkDIYHomesWhereUniqueInput | BookmarkDIYHomesWhereUniqueInput[]
    update?: BookmarkDIYHomesUpdateWithWhereUniqueWithoutPostInput | BookmarkDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: BookmarkDIYHomesUpdateManyWithWhereWithoutPostInput | BookmarkDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: BookmarkDIYHomesScalarWhereInput | BookmarkDIYHomesScalarWhereInput[]
  }

  export type LikeDIYHomesUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<LikeDIYHomesCreateWithoutPostInput, LikeDIYHomesUncheckedCreateWithoutPostInput> | LikeDIYHomesCreateWithoutPostInput[] | LikeDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: LikeDIYHomesCreateOrConnectWithoutPostInput | LikeDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: LikeDIYHomesUpsertWithWhereUniqueWithoutPostInput | LikeDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: LikeDIYHomesCreateManyPostInputEnvelope
    set?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    disconnect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    delete?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    connect?: LikeDIYHomesWhereUniqueInput | LikeDIYHomesWhereUniqueInput[]
    update?: LikeDIYHomesUpdateWithWhereUniqueWithoutPostInput | LikeDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: LikeDIYHomesUpdateManyWithWhereWithoutPostInput | LikeDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: LikeDIYHomesScalarWhereInput | LikeDIYHomesScalarWhereInput[]
  }

  export type ReportDIYHomesUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ReportDIYHomesCreateWithoutPostInput, ReportDIYHomesUncheckedCreateWithoutPostInput> | ReportDIYHomesCreateWithoutPostInput[] | ReportDIYHomesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutPostInput | ReportDIYHomesCreateOrConnectWithoutPostInput[]
    upsert?: ReportDIYHomesUpsertWithWhereUniqueWithoutPostInput | ReportDIYHomesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ReportDIYHomesCreateManyPostInputEnvelope
    set?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    disconnect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    delete?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    update?: ReportDIYHomesUpdateWithWhereUniqueWithoutPostInput | ReportDIYHomesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ReportDIYHomesUpdateManyWithWhereWithoutPostInput | ReportDIYHomesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type PostDIYHomesCreateNestedOneWithoutReviewsInput = {
    create?: XOR<PostDIYHomesCreateWithoutReviewsInput, PostDIYHomesUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutReviewsInput
    connect?: PostDIYHomesWhereUniqueInput
  }

  export type ReportDIYHomesCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReportDIYHomesCreateWithoutReviewInput, ReportDIYHomesUncheckedCreateWithoutReviewInput> | ReportDIYHomesCreateWithoutReviewInput[] | ReportDIYHomesUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutReviewInput | ReportDIYHomesCreateOrConnectWithoutReviewInput[]
    createMany?: ReportDIYHomesCreateManyReviewInputEnvelope
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
  }

  export type ReportDIYHomesUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReportDIYHomesCreateWithoutReviewInput, ReportDIYHomesUncheckedCreateWithoutReviewInput> | ReportDIYHomesCreateWithoutReviewInput[] | ReportDIYHomesUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutReviewInput | ReportDIYHomesCreateOrConnectWithoutReviewInput[]
    createMany?: ReportDIYHomesCreateManyReviewInputEnvelope
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type PostDIYHomesUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<PostDIYHomesCreateWithoutReviewsInput, PostDIYHomesUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutReviewsInput
    upsert?: PostDIYHomesUpsertWithoutReviewsInput
    connect?: PostDIYHomesWhereUniqueInput
    update?: XOR<XOR<PostDIYHomesUpdateToOneWithWhereWithoutReviewsInput, PostDIYHomesUpdateWithoutReviewsInput>, PostDIYHomesUncheckedUpdateWithoutReviewsInput>
  }

  export type ReportDIYHomesUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReportDIYHomesCreateWithoutReviewInput, ReportDIYHomesUncheckedCreateWithoutReviewInput> | ReportDIYHomesCreateWithoutReviewInput[] | ReportDIYHomesUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutReviewInput | ReportDIYHomesCreateOrConnectWithoutReviewInput[]
    upsert?: ReportDIYHomesUpsertWithWhereUniqueWithoutReviewInput | ReportDIYHomesUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReportDIYHomesCreateManyReviewInputEnvelope
    set?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    disconnect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    delete?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    update?: ReportDIYHomesUpdateWithWhereUniqueWithoutReviewInput | ReportDIYHomesUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReportDIYHomesUpdateManyWithWhereWithoutReviewInput | ReportDIYHomesUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
  }

  export type ReportDIYHomesUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReportDIYHomesCreateWithoutReviewInput, ReportDIYHomesUncheckedCreateWithoutReviewInput> | ReportDIYHomesCreateWithoutReviewInput[] | ReportDIYHomesUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportDIYHomesCreateOrConnectWithoutReviewInput | ReportDIYHomesCreateOrConnectWithoutReviewInput[]
    upsert?: ReportDIYHomesUpsertWithWhereUniqueWithoutReviewInput | ReportDIYHomesUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReportDIYHomesCreateManyReviewInputEnvelope
    set?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    disconnect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    delete?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    connect?: ReportDIYHomesWhereUniqueInput | ReportDIYHomesWhereUniqueInput[]
    update?: ReportDIYHomesUpdateWithWhereUniqueWithoutReviewInput | ReportDIYHomesUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReportDIYHomesUpdateManyWithWhereWithoutReviewInput | ReportDIYHomesUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLikeInput = {
    create?: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput
    connect?: UserWhereUniqueInput
  }

  export type PostDIYHomesCreateNestedOneWithoutLikeInput = {
    create?: XOR<PostDIYHomesCreateWithoutLikeInput, PostDIYHomesUncheckedCreateWithoutLikeInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutLikeInput
    connect?: PostDIYHomesWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikeNestedInput = {
    create?: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput
    upsert?: UserUpsertWithoutLikeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikeInput, UserUpdateWithoutLikeInput>, UserUncheckedUpdateWithoutLikeInput>
  }

  export type PostDIYHomesUpdateOneRequiredWithoutLikeNestedInput = {
    create?: XOR<PostDIYHomesCreateWithoutLikeInput, PostDIYHomesUncheckedCreateWithoutLikeInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutLikeInput
    upsert?: PostDIYHomesUpsertWithoutLikeInput
    connect?: PostDIYHomesWhereUniqueInput
    update?: XOR<XOR<PostDIYHomesUpdateToOneWithWhereWithoutLikeInput, PostDIYHomesUpdateWithoutLikeInput>, PostDIYHomesUncheckedUpdateWithoutLikeInput>
  }

  export type UserCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarksInput
    connect?: UserWhereUniqueInput
  }

  export type PostDIYHomesCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<PostDIYHomesCreateWithoutBookmarksInput, PostDIYHomesUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutBookmarksInput
    connect?: PostDIYHomesWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarksInput
    upsert?: UserUpsertWithoutBookmarksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookmarksInput, UserUpdateWithoutBookmarksInput>, UserUncheckedUpdateWithoutBookmarksInput>
  }

  export type PostDIYHomesUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<PostDIYHomesCreateWithoutBookmarksInput, PostDIYHomesUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutBookmarksInput
    upsert?: PostDIYHomesUpsertWithoutBookmarksInput
    connect?: PostDIYHomesWhereUniqueInput
    update?: XOR<XOR<PostDIYHomesUpdateToOneWithWhereWithoutBookmarksInput, PostDIYHomesUpdateWithoutBookmarksInput>, PostDIYHomesUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserCreateNestedOneWithoutReportInput = {
    create?: XOR<UserCreateWithoutReportInput, UserUncheckedCreateWithoutReportInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportInput
    connect?: UserWhereUniqueInput
  }

  export type PostDIYHomesCreateNestedOneWithoutReportInput = {
    create?: XOR<PostDIYHomesCreateWithoutReportInput, PostDIYHomesUncheckedCreateWithoutReportInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutReportInput
    connect?: PostDIYHomesWhereUniqueInput
  }

  export type ReviewDIYHomesCreateNestedOneWithoutReportInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutReportInput, ReviewDIYHomesUncheckedCreateWithoutReportInput>
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutReportInput
    connect?: ReviewDIYHomesWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReportNestedInput = {
    create?: XOR<UserCreateWithoutReportInput, UserUncheckedCreateWithoutReportInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportInput
    upsert?: UserUpsertWithoutReportInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportInput, UserUpdateWithoutReportInput>, UserUncheckedUpdateWithoutReportInput>
  }

  export type PostDIYHomesUpdateOneWithoutReportNestedInput = {
    create?: XOR<PostDIYHomesCreateWithoutReportInput, PostDIYHomesUncheckedCreateWithoutReportInput>
    connectOrCreate?: PostDIYHomesCreateOrConnectWithoutReportInput
    upsert?: PostDIYHomesUpsertWithoutReportInput
    disconnect?: PostDIYHomesWhereInput | boolean
    delete?: PostDIYHomesWhereInput | boolean
    connect?: PostDIYHomesWhereUniqueInput
    update?: XOR<XOR<PostDIYHomesUpdateToOneWithWhereWithoutReportInput, PostDIYHomesUpdateWithoutReportInput>, PostDIYHomesUncheckedUpdateWithoutReportInput>
  }

  export type ReviewDIYHomesUpdateOneWithoutReportNestedInput = {
    create?: XOR<ReviewDIYHomesCreateWithoutReportInput, ReviewDIYHomesUncheckedCreateWithoutReportInput>
    connectOrCreate?: ReviewDIYHomesCreateOrConnectWithoutReportInput
    upsert?: ReviewDIYHomesUpsertWithoutReportInput
    disconnect?: ReviewDIYHomesWhereInput | boolean
    delete?: ReviewDIYHomesWhereInput | boolean
    connect?: ReviewDIYHomesWhereUniqueInput
    update?: XOR<XOR<ReviewDIYHomesUpdateToOneWithWhereWithoutReportInput, ReviewDIYHomesUpdateWithoutReportInput>, ReviewDIYHomesUncheckedUpdateWithoutReportInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserCreateNestedOneWithoutPlaceUrbanExplorerInput = {
    create?: XOR<UserCreateWithoutPlaceUrbanExplorerInput, UserUncheckedCreateWithoutPlaceUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaceUrbanExplorerInput
    connect?: UserWhereUniqueInput
  }

  export type ReviewUrbanExplorerCreateNestedManyWithoutPlaceInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutPlaceInput, ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReviewUrbanExplorerCreateWithoutPlaceInput[] | ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput | ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: ReviewUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
  }

  export type BookmarkUrbanExplorerCreateNestedManyWithoutPlaceInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput> | BookmarkUrbanExplorerCreateWithoutPlaceInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput | BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: BookmarkUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
  }

  export type LikeUrbanExplorerCreateNestedManyWithoutPlaceInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutPlaceInput, LikeUrbanExplorerUncheckedCreateWithoutPlaceInput> | LikeUrbanExplorerCreateWithoutPlaceInput[] | LikeUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutPlaceInput | LikeUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: LikeUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
  }

  export type ReportUrbanExplorerCreateNestedManyWithoutPlaceInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutPlaceInput, ReportUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReportUrbanExplorerCreateWithoutPlaceInput[] | ReportUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutPlaceInput | ReportUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: ReportUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
  }

  export type ReviewUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutPlaceInput, ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReviewUrbanExplorerCreateWithoutPlaceInput[] | ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput | ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: ReviewUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
  }

  export type BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput> | BookmarkUrbanExplorerCreateWithoutPlaceInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput | BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: BookmarkUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
  }

  export type LikeUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutPlaceInput, LikeUrbanExplorerUncheckedCreateWithoutPlaceInput> | LikeUrbanExplorerCreateWithoutPlaceInput[] | LikeUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutPlaceInput | LikeUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: LikeUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
  }

  export type ReportUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutPlaceInput, ReportUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReportUrbanExplorerCreateWithoutPlaceInput[] | ReportUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutPlaceInput | ReportUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    createMany?: ReportUrbanExplorerCreateManyPlaceInputEnvelope
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutPlaceUrbanExplorerNestedInput = {
    create?: XOR<UserCreateWithoutPlaceUrbanExplorerInput, UserUncheckedCreateWithoutPlaceUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaceUrbanExplorerInput
    upsert?: UserUpsertWithoutPlaceUrbanExplorerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlaceUrbanExplorerInput, UserUpdateWithoutPlaceUrbanExplorerInput>, UserUncheckedUpdateWithoutPlaceUrbanExplorerInput>
  }

  export type ReviewUrbanExplorerUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutPlaceInput, ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReviewUrbanExplorerCreateWithoutPlaceInput[] | ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput | ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: ReviewUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | ReviewUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: ReviewUrbanExplorerCreateManyPlaceInputEnvelope
    set?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    disconnect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    delete?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    update?: ReviewUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | ReviewUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: ReviewUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | ReviewUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: ReviewUrbanExplorerScalarWhereInput | ReviewUrbanExplorerScalarWhereInput[]
  }

  export type BookmarkUrbanExplorerUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput> | BookmarkUrbanExplorerCreateWithoutPlaceInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput | BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: BookmarkUrbanExplorerCreateManyPlaceInputEnvelope
    set?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    disconnect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    delete?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    update?: BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: BookmarkUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | BookmarkUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: BookmarkUrbanExplorerScalarWhereInput | BookmarkUrbanExplorerScalarWhereInput[]
  }

  export type LikeUrbanExplorerUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutPlaceInput, LikeUrbanExplorerUncheckedCreateWithoutPlaceInput> | LikeUrbanExplorerCreateWithoutPlaceInput[] | LikeUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutPlaceInput | LikeUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: LikeUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | LikeUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: LikeUrbanExplorerCreateManyPlaceInputEnvelope
    set?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    disconnect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    delete?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    update?: LikeUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | LikeUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: LikeUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | LikeUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: LikeUrbanExplorerScalarWhereInput | LikeUrbanExplorerScalarWhereInput[]
  }

  export type ReportUrbanExplorerUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutPlaceInput, ReportUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReportUrbanExplorerCreateWithoutPlaceInput[] | ReportUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutPlaceInput | ReportUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: ReportUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | ReportUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: ReportUrbanExplorerCreateManyPlaceInputEnvelope
    set?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    disconnect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    delete?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    update?: ReportUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | ReportUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: ReportUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | ReportUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
  }

  export type ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutPlaceInput, ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReviewUrbanExplorerCreateWithoutPlaceInput[] | ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput | ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: ReviewUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | ReviewUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: ReviewUrbanExplorerCreateManyPlaceInputEnvelope
    set?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    disconnect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    delete?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    connect?: ReviewUrbanExplorerWhereUniqueInput | ReviewUrbanExplorerWhereUniqueInput[]
    update?: ReviewUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | ReviewUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: ReviewUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | ReviewUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: ReviewUrbanExplorerScalarWhereInput | ReviewUrbanExplorerScalarWhereInput[]
  }

  export type BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<BookmarkUrbanExplorerCreateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput> | BookmarkUrbanExplorerCreateWithoutPlaceInput[] | BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput | BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: BookmarkUrbanExplorerCreateManyPlaceInputEnvelope
    set?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    disconnect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    delete?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    connect?: BookmarkUrbanExplorerWhereUniqueInput | BookmarkUrbanExplorerWhereUniqueInput[]
    update?: BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: BookmarkUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | BookmarkUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: BookmarkUrbanExplorerScalarWhereInput | BookmarkUrbanExplorerScalarWhereInput[]
  }

  export type LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<LikeUrbanExplorerCreateWithoutPlaceInput, LikeUrbanExplorerUncheckedCreateWithoutPlaceInput> | LikeUrbanExplorerCreateWithoutPlaceInput[] | LikeUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: LikeUrbanExplorerCreateOrConnectWithoutPlaceInput | LikeUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: LikeUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | LikeUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: LikeUrbanExplorerCreateManyPlaceInputEnvelope
    set?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    disconnect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    delete?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    connect?: LikeUrbanExplorerWhereUniqueInput | LikeUrbanExplorerWhereUniqueInput[]
    update?: LikeUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | LikeUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: LikeUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | LikeUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: LikeUrbanExplorerScalarWhereInput | LikeUrbanExplorerScalarWhereInput[]
  }

  export type ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutPlaceInput, ReportUrbanExplorerUncheckedCreateWithoutPlaceInput> | ReportUrbanExplorerCreateWithoutPlaceInput[] | ReportUrbanExplorerUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutPlaceInput | ReportUrbanExplorerCreateOrConnectWithoutPlaceInput[]
    upsert?: ReportUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput | ReportUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: ReportUrbanExplorerCreateManyPlaceInputEnvelope
    set?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    disconnect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    delete?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    update?: ReportUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput | ReportUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: ReportUrbanExplorerUpdateManyWithWhereWithoutPlaceInput | ReportUrbanExplorerUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReviewUrbanExplorerInput = {
    create?: XOR<UserCreateWithoutReviewUrbanExplorerInput, UserUncheckedCreateWithoutReviewUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewUrbanExplorerInput
    connect?: UserWhereUniqueInput
  }

  export type PlaceUrbanExplorerCreateNestedOneWithoutReviewsInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutReviewsInput, PlaceUrbanExplorerUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutReviewsInput
    connect?: PlaceUrbanExplorerWhereUniqueInput
  }

  export type ReportUrbanExplorerCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutReviewInput, ReportUrbanExplorerUncheckedCreateWithoutReviewInput> | ReportUrbanExplorerCreateWithoutReviewInput[] | ReportUrbanExplorerUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutReviewInput | ReportUrbanExplorerCreateOrConnectWithoutReviewInput[]
    createMany?: ReportUrbanExplorerCreateManyReviewInputEnvelope
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
  }

  export type ReportUrbanExplorerUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutReviewInput, ReportUrbanExplorerUncheckedCreateWithoutReviewInput> | ReportUrbanExplorerCreateWithoutReviewInput[] | ReportUrbanExplorerUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutReviewInput | ReportUrbanExplorerCreateOrConnectWithoutReviewInput[]
    createMany?: ReportUrbanExplorerCreateManyReviewInputEnvelope
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutReviewUrbanExplorerNestedInput = {
    create?: XOR<UserCreateWithoutReviewUrbanExplorerInput, UserUncheckedCreateWithoutReviewUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewUrbanExplorerInput
    upsert?: UserUpsertWithoutReviewUrbanExplorerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewUrbanExplorerInput, UserUpdateWithoutReviewUrbanExplorerInput>, UserUncheckedUpdateWithoutReviewUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutReviewsInput, PlaceUrbanExplorerUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutReviewsInput
    upsert?: PlaceUrbanExplorerUpsertWithoutReviewsInput
    connect?: PlaceUrbanExplorerWhereUniqueInput
    update?: XOR<XOR<PlaceUrbanExplorerUpdateToOneWithWhereWithoutReviewsInput, PlaceUrbanExplorerUpdateWithoutReviewsInput>, PlaceUrbanExplorerUncheckedUpdateWithoutReviewsInput>
  }

  export type ReportUrbanExplorerUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutReviewInput, ReportUrbanExplorerUncheckedCreateWithoutReviewInput> | ReportUrbanExplorerCreateWithoutReviewInput[] | ReportUrbanExplorerUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutReviewInput | ReportUrbanExplorerCreateOrConnectWithoutReviewInput[]
    upsert?: ReportUrbanExplorerUpsertWithWhereUniqueWithoutReviewInput | ReportUrbanExplorerUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReportUrbanExplorerCreateManyReviewInputEnvelope
    set?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    disconnect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    delete?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    update?: ReportUrbanExplorerUpdateWithWhereUniqueWithoutReviewInput | ReportUrbanExplorerUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReportUrbanExplorerUpdateManyWithWhereWithoutReviewInput | ReportUrbanExplorerUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
  }

  export type ReportUrbanExplorerUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReportUrbanExplorerCreateWithoutReviewInput, ReportUrbanExplorerUncheckedCreateWithoutReviewInput> | ReportUrbanExplorerCreateWithoutReviewInput[] | ReportUrbanExplorerUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportUrbanExplorerCreateOrConnectWithoutReviewInput | ReportUrbanExplorerCreateOrConnectWithoutReviewInput[]
    upsert?: ReportUrbanExplorerUpsertWithWhereUniqueWithoutReviewInput | ReportUrbanExplorerUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReportUrbanExplorerCreateManyReviewInputEnvelope
    set?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    disconnect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    delete?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    connect?: ReportUrbanExplorerWhereUniqueInput | ReportUrbanExplorerWhereUniqueInput[]
    update?: ReportUrbanExplorerUpdateWithWhereUniqueWithoutReviewInput | ReportUrbanExplorerUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReportUrbanExplorerUpdateManyWithWhereWithoutReviewInput | ReportUrbanExplorerUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLikeUrbanExplorerInput = {
    create?: XOR<UserCreateWithoutLikeUrbanExplorerInput, UserUncheckedCreateWithoutLikeUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeUrbanExplorerInput
    connect?: UserWhereUniqueInput
  }

  export type PlaceUrbanExplorerCreateNestedOneWithoutLikesInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutLikesInput, PlaceUrbanExplorerUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutLikesInput
    connect?: PlaceUrbanExplorerWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikeUrbanExplorerNestedInput = {
    create?: XOR<UserCreateWithoutLikeUrbanExplorerInput, UserUncheckedCreateWithoutLikeUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeUrbanExplorerInput
    upsert?: UserUpsertWithoutLikeUrbanExplorerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikeUrbanExplorerInput, UserUpdateWithoutLikeUrbanExplorerInput>, UserUncheckedUpdateWithoutLikeUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutLikesInput, PlaceUrbanExplorerUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutLikesInput
    upsert?: PlaceUrbanExplorerUpsertWithoutLikesInput
    connect?: PlaceUrbanExplorerWhereUniqueInput
    update?: XOR<XOR<PlaceUrbanExplorerUpdateToOneWithWhereWithoutLikesInput, PlaceUrbanExplorerUpdateWithoutLikesInput>, PlaceUrbanExplorerUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutBookmarkUrbanExplorerInput = {
    create?: XOR<UserCreateWithoutBookmarkUrbanExplorerInput, UserUncheckedCreateWithoutBookmarkUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarkUrbanExplorerInput
    connect?: UserWhereUniqueInput
  }

  export type PlaceUrbanExplorerCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutBookmarksInput, PlaceUrbanExplorerUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutBookmarksInput
    connect?: PlaceUrbanExplorerWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBookmarkUrbanExplorerNestedInput = {
    create?: XOR<UserCreateWithoutBookmarkUrbanExplorerInput, UserUncheckedCreateWithoutBookmarkUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarkUrbanExplorerInput
    upsert?: UserUpsertWithoutBookmarkUrbanExplorerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookmarkUrbanExplorerInput, UserUpdateWithoutBookmarkUrbanExplorerInput>, UserUncheckedUpdateWithoutBookmarkUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutBookmarksInput, PlaceUrbanExplorerUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutBookmarksInput
    upsert?: PlaceUrbanExplorerUpsertWithoutBookmarksInput
    connect?: PlaceUrbanExplorerWhereUniqueInput
    update?: XOR<XOR<PlaceUrbanExplorerUpdateToOneWithWhereWithoutBookmarksInput, PlaceUrbanExplorerUpdateWithoutBookmarksInput>, PlaceUrbanExplorerUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserCreateNestedOneWithoutReportUrbanExplorerInput = {
    create?: XOR<UserCreateWithoutReportUrbanExplorerInput, UserUncheckedCreateWithoutReportUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportUrbanExplorerInput
    connect?: UserWhereUniqueInput
  }

  export type PlaceUrbanExplorerCreateNestedOneWithoutReportsInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutReportsInput, PlaceUrbanExplorerUncheckedCreateWithoutReportsInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutReportsInput
    connect?: PlaceUrbanExplorerWhereUniqueInput
  }

  export type ReviewUrbanExplorerCreateNestedOneWithoutReportsInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutReportsInput, ReviewUrbanExplorerUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutReportsInput
    connect?: ReviewUrbanExplorerWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReportUrbanExplorerNestedInput = {
    create?: XOR<UserCreateWithoutReportUrbanExplorerInput, UserUncheckedCreateWithoutReportUrbanExplorerInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportUrbanExplorerInput
    upsert?: UserUpsertWithoutReportUrbanExplorerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportUrbanExplorerInput, UserUpdateWithoutReportUrbanExplorerInput>, UserUncheckedUpdateWithoutReportUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerUpdateOneWithoutReportsNestedInput = {
    create?: XOR<PlaceUrbanExplorerCreateWithoutReportsInput, PlaceUrbanExplorerUncheckedCreateWithoutReportsInput>
    connectOrCreate?: PlaceUrbanExplorerCreateOrConnectWithoutReportsInput
    upsert?: PlaceUrbanExplorerUpsertWithoutReportsInput
    disconnect?: PlaceUrbanExplorerWhereInput | boolean
    delete?: PlaceUrbanExplorerWhereInput | boolean
    connect?: PlaceUrbanExplorerWhereUniqueInput
    update?: XOR<XOR<PlaceUrbanExplorerUpdateToOneWithWhereWithoutReportsInput, PlaceUrbanExplorerUpdateWithoutReportsInput>, PlaceUrbanExplorerUncheckedUpdateWithoutReportsInput>
  }

  export type ReviewUrbanExplorerUpdateOneWithoutReportsNestedInput = {
    create?: XOR<ReviewUrbanExplorerCreateWithoutReportsInput, ReviewUrbanExplorerUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ReviewUrbanExplorerCreateOrConnectWithoutReportsInput
    upsert?: ReviewUrbanExplorerUpsertWithoutReportsInput
    disconnect?: ReviewUrbanExplorerWhereInput | boolean
    delete?: ReviewUrbanExplorerWhereInput | boolean
    connect?: ReviewUrbanExplorerWhereUniqueInput
    update?: XOR<XOR<ReviewUrbanExplorerUpdateToOneWithWhereWithoutReportsInput, ReviewUrbanExplorerUpdateWithoutReportsInput>, ReviewUrbanExplorerUncheckedUpdateWithoutReportsInput>
  }

  export type UserCreateNestedOneWithoutFoodieFoodInput = {
    create?: XOR<UserCreateWithoutFoodieFoodInput, UserUncheckedCreateWithoutFoodieFoodInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieFoodInput
    connect?: UserWhereUniqueInput
  }

  export type FoodieLocationCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodieLocationCreateWithoutFoodInput, FoodieLocationUncheckedCreateWithoutFoodInput> | FoodieLocationCreateWithoutFoodInput[] | FoodieLocationUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutFoodInput | FoodieLocationCreateOrConnectWithoutFoodInput[]
    createMany?: FoodieLocationCreateManyFoodInputEnvelope
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
  }

  export type FoodieReviewCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodieReviewCreateWithoutFoodInput, FoodieReviewUncheckedCreateWithoutFoodInput> | FoodieReviewCreateWithoutFoodInput[] | FoodieReviewUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutFoodInput | FoodieReviewCreateOrConnectWithoutFoodInput[]
    createMany?: FoodieReviewCreateManyFoodInputEnvelope
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
  }

  export type FoodieLikeCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodieLikeCreateWithoutFoodInput, FoodieLikeUncheckedCreateWithoutFoodInput> | FoodieLikeCreateWithoutFoodInput[] | FoodieLikeUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutFoodInput | FoodieLikeCreateOrConnectWithoutFoodInput[]
    createMany?: FoodieLikeCreateManyFoodInputEnvelope
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
  }

  export type FoodieLocationUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodieLocationCreateWithoutFoodInput, FoodieLocationUncheckedCreateWithoutFoodInput> | FoodieLocationCreateWithoutFoodInput[] | FoodieLocationUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutFoodInput | FoodieLocationCreateOrConnectWithoutFoodInput[]
    createMany?: FoodieLocationCreateManyFoodInputEnvelope
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
  }

  export type FoodieReviewUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodieReviewCreateWithoutFoodInput, FoodieReviewUncheckedCreateWithoutFoodInput> | FoodieReviewCreateWithoutFoodInput[] | FoodieReviewUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutFoodInput | FoodieReviewCreateOrConnectWithoutFoodInput[]
    createMany?: FoodieReviewCreateManyFoodInputEnvelope
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
  }

  export type FoodieLikeUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodieLikeCreateWithoutFoodInput, FoodieLikeUncheckedCreateWithoutFoodInput> | FoodieLikeCreateWithoutFoodInput[] | FoodieLikeUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutFoodInput | FoodieLikeCreateOrConnectWithoutFoodInput[]
    createMany?: FoodieLikeCreateManyFoodInputEnvelope
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutFoodieFoodNestedInput = {
    create?: XOR<UserCreateWithoutFoodieFoodInput, UserUncheckedCreateWithoutFoodieFoodInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieFoodInput
    upsert?: UserUpsertWithoutFoodieFoodInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoodieFoodInput, UserUpdateWithoutFoodieFoodInput>, UserUncheckedUpdateWithoutFoodieFoodInput>
  }

  export type FoodieLocationUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodieLocationCreateWithoutFoodInput, FoodieLocationUncheckedCreateWithoutFoodInput> | FoodieLocationCreateWithoutFoodInput[] | FoodieLocationUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutFoodInput | FoodieLocationCreateOrConnectWithoutFoodInput[]
    upsert?: FoodieLocationUpsertWithWhereUniqueWithoutFoodInput | FoodieLocationUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodieLocationCreateManyFoodInputEnvelope
    set?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    disconnect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    delete?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    update?: FoodieLocationUpdateWithWhereUniqueWithoutFoodInput | FoodieLocationUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodieLocationUpdateManyWithWhereWithoutFoodInput | FoodieLocationUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodieLocationScalarWhereInput | FoodieLocationScalarWhereInput[]
  }

  export type FoodieReviewUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodieReviewCreateWithoutFoodInput, FoodieReviewUncheckedCreateWithoutFoodInput> | FoodieReviewCreateWithoutFoodInput[] | FoodieReviewUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutFoodInput | FoodieReviewCreateOrConnectWithoutFoodInput[]
    upsert?: FoodieReviewUpsertWithWhereUniqueWithoutFoodInput | FoodieReviewUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodieReviewCreateManyFoodInputEnvelope
    set?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    disconnect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    delete?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    update?: FoodieReviewUpdateWithWhereUniqueWithoutFoodInput | FoodieReviewUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodieReviewUpdateManyWithWhereWithoutFoodInput | FoodieReviewUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodieReviewScalarWhereInput | FoodieReviewScalarWhereInput[]
  }

  export type FoodieLikeUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodieLikeCreateWithoutFoodInput, FoodieLikeUncheckedCreateWithoutFoodInput> | FoodieLikeCreateWithoutFoodInput[] | FoodieLikeUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutFoodInput | FoodieLikeCreateOrConnectWithoutFoodInput[]
    upsert?: FoodieLikeUpsertWithWhereUniqueWithoutFoodInput | FoodieLikeUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodieLikeCreateManyFoodInputEnvelope
    set?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    disconnect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    delete?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    update?: FoodieLikeUpdateWithWhereUniqueWithoutFoodInput | FoodieLikeUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodieLikeUpdateManyWithWhereWithoutFoodInput | FoodieLikeUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodieLikeScalarWhereInput | FoodieLikeScalarWhereInput[]
  }

  export type FoodieLocationUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodieLocationCreateWithoutFoodInput, FoodieLocationUncheckedCreateWithoutFoodInput> | FoodieLocationCreateWithoutFoodInput[] | FoodieLocationUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLocationCreateOrConnectWithoutFoodInput | FoodieLocationCreateOrConnectWithoutFoodInput[]
    upsert?: FoodieLocationUpsertWithWhereUniqueWithoutFoodInput | FoodieLocationUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodieLocationCreateManyFoodInputEnvelope
    set?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    disconnect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    delete?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    connect?: FoodieLocationWhereUniqueInput | FoodieLocationWhereUniqueInput[]
    update?: FoodieLocationUpdateWithWhereUniqueWithoutFoodInput | FoodieLocationUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodieLocationUpdateManyWithWhereWithoutFoodInput | FoodieLocationUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodieLocationScalarWhereInput | FoodieLocationScalarWhereInput[]
  }

  export type FoodieReviewUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodieReviewCreateWithoutFoodInput, FoodieReviewUncheckedCreateWithoutFoodInput> | FoodieReviewCreateWithoutFoodInput[] | FoodieReviewUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieReviewCreateOrConnectWithoutFoodInput | FoodieReviewCreateOrConnectWithoutFoodInput[]
    upsert?: FoodieReviewUpsertWithWhereUniqueWithoutFoodInput | FoodieReviewUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodieReviewCreateManyFoodInputEnvelope
    set?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    disconnect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    delete?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    connect?: FoodieReviewWhereUniqueInput | FoodieReviewWhereUniqueInput[]
    update?: FoodieReviewUpdateWithWhereUniqueWithoutFoodInput | FoodieReviewUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodieReviewUpdateManyWithWhereWithoutFoodInput | FoodieReviewUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodieReviewScalarWhereInput | FoodieReviewScalarWhereInput[]
  }

  export type FoodieLikeUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodieLikeCreateWithoutFoodInput, FoodieLikeUncheckedCreateWithoutFoodInput> | FoodieLikeCreateWithoutFoodInput[] | FoodieLikeUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodieLikeCreateOrConnectWithoutFoodInput | FoodieLikeCreateOrConnectWithoutFoodInput[]
    upsert?: FoodieLikeUpsertWithWhereUniqueWithoutFoodInput | FoodieLikeUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodieLikeCreateManyFoodInputEnvelope
    set?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    disconnect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    delete?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    connect?: FoodieLikeWhereUniqueInput | FoodieLikeWhereUniqueInput[]
    update?: FoodieLikeUpdateWithWhereUniqueWithoutFoodInput | FoodieLikeUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodieLikeUpdateManyWithWhereWithoutFoodInput | FoodieLikeUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodieLikeScalarWhereInput | FoodieLikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFoodieLocationInput = {
    create?: XOR<UserCreateWithoutFoodieLocationInput, UserUncheckedCreateWithoutFoodieLocationInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieLocationInput
    connect?: UserWhereUniqueInput
  }

  export type FoodieFoodCreateNestedOneWithoutLocationsInput = {
    create?: XOR<FoodieFoodCreateWithoutLocationsInput, FoodieFoodUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutLocationsInput
    connect?: FoodieFoodWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFoodieLocationNestedInput = {
    create?: XOR<UserCreateWithoutFoodieLocationInput, UserUncheckedCreateWithoutFoodieLocationInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieLocationInput
    upsert?: UserUpsertWithoutFoodieLocationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoodieLocationInput, UserUpdateWithoutFoodieLocationInput>, UserUncheckedUpdateWithoutFoodieLocationInput>
  }

  export type FoodieFoodUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<FoodieFoodCreateWithoutLocationsInput, FoodieFoodUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutLocationsInput
    upsert?: FoodieFoodUpsertWithoutLocationsInput
    connect?: FoodieFoodWhereUniqueInput
    update?: XOR<XOR<FoodieFoodUpdateToOneWithWhereWithoutLocationsInput, FoodieFoodUpdateWithoutLocationsInput>, FoodieFoodUncheckedUpdateWithoutLocationsInput>
  }

  export type UserCreateNestedOneWithoutFoodieReviewInput = {
    create?: XOR<UserCreateWithoutFoodieReviewInput, UserUncheckedCreateWithoutFoodieReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieReviewInput
    connect?: UserWhereUniqueInput
  }

  export type FoodieFoodCreateNestedOneWithoutReviewsInput = {
    create?: XOR<FoodieFoodCreateWithoutReviewsInput, FoodieFoodUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutReviewsInput
    connect?: FoodieFoodWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFoodieReviewNestedInput = {
    create?: XOR<UserCreateWithoutFoodieReviewInput, UserUncheckedCreateWithoutFoodieReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieReviewInput
    upsert?: UserUpsertWithoutFoodieReviewInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoodieReviewInput, UserUpdateWithoutFoodieReviewInput>, UserUncheckedUpdateWithoutFoodieReviewInput>
  }

  export type FoodieFoodUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<FoodieFoodCreateWithoutReviewsInput, FoodieFoodUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutReviewsInput
    upsert?: FoodieFoodUpsertWithoutReviewsInput
    connect?: FoodieFoodWhereUniqueInput
    update?: XOR<XOR<FoodieFoodUpdateToOneWithWhereWithoutReviewsInput, FoodieFoodUpdateWithoutReviewsInput>, FoodieFoodUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutFoodieLikeInput = {
    create?: XOR<UserCreateWithoutFoodieLikeInput, UserUncheckedCreateWithoutFoodieLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieLikeInput
    connect?: UserWhereUniqueInput
  }

  export type FoodieFoodCreateNestedOneWithoutLikesInput = {
    create?: XOR<FoodieFoodCreateWithoutLikesInput, FoodieFoodUncheckedCreateWithoutLikesInput>
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutLikesInput
    connect?: FoodieFoodWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFoodieLikeNestedInput = {
    create?: XOR<UserCreateWithoutFoodieLikeInput, UserUncheckedCreateWithoutFoodieLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodieLikeInput
    upsert?: UserUpsertWithoutFoodieLikeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoodieLikeInput, UserUpdateWithoutFoodieLikeInput>, UserUncheckedUpdateWithoutFoodieLikeInput>
  }

  export type FoodieFoodUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<FoodieFoodCreateWithoutLikesInput, FoodieFoodUncheckedCreateWithoutLikesInput>
    connectOrCreate?: FoodieFoodCreateOrConnectWithoutLikesInput
    upsert?: FoodieFoodUpsertWithoutLikesInput
    connect?: FoodieFoodWhereUniqueInput
    update?: XOR<XOR<FoodieFoodUpdateToOneWithWhereWithoutLikesInput, FoodieFoodUpdateWithoutLikesInput>, FoodieFoodUncheckedUpdateWithoutLikesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PostDIYHomesCreateWithoutUserInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesCreateOrConnectWithoutUserInput = {
    where: PostDIYHomesWhereUniqueInput
    create: XOR<PostDIYHomesCreateWithoutUserInput, PostDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type PostDIYHomesCreateManyUserInputEnvelope = {
    data: PostDIYHomesCreateManyUserInput | PostDIYHomesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewDIYHomesCreateWithoutUserInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    post: PostDIYHomesCreateNestedOneWithoutReviewsInput
    Report?: ReportDIYHomesCreateNestedManyWithoutReviewInput
  }

  export type ReviewDIYHomesUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    rating: number
    comment: string
    createdAt?: Date | string
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewDIYHomesCreateOrConnectWithoutUserInput = {
    where: ReviewDIYHomesWhereUniqueInput
    create: XOR<ReviewDIYHomesCreateWithoutUserInput, ReviewDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type ReviewDIYHomesCreateManyUserInputEnvelope = {
    data: ReviewDIYHomesCreateManyUserInput | ReviewDIYHomesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkDIYHomesCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    post: PostDIYHomesCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkDIYHomesUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type BookmarkDIYHomesCreateOrConnectWithoutUserInput = {
    where: BookmarkDIYHomesWhereUniqueInput
    create: XOR<BookmarkDIYHomesCreateWithoutUserInput, BookmarkDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type BookmarkDIYHomesCreateManyUserInputEnvelope = {
    data: BookmarkDIYHomesCreateManyUserInput | BookmarkDIYHomesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeDIYHomesCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    post: PostDIYHomesCreateNestedOneWithoutLikeInput
  }

  export type LikeDIYHomesUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type LikeDIYHomesCreateOrConnectWithoutUserInput = {
    where: LikeDIYHomesWhereUniqueInput
    create: XOR<LikeDIYHomesCreateWithoutUserInput, LikeDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type LikeDIYHomesCreateManyUserInputEnvelope = {
    data: LikeDIYHomesCreateManyUserInput | LikeDIYHomesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReportDIYHomesCreateWithoutUserInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    post?: PostDIYHomesCreateNestedOneWithoutReportInput
    review?: ReviewDIYHomesCreateNestedOneWithoutReportInput
  }

  export type ReportDIYHomesUncheckedCreateWithoutUserInput = {
    id?: string
    postId?: string | null
    reviewId?: string | null
    reason: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesCreateOrConnectWithoutUserInput = {
    where: ReportDIYHomesWhereUniqueInput
    create: XOR<ReportDIYHomesCreateWithoutUserInput, ReportDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type ReportDIYHomesCreateManyUserInputEnvelope = {
    data: ReportDIYHomesCreateManyUserInput | ReportDIYHomesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlaceUrbanExplorerCreateWithoutOwnerInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
    reviews?: ReviewUrbanExplorerCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
    reviews?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerCreateOrConnectWithoutOwnerInput = {
    where: PlaceUrbanExplorerWhereUniqueInput
    create: XOR<PlaceUrbanExplorerCreateWithoutOwnerInput, PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput>
  }

  export type PlaceUrbanExplorerCreateManyOwnerInputEnvelope = {
    data: PlaceUrbanExplorerCreateManyOwnerInput | PlaceUrbanExplorerCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ReviewUrbanExplorerCreateWithoutUserInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    place: PlaceUrbanExplorerCreateNestedOneWithoutReviewsInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutReviewInput
  }

  export type ReviewUrbanExplorerUncheckedCreateWithoutUserInput = {
    id?: string
    placeId: string
    rating: number
    comment: string
    createdAt?: Date | string
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewUrbanExplorerCreateOrConnectWithoutUserInput = {
    where: ReviewUrbanExplorerWhereUniqueInput
    create: XOR<ReviewUrbanExplorerCreateWithoutUserInput, ReviewUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type ReviewUrbanExplorerCreateManyUserInputEnvelope = {
    data: ReviewUrbanExplorerCreateManyUserInput | ReviewUrbanExplorerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeUrbanExplorerCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    place: PlaceUrbanExplorerCreateNestedOneWithoutLikesInput
  }

  export type LikeUrbanExplorerUncheckedCreateWithoutUserInput = {
    id?: string
    placeId: string
    createdAt?: Date | string
  }

  export type LikeUrbanExplorerCreateOrConnectWithoutUserInput = {
    where: LikeUrbanExplorerWhereUniqueInput
    create: XOR<LikeUrbanExplorerCreateWithoutUserInput, LikeUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type LikeUrbanExplorerCreateManyUserInputEnvelope = {
    data: LikeUrbanExplorerCreateManyUserInput | LikeUrbanExplorerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkUrbanExplorerCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    place: PlaceUrbanExplorerCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUrbanExplorerUncheckedCreateWithoutUserInput = {
    id?: string
    placeId: string
    createdAt?: Date | string
  }

  export type BookmarkUrbanExplorerCreateOrConnectWithoutUserInput = {
    where: BookmarkUrbanExplorerWhereUniqueInput
    create: XOR<BookmarkUrbanExplorerCreateWithoutUserInput, BookmarkUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type BookmarkUrbanExplorerCreateManyUserInputEnvelope = {
    data: BookmarkUrbanExplorerCreateManyUserInput | BookmarkUrbanExplorerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReportUrbanExplorerCreateWithoutUserInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    place?: PlaceUrbanExplorerCreateNestedOneWithoutReportsInput
    review?: ReviewUrbanExplorerCreateNestedOneWithoutReportsInput
  }

  export type ReportUrbanExplorerUncheckedCreateWithoutUserInput = {
    id?: string
    placeId?: string | null
    reviewId?: string | null
    reason: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerCreateOrConnectWithoutUserInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    create: XOR<ReportUrbanExplorerCreateWithoutUserInput, ReportUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type ReportUrbanExplorerCreateManyUserInputEnvelope = {
    data: ReportUrbanExplorerCreateManyUserInput | ReportUrbanExplorerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FoodieFoodCreateWithoutUserInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    validated?: boolean
    createdAt?: Date | string
    locations?: FoodieLocationCreateNestedManyWithoutFoodInput
    reviews?: FoodieReviewCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    validated?: boolean
    createdAt?: Date | string
    locations?: FoodieLocationUncheckedCreateNestedManyWithoutFoodInput
    reviews?: FoodieReviewUncheckedCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodCreateOrConnectWithoutUserInput = {
    where: FoodieFoodWhereUniqueInput
    create: XOR<FoodieFoodCreateWithoutUserInput, FoodieFoodUncheckedCreateWithoutUserInput>
  }

  export type FoodieFoodCreateManyUserInputEnvelope = {
    data: FoodieFoodCreateManyUserInput | FoodieFoodCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FoodieLocationCreateWithoutUserInput = {
    id?: string
    locationName: string
    address: string
    createdAt?: Date | string
    food: FoodieFoodCreateNestedOneWithoutLocationsInput
  }

  export type FoodieLocationUncheckedCreateWithoutUserInput = {
    id?: string
    foodId: string
    locationName: string
    address: string
    createdAt?: Date | string
  }

  export type FoodieLocationCreateOrConnectWithoutUserInput = {
    where: FoodieLocationWhereUniqueInput
    create: XOR<FoodieLocationCreateWithoutUserInput, FoodieLocationUncheckedCreateWithoutUserInput>
  }

  export type FoodieLocationCreateManyUserInputEnvelope = {
    data: FoodieLocationCreateManyUserInput | FoodieLocationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FoodieReviewCreateWithoutUserInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    food: FoodieFoodCreateNestedOneWithoutReviewsInput
  }

  export type FoodieReviewUncheckedCreateWithoutUserInput = {
    id?: string
    foodId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieReviewCreateOrConnectWithoutUserInput = {
    where: FoodieReviewWhereUniqueInput
    create: XOR<FoodieReviewCreateWithoutUserInput, FoodieReviewUncheckedCreateWithoutUserInput>
  }

  export type FoodieReviewCreateManyUserInputEnvelope = {
    data: FoodieReviewCreateManyUserInput | FoodieReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FoodieLikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    food: FoodieFoodCreateNestedOneWithoutLikesInput
  }

  export type FoodieLikeUncheckedCreateWithoutUserInput = {
    id?: string
    foodId: string
    createdAt?: Date | string
  }

  export type FoodieLikeCreateOrConnectWithoutUserInput = {
    where: FoodieLikeWhereUniqueInput
    create: XOR<FoodieLikeCreateWithoutUserInput, FoodieLikeUncheckedCreateWithoutUserInput>
  }

  export type FoodieLikeCreateManyUserInputEnvelope = {
    data: FoodieLikeCreateManyUserInput | FoodieLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostDIYHomesUpsertWithWhereUniqueWithoutUserInput = {
    where: PostDIYHomesWhereUniqueInput
    update: XOR<PostDIYHomesUpdateWithoutUserInput, PostDIYHomesUncheckedUpdateWithoutUserInput>
    create: XOR<PostDIYHomesCreateWithoutUserInput, PostDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type PostDIYHomesUpdateWithWhereUniqueWithoutUserInput = {
    where: PostDIYHomesWhereUniqueInput
    data: XOR<PostDIYHomesUpdateWithoutUserInput, PostDIYHomesUncheckedUpdateWithoutUserInput>
  }

  export type PostDIYHomesUpdateManyWithWhereWithoutUserInput = {
    where: PostDIYHomesScalarWhereInput
    data: XOR<PostDIYHomesUpdateManyMutationInput, PostDIYHomesUncheckedUpdateManyWithoutUserInput>
  }

  export type PostDIYHomesScalarWhereInput = {
    AND?: PostDIYHomesScalarWhereInput | PostDIYHomesScalarWhereInput[]
    OR?: PostDIYHomesScalarWhereInput[]
    NOT?: PostDIYHomesScalarWhereInput | PostDIYHomesScalarWhereInput[]
    id?: StringFilter<"PostDIYHomes"> | string
    title?: StringFilter<"PostDIYHomes"> | string
    content?: StringFilter<"PostDIYHomes"> | string
    category?: StringFilter<"PostDIYHomes"> | string
    userId?: StringFilter<"PostDIYHomes"> | string
    createdAt?: DateTimeFilter<"PostDIYHomes"> | Date | string
  }

  export type ReviewDIYHomesUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewDIYHomesWhereUniqueInput
    update: XOR<ReviewDIYHomesUpdateWithoutUserInput, ReviewDIYHomesUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewDIYHomesCreateWithoutUserInput, ReviewDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type ReviewDIYHomesUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewDIYHomesWhereUniqueInput
    data: XOR<ReviewDIYHomesUpdateWithoutUserInput, ReviewDIYHomesUncheckedUpdateWithoutUserInput>
  }

  export type ReviewDIYHomesUpdateManyWithWhereWithoutUserInput = {
    where: ReviewDIYHomesScalarWhereInput
    data: XOR<ReviewDIYHomesUpdateManyMutationInput, ReviewDIYHomesUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewDIYHomesScalarWhereInput = {
    AND?: ReviewDIYHomesScalarWhereInput | ReviewDIYHomesScalarWhereInput[]
    OR?: ReviewDIYHomesScalarWhereInput[]
    NOT?: ReviewDIYHomesScalarWhereInput | ReviewDIYHomesScalarWhereInput[]
    id?: StringFilter<"ReviewDIYHomes"> | string
    postId?: StringFilter<"ReviewDIYHomes"> | string
    userId?: StringFilter<"ReviewDIYHomes"> | string
    rating?: IntFilter<"ReviewDIYHomes"> | number
    comment?: StringFilter<"ReviewDIYHomes"> | string
    createdAt?: DateTimeFilter<"ReviewDIYHomes"> | Date | string
  }

  export type BookmarkDIYHomesUpsertWithWhereUniqueWithoutUserInput = {
    where: BookmarkDIYHomesWhereUniqueInput
    update: XOR<BookmarkDIYHomesUpdateWithoutUserInput, BookmarkDIYHomesUncheckedUpdateWithoutUserInput>
    create: XOR<BookmarkDIYHomesCreateWithoutUserInput, BookmarkDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type BookmarkDIYHomesUpdateWithWhereUniqueWithoutUserInput = {
    where: BookmarkDIYHomesWhereUniqueInput
    data: XOR<BookmarkDIYHomesUpdateWithoutUserInput, BookmarkDIYHomesUncheckedUpdateWithoutUserInput>
  }

  export type BookmarkDIYHomesUpdateManyWithWhereWithoutUserInput = {
    where: BookmarkDIYHomesScalarWhereInput
    data: XOR<BookmarkDIYHomesUpdateManyMutationInput, BookmarkDIYHomesUncheckedUpdateManyWithoutUserInput>
  }

  export type BookmarkDIYHomesScalarWhereInput = {
    AND?: BookmarkDIYHomesScalarWhereInput | BookmarkDIYHomesScalarWhereInput[]
    OR?: BookmarkDIYHomesScalarWhereInput[]
    NOT?: BookmarkDIYHomesScalarWhereInput | BookmarkDIYHomesScalarWhereInput[]
    id?: StringFilter<"BookmarkDIYHomes"> | string
    postId?: StringFilter<"BookmarkDIYHomes"> | string
    userId?: StringFilter<"BookmarkDIYHomes"> | string
    createdAt?: DateTimeFilter<"BookmarkDIYHomes"> | Date | string
  }

  export type LikeDIYHomesUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeDIYHomesWhereUniqueInput
    update: XOR<LikeDIYHomesUpdateWithoutUserInput, LikeDIYHomesUncheckedUpdateWithoutUserInput>
    create: XOR<LikeDIYHomesCreateWithoutUserInput, LikeDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type LikeDIYHomesUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeDIYHomesWhereUniqueInput
    data: XOR<LikeDIYHomesUpdateWithoutUserInput, LikeDIYHomesUncheckedUpdateWithoutUserInput>
  }

  export type LikeDIYHomesUpdateManyWithWhereWithoutUserInput = {
    where: LikeDIYHomesScalarWhereInput
    data: XOR<LikeDIYHomesUpdateManyMutationInput, LikeDIYHomesUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeDIYHomesScalarWhereInput = {
    AND?: LikeDIYHomesScalarWhereInput | LikeDIYHomesScalarWhereInput[]
    OR?: LikeDIYHomesScalarWhereInput[]
    NOT?: LikeDIYHomesScalarWhereInput | LikeDIYHomesScalarWhereInput[]
    id?: StringFilter<"LikeDIYHomes"> | string
    postId?: StringFilter<"LikeDIYHomes"> | string
    userId?: StringFilter<"LikeDIYHomes"> | string
    createdAt?: DateTimeFilter<"LikeDIYHomes"> | Date | string
  }

  export type ReportDIYHomesUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportDIYHomesWhereUniqueInput
    update: XOR<ReportDIYHomesUpdateWithoutUserInput, ReportDIYHomesUncheckedUpdateWithoutUserInput>
    create: XOR<ReportDIYHomesCreateWithoutUserInput, ReportDIYHomesUncheckedCreateWithoutUserInput>
  }

  export type ReportDIYHomesUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportDIYHomesWhereUniqueInput
    data: XOR<ReportDIYHomesUpdateWithoutUserInput, ReportDIYHomesUncheckedUpdateWithoutUserInput>
  }

  export type ReportDIYHomesUpdateManyWithWhereWithoutUserInput = {
    where: ReportDIYHomesScalarWhereInput
    data: XOR<ReportDIYHomesUpdateManyMutationInput, ReportDIYHomesUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportDIYHomesScalarWhereInput = {
    AND?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
    OR?: ReportDIYHomesScalarWhereInput[]
    NOT?: ReportDIYHomesScalarWhereInput | ReportDIYHomesScalarWhereInput[]
    id?: StringFilter<"ReportDIYHomes"> | string
    postId?: StringNullableFilter<"ReportDIYHomes"> | string | null
    reviewId?: StringNullableFilter<"ReportDIYHomes"> | string | null
    userId?: StringFilter<"ReportDIYHomes"> | string
    reason?: StringFilter<"ReportDIYHomes"> | string
    createdAt?: DateTimeFilter<"ReportDIYHomes"> | Date | string
  }

  export type PlaceUrbanExplorerUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PlaceUrbanExplorerWhereUniqueInput
    update: XOR<PlaceUrbanExplorerUpdateWithoutOwnerInput, PlaceUrbanExplorerUncheckedUpdateWithoutOwnerInput>
    create: XOR<PlaceUrbanExplorerCreateWithoutOwnerInput, PlaceUrbanExplorerUncheckedCreateWithoutOwnerInput>
  }

  export type PlaceUrbanExplorerUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PlaceUrbanExplorerWhereUniqueInput
    data: XOR<PlaceUrbanExplorerUpdateWithoutOwnerInput, PlaceUrbanExplorerUncheckedUpdateWithoutOwnerInput>
  }

  export type PlaceUrbanExplorerUpdateManyWithWhereWithoutOwnerInput = {
    where: PlaceUrbanExplorerScalarWhereInput
    data: XOR<PlaceUrbanExplorerUpdateManyMutationInput, PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerInput>
  }

  export type PlaceUrbanExplorerScalarWhereInput = {
    AND?: PlaceUrbanExplorerScalarWhereInput | PlaceUrbanExplorerScalarWhereInput[]
    OR?: PlaceUrbanExplorerScalarWhereInput[]
    NOT?: PlaceUrbanExplorerScalarWhereInput | PlaceUrbanExplorerScalarWhereInput[]
    id?: StringFilter<"PlaceUrbanExplorer"> | string
    name?: StringFilter<"PlaceUrbanExplorer"> | string
    category?: StringFilter<"PlaceUrbanExplorer"> | string
    location?: StringFilter<"PlaceUrbanExplorer"> | string
    description?: StringFilter<"PlaceUrbanExplorer"> | string
    ownerId?: StringFilter<"PlaceUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"PlaceUrbanExplorer"> | Date | string
    validated?: BoolFilter<"PlaceUrbanExplorer"> | boolean
  }

  export type ReviewUrbanExplorerUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewUrbanExplorerWhereUniqueInput
    update: XOR<ReviewUrbanExplorerUpdateWithoutUserInput, ReviewUrbanExplorerUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewUrbanExplorerCreateWithoutUserInput, ReviewUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type ReviewUrbanExplorerUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewUrbanExplorerWhereUniqueInput
    data: XOR<ReviewUrbanExplorerUpdateWithoutUserInput, ReviewUrbanExplorerUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUrbanExplorerUpdateManyWithWhereWithoutUserInput = {
    where: ReviewUrbanExplorerScalarWhereInput
    data: XOR<ReviewUrbanExplorerUpdateManyMutationInput, ReviewUrbanExplorerUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewUrbanExplorerScalarWhereInput = {
    AND?: ReviewUrbanExplorerScalarWhereInput | ReviewUrbanExplorerScalarWhereInput[]
    OR?: ReviewUrbanExplorerScalarWhereInput[]
    NOT?: ReviewUrbanExplorerScalarWhereInput | ReviewUrbanExplorerScalarWhereInput[]
    id?: StringFilter<"ReviewUrbanExplorer"> | string
    placeId?: StringFilter<"ReviewUrbanExplorer"> | string
    userId?: StringFilter<"ReviewUrbanExplorer"> | string
    rating?: IntFilter<"ReviewUrbanExplorer"> | number
    comment?: StringFilter<"ReviewUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"ReviewUrbanExplorer"> | Date | string
  }

  export type LikeUrbanExplorerUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeUrbanExplorerWhereUniqueInput
    update: XOR<LikeUrbanExplorerUpdateWithoutUserInput, LikeUrbanExplorerUncheckedUpdateWithoutUserInput>
    create: XOR<LikeUrbanExplorerCreateWithoutUserInput, LikeUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type LikeUrbanExplorerUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeUrbanExplorerWhereUniqueInput
    data: XOR<LikeUrbanExplorerUpdateWithoutUserInput, LikeUrbanExplorerUncheckedUpdateWithoutUserInput>
  }

  export type LikeUrbanExplorerUpdateManyWithWhereWithoutUserInput = {
    where: LikeUrbanExplorerScalarWhereInput
    data: XOR<LikeUrbanExplorerUpdateManyMutationInput, LikeUrbanExplorerUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeUrbanExplorerScalarWhereInput = {
    AND?: LikeUrbanExplorerScalarWhereInput | LikeUrbanExplorerScalarWhereInput[]
    OR?: LikeUrbanExplorerScalarWhereInput[]
    NOT?: LikeUrbanExplorerScalarWhereInput | LikeUrbanExplorerScalarWhereInput[]
    id?: StringFilter<"LikeUrbanExplorer"> | string
    placeId?: StringFilter<"LikeUrbanExplorer"> | string
    userId?: StringFilter<"LikeUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"LikeUrbanExplorer"> | Date | string
  }

  export type BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutUserInput = {
    where: BookmarkUrbanExplorerWhereUniqueInput
    update: XOR<BookmarkUrbanExplorerUpdateWithoutUserInput, BookmarkUrbanExplorerUncheckedUpdateWithoutUserInput>
    create: XOR<BookmarkUrbanExplorerCreateWithoutUserInput, BookmarkUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutUserInput = {
    where: BookmarkUrbanExplorerWhereUniqueInput
    data: XOR<BookmarkUrbanExplorerUpdateWithoutUserInput, BookmarkUrbanExplorerUncheckedUpdateWithoutUserInput>
  }

  export type BookmarkUrbanExplorerUpdateManyWithWhereWithoutUserInput = {
    where: BookmarkUrbanExplorerScalarWhereInput
    data: XOR<BookmarkUrbanExplorerUpdateManyMutationInput, BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserInput>
  }

  export type BookmarkUrbanExplorerScalarWhereInput = {
    AND?: BookmarkUrbanExplorerScalarWhereInput | BookmarkUrbanExplorerScalarWhereInput[]
    OR?: BookmarkUrbanExplorerScalarWhereInput[]
    NOT?: BookmarkUrbanExplorerScalarWhereInput | BookmarkUrbanExplorerScalarWhereInput[]
    id?: StringFilter<"BookmarkUrbanExplorer"> | string
    placeId?: StringFilter<"BookmarkUrbanExplorer"> | string
    userId?: StringFilter<"BookmarkUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"BookmarkUrbanExplorer"> | Date | string
  }

  export type ReportUrbanExplorerUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    update: XOR<ReportUrbanExplorerUpdateWithoutUserInput, ReportUrbanExplorerUncheckedUpdateWithoutUserInput>
    create: XOR<ReportUrbanExplorerCreateWithoutUserInput, ReportUrbanExplorerUncheckedCreateWithoutUserInput>
  }

  export type ReportUrbanExplorerUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    data: XOR<ReportUrbanExplorerUpdateWithoutUserInput, ReportUrbanExplorerUncheckedUpdateWithoutUserInput>
  }

  export type ReportUrbanExplorerUpdateManyWithWhereWithoutUserInput = {
    where: ReportUrbanExplorerScalarWhereInput
    data: XOR<ReportUrbanExplorerUpdateManyMutationInput, ReportUrbanExplorerUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportUrbanExplorerScalarWhereInput = {
    AND?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
    OR?: ReportUrbanExplorerScalarWhereInput[]
    NOT?: ReportUrbanExplorerScalarWhereInput | ReportUrbanExplorerScalarWhereInput[]
    id?: StringFilter<"ReportUrbanExplorer"> | string
    placeId?: StringNullableFilter<"ReportUrbanExplorer"> | string | null
    reviewId?: StringNullableFilter<"ReportUrbanExplorer"> | string | null
    userId?: StringFilter<"ReportUrbanExplorer"> | string
    reason?: StringFilter<"ReportUrbanExplorer"> | string
    createdAt?: DateTimeFilter<"ReportUrbanExplorer"> | Date | string
  }

  export type FoodieFoodUpsertWithWhereUniqueWithoutUserInput = {
    where: FoodieFoodWhereUniqueInput
    update: XOR<FoodieFoodUpdateWithoutUserInput, FoodieFoodUncheckedUpdateWithoutUserInput>
    create: XOR<FoodieFoodCreateWithoutUserInput, FoodieFoodUncheckedCreateWithoutUserInput>
  }

  export type FoodieFoodUpdateWithWhereUniqueWithoutUserInput = {
    where: FoodieFoodWhereUniqueInput
    data: XOR<FoodieFoodUpdateWithoutUserInput, FoodieFoodUncheckedUpdateWithoutUserInput>
  }

  export type FoodieFoodUpdateManyWithWhereWithoutUserInput = {
    where: FoodieFoodScalarWhereInput
    data: XOR<FoodieFoodUpdateManyMutationInput, FoodieFoodUncheckedUpdateManyWithoutUserInput>
  }

  export type FoodieFoodScalarWhereInput = {
    AND?: FoodieFoodScalarWhereInput | FoodieFoodScalarWhereInput[]
    OR?: FoodieFoodScalarWhereInput[]
    NOT?: FoodieFoodScalarWhereInput | FoodieFoodScalarWhereInput[]
    id?: StringFilter<"FoodieFood"> | string
    name?: StringFilter<"FoodieFood"> | string
    cuisine?: StringFilter<"FoodieFood"> | string
    origin?: StringFilter<"FoodieFood"> | string
    description?: StringFilter<"FoodieFood"> | string
    submittedBy?: StringFilter<"FoodieFood"> | string
    validated?: BoolFilter<"FoodieFood"> | boolean
    createdAt?: DateTimeFilter<"FoodieFood"> | Date | string
  }

  export type FoodieLocationUpsertWithWhereUniqueWithoutUserInput = {
    where: FoodieLocationWhereUniqueInput
    update: XOR<FoodieLocationUpdateWithoutUserInput, FoodieLocationUncheckedUpdateWithoutUserInput>
    create: XOR<FoodieLocationCreateWithoutUserInput, FoodieLocationUncheckedCreateWithoutUserInput>
  }

  export type FoodieLocationUpdateWithWhereUniqueWithoutUserInput = {
    where: FoodieLocationWhereUniqueInput
    data: XOR<FoodieLocationUpdateWithoutUserInput, FoodieLocationUncheckedUpdateWithoutUserInput>
  }

  export type FoodieLocationUpdateManyWithWhereWithoutUserInput = {
    where: FoodieLocationScalarWhereInput
    data: XOR<FoodieLocationUpdateManyMutationInput, FoodieLocationUncheckedUpdateManyWithoutUserInput>
  }

  export type FoodieLocationScalarWhereInput = {
    AND?: FoodieLocationScalarWhereInput | FoodieLocationScalarWhereInput[]
    OR?: FoodieLocationScalarWhereInput[]
    NOT?: FoodieLocationScalarWhereInput | FoodieLocationScalarWhereInput[]
    id?: StringFilter<"FoodieLocation"> | string
    foodId?: StringFilter<"FoodieLocation"> | string
    locationName?: StringFilter<"FoodieLocation"> | string
    address?: StringFilter<"FoodieLocation"> | string
    submittedBy?: StringFilter<"FoodieLocation"> | string
    createdAt?: DateTimeFilter<"FoodieLocation"> | Date | string
  }

  export type FoodieReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: FoodieReviewWhereUniqueInput
    update: XOR<FoodieReviewUpdateWithoutUserInput, FoodieReviewUncheckedUpdateWithoutUserInput>
    create: XOR<FoodieReviewCreateWithoutUserInput, FoodieReviewUncheckedCreateWithoutUserInput>
  }

  export type FoodieReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: FoodieReviewWhereUniqueInput
    data: XOR<FoodieReviewUpdateWithoutUserInput, FoodieReviewUncheckedUpdateWithoutUserInput>
  }

  export type FoodieReviewUpdateManyWithWhereWithoutUserInput = {
    where: FoodieReviewScalarWhereInput
    data: XOR<FoodieReviewUpdateManyMutationInput, FoodieReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type FoodieReviewScalarWhereInput = {
    AND?: FoodieReviewScalarWhereInput | FoodieReviewScalarWhereInput[]
    OR?: FoodieReviewScalarWhereInput[]
    NOT?: FoodieReviewScalarWhereInput | FoodieReviewScalarWhereInput[]
    id?: StringFilter<"FoodieReview"> | string
    foodId?: StringFilter<"FoodieReview"> | string
    userId?: StringFilter<"FoodieReview"> | string
    rating?: IntFilter<"FoodieReview"> | number
    comment?: StringFilter<"FoodieReview"> | string
    validated?: BoolFilter<"FoodieReview"> | boolean
    createdAt?: DateTimeFilter<"FoodieReview"> | Date | string
  }

  export type FoodieLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: FoodieLikeWhereUniqueInput
    update: XOR<FoodieLikeUpdateWithoutUserInput, FoodieLikeUncheckedUpdateWithoutUserInput>
    create: XOR<FoodieLikeCreateWithoutUserInput, FoodieLikeUncheckedCreateWithoutUserInput>
  }

  export type FoodieLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: FoodieLikeWhereUniqueInput
    data: XOR<FoodieLikeUpdateWithoutUserInput, FoodieLikeUncheckedUpdateWithoutUserInput>
  }

  export type FoodieLikeUpdateManyWithWhereWithoutUserInput = {
    where: FoodieLikeScalarWhereInput
    data: XOR<FoodieLikeUpdateManyMutationInput, FoodieLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type FoodieLikeScalarWhereInput = {
    AND?: FoodieLikeScalarWhereInput | FoodieLikeScalarWhereInput[]
    OR?: FoodieLikeScalarWhereInput[]
    NOT?: FoodieLikeScalarWhereInput | FoodieLikeScalarWhereInput[]
    id?: StringFilter<"FoodieLike"> | string
    foodId?: StringFilter<"FoodieLike"> | string
    userId?: StringFilter<"FoodieLike"> | string
    createdAt?: DateTimeFilter<"FoodieLike"> | Date | string
  }

  export type UserCreateWithoutPostsInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type ReviewDIYHomesCreateWithoutPostInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    Report?: ReportDIYHomesCreateNestedManyWithoutReviewInput
  }

  export type ReviewDIYHomesUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewDIYHomesCreateOrConnectWithoutPostInput = {
    where: ReviewDIYHomesWhereUniqueInput
    create: XOR<ReviewDIYHomesCreateWithoutPostInput, ReviewDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type ReviewDIYHomesCreateManyPostInputEnvelope = {
    data: ReviewDIYHomesCreateManyPostInput | ReviewDIYHomesCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkDIYHomesCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkDIYHomesUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkDIYHomesCreateOrConnectWithoutPostInput = {
    where: BookmarkDIYHomesWhereUniqueInput
    create: XOR<BookmarkDIYHomesCreateWithoutPostInput, BookmarkDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type BookmarkDIYHomesCreateManyPostInputEnvelope = {
    data: BookmarkDIYHomesCreateManyPostInput | BookmarkDIYHomesCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type LikeDIYHomesCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikeInput
  }

  export type LikeDIYHomesUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeDIYHomesCreateOrConnectWithoutPostInput = {
    where: LikeDIYHomesWhereUniqueInput
    create: XOR<LikeDIYHomesCreateWithoutPostInput, LikeDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type LikeDIYHomesCreateManyPostInputEnvelope = {
    data: LikeDIYHomesCreateManyPostInput | LikeDIYHomesCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ReportDIYHomesCreateWithoutPostInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReportInput
    review?: ReviewDIYHomesCreateNestedOneWithoutReportInput
  }

  export type ReportDIYHomesUncheckedCreateWithoutPostInput = {
    id?: string
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesCreateOrConnectWithoutPostInput = {
    where: ReportDIYHomesWhereUniqueInput
    create: XOR<ReportDIYHomesCreateWithoutPostInput, ReportDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type ReportDIYHomesCreateManyPostInputEnvelope = {
    data: ReportDIYHomesCreateManyPostInput | ReportDIYHomesCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReviewDIYHomesUpsertWithWhereUniqueWithoutPostInput = {
    where: ReviewDIYHomesWhereUniqueInput
    update: XOR<ReviewDIYHomesUpdateWithoutPostInput, ReviewDIYHomesUncheckedUpdateWithoutPostInput>
    create: XOR<ReviewDIYHomesCreateWithoutPostInput, ReviewDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type ReviewDIYHomesUpdateWithWhereUniqueWithoutPostInput = {
    where: ReviewDIYHomesWhereUniqueInput
    data: XOR<ReviewDIYHomesUpdateWithoutPostInput, ReviewDIYHomesUncheckedUpdateWithoutPostInput>
  }

  export type ReviewDIYHomesUpdateManyWithWhereWithoutPostInput = {
    where: ReviewDIYHomesScalarWhereInput
    data: XOR<ReviewDIYHomesUpdateManyMutationInput, ReviewDIYHomesUncheckedUpdateManyWithoutPostInput>
  }

  export type BookmarkDIYHomesUpsertWithWhereUniqueWithoutPostInput = {
    where: BookmarkDIYHomesWhereUniqueInput
    update: XOR<BookmarkDIYHomesUpdateWithoutPostInput, BookmarkDIYHomesUncheckedUpdateWithoutPostInput>
    create: XOR<BookmarkDIYHomesCreateWithoutPostInput, BookmarkDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type BookmarkDIYHomesUpdateWithWhereUniqueWithoutPostInput = {
    where: BookmarkDIYHomesWhereUniqueInput
    data: XOR<BookmarkDIYHomesUpdateWithoutPostInput, BookmarkDIYHomesUncheckedUpdateWithoutPostInput>
  }

  export type BookmarkDIYHomesUpdateManyWithWhereWithoutPostInput = {
    where: BookmarkDIYHomesScalarWhereInput
    data: XOR<BookmarkDIYHomesUpdateManyMutationInput, BookmarkDIYHomesUncheckedUpdateManyWithoutPostInput>
  }

  export type LikeDIYHomesUpsertWithWhereUniqueWithoutPostInput = {
    where: LikeDIYHomesWhereUniqueInput
    update: XOR<LikeDIYHomesUpdateWithoutPostInput, LikeDIYHomesUncheckedUpdateWithoutPostInput>
    create: XOR<LikeDIYHomesCreateWithoutPostInput, LikeDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type LikeDIYHomesUpdateWithWhereUniqueWithoutPostInput = {
    where: LikeDIYHomesWhereUniqueInput
    data: XOR<LikeDIYHomesUpdateWithoutPostInput, LikeDIYHomesUncheckedUpdateWithoutPostInput>
  }

  export type LikeDIYHomesUpdateManyWithWhereWithoutPostInput = {
    where: LikeDIYHomesScalarWhereInput
    data: XOR<LikeDIYHomesUpdateManyMutationInput, LikeDIYHomesUncheckedUpdateManyWithoutPostInput>
  }

  export type ReportDIYHomesUpsertWithWhereUniqueWithoutPostInput = {
    where: ReportDIYHomesWhereUniqueInput
    update: XOR<ReportDIYHomesUpdateWithoutPostInput, ReportDIYHomesUncheckedUpdateWithoutPostInput>
    create: XOR<ReportDIYHomesCreateWithoutPostInput, ReportDIYHomesUncheckedCreateWithoutPostInput>
  }

  export type ReportDIYHomesUpdateWithWhereUniqueWithoutPostInput = {
    where: ReportDIYHomesWhereUniqueInput
    data: XOR<ReportDIYHomesUpdateWithoutPostInput, ReportDIYHomesUncheckedUpdateWithoutPostInput>
  }

  export type ReportDIYHomesUpdateManyWithWhereWithoutPostInput = {
    where: ReportDIYHomesScalarWhereInput
    data: XOR<ReportDIYHomesUpdateManyMutationInput, ReportDIYHomesUncheckedUpdateManyWithoutPostInput>
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type PostDIYHomesCreateWithoutReviewsInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostsInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesUncheckedCreateWithoutReviewsInput = {
    id?: string
    title: string
    content: string
    category: string
    userId: string
    createdAt?: Date | string
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesCreateOrConnectWithoutReviewsInput = {
    where: PostDIYHomesWhereUniqueInput
    create: XOR<PostDIYHomesCreateWithoutReviewsInput, PostDIYHomesUncheckedCreateWithoutReviewsInput>
  }

  export type ReportDIYHomesCreateWithoutReviewInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReportInput
    post?: PostDIYHomesCreateNestedOneWithoutReportInput
  }

  export type ReportDIYHomesUncheckedCreateWithoutReviewInput = {
    id?: string
    postId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesCreateOrConnectWithoutReviewInput = {
    where: ReportDIYHomesWhereUniqueInput
    create: XOR<ReportDIYHomesCreateWithoutReviewInput, ReportDIYHomesUncheckedCreateWithoutReviewInput>
  }

  export type ReportDIYHomesCreateManyReviewInputEnvelope = {
    data: ReportDIYHomesCreateManyReviewInput | ReportDIYHomesCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostDIYHomesUpsertWithoutReviewsInput = {
    update: XOR<PostDIYHomesUpdateWithoutReviewsInput, PostDIYHomesUncheckedUpdateWithoutReviewsInput>
    create: XOR<PostDIYHomesCreateWithoutReviewsInput, PostDIYHomesUncheckedCreateWithoutReviewsInput>
    where?: PostDIYHomesWhereInput
  }

  export type PostDIYHomesUpdateToOneWithWhereWithoutReviewsInput = {
    where?: PostDIYHomesWhereInput
    data: XOR<PostDIYHomesUpdateWithoutReviewsInput, PostDIYHomesUncheckedUpdateWithoutReviewsInput>
  }

  export type PostDIYHomesUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ReportDIYHomesUpsertWithWhereUniqueWithoutReviewInput = {
    where: ReportDIYHomesWhereUniqueInput
    update: XOR<ReportDIYHomesUpdateWithoutReviewInput, ReportDIYHomesUncheckedUpdateWithoutReviewInput>
    create: XOR<ReportDIYHomesCreateWithoutReviewInput, ReportDIYHomesUncheckedCreateWithoutReviewInput>
  }

  export type ReportDIYHomesUpdateWithWhereUniqueWithoutReviewInput = {
    where: ReportDIYHomesWhereUniqueInput
    data: XOR<ReportDIYHomesUpdateWithoutReviewInput, ReportDIYHomesUncheckedUpdateWithoutReviewInput>
  }

  export type ReportDIYHomesUpdateManyWithWhereWithoutReviewInput = {
    where: ReportDIYHomesScalarWhereInput
    data: XOR<ReportDIYHomesUpdateManyMutationInput, ReportDIYHomesUncheckedUpdateManyWithoutReviewInput>
  }

  export type UserCreateWithoutLikeInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikeInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
  }

  export type PostDIYHomesCreateWithoutLikeInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostsInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesUncheckedCreateWithoutLikeInput = {
    id?: string
    title: string
    content: string
    category: string
    userId: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesCreateOrConnectWithoutLikeInput = {
    where: PostDIYHomesWhereUniqueInput
    create: XOR<PostDIYHomesCreateWithoutLikeInput, PostDIYHomesUncheckedCreateWithoutLikeInput>
  }

  export type UserUpsertWithoutLikeInput = {
    update: XOR<UserUpdateWithoutLikeInput, UserUncheckedUpdateWithoutLikeInput>
    create: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikeInput, UserUncheckedUpdateWithoutLikeInput>
  }

  export type UserUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostDIYHomesUpsertWithoutLikeInput = {
    update: XOR<PostDIYHomesUpdateWithoutLikeInput, PostDIYHomesUncheckedUpdateWithoutLikeInput>
    create: XOR<PostDIYHomesCreateWithoutLikeInput, PostDIYHomesUncheckedCreateWithoutLikeInput>
    where?: PostDIYHomesWhereInput
  }

  export type PostDIYHomesUpdateToOneWithWhereWithoutLikeInput = {
    where?: PostDIYHomesWhereInput
    data: XOR<PostDIYHomesUpdateWithoutLikeInput, PostDIYHomesUncheckedUpdateWithoutLikeInput>
  }

  export type PostDIYHomesUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutBookmarksInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookmarksInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookmarksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
  }

  export type PostDIYHomesCreateWithoutBookmarksInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostsInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesUncheckedCreateWithoutBookmarksInput = {
    id?: string
    title: string
    content: string
    category: string
    userId: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesCreateOrConnectWithoutBookmarksInput = {
    where: PostDIYHomesWhereUniqueInput
    create: XOR<PostDIYHomesCreateWithoutBookmarksInput, PostDIYHomesUncheckedCreateWithoutBookmarksInput>
  }

  export type UserUpsertWithoutBookmarksInput = {
    update: XOR<UserUpdateWithoutBookmarksInput, UserUncheckedUpdateWithoutBookmarksInput>
    create: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookmarksInput, UserUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostDIYHomesUpsertWithoutBookmarksInput = {
    update: XOR<PostDIYHomesUpdateWithoutBookmarksInput, PostDIYHomesUncheckedUpdateWithoutBookmarksInput>
    create: XOR<PostDIYHomesCreateWithoutBookmarksInput, PostDIYHomesUncheckedCreateWithoutBookmarksInput>
    where?: PostDIYHomesWhereInput
  }

  export type PostDIYHomesUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: PostDIYHomesWhereInput
    data: XOR<PostDIYHomesUpdateWithoutBookmarksInput, PostDIYHomesUncheckedUpdateWithoutBookmarksInput>
  }

  export type PostDIYHomesUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutReportInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportInput, UserUncheckedCreateWithoutReportInput>
  }

  export type PostDIYHomesCreateWithoutReportInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostsInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesUncheckedCreateWithoutReportInput = {
    id?: string
    title: string
    content: string
    category: string
    userId: string
    createdAt?: Date | string
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutPostInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostDIYHomesCreateOrConnectWithoutReportInput = {
    where: PostDIYHomesWhereUniqueInput
    create: XOR<PostDIYHomesCreateWithoutReportInput, PostDIYHomesUncheckedCreateWithoutReportInput>
  }

  export type ReviewDIYHomesCreateWithoutReportInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    post: PostDIYHomesCreateNestedOneWithoutReviewsInput
  }

  export type ReviewDIYHomesUncheckedCreateWithoutReportInput = {
    id?: string
    postId: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type ReviewDIYHomesCreateOrConnectWithoutReportInput = {
    where: ReviewDIYHomesWhereUniqueInput
    create: XOR<ReviewDIYHomesCreateWithoutReportInput, ReviewDIYHomesUncheckedCreateWithoutReportInput>
  }

  export type UserUpsertWithoutReportInput = {
    update: XOR<UserUpdateWithoutReportInput, UserUncheckedUpdateWithoutReportInput>
    create: XOR<UserCreateWithoutReportInput, UserUncheckedCreateWithoutReportInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportInput, UserUncheckedUpdateWithoutReportInput>
  }

  export type UserUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostDIYHomesUpsertWithoutReportInput = {
    update: XOR<PostDIYHomesUpdateWithoutReportInput, PostDIYHomesUncheckedUpdateWithoutReportInput>
    create: XOR<PostDIYHomesCreateWithoutReportInput, PostDIYHomesUncheckedCreateWithoutReportInput>
    where?: PostDIYHomesWhereInput
  }

  export type PostDIYHomesUpdateToOneWithWhereWithoutReportInput = {
    where?: PostDIYHomesWhereInput
    data: XOR<PostDIYHomesUpdateWithoutReportInput, PostDIYHomesUncheckedUpdateWithoutReportInput>
  }

  export type PostDIYHomesUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ReviewDIYHomesUpsertWithoutReportInput = {
    update: XOR<ReviewDIYHomesUpdateWithoutReportInput, ReviewDIYHomesUncheckedUpdateWithoutReportInput>
    create: XOR<ReviewDIYHomesCreateWithoutReportInput, ReviewDIYHomesUncheckedCreateWithoutReportInput>
    where?: ReviewDIYHomesWhereInput
  }

  export type ReviewDIYHomesUpdateToOneWithWhereWithoutReportInput = {
    where?: ReviewDIYHomesWhereInput
    data: XOR<ReviewDIYHomesUpdateWithoutReportInput, ReviewDIYHomesUncheckedUpdateWithoutReportInput>
  }

  export type ReviewDIYHomesUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    post?: PostDIYHomesUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewDIYHomesUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPlaceUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlaceUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPlaceUrbanExplorerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlaceUrbanExplorerInput, UserUncheckedCreateWithoutPlaceUrbanExplorerInput>
  }

  export type ReviewUrbanExplorerCreateWithoutPlaceInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewUrbanExplorerInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutReviewInput
  }

  export type ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewUrbanExplorerCreateOrConnectWithoutPlaceInput = {
    where: ReviewUrbanExplorerWhereUniqueInput
    create: XOR<ReviewUrbanExplorerCreateWithoutPlaceInput, ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type ReviewUrbanExplorerCreateManyPlaceInputEnvelope = {
    data: ReviewUrbanExplorerCreateManyPlaceInput | ReviewUrbanExplorerCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkUrbanExplorerCreateWithoutPlaceInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBookmarkUrbanExplorerInput
  }

  export type BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkUrbanExplorerCreateOrConnectWithoutPlaceInput = {
    where: BookmarkUrbanExplorerWhereUniqueInput
    create: XOR<BookmarkUrbanExplorerCreateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type BookmarkUrbanExplorerCreateManyPlaceInputEnvelope = {
    data: BookmarkUrbanExplorerCreateManyPlaceInput | BookmarkUrbanExplorerCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type LikeUrbanExplorerCreateWithoutPlaceInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutLikeUrbanExplorerInput
  }

  export type LikeUrbanExplorerUncheckedCreateWithoutPlaceInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeUrbanExplorerCreateOrConnectWithoutPlaceInput = {
    where: LikeUrbanExplorerWhereUniqueInput
    create: XOR<LikeUrbanExplorerCreateWithoutPlaceInput, LikeUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type LikeUrbanExplorerCreateManyPlaceInputEnvelope = {
    data: LikeUrbanExplorerCreateManyPlaceInput | LikeUrbanExplorerCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type ReportUrbanExplorerCreateWithoutPlaceInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReportUrbanExplorerInput
    review?: ReviewUrbanExplorerCreateNestedOneWithoutReportsInput
  }

  export type ReportUrbanExplorerUncheckedCreateWithoutPlaceInput = {
    id?: string
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerCreateOrConnectWithoutPlaceInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    create: XOR<ReportUrbanExplorerCreateWithoutPlaceInput, ReportUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type ReportUrbanExplorerCreateManyPlaceInputEnvelope = {
    data: ReportUrbanExplorerCreateManyPlaceInput | ReportUrbanExplorerCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPlaceUrbanExplorerInput = {
    update: XOR<UserUpdateWithoutPlaceUrbanExplorerInput, UserUncheckedUpdateWithoutPlaceUrbanExplorerInput>
    create: XOR<UserCreateWithoutPlaceUrbanExplorerInput, UserUncheckedCreateWithoutPlaceUrbanExplorerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlaceUrbanExplorerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlaceUrbanExplorerInput, UserUncheckedUpdateWithoutPlaceUrbanExplorerInput>
  }

  export type UserUpdateWithoutPlaceUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlaceUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReviewUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput = {
    where: ReviewUrbanExplorerWhereUniqueInput
    update: XOR<ReviewUrbanExplorerUpdateWithoutPlaceInput, ReviewUrbanExplorerUncheckedUpdateWithoutPlaceInput>
    create: XOR<ReviewUrbanExplorerCreateWithoutPlaceInput, ReviewUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type ReviewUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput = {
    where: ReviewUrbanExplorerWhereUniqueInput
    data: XOR<ReviewUrbanExplorerUpdateWithoutPlaceInput, ReviewUrbanExplorerUncheckedUpdateWithoutPlaceInput>
  }

  export type ReviewUrbanExplorerUpdateManyWithWhereWithoutPlaceInput = {
    where: ReviewUrbanExplorerScalarWhereInput
    data: XOR<ReviewUrbanExplorerUpdateManyMutationInput, ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceInput>
  }

  export type BookmarkUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput = {
    where: BookmarkUrbanExplorerWhereUniqueInput
    update: XOR<BookmarkUrbanExplorerUpdateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedUpdateWithoutPlaceInput>
    create: XOR<BookmarkUrbanExplorerCreateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type BookmarkUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput = {
    where: BookmarkUrbanExplorerWhereUniqueInput
    data: XOR<BookmarkUrbanExplorerUpdateWithoutPlaceInput, BookmarkUrbanExplorerUncheckedUpdateWithoutPlaceInput>
  }

  export type BookmarkUrbanExplorerUpdateManyWithWhereWithoutPlaceInput = {
    where: BookmarkUrbanExplorerScalarWhereInput
    data: XOR<BookmarkUrbanExplorerUpdateManyMutationInput, BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceInput>
  }

  export type LikeUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput = {
    where: LikeUrbanExplorerWhereUniqueInput
    update: XOR<LikeUrbanExplorerUpdateWithoutPlaceInput, LikeUrbanExplorerUncheckedUpdateWithoutPlaceInput>
    create: XOR<LikeUrbanExplorerCreateWithoutPlaceInput, LikeUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type LikeUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput = {
    where: LikeUrbanExplorerWhereUniqueInput
    data: XOR<LikeUrbanExplorerUpdateWithoutPlaceInput, LikeUrbanExplorerUncheckedUpdateWithoutPlaceInput>
  }

  export type LikeUrbanExplorerUpdateManyWithWhereWithoutPlaceInput = {
    where: LikeUrbanExplorerScalarWhereInput
    data: XOR<LikeUrbanExplorerUpdateManyMutationInput, LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceInput>
  }

  export type ReportUrbanExplorerUpsertWithWhereUniqueWithoutPlaceInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    update: XOR<ReportUrbanExplorerUpdateWithoutPlaceInput, ReportUrbanExplorerUncheckedUpdateWithoutPlaceInput>
    create: XOR<ReportUrbanExplorerCreateWithoutPlaceInput, ReportUrbanExplorerUncheckedCreateWithoutPlaceInput>
  }

  export type ReportUrbanExplorerUpdateWithWhereUniqueWithoutPlaceInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    data: XOR<ReportUrbanExplorerUpdateWithoutPlaceInput, ReportUrbanExplorerUncheckedUpdateWithoutPlaceInput>
  }

  export type ReportUrbanExplorerUpdateManyWithWhereWithoutPlaceInput = {
    where: ReportUrbanExplorerScalarWhereInput
    data: XOR<ReportUrbanExplorerUpdateManyMutationInput, ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceInput>
  }

  export type UserCreateWithoutReviewUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewUrbanExplorerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewUrbanExplorerInput, UserUncheckedCreateWithoutReviewUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerCreateWithoutReviewsInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
    owner: UserCreateNestedOneWithoutPlaceUrbanExplorerInput
    bookmarks?: BookmarkUrbanExplorerCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    ownerId: string
    createdAt?: Date | string
    validated?: boolean
    bookmarks?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerCreateOrConnectWithoutReviewsInput = {
    where: PlaceUrbanExplorerWhereUniqueInput
    create: XOR<PlaceUrbanExplorerCreateWithoutReviewsInput, PlaceUrbanExplorerUncheckedCreateWithoutReviewsInput>
  }

  export type ReportUrbanExplorerCreateWithoutReviewInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReportUrbanExplorerInput
    place?: PlaceUrbanExplorerCreateNestedOneWithoutReportsInput
  }

  export type ReportUrbanExplorerUncheckedCreateWithoutReviewInput = {
    id?: string
    placeId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerCreateOrConnectWithoutReviewInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    create: XOR<ReportUrbanExplorerCreateWithoutReviewInput, ReportUrbanExplorerUncheckedCreateWithoutReviewInput>
  }

  export type ReportUrbanExplorerCreateManyReviewInputEnvelope = {
    data: ReportUrbanExplorerCreateManyReviewInput | ReportUrbanExplorerCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReviewUrbanExplorerInput = {
    update: XOR<UserUpdateWithoutReviewUrbanExplorerInput, UserUncheckedUpdateWithoutReviewUrbanExplorerInput>
    create: XOR<UserCreateWithoutReviewUrbanExplorerInput, UserUncheckedCreateWithoutReviewUrbanExplorerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewUrbanExplorerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewUrbanExplorerInput, UserUncheckedUpdateWithoutReviewUrbanExplorerInput>
  }

  export type UserUpdateWithoutReviewUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlaceUrbanExplorerUpsertWithoutReviewsInput = {
    update: XOR<PlaceUrbanExplorerUpdateWithoutReviewsInput, PlaceUrbanExplorerUncheckedUpdateWithoutReviewsInput>
    create: XOR<PlaceUrbanExplorerCreateWithoutReviewsInput, PlaceUrbanExplorerUncheckedCreateWithoutReviewsInput>
    where?: PlaceUrbanExplorerWhereInput
  }

  export type PlaceUrbanExplorerUpdateToOneWithWhereWithoutReviewsInput = {
    where?: PlaceUrbanExplorerWhereInput
    data: XOR<PlaceUrbanExplorerUpdateWithoutReviewsInput, PlaceUrbanExplorerUncheckedUpdateWithoutReviewsInput>
  }

  export type PlaceUrbanExplorerUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutPlaceUrbanExplorerNestedInput
    bookmarks?: BookmarkUrbanExplorerUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    bookmarks?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type ReportUrbanExplorerUpsertWithWhereUniqueWithoutReviewInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    update: XOR<ReportUrbanExplorerUpdateWithoutReviewInput, ReportUrbanExplorerUncheckedUpdateWithoutReviewInput>
    create: XOR<ReportUrbanExplorerCreateWithoutReviewInput, ReportUrbanExplorerUncheckedCreateWithoutReviewInput>
  }

  export type ReportUrbanExplorerUpdateWithWhereUniqueWithoutReviewInput = {
    where: ReportUrbanExplorerWhereUniqueInput
    data: XOR<ReportUrbanExplorerUpdateWithoutReviewInput, ReportUrbanExplorerUncheckedUpdateWithoutReviewInput>
  }

  export type ReportUrbanExplorerUpdateManyWithWhereWithoutReviewInput = {
    where: ReportUrbanExplorerScalarWhereInput
    data: XOR<ReportUrbanExplorerUpdateManyMutationInput, ReportUrbanExplorerUncheckedUpdateManyWithoutReviewInput>
  }

  export type UserCreateWithoutLikeUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikeUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikeUrbanExplorerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikeUrbanExplorerInput, UserUncheckedCreateWithoutLikeUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerCreateWithoutLikesInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
    owner: UserCreateNestedOneWithoutPlaceUrbanExplorerInput
    reviews?: ReviewUrbanExplorerCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerUncheckedCreateWithoutLikesInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    ownerId: string
    createdAt?: Date | string
    validated?: boolean
    reviews?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerCreateOrConnectWithoutLikesInput = {
    where: PlaceUrbanExplorerWhereUniqueInput
    create: XOR<PlaceUrbanExplorerCreateWithoutLikesInput, PlaceUrbanExplorerUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutLikeUrbanExplorerInput = {
    update: XOR<UserUpdateWithoutLikeUrbanExplorerInput, UserUncheckedUpdateWithoutLikeUrbanExplorerInput>
    create: XOR<UserCreateWithoutLikeUrbanExplorerInput, UserUncheckedCreateWithoutLikeUrbanExplorerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikeUrbanExplorerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikeUrbanExplorerInput, UserUncheckedUpdateWithoutLikeUrbanExplorerInput>
  }

  export type UserUpdateWithoutLikeUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikeUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlaceUrbanExplorerUpsertWithoutLikesInput = {
    update: XOR<PlaceUrbanExplorerUpdateWithoutLikesInput, PlaceUrbanExplorerUncheckedUpdateWithoutLikesInput>
    create: XOR<PlaceUrbanExplorerCreateWithoutLikesInput, PlaceUrbanExplorerUncheckedCreateWithoutLikesInput>
    where?: PlaceUrbanExplorerWhereInput
  }

  export type PlaceUrbanExplorerUpdateToOneWithWhereWithoutLikesInput = {
    where?: PlaceUrbanExplorerWhereInput
    data: XOR<PlaceUrbanExplorerUpdateWithoutLikesInput, PlaceUrbanExplorerUncheckedUpdateWithoutLikesInput>
  }

  export type PlaceUrbanExplorerUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutPlaceUrbanExplorerNestedInput
    reviews?: ReviewUrbanExplorerUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type UserCreateWithoutBookmarkUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookmarkUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookmarkUrbanExplorerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookmarkUrbanExplorerInput, UserUncheckedCreateWithoutBookmarkUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerCreateWithoutBookmarksInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
    owner: UserCreateNestedOneWithoutPlaceUrbanExplorerInput
    reviews?: ReviewUrbanExplorerCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerUncheckedCreateWithoutBookmarksInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    ownerId: string
    createdAt?: Date | string
    validated?: boolean
    reviews?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    reports?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerCreateOrConnectWithoutBookmarksInput = {
    where: PlaceUrbanExplorerWhereUniqueInput
    create: XOR<PlaceUrbanExplorerCreateWithoutBookmarksInput, PlaceUrbanExplorerUncheckedCreateWithoutBookmarksInput>
  }

  export type UserUpsertWithoutBookmarkUrbanExplorerInput = {
    update: XOR<UserUpdateWithoutBookmarkUrbanExplorerInput, UserUncheckedUpdateWithoutBookmarkUrbanExplorerInput>
    create: XOR<UserCreateWithoutBookmarkUrbanExplorerInput, UserUncheckedCreateWithoutBookmarkUrbanExplorerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookmarkUrbanExplorerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookmarkUrbanExplorerInput, UserUncheckedUpdateWithoutBookmarkUrbanExplorerInput>
  }

  export type UserUpdateWithoutBookmarkUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookmarkUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlaceUrbanExplorerUpsertWithoutBookmarksInput = {
    update: XOR<PlaceUrbanExplorerUpdateWithoutBookmarksInput, PlaceUrbanExplorerUncheckedUpdateWithoutBookmarksInput>
    create: XOR<PlaceUrbanExplorerCreateWithoutBookmarksInput, PlaceUrbanExplorerUncheckedCreateWithoutBookmarksInput>
    where?: PlaceUrbanExplorerWhereInput
  }

  export type PlaceUrbanExplorerUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: PlaceUrbanExplorerWhereInput
    data: XOR<PlaceUrbanExplorerUpdateWithoutBookmarksInput, PlaceUrbanExplorerUncheckedUpdateWithoutBookmarksInput>
  }

  export type PlaceUrbanExplorerUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutPlaceUrbanExplorerNestedInput
    reviews?: ReviewUrbanExplorerUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type UserCreateWithoutReportUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportUrbanExplorerInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportUrbanExplorerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportUrbanExplorerInput, UserUncheckedCreateWithoutReportUrbanExplorerInput>
  }

  export type PlaceUrbanExplorerCreateWithoutReportsInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
    owner: UserCreateNestedOneWithoutPlaceUrbanExplorerInput
    reviews?: ReviewUrbanExplorerCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    ownerId: string
    createdAt?: Date | string
    validated?: boolean
    reviews?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    bookmarks?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
    likes?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUrbanExplorerCreateOrConnectWithoutReportsInput = {
    where: PlaceUrbanExplorerWhereUniqueInput
    create: XOR<PlaceUrbanExplorerCreateWithoutReportsInput, PlaceUrbanExplorerUncheckedCreateWithoutReportsInput>
  }

  export type ReviewUrbanExplorerCreateWithoutReportsInput = {
    id?: string
    rating: number
    comment: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewUrbanExplorerInput
    place: PlaceUrbanExplorerCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUrbanExplorerUncheckedCreateWithoutReportsInput = {
    id?: string
    placeId: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type ReviewUrbanExplorerCreateOrConnectWithoutReportsInput = {
    where: ReviewUrbanExplorerWhereUniqueInput
    create: XOR<ReviewUrbanExplorerCreateWithoutReportsInput, ReviewUrbanExplorerUncheckedCreateWithoutReportsInput>
  }

  export type UserUpsertWithoutReportUrbanExplorerInput = {
    update: XOR<UserUpdateWithoutReportUrbanExplorerInput, UserUncheckedUpdateWithoutReportUrbanExplorerInput>
    create: XOR<UserCreateWithoutReportUrbanExplorerInput, UserUncheckedCreateWithoutReportUrbanExplorerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportUrbanExplorerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportUrbanExplorerInput, UserUncheckedUpdateWithoutReportUrbanExplorerInput>
  }

  export type UserUpdateWithoutReportUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportUrbanExplorerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlaceUrbanExplorerUpsertWithoutReportsInput = {
    update: XOR<PlaceUrbanExplorerUpdateWithoutReportsInput, PlaceUrbanExplorerUncheckedUpdateWithoutReportsInput>
    create: XOR<PlaceUrbanExplorerCreateWithoutReportsInput, PlaceUrbanExplorerUncheckedCreateWithoutReportsInput>
    where?: PlaceUrbanExplorerWhereInput
  }

  export type PlaceUrbanExplorerUpdateToOneWithWhereWithoutReportsInput = {
    where?: PlaceUrbanExplorerWhereInput
    data: XOR<PlaceUrbanExplorerUpdateWithoutReportsInput, PlaceUrbanExplorerUncheckedUpdateWithoutReportsInput>
  }

  export type PlaceUrbanExplorerUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutPlaceUrbanExplorerNestedInput
    reviews?: ReviewUrbanExplorerUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type ReviewUrbanExplorerUpsertWithoutReportsInput = {
    update: XOR<ReviewUrbanExplorerUpdateWithoutReportsInput, ReviewUrbanExplorerUncheckedUpdateWithoutReportsInput>
    create: XOR<ReviewUrbanExplorerCreateWithoutReportsInput, ReviewUrbanExplorerUncheckedCreateWithoutReportsInput>
    where?: ReviewUrbanExplorerWhereInput
  }

  export type ReviewUrbanExplorerUpdateToOneWithWhereWithoutReportsInput = {
    where?: ReviewUrbanExplorerWhereInput
    data: XOR<ReviewUrbanExplorerUpdateWithoutReportsInput, ReviewUrbanExplorerUncheckedUpdateWithoutReportsInput>
  }

  export type ReviewUrbanExplorerUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewUrbanExplorerNestedInput
    place?: PlaceUrbanExplorerUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUrbanExplorerUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutFoodieFoodInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoodieFoodInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoodieFoodInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoodieFoodInput, UserUncheckedCreateWithoutFoodieFoodInput>
  }

  export type FoodieLocationCreateWithoutFoodInput = {
    id?: string
    locationName: string
    address: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieLocationInput
  }

  export type FoodieLocationUncheckedCreateWithoutFoodInput = {
    id?: string
    locationName: string
    address: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type FoodieLocationCreateOrConnectWithoutFoodInput = {
    where: FoodieLocationWhereUniqueInput
    create: XOR<FoodieLocationCreateWithoutFoodInput, FoodieLocationUncheckedCreateWithoutFoodInput>
  }

  export type FoodieLocationCreateManyFoodInputEnvelope = {
    data: FoodieLocationCreateManyFoodInput | FoodieLocationCreateManyFoodInput[]
    skipDuplicates?: boolean
  }

  export type FoodieReviewCreateWithoutFoodInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieReviewInput
  }

  export type FoodieReviewUncheckedCreateWithoutFoodInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieReviewCreateOrConnectWithoutFoodInput = {
    where: FoodieReviewWhereUniqueInput
    create: XOR<FoodieReviewCreateWithoutFoodInput, FoodieReviewUncheckedCreateWithoutFoodInput>
  }

  export type FoodieReviewCreateManyFoodInputEnvelope = {
    data: FoodieReviewCreateManyFoodInput | FoodieReviewCreateManyFoodInput[]
    skipDuplicates?: boolean
  }

  export type FoodieLikeCreateWithoutFoodInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieLikeInput
  }

  export type FoodieLikeUncheckedCreateWithoutFoodInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FoodieLikeCreateOrConnectWithoutFoodInput = {
    where: FoodieLikeWhereUniqueInput
    create: XOR<FoodieLikeCreateWithoutFoodInput, FoodieLikeUncheckedCreateWithoutFoodInput>
  }

  export type FoodieLikeCreateManyFoodInputEnvelope = {
    data: FoodieLikeCreateManyFoodInput | FoodieLikeCreateManyFoodInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutFoodieFoodInput = {
    update: XOR<UserUpdateWithoutFoodieFoodInput, UserUncheckedUpdateWithoutFoodieFoodInput>
    create: XOR<UserCreateWithoutFoodieFoodInput, UserUncheckedCreateWithoutFoodieFoodInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoodieFoodInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoodieFoodInput, UserUncheckedUpdateWithoutFoodieFoodInput>
  }

  export type UserUpdateWithoutFoodieFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoodieFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodieLocationUpsertWithWhereUniqueWithoutFoodInput = {
    where: FoodieLocationWhereUniqueInput
    update: XOR<FoodieLocationUpdateWithoutFoodInput, FoodieLocationUncheckedUpdateWithoutFoodInput>
    create: XOR<FoodieLocationCreateWithoutFoodInput, FoodieLocationUncheckedCreateWithoutFoodInput>
  }

  export type FoodieLocationUpdateWithWhereUniqueWithoutFoodInput = {
    where: FoodieLocationWhereUniqueInput
    data: XOR<FoodieLocationUpdateWithoutFoodInput, FoodieLocationUncheckedUpdateWithoutFoodInput>
  }

  export type FoodieLocationUpdateManyWithWhereWithoutFoodInput = {
    where: FoodieLocationScalarWhereInput
    data: XOR<FoodieLocationUpdateManyMutationInput, FoodieLocationUncheckedUpdateManyWithoutFoodInput>
  }

  export type FoodieReviewUpsertWithWhereUniqueWithoutFoodInput = {
    where: FoodieReviewWhereUniqueInput
    update: XOR<FoodieReviewUpdateWithoutFoodInput, FoodieReviewUncheckedUpdateWithoutFoodInput>
    create: XOR<FoodieReviewCreateWithoutFoodInput, FoodieReviewUncheckedCreateWithoutFoodInput>
  }

  export type FoodieReviewUpdateWithWhereUniqueWithoutFoodInput = {
    where: FoodieReviewWhereUniqueInput
    data: XOR<FoodieReviewUpdateWithoutFoodInput, FoodieReviewUncheckedUpdateWithoutFoodInput>
  }

  export type FoodieReviewUpdateManyWithWhereWithoutFoodInput = {
    where: FoodieReviewScalarWhereInput
    data: XOR<FoodieReviewUpdateManyMutationInput, FoodieReviewUncheckedUpdateManyWithoutFoodInput>
  }

  export type FoodieLikeUpsertWithWhereUniqueWithoutFoodInput = {
    where: FoodieLikeWhereUniqueInput
    update: XOR<FoodieLikeUpdateWithoutFoodInput, FoodieLikeUncheckedUpdateWithoutFoodInput>
    create: XOR<FoodieLikeCreateWithoutFoodInput, FoodieLikeUncheckedCreateWithoutFoodInput>
  }

  export type FoodieLikeUpdateWithWhereUniqueWithoutFoodInput = {
    where: FoodieLikeWhereUniqueInput
    data: XOR<FoodieLikeUpdateWithoutFoodInput, FoodieLikeUncheckedUpdateWithoutFoodInput>
  }

  export type FoodieLikeUpdateManyWithWhereWithoutFoodInput = {
    where: FoodieLikeScalarWhereInput
    data: XOR<FoodieLikeUpdateManyMutationInput, FoodieLikeUncheckedUpdateManyWithoutFoodInput>
  }

  export type UserCreateWithoutFoodieLocationInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoodieLocationInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoodieLocationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoodieLocationInput, UserUncheckedCreateWithoutFoodieLocationInput>
  }

  export type FoodieFoodCreateWithoutLocationsInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    validated?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieFoodInput
    reviews?: FoodieReviewCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodUncheckedCreateWithoutLocationsInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: FoodieReviewUncheckedCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodCreateOrConnectWithoutLocationsInput = {
    where: FoodieFoodWhereUniqueInput
    create: XOR<FoodieFoodCreateWithoutLocationsInput, FoodieFoodUncheckedCreateWithoutLocationsInput>
  }

  export type UserUpsertWithoutFoodieLocationInput = {
    update: XOR<UserUpdateWithoutFoodieLocationInput, UserUncheckedUpdateWithoutFoodieLocationInput>
    create: XOR<UserCreateWithoutFoodieLocationInput, UserUncheckedCreateWithoutFoodieLocationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoodieLocationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoodieLocationInput, UserUncheckedUpdateWithoutFoodieLocationInput>
  }

  export type UserUpdateWithoutFoodieLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoodieLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodieFoodUpsertWithoutLocationsInput = {
    update: XOR<FoodieFoodUpdateWithoutLocationsInput, FoodieFoodUncheckedUpdateWithoutLocationsInput>
    create: XOR<FoodieFoodCreateWithoutLocationsInput, FoodieFoodUncheckedCreateWithoutLocationsInput>
    where?: FoodieFoodWhereInput
  }

  export type FoodieFoodUpdateToOneWithWhereWithoutLocationsInput = {
    where?: FoodieFoodWhereInput
    data: XOR<FoodieFoodUpdateWithoutLocationsInput, FoodieFoodUncheckedUpdateWithoutLocationsInput>
  }

  export type FoodieFoodUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieFoodNestedInput
    reviews?: FoodieReviewUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUpdateManyWithoutFoodNestedInput
  }

  export type FoodieFoodUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: FoodieReviewUncheckedUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type UserCreateWithoutFoodieReviewInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoodieReviewInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieLike?: FoodieLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoodieReviewInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoodieReviewInput, UserUncheckedCreateWithoutFoodieReviewInput>
  }

  export type FoodieFoodCreateWithoutReviewsInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    validated?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieFoodInput
    locations?: FoodieLocationCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    locations?: FoodieLocationUncheckedCreateNestedManyWithoutFoodInput
    likes?: FoodieLikeUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodCreateOrConnectWithoutReviewsInput = {
    where: FoodieFoodWhereUniqueInput
    create: XOR<FoodieFoodCreateWithoutReviewsInput, FoodieFoodUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutFoodieReviewInput = {
    update: XOR<UserUpdateWithoutFoodieReviewInput, UserUncheckedUpdateWithoutFoodieReviewInput>
    create: XOR<UserCreateWithoutFoodieReviewInput, UserUncheckedCreateWithoutFoodieReviewInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoodieReviewInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoodieReviewInput, UserUncheckedUpdateWithoutFoodieReviewInput>
  }

  export type UserUpdateWithoutFoodieReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoodieReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieLike?: FoodieLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodieFoodUpsertWithoutReviewsInput = {
    update: XOR<FoodieFoodUpdateWithoutReviewsInput, FoodieFoodUncheckedUpdateWithoutReviewsInput>
    create: XOR<FoodieFoodCreateWithoutReviewsInput, FoodieFoodUncheckedCreateWithoutReviewsInput>
    where?: FoodieFoodWhereInput
  }

  export type FoodieFoodUpdateToOneWithWhereWithoutReviewsInput = {
    where?: FoodieFoodWhereInput
    data: XOR<FoodieFoodUpdateWithoutReviewsInput, FoodieFoodUncheckedUpdateWithoutReviewsInput>
  }

  export type FoodieFoodUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieFoodNestedInput
    locations?: FoodieLocationUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUpdateManyWithoutFoodNestedInput
  }

  export type FoodieFoodUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: FoodieLocationUncheckedUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type UserCreateWithoutFoodieLikeInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoodieLikeInput = {
    id?: string
    email: string
    name: string
    password: string
    group: string
    createdAt?: Date | string
    posts?: PostDIYHomesUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewDIYHomesUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeDIYHomesUncheckedCreateNestedManyWithoutUserInput
    Report?: ReportDIYHomesUncheckedCreateNestedManyWithoutUserInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedCreateNestedManyWithoutOwnerInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedCreateNestedManyWithoutUserInput
    FoodieFood?: FoodieFoodUncheckedCreateNestedManyWithoutUserInput
    FoodieLocation?: FoodieLocationUncheckedCreateNestedManyWithoutUserInput
    FoodieReview?: FoodieReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoodieLikeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoodieLikeInput, UserUncheckedCreateWithoutFoodieLikeInput>
  }

  export type FoodieFoodCreateWithoutLikesInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    validated?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodieFoodInput
    locations?: FoodieLocationCreateNestedManyWithoutFoodInput
    reviews?: FoodieReviewCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodUncheckedCreateWithoutLikesInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    locations?: FoodieLocationUncheckedCreateNestedManyWithoutFoodInput
    reviews?: FoodieReviewUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodieFoodCreateOrConnectWithoutLikesInput = {
    where: FoodieFoodWhereUniqueInput
    create: XOR<FoodieFoodCreateWithoutLikesInput, FoodieFoodUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutFoodieLikeInput = {
    update: XOR<UserUpdateWithoutFoodieLikeInput, UserUncheckedUpdateWithoutFoodieLikeInput>
    create: XOR<UserCreateWithoutFoodieLikeInput, UserUncheckedCreateWithoutFoodieLikeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoodieLikeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoodieLikeInput, UserUncheckedUpdateWithoutFoodieLikeInput>
  }

  export type UserUpdateWithoutFoodieLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoodieLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutUserNestedInput
    PlaceUrbanExplorer?: PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerNestedInput
    ReviewUrbanExplorer?: ReviewUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    LikeUrbanExplorer?: LikeUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    BookmarkUrbanExplorer?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    ReportUrbanExplorer?: ReportUrbanExplorerUncheckedUpdateManyWithoutUserNestedInput
    FoodieFood?: FoodieFoodUncheckedUpdateManyWithoutUserNestedInput
    FoodieLocation?: FoodieLocationUncheckedUpdateManyWithoutUserNestedInput
    FoodieReview?: FoodieReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodieFoodUpsertWithoutLikesInput = {
    update: XOR<FoodieFoodUpdateWithoutLikesInput, FoodieFoodUncheckedUpdateWithoutLikesInput>
    create: XOR<FoodieFoodCreateWithoutLikesInput, FoodieFoodUncheckedCreateWithoutLikesInput>
    where?: FoodieFoodWhereInput
  }

  export type FoodieFoodUpdateToOneWithWhereWithoutLikesInput = {
    where?: FoodieFoodWhereInput
    data: XOR<FoodieFoodUpdateWithoutLikesInput, FoodieFoodUncheckedUpdateWithoutLikesInput>
  }

  export type FoodieFoodUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieFoodNestedInput
    locations?: FoodieLocationUpdateManyWithoutFoodNestedInput
    reviews?: FoodieReviewUpdateManyWithoutFoodNestedInput
  }

  export type FoodieFoodUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: FoodieLocationUncheckedUpdateManyWithoutFoodNestedInput
    reviews?: FoodieReviewUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type PostDIYHomesCreateManyUserInput = {
    id?: string
    title: string
    content: string
    category: string
    createdAt?: Date | string
  }

  export type ReviewDIYHomesCreateManyUserInput = {
    id?: string
    postId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type BookmarkDIYHomesCreateManyUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type LikeDIYHomesCreateManyUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesCreateManyUserInput = {
    id?: string
    postId?: string | null
    reviewId?: string | null
    reason: string
    createdAt?: Date | string
  }

  export type PlaceUrbanExplorerCreateManyOwnerInput = {
    id?: string
    name: string
    category: string
    location: string
    description: string
    createdAt?: Date | string
    validated?: boolean
  }

  export type ReviewUrbanExplorerCreateManyUserInput = {
    id?: string
    placeId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type LikeUrbanExplorerCreateManyUserInput = {
    id?: string
    placeId: string
    createdAt?: Date | string
  }

  export type BookmarkUrbanExplorerCreateManyUserInput = {
    id?: string
    placeId: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerCreateManyUserInput = {
    id?: string
    placeId?: string | null
    reviewId?: string | null
    reason: string
    createdAt?: Date | string
  }

  export type FoodieFoodCreateManyUserInput = {
    id?: string
    name: string
    cuisine: string
    origin: string
    description: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieLocationCreateManyUserInput = {
    id?: string
    foodId: string
    locationName: string
    address: string
    createdAt?: Date | string
  }

  export type FoodieReviewCreateManyUserInput = {
    id?: string
    foodId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieLikeCreateManyUserInput = {
    id?: string
    foodId: string
    createdAt?: Date | string
  }

  export type PostDIYHomesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    bookmarks?: BookmarkDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeDIYHomesUncheckedUpdateManyWithoutPostNestedInput
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostDIYHomesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewDIYHomesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostDIYHomesUpdateOneRequiredWithoutReviewsNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutReviewNestedInput
  }

  export type ReviewDIYHomesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewDIYHomesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkDIYHomesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostDIYHomesUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkDIYHomesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkDIYHomesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeDIYHomesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostDIYHomesUpdateOneRequiredWithoutLikeNestedInput
  }

  export type LikeDIYHomesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeDIYHomesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostDIYHomesUpdateOneWithoutReportNestedInput
    review?: ReviewDIYHomesUpdateOneWithoutReportNestedInput
  }

  export type ReportDIYHomesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaceUrbanExplorerUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUrbanExplorerUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    bookmarks?: BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    likes?: LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUrbanExplorerUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReviewUrbanExplorerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    place?: PlaceUrbanExplorerUpdateOneRequiredWithoutReviewsNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUrbanExplorerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUrbanExplorerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUrbanExplorerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    place?: PlaceUrbanExplorerUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUrbanExplorerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUrbanExplorerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUrbanExplorerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    place?: PlaceUrbanExplorerUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUrbanExplorerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUrbanExplorerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    place?: PlaceUrbanExplorerUpdateOneWithoutReportsNestedInput
    review?: ReviewUrbanExplorerUpdateOneWithoutReportsNestedInput
  }

  export type ReportUrbanExplorerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieFoodUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: FoodieLocationUpdateManyWithoutFoodNestedInput
    reviews?: FoodieReviewUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUpdateManyWithoutFoodNestedInput
  }

  export type FoodieFoodUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: FoodieLocationUncheckedUpdateManyWithoutFoodNestedInput
    reviews?: FoodieReviewUncheckedUpdateManyWithoutFoodNestedInput
    likes?: FoodieLikeUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodieFoodUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cuisine?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLocationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodieFoodUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type FoodieLocationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLocationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodieFoodUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type FoodieReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodieFoodUpdateOneRequiredWithoutLikesNestedInput
  }

  export type FoodieLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewDIYHomesCreateManyPostInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type BookmarkDIYHomesCreateManyPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeDIYHomesCreateManyPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesCreateManyPostInput = {
    id?: string
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReviewDIYHomesUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    Report?: ReportDIYHomesUpdateManyWithoutReviewNestedInput
  }

  export type ReviewDIYHomesUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Report?: ReportDIYHomesUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewDIYHomesUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkDIYHomesUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkDIYHomesUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkDIYHomesUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeDIYHomesUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikeNestedInput
  }

  export type LikeDIYHomesUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeDIYHomesUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportNestedInput
    review?: ReviewDIYHomesUpdateOneWithoutReportNestedInput
  }

  export type ReportDIYHomesUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesCreateManyReviewInput = {
    id?: string
    postId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportDIYHomesUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportNestedInput
    post?: PostDIYHomesUpdateOneWithoutReportNestedInput
  }

  export type ReportDIYHomesUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDIYHomesUncheckedUpdateManyWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUrbanExplorerCreateManyPlaceInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    createdAt?: Date | string
  }

  export type BookmarkUrbanExplorerCreateManyPlaceInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeUrbanExplorerCreateManyPlaceInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerCreateManyPlaceInput = {
    id?: string
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReviewUrbanExplorerUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewUrbanExplorerNestedInput
    reports?: ReportUrbanExplorerUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUrbanExplorerUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportUrbanExplorerUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUrbanExplorerUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUrbanExplorerUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookmarkUrbanExplorerNestedInput
  }

  export type BookmarkUrbanExplorerUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUrbanExplorerUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUrbanExplorerUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikeUrbanExplorerNestedInput
  }

  export type LikeUrbanExplorerUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUrbanExplorerUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportUrbanExplorerNestedInput
    review?: ReviewUrbanExplorerUpdateOneWithoutReportsNestedInput
  }

  export type ReportUrbanExplorerUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerCreateManyReviewInput = {
    id?: string
    placeId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportUrbanExplorerUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportUrbanExplorerNestedInput
    place?: PlaceUrbanExplorerUpdateOneWithoutReportsNestedInput
  }

  export type ReportUrbanExplorerUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUrbanExplorerUncheckedUpdateManyWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLocationCreateManyFoodInput = {
    id?: string
    locationName: string
    address: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type FoodieReviewCreateManyFoodInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type FoodieLikeCreateManyFoodInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FoodieLocationUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieLocationNestedInput
  }

  export type FoodieLocationUncheckedUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLocationUncheckedUpdateManyWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieReviewUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieReviewNestedInput
  }

  export type FoodieReviewUncheckedUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieReviewUncheckedUpdateManyWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLikeUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodieLikeNestedInput
  }

  export type FoodieLikeUncheckedUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodieLikeUncheckedUpdateManyWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}