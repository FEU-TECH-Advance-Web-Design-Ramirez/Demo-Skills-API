generator client {
  provider      = "prisma-client-js"
  output        = "../generated/postgresql"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource neon {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  group     String
  createdAt DateTime @default(now())

  posts                 PostDIYHomes[]
  reviews               ReviewDIYHomes[]
  bookmarks             BookmarkDIYHomes[]
  Like                  LikeDIYHomes[]
  Report                ReportDIYHomes[]
  PlaceUrbanExplorer    PlaceUrbanExplorer[]
  ReviewUrbanExplorer   ReviewUrbanExplorer[]
  LikeUrbanExplorer     LikeUrbanExplorer[]
  BookmarkUrbanExplorer BookmarkUrbanExplorer[]
  ReportUrbanExplorer   ReportUrbanExplorer[]
  FoodieFood            FoodieFood[]
  FoodieLocation        FoodieLocation[]
  FoodieReview          FoodieReview[]
  FoodieLike            FoodieLike[]
}

model PostDIYHomes {
  id        String   @id @default(uuid())
  title     String
  content   String
  category  String
  userId    String
  createdAt DateTime @default(now())

  user      User               @relation(fields: [userId], references: [id])
  reviews   ReviewDIYHomes[]
  bookmarks BookmarkDIYHomes[]
  Like      LikeDIYHomes[]
  Report    ReportDIYHomes[]
}

model ReviewDIYHomes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user   User             @relation(fields: [userId], references: [id])
  post   PostDIYHomes     @relation(fields: [postId], references: [id])
  Report ReportDIYHomes[]
}

model LikeDIYHomes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user User         @relation(fields: [userId], references: [id])
  post PostDIYHomes @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
}

model BookmarkDIYHomes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user User         @relation(fields: [userId], references: [id])
  post PostDIYHomes @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
}

model ReportDIYHomes {
  id        String   @id @default(uuid())
  postId    String?
  reviewId  String?
  userId    String
  reason    String
  createdAt DateTime @default(now())

  user   User            @relation(fields: [userId], references: [id])
  post   PostDIYHomes?   @relation(fields: [postId], references: [id])
  review ReviewDIYHomes? @relation(fields: [reviewId], references: [id])
}

model PlaceUrbanExplorer {
  id          String   @id @default(uuid())
  name        String
  category    String
  location    String
  description String
  ownerId     String
  createdAt   DateTime @default(now())
  validated   Boolean  @default(false)

  owner     User                    @relation(fields: [ownerId], references: [id])
  reviews   ReviewUrbanExplorer[]
  bookmarks BookmarkUrbanExplorer[]
  likes     LikeUrbanExplorer[]
  reports   ReportUrbanExplorer[]
}

model ReviewUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user    User                  @relation(fields: [userId], references: [id])
  place   PlaceUrbanExplorer    @relation(fields: [placeId], references: [id])
  reports ReportUrbanExplorer[]
}

model LikeUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  createdAt DateTime @default(now())

  user  User               @relation(fields: [userId], references: [id])
  place PlaceUrbanExplorer @relation(fields: [placeId], references: [id])

  @@unique([placeId, userId])
}

model BookmarkUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  createdAt DateTime @default(now())

  user  User               @relation(fields: [userId], references: [id])
  place PlaceUrbanExplorer @relation(fields: [placeId], references: [id])

  @@unique([placeId, userId])
}

model ReportUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String?
  reviewId  String?
  userId    String
  reason    String
  createdAt DateTime @default(now())

  user   User                 @relation(fields: [userId], references: [id])
  place  PlaceUrbanExplorer?  @relation(fields: [placeId], references: [id])
  review ReviewUrbanExplorer? @relation(fields: [reviewId], references: [id])
}

model FoodieFood {
  id          String   @id @default(uuid())
  name        String
  cuisine     String
  origin      String
  description String
  submittedBy String
  validated   Boolean  @default(false) // ✅ Added field for admin validation
  createdAt   DateTime @default(now())

  user      User             @relation(fields: [submittedBy], references: [id])
  locations FoodieLocation[]
  reviews   FoodieReview[]
  likes     FoodieLike[]
}

model FoodieLocation {
  id           String   @id @default(uuid())
  foodId       String
  locationName String
  address      String
  submittedBy  String
  createdAt    DateTime @default(now())

  user User       @relation(fields: [submittedBy], references: [id])
  food FoodieFood @relation(fields: [foodId], references: [id])
}

model FoodieReview {
  id        String   @id @default(uuid())
  foodId    String
  userId    String
  rating    Int
  comment   String
  validated Boolean  @default(false) // ✅ Added field for admin validation
  createdAt DateTime @default(now())

  user User       @relation(fields: [userId], references: [id])
  food FoodieFood @relation(fields: [foodId], references: [id])
}

model FoodieLike {
  id        String   @id @default(uuid())
  foodId    String
  userId    String
  createdAt DateTime @default(now())

  user User       @relation(fields: [userId], references: [id])
  food FoodieFood @relation(fields: [foodId], references: [id])

  @@unique([foodId, userId])
}
