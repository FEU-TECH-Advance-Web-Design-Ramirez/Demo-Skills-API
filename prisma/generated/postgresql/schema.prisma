generator client {
  provider      = "prisma-client-js"
  output        = "../generated/postgresql"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource neon {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserDIYHomes {
  id               String             @id @default(uuid())
  email            String             @unique
  name             String
  password         String
  createdAt        DateTime           @default(now())
  PostDIYHomes     PostDIYHomes[]
  ReviewDIYHomes   ReviewDIYHomes[]
  LikeDIYHomes     LikeDIYHomes[]
  BookmarkDIYHomes BookmarkDIYHomes[]
  ReportDIYHomes   ReportDIYHomes[]
}

model PostDIYHomes {
  id        String   @id @default(uuid())
  title     String
  content   String
  category  String
  userId    String
  createdAt DateTime @default(now())

  user      UserDIYHomes       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews   ReviewDIYHomes[]
  bookmarks BookmarkDIYHomes[]
  Like      LikeDIYHomes[]
  Report    ReportDIYHomes[]
}

model ReviewDIYHomes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user   UserDIYHomes     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   PostDIYHomes     @relation(fields: [postId], references: [id], onDelete: Cascade)
  Report ReportDIYHomes[]
}

model LikeDIYHomes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user UserDIYHomes @relation(fields: [userId], references: [id], onDelete: Cascade)
  post PostDIYHomes @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model BookmarkDIYHomes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user UserDIYHomes @relation(fields: [userId], references: [id], onDelete: Cascade)
  post PostDIYHomes @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model ReportDIYHomes {
  id        String   @id @default(uuid())
  postId    String?
  reviewId  String?
  userId    String
  reason    String
  createdAt DateTime @default(now())

  user   UserDIYHomes    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   PostDIYHomes?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  review ReviewDIYHomes? @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model UserUrbanExplorer {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  name                  String
  password              String
  createdAt             DateTime                @default(now())
  PlaceUrbanExplorer    PlaceUrbanExplorer[]
  ReviewUrbanExplorer   ReviewUrbanExplorer[]
  LikeUrbanExplorer     LikeUrbanExplorer[]
  BookmarkUrbanExplorer BookmarkUrbanExplorer[]
  ReportUrbanExplorer   ReportUrbanExplorer[]
}

model PlaceUrbanExplorer {
  id          String   @id @default(uuid())
  name        String
  category    String
  location    String
  description String
  ownerId     String
  createdAt   DateTime @default(now())
  validated   Boolean  @default(false)

  owner     UserUrbanExplorer       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reviews   ReviewUrbanExplorer[]
  bookmarks BookmarkUrbanExplorer[]
  likes     LikeUrbanExplorer[]
  reports   ReportUrbanExplorer[]
}

model ReviewUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user    UserUrbanExplorer     @relation(fields: [userId], references: [id], onDelete: Cascade)
  place   PlaceUrbanExplorer    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  reports ReportUrbanExplorer[]
}

model LikeUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  createdAt DateTime @default(now())

  user  UserUrbanExplorer  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place PlaceUrbanExplorer @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([placeId, userId])
}

model BookmarkUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String
  userId    String
  createdAt DateTime @default(now())

  user  UserUrbanExplorer  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place PlaceUrbanExplorer @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([placeId, userId])
}

model ReportUrbanExplorer {
  id        String   @id @default(uuid())
  placeId   String?
  reviewId  String?
  userId    String
  reason    String
  createdAt DateTime @default(now())

  user   UserUrbanExplorer    @relation(fields: [userId], references: [id], onDelete: Cascade)
  place  PlaceUrbanExplorer?  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  review ReviewUrbanExplorer? @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model UserFoodie {
  id             String           @id @default(uuid())
  email          String           @unique
  name           String
  password       String
  createdAt      DateTime         @default(now())
  FoodieFood     FoodieFood[]
  FoodieLocation FoodieLocation[]
  FoodieReview   FoodieReview[]
  FoodieLike     FoodieLike[]
}

model FoodieFood {
  id          String   @id @default(uuid())
  name        String
  cuisine     String
  origin      String
  description String
  submittedBy String
  validated   Boolean  @default(false) // ✅ Added field for admin validation
  createdAt   DateTime @default(now())

  user      UserFoodie       @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
  locations FoodieLocation[]
  reviews   FoodieReview[]
  likes     FoodieLike[]
}

model FoodieLocation {
  id           String   @id @default(uuid())
  foodId       String
  locationName String
  address      String
  submittedBy  String
  createdAt    DateTime @default(now())

  user UserFoodie @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
  food FoodieFood @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

model FoodieReview {
  id        String   @id @default(uuid())
  foodId    String
  userId    String
  rating    Int
  comment   String
  validated Boolean  @default(false) // ✅ Added field for admin validation
  createdAt DateTime @default(now())

  user UserFoodie @relation(fields: [userId], references: [id], onDelete: Cascade)
  food FoodieFood @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

model FoodieLike {
  id        String   @id @default(uuid())
  foodId    String
  userId    String
  createdAt DateTime @default(now())

  user UserFoodie @relation(fields: [userId], references: [id], onDelete: Cascade)
  food FoodieFood @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@unique([foodId, userId])
}

model UserPetLover {
  id                  String                @id @default(uuid())
  email               String                @unique
  name                String
  password            String
  createdAt           DateTime              @default(now())
  PetPetLover         PetPetLover[]
  AppointmentPetLover AppointmentPetLover[]
}

model PetPetLover {
  id             String   @id @default(uuid())
  userId         String
  petName        String
  species        String
  breed          String
  age            Int
  medicalHistory String?
  createdAt      DateTime @default(now())

  user         UserPetLover          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vaccinations VaccinationPetLover[]
  appointments AppointmentPetLover[]
}

model AppointmentPetLover {
  id              String   @id @default(uuid())
  userId          String
  petId           String
  appointmentType String
  dateTime        DateTime
  location        String
  createdAt       DateTime @default(now())

  user UserPetLover @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  PetPetLover  @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model VaccinationPetLover {
  id               String    @id @default(uuid())
  petId            String
  vaccineName      String
  dateAdministered DateTime
  nextDueDate      DateTime?
  createdAt        DateTime  @default(now())

  pet PetPetLover @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model ClinicPetLover {
  id        String   @id @default(uuid())
  name      String
  address   String
  phone     String
  createdAt DateTime @default(now())
}

model StorePetLover {
  id        String   @id @default(uuid())
  name      String
  address   String
  phone     String
  createdAt DateTime @default(now())
}

model UserElderlyCareCompanion {
  id                                     String                                   @id @default(uuid())
  email                                  String                                   @unique
  name                                   String
  password                               String
  createdAt                              DateTime                                 @default(now())
  ElderlyCareCompanionAppointment        ElderlyCareCompanionAppointment[]
  ElderlyCareCompanionRecord             ElderlyCareCompanionRecord[]
  ElderlyCareCompanionMedicationTracking ElderlyCareCompanionMedicationTracking[]
}

model ElderlyCareCompanionAppointment {
  id                String   @id @default(uuid())
  userId            String
  type              String // "appointment" or "medication"
  title             String
  dateTime          DateTime
  location          String? // Only for appointments
  medicationDetails String? // Only for medications
  createdAt         DateTime @default(now())

  user           UserElderlyCareCompanion                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicationLogs ElderlyCareCompanionMedicationTracking[] // New relation
}

model ElderlyCareCompanionClinic {
  id        String   @id @default(uuid())
  name      String
  address   String
  phone     String
  createdAt DateTime @default(now())
}

model ElderlyCareCompanionStore {
  id        String   @id @default(uuid())
  name      String
  address   String
  phone     String
  createdAt DateTime @default(now())
}

model ElderlyCareCompanionRecord {
  id         String   @id @default(uuid())
  userId     String
  recordType String // "medicalHistory", "prescriptions", "labResults"
  details    String
  date       DateTime
  createdAt  DateTime @default(now())

  user UserElderlyCareCompanion @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ElderlyCareCompanionMedicationTracking {
  id           String   @id @default(uuid())
  userId       String
  medicationId String
  status       String // "taken" or "missed"
  dateTime     DateTime @default(now())

  user       UserElderlyCareCompanion        @relation(fields: [userId], references: [id], onDelete: Cascade)
  medication ElderlyCareCompanionAppointment @relation(fields: [medicationId], references: [id], onDelete: Cascade)
}

model UserEduSeeker {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())

  platforms PlatformEduSeeker[]
  reviews   ReviewEduSeeker[]
}

model PlatformEduSeeker {
  id          String   @id @default(uuid())
  name        String
  description String
  category    String
  url         String
  submittedBy String
  createdAt   DateTime @default(now())
  validated   Boolean  @default(false)

  submitter UserEduSeeker     @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
  reviews   ReviewEduSeeker[]
}

model ReviewEduSeeker {
  id         String   @id @default(uuid())
  platformId String
  userId     String
  rating     Int
  comment    String
  validated  Boolean  @default(false)
  createdAt  DateTime @default(now())

  platform PlatformEduSeeker @relation(fields: [platformId], references: [id], onDelete: Cascade)
  user     UserEduSeeker     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
