
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model EventOrganizerUser
 * 
 */
export type EventOrganizerUser = $Result.DefaultSelection<Prisma.$EventOrganizerUserPayload>
/**
 * Model EventOrganizerTask
 * 
 */
export type EventOrganizerTask = $Result.DefaultSelection<Prisma.$EventOrganizerTaskPayload>
/**
 * Model EventOrganizerGuest
 * 
 */
export type EventOrganizerGuest = $Result.DefaultSelection<Prisma.$EventOrganizerGuestPayload>
/**
 * Model EventOrganizerVenue
 * 
 */
export type EventOrganizerVenue = $Result.DefaultSelection<Prisma.$EventOrganizerVenuePayload>
/**
 * Model EventOrganizerServiceProvider
 * 
 */
export type EventOrganizerServiceProvider = $Result.DefaultSelection<Prisma.$EventOrganizerServiceProviderPayload>
/**
 * Model LanguageLearnerUser
 * 
 */
export type LanguageLearnerUser = $Result.DefaultSelection<Prisma.$LanguageLearnerUserPayload>
/**
 * Model LanguageLearnerPlatform
 * 
 */
export type LanguageLearnerPlatform = $Result.DefaultSelection<Prisma.$LanguageLearnerPlatformPayload>
/**
 * Model LanguageLearnerReview
 * 
 */
export type LanguageLearnerReview = $Result.DefaultSelection<Prisma.$LanguageLearnerReviewPayload>
/**
 * Model LanguageLearnerReviewLike
 * 
 */
export type LanguageLearnerReviewLike = $Result.DefaultSelection<Prisma.$LanguageLearnerReviewLikePayload>
/**
 * Model LanguageLearnerUserVote
 * 
 */
export type LanguageLearnerUserVote = $Result.DefaultSelection<Prisma.$LanguageLearnerUserVotePayload>
/**
 * Model GameHubUser
 * 
 */
export type GameHubUser = $Result.DefaultSelection<Prisma.$GameHubUserPayload>
/**
 * Model GameHubPlayer
 * 
 */
export type GameHubPlayer = $Result.DefaultSelection<Prisma.$GameHubPlayerPayload>
/**
 * Model GameHubTournament
 * 
 */
export type GameHubTournament = $Result.DefaultSelection<Prisma.$GameHubTournamentPayload>
/**
 * Model GameHubTournamentPlayer
 * 
 */
export type GameHubTournamentPlayer = $Result.DefaultSelection<Prisma.$GameHubTournamentPlayerPayload>
/**
 * Model UserHealthTracker
 * 
 */
export type UserHealthTracker = $Result.DefaultSelection<Prisma.$UserHealthTrackerPayload>
/**
 * Model ScheduleHealthTracker
 * 
 */
export type ScheduleHealthTracker = $Result.DefaultSelection<Prisma.$ScheduleHealthTrackerPayload>
/**
 * Model RecordHealthTracker
 * 
 */
export type RecordHealthTracker = $Result.DefaultSelection<Prisma.$RecordHealthTrackerPayload>
/**
 * Model ClinicHealthTracker
 * 
 */
export type ClinicHealthTracker = $Result.DefaultSelection<Prisma.$ClinicHealthTrackerPayload>
/**
 * Model UserMusicLover
 * 
 */
export type UserMusicLover = $Result.DefaultSelection<Prisma.$UserMusicLoverPayload>
/**
 * Model ConcertMusicLover
 * 
 */
export type ConcertMusicLover = $Result.DefaultSelection<Prisma.$ConcertMusicLoverPayload>
/**
 * Model ReviewMusicLover
 * 
 */
export type ReviewMusicLover = $Result.DefaultSelection<Prisma.$ReviewMusicLoverPayload>
/**
 * Model UserSocialButterfly
 * 
 */
export type UserSocialButterfly = $Result.DefaultSelection<Prisma.$UserSocialButterflyPayload>
/**
 * Model EventSocialButterfly
 * 
 */
export type EventSocialButterfly = $Result.DefaultSelection<Prisma.$EventSocialButterflyPayload>
/**
 * Model ReviewSocialButterfly
 * 
 */
export type ReviewSocialButterfly = $Result.DefaultSelection<Prisma.$ReviewSocialButterflyPayload>
/**
 * Model LikeSocialButterfly
 * 
 */
export type LikeSocialButterfly = $Result.DefaultSelection<Prisma.$LikeSocialButterflyPayload>
/**
 * Model BookmarkSocialButterfly
 * 
 */
export type BookmarkSocialButterfly = $Result.DefaultSelection<Prisma.$BookmarkSocialButterflyPayload>
/**
 * Model ReportSocialButterfly
 * 
 */
export type ReportSocialButterfly = $Result.DefaultSelection<Prisma.$ReportSocialButterflyPayload>
/**
 * Model UserVolunteerOrg
 * 
 */
export type UserVolunteerOrg = $Result.DefaultSelection<Prisma.$UserVolunteerOrgPayload>
/**
 * Model VolunteerActivity
 * 
 */
export type VolunteerActivity = $Result.DefaultSelection<Prisma.$VolunteerActivityPayload>
/**
 * Model VolunteerApplication
 * 
 */
export type VolunteerApplication = $Result.DefaultSelection<Prisma.$VolunteerApplicationPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more EventOrganizerUsers
 * const eventOrganizerUsers = await prisma.eventOrganizerUser.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more EventOrganizerUsers
   * const eventOrganizerUsers = await prisma.eventOrganizerUser.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.eventOrganizerUser`: Exposes CRUD operations for the **EventOrganizerUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventOrganizerUsers
    * const eventOrganizerUsers = await prisma.eventOrganizerUser.findMany()
    * ```
    */
  get eventOrganizerUser(): Prisma.EventOrganizerUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventOrganizerTask`: Exposes CRUD operations for the **EventOrganizerTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventOrganizerTasks
    * const eventOrganizerTasks = await prisma.eventOrganizerTask.findMany()
    * ```
    */
  get eventOrganizerTask(): Prisma.EventOrganizerTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventOrganizerGuest`: Exposes CRUD operations for the **EventOrganizerGuest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventOrganizerGuests
    * const eventOrganizerGuests = await prisma.eventOrganizerGuest.findMany()
    * ```
    */
  get eventOrganizerGuest(): Prisma.EventOrganizerGuestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventOrganizerVenue`: Exposes CRUD operations for the **EventOrganizerVenue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventOrganizerVenues
    * const eventOrganizerVenues = await prisma.eventOrganizerVenue.findMany()
    * ```
    */
  get eventOrganizerVenue(): Prisma.EventOrganizerVenueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventOrganizerServiceProvider`: Exposes CRUD operations for the **EventOrganizerServiceProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventOrganizerServiceProviders
    * const eventOrganizerServiceProviders = await prisma.eventOrganizerServiceProvider.findMany()
    * ```
    */
  get eventOrganizerServiceProvider(): Prisma.EventOrganizerServiceProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.languageLearnerUser`: Exposes CRUD operations for the **LanguageLearnerUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguageLearnerUsers
    * const languageLearnerUsers = await prisma.languageLearnerUser.findMany()
    * ```
    */
  get languageLearnerUser(): Prisma.LanguageLearnerUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.languageLearnerPlatform`: Exposes CRUD operations for the **LanguageLearnerPlatform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguageLearnerPlatforms
    * const languageLearnerPlatforms = await prisma.languageLearnerPlatform.findMany()
    * ```
    */
  get languageLearnerPlatform(): Prisma.LanguageLearnerPlatformDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.languageLearnerReview`: Exposes CRUD operations for the **LanguageLearnerReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguageLearnerReviews
    * const languageLearnerReviews = await prisma.languageLearnerReview.findMany()
    * ```
    */
  get languageLearnerReview(): Prisma.LanguageLearnerReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.languageLearnerReviewLike`: Exposes CRUD operations for the **LanguageLearnerReviewLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguageLearnerReviewLikes
    * const languageLearnerReviewLikes = await prisma.languageLearnerReviewLike.findMany()
    * ```
    */
  get languageLearnerReviewLike(): Prisma.LanguageLearnerReviewLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.languageLearnerUserVote`: Exposes CRUD operations for the **LanguageLearnerUserVote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguageLearnerUserVotes
    * const languageLearnerUserVotes = await prisma.languageLearnerUserVote.findMany()
    * ```
    */
  get languageLearnerUserVote(): Prisma.LanguageLearnerUserVoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameHubUser`: Exposes CRUD operations for the **GameHubUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameHubUsers
    * const gameHubUsers = await prisma.gameHubUser.findMany()
    * ```
    */
  get gameHubUser(): Prisma.GameHubUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameHubPlayer`: Exposes CRUD operations for the **GameHubPlayer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameHubPlayers
    * const gameHubPlayers = await prisma.gameHubPlayer.findMany()
    * ```
    */
  get gameHubPlayer(): Prisma.GameHubPlayerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameHubTournament`: Exposes CRUD operations for the **GameHubTournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameHubTournaments
    * const gameHubTournaments = await prisma.gameHubTournament.findMany()
    * ```
    */
  get gameHubTournament(): Prisma.GameHubTournamentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameHubTournamentPlayer`: Exposes CRUD operations for the **GameHubTournamentPlayer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameHubTournamentPlayers
    * const gameHubTournamentPlayers = await prisma.gameHubTournamentPlayer.findMany()
    * ```
    */
  get gameHubTournamentPlayer(): Prisma.GameHubTournamentPlayerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userHealthTracker`: Exposes CRUD operations for the **UserHealthTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserHealthTrackers
    * const userHealthTrackers = await prisma.userHealthTracker.findMany()
    * ```
    */
  get userHealthTracker(): Prisma.UserHealthTrackerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scheduleHealthTracker`: Exposes CRUD operations for the **ScheduleHealthTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduleHealthTrackers
    * const scheduleHealthTrackers = await prisma.scheduleHealthTracker.findMany()
    * ```
    */
  get scheduleHealthTracker(): Prisma.ScheduleHealthTrackerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recordHealthTracker`: Exposes CRUD operations for the **RecordHealthTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecordHealthTrackers
    * const recordHealthTrackers = await prisma.recordHealthTracker.findMany()
    * ```
    */
  get recordHealthTracker(): Prisma.RecordHealthTrackerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clinicHealthTracker`: Exposes CRUD operations for the **ClinicHealthTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClinicHealthTrackers
    * const clinicHealthTrackers = await prisma.clinicHealthTracker.findMany()
    * ```
    */
  get clinicHealthTracker(): Prisma.ClinicHealthTrackerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userMusicLover`: Exposes CRUD operations for the **UserMusicLover** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMusicLovers
    * const userMusicLovers = await prisma.userMusicLover.findMany()
    * ```
    */
  get userMusicLover(): Prisma.UserMusicLoverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.concertMusicLover`: Exposes CRUD operations for the **ConcertMusicLover** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConcertMusicLovers
    * const concertMusicLovers = await prisma.concertMusicLover.findMany()
    * ```
    */
  get concertMusicLover(): Prisma.ConcertMusicLoverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewMusicLover`: Exposes CRUD operations for the **ReviewMusicLover** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewMusicLovers
    * const reviewMusicLovers = await prisma.reviewMusicLover.findMany()
    * ```
    */
  get reviewMusicLover(): Prisma.ReviewMusicLoverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSocialButterfly`: Exposes CRUD operations for the **UserSocialButterfly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSocialButterflies
    * const userSocialButterflies = await prisma.userSocialButterfly.findMany()
    * ```
    */
  get userSocialButterfly(): Prisma.UserSocialButterflyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventSocialButterfly`: Exposes CRUD operations for the **EventSocialButterfly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventSocialButterflies
    * const eventSocialButterflies = await prisma.eventSocialButterfly.findMany()
    * ```
    */
  get eventSocialButterfly(): Prisma.EventSocialButterflyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewSocialButterfly`: Exposes CRUD operations for the **ReviewSocialButterfly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewSocialButterflies
    * const reviewSocialButterflies = await prisma.reviewSocialButterfly.findMany()
    * ```
    */
  get reviewSocialButterfly(): Prisma.ReviewSocialButterflyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.likeSocialButterfly`: Exposes CRUD operations for the **LikeSocialButterfly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikeSocialButterflies
    * const likeSocialButterflies = await prisma.likeSocialButterfly.findMany()
    * ```
    */
  get likeSocialButterfly(): Prisma.LikeSocialButterflyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookmarkSocialButterfly`: Exposes CRUD operations for the **BookmarkSocialButterfly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookmarkSocialButterflies
    * const bookmarkSocialButterflies = await prisma.bookmarkSocialButterfly.findMany()
    * ```
    */
  get bookmarkSocialButterfly(): Prisma.BookmarkSocialButterflyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportSocialButterfly`: Exposes CRUD operations for the **ReportSocialButterfly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportSocialButterflies
    * const reportSocialButterflies = await prisma.reportSocialButterfly.findMany()
    * ```
    */
  get reportSocialButterfly(): Prisma.ReportSocialButterflyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userVolunteerOrg`: Exposes CRUD operations for the **UserVolunteerOrg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserVolunteerOrgs
    * const userVolunteerOrgs = await prisma.userVolunteerOrg.findMany()
    * ```
    */
  get userVolunteerOrg(): Prisma.UserVolunteerOrgDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.volunteerActivity`: Exposes CRUD operations for the **VolunteerActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VolunteerActivities
    * const volunteerActivities = await prisma.volunteerActivity.findMany()
    * ```
    */
  get volunteerActivity(): Prisma.VolunteerActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.volunteerApplication`: Exposes CRUD operations for the **VolunteerApplication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VolunteerApplications
    * const volunteerApplications = await prisma.volunteerApplication.findMany()
    * ```
    */
  get volunteerApplication(): Prisma.VolunteerApplicationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    EventOrganizerUser: 'EventOrganizerUser',
    EventOrganizerTask: 'EventOrganizerTask',
    EventOrganizerGuest: 'EventOrganizerGuest',
    EventOrganizerVenue: 'EventOrganizerVenue',
    EventOrganizerServiceProvider: 'EventOrganizerServiceProvider',
    LanguageLearnerUser: 'LanguageLearnerUser',
    LanguageLearnerPlatform: 'LanguageLearnerPlatform',
    LanguageLearnerReview: 'LanguageLearnerReview',
    LanguageLearnerReviewLike: 'LanguageLearnerReviewLike',
    LanguageLearnerUserVote: 'LanguageLearnerUserVote',
    GameHubUser: 'GameHubUser',
    GameHubPlayer: 'GameHubPlayer',
    GameHubTournament: 'GameHubTournament',
    GameHubTournamentPlayer: 'GameHubTournamentPlayer',
    UserHealthTracker: 'UserHealthTracker',
    ScheduleHealthTracker: 'ScheduleHealthTracker',
    RecordHealthTracker: 'RecordHealthTracker',
    ClinicHealthTracker: 'ClinicHealthTracker',
    UserMusicLover: 'UserMusicLover',
    ConcertMusicLover: 'ConcertMusicLover',
    ReviewMusicLover: 'ReviewMusicLover',
    UserSocialButterfly: 'UserSocialButterfly',
    EventSocialButterfly: 'EventSocialButterfly',
    ReviewSocialButterfly: 'ReviewSocialButterfly',
    LikeSocialButterfly: 'LikeSocialButterfly',
    BookmarkSocialButterfly: 'BookmarkSocialButterfly',
    ReportSocialButterfly: 'ReportSocialButterfly',
    UserVolunteerOrg: 'UserVolunteerOrg',
    VolunteerActivity: 'VolunteerActivity',
    VolunteerApplication: 'VolunteerApplication'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    neon2?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "eventOrganizerUser" | "eventOrganizerTask" | "eventOrganizerGuest" | "eventOrganizerVenue" | "eventOrganizerServiceProvider" | "languageLearnerUser" | "languageLearnerPlatform" | "languageLearnerReview" | "languageLearnerReviewLike" | "languageLearnerUserVote" | "gameHubUser" | "gameHubPlayer" | "gameHubTournament" | "gameHubTournamentPlayer" | "userHealthTracker" | "scheduleHealthTracker" | "recordHealthTracker" | "clinicHealthTracker" | "userMusicLover" | "concertMusicLover" | "reviewMusicLover" | "userSocialButterfly" | "eventSocialButterfly" | "reviewSocialButterfly" | "likeSocialButterfly" | "bookmarkSocialButterfly" | "reportSocialButterfly" | "userVolunteerOrg" | "volunteerActivity" | "volunteerApplication"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      EventOrganizerUser: {
        payload: Prisma.$EventOrganizerUserPayload<ExtArgs>
        fields: Prisma.EventOrganizerUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventOrganizerUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventOrganizerUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>
          }
          findFirst: {
            args: Prisma.EventOrganizerUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventOrganizerUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>
          }
          findMany: {
            args: Prisma.EventOrganizerUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>[]
          }
          create: {
            args: Prisma.EventOrganizerUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>
          }
          createMany: {
            args: Prisma.EventOrganizerUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventOrganizerUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>[]
          }
          delete: {
            args: Prisma.EventOrganizerUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>
          }
          update: {
            args: Prisma.EventOrganizerUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>
          }
          deleteMany: {
            args: Prisma.EventOrganizerUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventOrganizerUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventOrganizerUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>[]
          }
          upsert: {
            args: Prisma.EventOrganizerUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerUserPayload>
          }
          aggregate: {
            args: Prisma.EventOrganizerUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventOrganizerUser>
          }
          groupBy: {
            args: Prisma.EventOrganizerUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventOrganizerUserCountArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerUserCountAggregateOutputType> | number
          }
        }
      }
      EventOrganizerTask: {
        payload: Prisma.$EventOrganizerTaskPayload<ExtArgs>
        fields: Prisma.EventOrganizerTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventOrganizerTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventOrganizerTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>
          }
          findFirst: {
            args: Prisma.EventOrganizerTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventOrganizerTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>
          }
          findMany: {
            args: Prisma.EventOrganizerTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>[]
          }
          create: {
            args: Prisma.EventOrganizerTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>
          }
          createMany: {
            args: Prisma.EventOrganizerTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventOrganizerTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>[]
          }
          delete: {
            args: Prisma.EventOrganizerTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>
          }
          update: {
            args: Prisma.EventOrganizerTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>
          }
          deleteMany: {
            args: Prisma.EventOrganizerTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventOrganizerTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventOrganizerTaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>[]
          }
          upsert: {
            args: Prisma.EventOrganizerTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerTaskPayload>
          }
          aggregate: {
            args: Prisma.EventOrganizerTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventOrganizerTask>
          }
          groupBy: {
            args: Prisma.EventOrganizerTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventOrganizerTaskCountArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerTaskCountAggregateOutputType> | number
          }
        }
      }
      EventOrganizerGuest: {
        payload: Prisma.$EventOrganizerGuestPayload<ExtArgs>
        fields: Prisma.EventOrganizerGuestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventOrganizerGuestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventOrganizerGuestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>
          }
          findFirst: {
            args: Prisma.EventOrganizerGuestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventOrganizerGuestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>
          }
          findMany: {
            args: Prisma.EventOrganizerGuestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>[]
          }
          create: {
            args: Prisma.EventOrganizerGuestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>
          }
          createMany: {
            args: Prisma.EventOrganizerGuestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventOrganizerGuestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>[]
          }
          delete: {
            args: Prisma.EventOrganizerGuestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>
          }
          update: {
            args: Prisma.EventOrganizerGuestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>
          }
          deleteMany: {
            args: Prisma.EventOrganizerGuestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventOrganizerGuestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventOrganizerGuestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>[]
          }
          upsert: {
            args: Prisma.EventOrganizerGuestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerGuestPayload>
          }
          aggregate: {
            args: Prisma.EventOrganizerGuestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventOrganizerGuest>
          }
          groupBy: {
            args: Prisma.EventOrganizerGuestGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerGuestGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventOrganizerGuestCountArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerGuestCountAggregateOutputType> | number
          }
        }
      }
      EventOrganizerVenue: {
        payload: Prisma.$EventOrganizerVenuePayload<ExtArgs>
        fields: Prisma.EventOrganizerVenueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventOrganizerVenueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventOrganizerVenueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>
          }
          findFirst: {
            args: Prisma.EventOrganizerVenueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventOrganizerVenueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>
          }
          findMany: {
            args: Prisma.EventOrganizerVenueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>[]
          }
          create: {
            args: Prisma.EventOrganizerVenueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>
          }
          createMany: {
            args: Prisma.EventOrganizerVenueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventOrganizerVenueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>[]
          }
          delete: {
            args: Prisma.EventOrganizerVenueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>
          }
          update: {
            args: Prisma.EventOrganizerVenueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>
          }
          deleteMany: {
            args: Prisma.EventOrganizerVenueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventOrganizerVenueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventOrganizerVenueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>[]
          }
          upsert: {
            args: Prisma.EventOrganizerVenueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerVenuePayload>
          }
          aggregate: {
            args: Prisma.EventOrganizerVenueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventOrganizerVenue>
          }
          groupBy: {
            args: Prisma.EventOrganizerVenueGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerVenueGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventOrganizerVenueCountArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerVenueCountAggregateOutputType> | number
          }
        }
      }
      EventOrganizerServiceProvider: {
        payload: Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>
        fields: Prisma.EventOrganizerServiceProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventOrganizerServiceProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventOrganizerServiceProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>
          }
          findFirst: {
            args: Prisma.EventOrganizerServiceProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventOrganizerServiceProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>
          }
          findMany: {
            args: Prisma.EventOrganizerServiceProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>[]
          }
          create: {
            args: Prisma.EventOrganizerServiceProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>
          }
          createMany: {
            args: Prisma.EventOrganizerServiceProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventOrganizerServiceProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>[]
          }
          delete: {
            args: Prisma.EventOrganizerServiceProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>
          }
          update: {
            args: Prisma.EventOrganizerServiceProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>
          }
          deleteMany: {
            args: Prisma.EventOrganizerServiceProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventOrganizerServiceProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventOrganizerServiceProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>[]
          }
          upsert: {
            args: Prisma.EventOrganizerServiceProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerServiceProviderPayload>
          }
          aggregate: {
            args: Prisma.EventOrganizerServiceProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventOrganizerServiceProvider>
          }
          groupBy: {
            args: Prisma.EventOrganizerServiceProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerServiceProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventOrganizerServiceProviderCountArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerServiceProviderCountAggregateOutputType> | number
          }
        }
      }
      LanguageLearnerUser: {
        payload: Prisma.$LanguageLearnerUserPayload<ExtArgs>
        fields: Prisma.LanguageLearnerUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageLearnerUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageLearnerUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>
          }
          findFirst: {
            args: Prisma.LanguageLearnerUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageLearnerUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>
          }
          findMany: {
            args: Prisma.LanguageLearnerUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>[]
          }
          create: {
            args: Prisma.LanguageLearnerUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>
          }
          createMany: {
            args: Prisma.LanguageLearnerUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguageLearnerUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>[]
          }
          delete: {
            args: Prisma.LanguageLearnerUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>
          }
          update: {
            args: Prisma.LanguageLearnerUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>
          }
          deleteMany: {
            args: Prisma.LanguageLearnerUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageLearnerUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LanguageLearnerUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>[]
          }
          upsert: {
            args: Prisma.LanguageLearnerUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserPayload>
          }
          aggregate: {
            args: Prisma.LanguageLearnerUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguageLearnerUser>
          }
          groupBy: {
            args: Prisma.LanguageLearnerUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageLearnerUserCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerUserCountAggregateOutputType> | number
          }
        }
      }
      LanguageLearnerPlatform: {
        payload: Prisma.$LanguageLearnerPlatformPayload<ExtArgs>
        fields: Prisma.LanguageLearnerPlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageLearnerPlatformFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageLearnerPlatformFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>
          }
          findFirst: {
            args: Prisma.LanguageLearnerPlatformFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageLearnerPlatformFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>
          }
          findMany: {
            args: Prisma.LanguageLearnerPlatformFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>[]
          }
          create: {
            args: Prisma.LanguageLearnerPlatformCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>
          }
          createMany: {
            args: Prisma.LanguageLearnerPlatformCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguageLearnerPlatformCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>[]
          }
          delete: {
            args: Prisma.LanguageLearnerPlatformDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>
          }
          update: {
            args: Prisma.LanguageLearnerPlatformUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>
          }
          deleteMany: {
            args: Prisma.LanguageLearnerPlatformDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageLearnerPlatformUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LanguageLearnerPlatformUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>[]
          }
          upsert: {
            args: Prisma.LanguageLearnerPlatformUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerPlatformPayload>
          }
          aggregate: {
            args: Prisma.LanguageLearnerPlatformAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguageLearnerPlatform>
          }
          groupBy: {
            args: Prisma.LanguageLearnerPlatformGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerPlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageLearnerPlatformCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerPlatformCountAggregateOutputType> | number
          }
        }
      }
      LanguageLearnerReview: {
        payload: Prisma.$LanguageLearnerReviewPayload<ExtArgs>
        fields: Prisma.LanguageLearnerReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageLearnerReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageLearnerReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>
          }
          findFirst: {
            args: Prisma.LanguageLearnerReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageLearnerReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>
          }
          findMany: {
            args: Prisma.LanguageLearnerReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>[]
          }
          create: {
            args: Prisma.LanguageLearnerReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>
          }
          createMany: {
            args: Prisma.LanguageLearnerReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguageLearnerReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>[]
          }
          delete: {
            args: Prisma.LanguageLearnerReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>
          }
          update: {
            args: Prisma.LanguageLearnerReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>
          }
          deleteMany: {
            args: Prisma.LanguageLearnerReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageLearnerReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LanguageLearnerReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>[]
          }
          upsert: {
            args: Prisma.LanguageLearnerReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewPayload>
          }
          aggregate: {
            args: Prisma.LanguageLearnerReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguageLearnerReview>
          }
          groupBy: {
            args: Prisma.LanguageLearnerReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageLearnerReviewCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerReviewCountAggregateOutputType> | number
          }
        }
      }
      LanguageLearnerReviewLike: {
        payload: Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>
        fields: Prisma.LanguageLearnerReviewLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageLearnerReviewLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageLearnerReviewLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>
          }
          findFirst: {
            args: Prisma.LanguageLearnerReviewLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageLearnerReviewLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>
          }
          findMany: {
            args: Prisma.LanguageLearnerReviewLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>[]
          }
          create: {
            args: Prisma.LanguageLearnerReviewLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>
          }
          createMany: {
            args: Prisma.LanguageLearnerReviewLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguageLearnerReviewLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>[]
          }
          delete: {
            args: Prisma.LanguageLearnerReviewLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>
          }
          update: {
            args: Prisma.LanguageLearnerReviewLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>
          }
          deleteMany: {
            args: Prisma.LanguageLearnerReviewLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageLearnerReviewLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LanguageLearnerReviewLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>[]
          }
          upsert: {
            args: Prisma.LanguageLearnerReviewLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerReviewLikePayload>
          }
          aggregate: {
            args: Prisma.LanguageLearnerReviewLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguageLearnerReviewLike>
          }
          groupBy: {
            args: Prisma.LanguageLearnerReviewLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerReviewLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageLearnerReviewLikeCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerReviewLikeCountAggregateOutputType> | number
          }
        }
      }
      LanguageLearnerUserVote: {
        payload: Prisma.$LanguageLearnerUserVotePayload<ExtArgs>
        fields: Prisma.LanguageLearnerUserVoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageLearnerUserVoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageLearnerUserVoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>
          }
          findFirst: {
            args: Prisma.LanguageLearnerUserVoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageLearnerUserVoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>
          }
          findMany: {
            args: Prisma.LanguageLearnerUserVoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>[]
          }
          create: {
            args: Prisma.LanguageLearnerUserVoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>
          }
          createMany: {
            args: Prisma.LanguageLearnerUserVoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LanguageLearnerUserVoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>[]
          }
          delete: {
            args: Prisma.LanguageLearnerUserVoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>
          }
          update: {
            args: Prisma.LanguageLearnerUserVoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>
          }
          deleteMany: {
            args: Prisma.LanguageLearnerUserVoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageLearnerUserVoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LanguageLearnerUserVoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>[]
          }
          upsert: {
            args: Prisma.LanguageLearnerUserVoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageLearnerUserVotePayload>
          }
          aggregate: {
            args: Prisma.LanguageLearnerUserVoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguageLearnerUserVote>
          }
          groupBy: {
            args: Prisma.LanguageLearnerUserVoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerUserVoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageLearnerUserVoteCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageLearnerUserVoteCountAggregateOutputType> | number
          }
        }
      }
      GameHubUser: {
        payload: Prisma.$GameHubUserPayload<ExtArgs>
        fields: Prisma.GameHubUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameHubUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameHubUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>
          }
          findFirst: {
            args: Prisma.GameHubUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameHubUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>
          }
          findMany: {
            args: Prisma.GameHubUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>[]
          }
          create: {
            args: Prisma.GameHubUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>
          }
          createMany: {
            args: Prisma.GameHubUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameHubUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>[]
          }
          delete: {
            args: Prisma.GameHubUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>
          }
          update: {
            args: Prisma.GameHubUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>
          }
          deleteMany: {
            args: Prisma.GameHubUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameHubUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameHubUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>[]
          }
          upsert: {
            args: Prisma.GameHubUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubUserPayload>
          }
          aggregate: {
            args: Prisma.GameHubUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameHubUser>
          }
          groupBy: {
            args: Prisma.GameHubUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameHubUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameHubUserCountArgs<ExtArgs>
            result: $Utils.Optional<GameHubUserCountAggregateOutputType> | number
          }
        }
      }
      GameHubPlayer: {
        payload: Prisma.$GameHubPlayerPayload<ExtArgs>
        fields: Prisma.GameHubPlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameHubPlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameHubPlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>
          }
          findFirst: {
            args: Prisma.GameHubPlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameHubPlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>
          }
          findMany: {
            args: Prisma.GameHubPlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>[]
          }
          create: {
            args: Prisma.GameHubPlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>
          }
          createMany: {
            args: Prisma.GameHubPlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameHubPlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>[]
          }
          delete: {
            args: Prisma.GameHubPlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>
          }
          update: {
            args: Prisma.GameHubPlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>
          }
          deleteMany: {
            args: Prisma.GameHubPlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameHubPlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameHubPlayerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>[]
          }
          upsert: {
            args: Prisma.GameHubPlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubPlayerPayload>
          }
          aggregate: {
            args: Prisma.GameHubPlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameHubPlayer>
          }
          groupBy: {
            args: Prisma.GameHubPlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameHubPlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameHubPlayerCountArgs<ExtArgs>
            result: $Utils.Optional<GameHubPlayerCountAggregateOutputType> | number
          }
        }
      }
      GameHubTournament: {
        payload: Prisma.$GameHubTournamentPayload<ExtArgs>
        fields: Prisma.GameHubTournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameHubTournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameHubTournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>
          }
          findFirst: {
            args: Prisma.GameHubTournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameHubTournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>
          }
          findMany: {
            args: Prisma.GameHubTournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>[]
          }
          create: {
            args: Prisma.GameHubTournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>
          }
          createMany: {
            args: Prisma.GameHubTournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameHubTournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>[]
          }
          delete: {
            args: Prisma.GameHubTournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>
          }
          update: {
            args: Prisma.GameHubTournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>
          }
          deleteMany: {
            args: Prisma.GameHubTournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameHubTournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameHubTournamentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>[]
          }
          upsert: {
            args: Prisma.GameHubTournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPayload>
          }
          aggregate: {
            args: Prisma.GameHubTournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameHubTournament>
          }
          groupBy: {
            args: Prisma.GameHubTournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameHubTournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameHubTournamentCountArgs<ExtArgs>
            result: $Utils.Optional<GameHubTournamentCountAggregateOutputType> | number
          }
        }
      }
      GameHubTournamentPlayer: {
        payload: Prisma.$GameHubTournamentPlayerPayload<ExtArgs>
        fields: Prisma.GameHubTournamentPlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameHubTournamentPlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameHubTournamentPlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>
          }
          findFirst: {
            args: Prisma.GameHubTournamentPlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameHubTournamentPlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>
          }
          findMany: {
            args: Prisma.GameHubTournamentPlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>[]
          }
          create: {
            args: Prisma.GameHubTournamentPlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>
          }
          createMany: {
            args: Prisma.GameHubTournamentPlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameHubTournamentPlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>[]
          }
          delete: {
            args: Prisma.GameHubTournamentPlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>
          }
          update: {
            args: Prisma.GameHubTournamentPlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>
          }
          deleteMany: {
            args: Prisma.GameHubTournamentPlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameHubTournamentPlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameHubTournamentPlayerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>[]
          }
          upsert: {
            args: Prisma.GameHubTournamentPlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameHubTournamentPlayerPayload>
          }
          aggregate: {
            args: Prisma.GameHubTournamentPlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameHubTournamentPlayer>
          }
          groupBy: {
            args: Prisma.GameHubTournamentPlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameHubTournamentPlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameHubTournamentPlayerCountArgs<ExtArgs>
            result: $Utils.Optional<GameHubTournamentPlayerCountAggregateOutputType> | number
          }
        }
      }
      UserHealthTracker: {
        payload: Prisma.$UserHealthTrackerPayload<ExtArgs>
        fields: Prisma.UserHealthTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserHealthTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserHealthTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>
          }
          findFirst: {
            args: Prisma.UserHealthTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserHealthTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>
          }
          findMany: {
            args: Prisma.UserHealthTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>[]
          }
          create: {
            args: Prisma.UserHealthTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>
          }
          createMany: {
            args: Prisma.UserHealthTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserHealthTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>[]
          }
          delete: {
            args: Prisma.UserHealthTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>
          }
          update: {
            args: Prisma.UserHealthTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>
          }
          deleteMany: {
            args: Prisma.UserHealthTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserHealthTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserHealthTrackerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>[]
          }
          upsert: {
            args: Prisma.UserHealthTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserHealthTrackerPayload>
          }
          aggregate: {
            args: Prisma.UserHealthTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserHealthTracker>
          }
          groupBy: {
            args: Prisma.UserHealthTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserHealthTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserHealthTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<UserHealthTrackerCountAggregateOutputType> | number
          }
        }
      }
      ScheduleHealthTracker: {
        payload: Prisma.$ScheduleHealthTrackerPayload<ExtArgs>
        fields: Prisma.ScheduleHealthTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleHealthTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleHealthTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>
          }
          findFirst: {
            args: Prisma.ScheduleHealthTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleHealthTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>
          }
          findMany: {
            args: Prisma.ScheduleHealthTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>[]
          }
          create: {
            args: Prisma.ScheduleHealthTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>
          }
          createMany: {
            args: Prisma.ScheduleHealthTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleHealthTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>[]
          }
          delete: {
            args: Prisma.ScheduleHealthTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>
          }
          update: {
            args: Prisma.ScheduleHealthTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>
          }
          deleteMany: {
            args: Prisma.ScheduleHealthTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleHealthTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduleHealthTrackerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>[]
          }
          upsert: {
            args: Prisma.ScheduleHealthTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleHealthTrackerPayload>
          }
          aggregate: {
            args: Prisma.ScheduleHealthTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduleHealthTracker>
          }
          groupBy: {
            args: Prisma.ScheduleHealthTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleHealthTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleHealthTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleHealthTrackerCountAggregateOutputType> | number
          }
        }
      }
      RecordHealthTracker: {
        payload: Prisma.$RecordHealthTrackerPayload<ExtArgs>
        fields: Prisma.RecordHealthTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecordHealthTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecordHealthTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>
          }
          findFirst: {
            args: Prisma.RecordHealthTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecordHealthTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>
          }
          findMany: {
            args: Prisma.RecordHealthTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>[]
          }
          create: {
            args: Prisma.RecordHealthTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>
          }
          createMany: {
            args: Prisma.RecordHealthTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecordHealthTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>[]
          }
          delete: {
            args: Prisma.RecordHealthTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>
          }
          update: {
            args: Prisma.RecordHealthTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>
          }
          deleteMany: {
            args: Prisma.RecordHealthTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecordHealthTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecordHealthTrackerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>[]
          }
          upsert: {
            args: Prisma.RecordHealthTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordHealthTrackerPayload>
          }
          aggregate: {
            args: Prisma.RecordHealthTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecordHealthTracker>
          }
          groupBy: {
            args: Prisma.RecordHealthTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecordHealthTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecordHealthTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<RecordHealthTrackerCountAggregateOutputType> | number
          }
        }
      }
      ClinicHealthTracker: {
        payload: Prisma.$ClinicHealthTrackerPayload<ExtArgs>
        fields: Prisma.ClinicHealthTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicHealthTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicHealthTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>
          }
          findFirst: {
            args: Prisma.ClinicHealthTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicHealthTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>
          }
          findMany: {
            args: Prisma.ClinicHealthTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>[]
          }
          create: {
            args: Prisma.ClinicHealthTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>
          }
          createMany: {
            args: Prisma.ClinicHealthTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClinicHealthTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>[]
          }
          delete: {
            args: Prisma.ClinicHealthTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>
          }
          update: {
            args: Prisma.ClinicHealthTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>
          }
          deleteMany: {
            args: Prisma.ClinicHealthTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicHealthTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClinicHealthTrackerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>[]
          }
          upsert: {
            args: Prisma.ClinicHealthTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicHealthTrackerPayload>
          }
          aggregate: {
            args: Prisma.ClinicHealthTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClinicHealthTracker>
          }
          groupBy: {
            args: Prisma.ClinicHealthTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClinicHealthTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicHealthTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<ClinicHealthTrackerCountAggregateOutputType> | number
          }
        }
      }
      UserMusicLover: {
        payload: Prisma.$UserMusicLoverPayload<ExtArgs>
        fields: Prisma.UserMusicLoverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMusicLoverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMusicLoverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>
          }
          findFirst: {
            args: Prisma.UserMusicLoverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMusicLoverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>
          }
          findMany: {
            args: Prisma.UserMusicLoverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>[]
          }
          create: {
            args: Prisma.UserMusicLoverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>
          }
          createMany: {
            args: Prisma.UserMusicLoverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMusicLoverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>[]
          }
          delete: {
            args: Prisma.UserMusicLoverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>
          }
          update: {
            args: Prisma.UserMusicLoverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>
          }
          deleteMany: {
            args: Prisma.UserMusicLoverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMusicLoverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserMusicLoverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>[]
          }
          upsert: {
            args: Prisma.UserMusicLoverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMusicLoverPayload>
          }
          aggregate: {
            args: Prisma.UserMusicLoverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMusicLover>
          }
          groupBy: {
            args: Prisma.UserMusicLoverGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMusicLoverGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMusicLoverCountArgs<ExtArgs>
            result: $Utils.Optional<UserMusicLoverCountAggregateOutputType> | number
          }
        }
      }
      ConcertMusicLover: {
        payload: Prisma.$ConcertMusicLoverPayload<ExtArgs>
        fields: Prisma.ConcertMusicLoverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConcertMusicLoverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConcertMusicLoverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>
          }
          findFirst: {
            args: Prisma.ConcertMusicLoverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConcertMusicLoverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>
          }
          findMany: {
            args: Prisma.ConcertMusicLoverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>[]
          }
          create: {
            args: Prisma.ConcertMusicLoverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>
          }
          createMany: {
            args: Prisma.ConcertMusicLoverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConcertMusicLoverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>[]
          }
          delete: {
            args: Prisma.ConcertMusicLoverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>
          }
          update: {
            args: Prisma.ConcertMusicLoverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>
          }
          deleteMany: {
            args: Prisma.ConcertMusicLoverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConcertMusicLoverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConcertMusicLoverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>[]
          }
          upsert: {
            args: Prisma.ConcertMusicLoverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcertMusicLoverPayload>
          }
          aggregate: {
            args: Prisma.ConcertMusicLoverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConcertMusicLover>
          }
          groupBy: {
            args: Prisma.ConcertMusicLoverGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConcertMusicLoverGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConcertMusicLoverCountArgs<ExtArgs>
            result: $Utils.Optional<ConcertMusicLoverCountAggregateOutputType> | number
          }
        }
      }
      ReviewMusicLover: {
        payload: Prisma.$ReviewMusicLoverPayload<ExtArgs>
        fields: Prisma.ReviewMusicLoverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewMusicLoverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewMusicLoverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>
          }
          findFirst: {
            args: Prisma.ReviewMusicLoverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewMusicLoverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>
          }
          findMany: {
            args: Prisma.ReviewMusicLoverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>[]
          }
          create: {
            args: Prisma.ReviewMusicLoverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>
          }
          createMany: {
            args: Prisma.ReviewMusicLoverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewMusicLoverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>[]
          }
          delete: {
            args: Prisma.ReviewMusicLoverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>
          }
          update: {
            args: Prisma.ReviewMusicLoverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>
          }
          deleteMany: {
            args: Prisma.ReviewMusicLoverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewMusicLoverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewMusicLoverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>[]
          }
          upsert: {
            args: Prisma.ReviewMusicLoverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewMusicLoverPayload>
          }
          aggregate: {
            args: Prisma.ReviewMusicLoverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewMusicLover>
          }
          groupBy: {
            args: Prisma.ReviewMusicLoverGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewMusicLoverGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewMusicLoverCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewMusicLoverCountAggregateOutputType> | number
          }
        }
      }
      UserSocialButterfly: {
        payload: Prisma.$UserSocialButterflyPayload<ExtArgs>
        fields: Prisma.UserSocialButterflyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSocialButterflyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSocialButterflyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>
          }
          findFirst: {
            args: Prisma.UserSocialButterflyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSocialButterflyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>
          }
          findMany: {
            args: Prisma.UserSocialButterflyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>[]
          }
          create: {
            args: Prisma.UserSocialButterflyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>
          }
          createMany: {
            args: Prisma.UserSocialButterflyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSocialButterflyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>[]
          }
          delete: {
            args: Prisma.UserSocialButterflyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>
          }
          update: {
            args: Prisma.UserSocialButterflyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>
          }
          deleteMany: {
            args: Prisma.UserSocialButterflyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSocialButterflyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSocialButterflyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>[]
          }
          upsert: {
            args: Prisma.UserSocialButterflyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSocialButterflyPayload>
          }
          aggregate: {
            args: Prisma.UserSocialButterflyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSocialButterfly>
          }
          groupBy: {
            args: Prisma.UserSocialButterflyGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSocialButterflyGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSocialButterflyCountArgs<ExtArgs>
            result: $Utils.Optional<UserSocialButterflyCountAggregateOutputType> | number
          }
        }
      }
      EventSocialButterfly: {
        payload: Prisma.$EventSocialButterflyPayload<ExtArgs>
        fields: Prisma.EventSocialButterflyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventSocialButterflyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventSocialButterflyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>
          }
          findFirst: {
            args: Prisma.EventSocialButterflyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventSocialButterflyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>
          }
          findMany: {
            args: Prisma.EventSocialButterflyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>[]
          }
          create: {
            args: Prisma.EventSocialButterflyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>
          }
          createMany: {
            args: Prisma.EventSocialButterflyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventSocialButterflyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>[]
          }
          delete: {
            args: Prisma.EventSocialButterflyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>
          }
          update: {
            args: Prisma.EventSocialButterflyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>
          }
          deleteMany: {
            args: Prisma.EventSocialButterflyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventSocialButterflyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventSocialButterflyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>[]
          }
          upsert: {
            args: Prisma.EventSocialButterflyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSocialButterflyPayload>
          }
          aggregate: {
            args: Prisma.EventSocialButterflyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventSocialButterfly>
          }
          groupBy: {
            args: Prisma.EventSocialButterflyGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventSocialButterflyGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventSocialButterflyCountArgs<ExtArgs>
            result: $Utils.Optional<EventSocialButterflyCountAggregateOutputType> | number
          }
        }
      }
      ReviewSocialButterfly: {
        payload: Prisma.$ReviewSocialButterflyPayload<ExtArgs>
        fields: Prisma.ReviewSocialButterflyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewSocialButterflyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewSocialButterflyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>
          }
          findFirst: {
            args: Prisma.ReviewSocialButterflyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewSocialButterflyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>
          }
          findMany: {
            args: Prisma.ReviewSocialButterflyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>[]
          }
          create: {
            args: Prisma.ReviewSocialButterflyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>
          }
          createMany: {
            args: Prisma.ReviewSocialButterflyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewSocialButterflyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>[]
          }
          delete: {
            args: Prisma.ReviewSocialButterflyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>
          }
          update: {
            args: Prisma.ReviewSocialButterflyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>
          }
          deleteMany: {
            args: Prisma.ReviewSocialButterflyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewSocialButterflyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewSocialButterflyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>[]
          }
          upsert: {
            args: Prisma.ReviewSocialButterflyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewSocialButterflyPayload>
          }
          aggregate: {
            args: Prisma.ReviewSocialButterflyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewSocialButterfly>
          }
          groupBy: {
            args: Prisma.ReviewSocialButterflyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewSocialButterflyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewSocialButterflyCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewSocialButterflyCountAggregateOutputType> | number
          }
        }
      }
      LikeSocialButterfly: {
        payload: Prisma.$LikeSocialButterflyPayload<ExtArgs>
        fields: Prisma.LikeSocialButterflyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeSocialButterflyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeSocialButterflyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>
          }
          findFirst: {
            args: Prisma.LikeSocialButterflyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeSocialButterflyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>
          }
          findMany: {
            args: Prisma.LikeSocialButterflyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>[]
          }
          create: {
            args: Prisma.LikeSocialButterflyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>
          }
          createMany: {
            args: Prisma.LikeSocialButterflyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeSocialButterflyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>[]
          }
          delete: {
            args: Prisma.LikeSocialButterflyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>
          }
          update: {
            args: Prisma.LikeSocialButterflyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>
          }
          deleteMany: {
            args: Prisma.LikeSocialButterflyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikeSocialButterflyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LikeSocialButterflyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>[]
          }
          upsert: {
            args: Prisma.LikeSocialButterflyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikeSocialButterflyPayload>
          }
          aggregate: {
            args: Prisma.LikeSocialButterflyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikeSocialButterfly>
          }
          groupBy: {
            args: Prisma.LikeSocialButterflyGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikeSocialButterflyGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeSocialButterflyCountArgs<ExtArgs>
            result: $Utils.Optional<LikeSocialButterflyCountAggregateOutputType> | number
          }
        }
      }
      BookmarkSocialButterfly: {
        payload: Prisma.$BookmarkSocialButterflyPayload<ExtArgs>
        fields: Prisma.BookmarkSocialButterflyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmarkSocialButterflyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmarkSocialButterflyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>
          }
          findFirst: {
            args: Prisma.BookmarkSocialButterflyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmarkSocialButterflyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>
          }
          findMany: {
            args: Prisma.BookmarkSocialButterflyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>[]
          }
          create: {
            args: Prisma.BookmarkSocialButterflyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>
          }
          createMany: {
            args: Prisma.BookmarkSocialButterflyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookmarkSocialButterflyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>[]
          }
          delete: {
            args: Prisma.BookmarkSocialButterflyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>
          }
          update: {
            args: Prisma.BookmarkSocialButterflyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>
          }
          deleteMany: {
            args: Prisma.BookmarkSocialButterflyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookmarkSocialButterflyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookmarkSocialButterflyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>[]
          }
          upsert: {
            args: Prisma.BookmarkSocialButterflyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookmarkSocialButterflyPayload>
          }
          aggregate: {
            args: Prisma.BookmarkSocialButterflyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookmarkSocialButterfly>
          }
          groupBy: {
            args: Prisma.BookmarkSocialButterflyGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookmarkSocialButterflyGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmarkSocialButterflyCountArgs<ExtArgs>
            result: $Utils.Optional<BookmarkSocialButterflyCountAggregateOutputType> | number
          }
        }
      }
      ReportSocialButterfly: {
        payload: Prisma.$ReportSocialButterflyPayload<ExtArgs>
        fields: Prisma.ReportSocialButterflyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportSocialButterflyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportSocialButterflyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>
          }
          findFirst: {
            args: Prisma.ReportSocialButterflyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportSocialButterflyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>
          }
          findMany: {
            args: Prisma.ReportSocialButterflyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>[]
          }
          create: {
            args: Prisma.ReportSocialButterflyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>
          }
          createMany: {
            args: Prisma.ReportSocialButterflyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportSocialButterflyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>[]
          }
          delete: {
            args: Prisma.ReportSocialButterflyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>
          }
          update: {
            args: Prisma.ReportSocialButterflyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>
          }
          deleteMany: {
            args: Prisma.ReportSocialButterflyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportSocialButterflyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportSocialButterflyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>[]
          }
          upsert: {
            args: Prisma.ReportSocialButterflyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSocialButterflyPayload>
          }
          aggregate: {
            args: Prisma.ReportSocialButterflyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportSocialButterfly>
          }
          groupBy: {
            args: Prisma.ReportSocialButterflyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportSocialButterflyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportSocialButterflyCountArgs<ExtArgs>
            result: $Utils.Optional<ReportSocialButterflyCountAggregateOutputType> | number
          }
        }
      }
      UserVolunteerOrg: {
        payload: Prisma.$UserVolunteerOrgPayload<ExtArgs>
        fields: Prisma.UserVolunteerOrgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserVolunteerOrgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserVolunteerOrgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>
          }
          findFirst: {
            args: Prisma.UserVolunteerOrgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserVolunteerOrgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>
          }
          findMany: {
            args: Prisma.UserVolunteerOrgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>[]
          }
          create: {
            args: Prisma.UserVolunteerOrgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>
          }
          createMany: {
            args: Prisma.UserVolunteerOrgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserVolunteerOrgCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>[]
          }
          delete: {
            args: Prisma.UserVolunteerOrgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>
          }
          update: {
            args: Prisma.UserVolunteerOrgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>
          }
          deleteMany: {
            args: Prisma.UserVolunteerOrgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserVolunteerOrgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserVolunteerOrgUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>[]
          }
          upsert: {
            args: Prisma.UserVolunteerOrgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserVolunteerOrgPayload>
          }
          aggregate: {
            args: Prisma.UserVolunteerOrgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserVolunteerOrg>
          }
          groupBy: {
            args: Prisma.UserVolunteerOrgGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserVolunteerOrgGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserVolunteerOrgCountArgs<ExtArgs>
            result: $Utils.Optional<UserVolunteerOrgCountAggregateOutputType> | number
          }
        }
      }
      VolunteerActivity: {
        payload: Prisma.$VolunteerActivityPayload<ExtArgs>
        fields: Prisma.VolunteerActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VolunteerActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VolunteerActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>
          }
          findFirst: {
            args: Prisma.VolunteerActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VolunteerActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>
          }
          findMany: {
            args: Prisma.VolunteerActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>[]
          }
          create: {
            args: Prisma.VolunteerActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>
          }
          createMany: {
            args: Prisma.VolunteerActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VolunteerActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>[]
          }
          delete: {
            args: Prisma.VolunteerActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>
          }
          update: {
            args: Prisma.VolunteerActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>
          }
          deleteMany: {
            args: Prisma.VolunteerActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VolunteerActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VolunteerActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>[]
          }
          upsert: {
            args: Prisma.VolunteerActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerActivityPayload>
          }
          aggregate: {
            args: Prisma.VolunteerActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVolunteerActivity>
          }
          groupBy: {
            args: Prisma.VolunteerActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<VolunteerActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.VolunteerActivityCountArgs<ExtArgs>
            result: $Utils.Optional<VolunteerActivityCountAggregateOutputType> | number
          }
        }
      }
      VolunteerApplication: {
        payload: Prisma.$VolunteerApplicationPayload<ExtArgs>
        fields: Prisma.VolunteerApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VolunteerApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VolunteerApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>
          }
          findFirst: {
            args: Prisma.VolunteerApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VolunteerApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>
          }
          findMany: {
            args: Prisma.VolunteerApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>[]
          }
          create: {
            args: Prisma.VolunteerApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>
          }
          createMany: {
            args: Prisma.VolunteerApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VolunteerApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>[]
          }
          delete: {
            args: Prisma.VolunteerApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>
          }
          update: {
            args: Prisma.VolunteerApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>
          }
          deleteMany: {
            args: Prisma.VolunteerApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VolunteerApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VolunteerApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>[]
          }
          upsert: {
            args: Prisma.VolunteerApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerApplicationPayload>
          }
          aggregate: {
            args: Prisma.VolunteerApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVolunteerApplication>
          }
          groupBy: {
            args: Prisma.VolunteerApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VolunteerApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VolunteerApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<VolunteerApplicationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    eventOrganizerUser?: EventOrganizerUserOmit
    eventOrganizerTask?: EventOrganizerTaskOmit
    eventOrganizerGuest?: EventOrganizerGuestOmit
    eventOrganizerVenue?: EventOrganizerVenueOmit
    eventOrganizerServiceProvider?: EventOrganizerServiceProviderOmit
    languageLearnerUser?: LanguageLearnerUserOmit
    languageLearnerPlatform?: LanguageLearnerPlatformOmit
    languageLearnerReview?: LanguageLearnerReviewOmit
    languageLearnerReviewLike?: LanguageLearnerReviewLikeOmit
    languageLearnerUserVote?: LanguageLearnerUserVoteOmit
    gameHubUser?: GameHubUserOmit
    gameHubPlayer?: GameHubPlayerOmit
    gameHubTournament?: GameHubTournamentOmit
    gameHubTournamentPlayer?: GameHubTournamentPlayerOmit
    userHealthTracker?: UserHealthTrackerOmit
    scheduleHealthTracker?: ScheduleHealthTrackerOmit
    recordHealthTracker?: RecordHealthTrackerOmit
    clinicHealthTracker?: ClinicHealthTrackerOmit
    userMusicLover?: UserMusicLoverOmit
    concertMusicLover?: ConcertMusicLoverOmit
    reviewMusicLover?: ReviewMusicLoverOmit
    userSocialButterfly?: UserSocialButterflyOmit
    eventSocialButterfly?: EventSocialButterflyOmit
    reviewSocialButterfly?: ReviewSocialButterflyOmit
    likeSocialButterfly?: LikeSocialButterflyOmit
    bookmarkSocialButterfly?: BookmarkSocialButterflyOmit
    reportSocialButterfly?: ReportSocialButterflyOmit
    userVolunteerOrg?: UserVolunteerOrgOmit
    volunteerActivity?: VolunteerActivityOmit
    volunteerApplication?: VolunteerApplicationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EventOrganizerUserCountOutputType
   */

  export type EventOrganizerUserCountOutputType = {
    tasks: number
    guests: number
    venues: number
    serviceProviders: number
  }

  export type EventOrganizerUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | EventOrganizerUserCountOutputTypeCountTasksArgs
    guests?: boolean | EventOrganizerUserCountOutputTypeCountGuestsArgs
    venues?: boolean | EventOrganizerUserCountOutputTypeCountVenuesArgs
    serviceProviders?: boolean | EventOrganizerUserCountOutputTypeCountServiceProvidersArgs
  }

  // Custom InputTypes
  /**
   * EventOrganizerUserCountOutputType without action
   */
  export type EventOrganizerUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUserCountOutputType
     */
    select?: EventOrganizerUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventOrganizerUserCountOutputType without action
   */
  export type EventOrganizerUserCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerTaskWhereInput
  }

  /**
   * EventOrganizerUserCountOutputType without action
   */
  export type EventOrganizerUserCountOutputTypeCountGuestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerGuestWhereInput
  }

  /**
   * EventOrganizerUserCountOutputType without action
   */
  export type EventOrganizerUserCountOutputTypeCountVenuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerVenueWhereInput
  }

  /**
   * EventOrganizerUserCountOutputType without action
   */
  export type EventOrganizerUserCountOutputTypeCountServiceProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerServiceProviderWhereInput
  }


  /**
   * Count Type LanguageLearnerUserCountOutputType
   */

  export type LanguageLearnerUserCountOutputType = {
    ownedPlatforms: number
    reviews: number
    votesGiven: number
    votesReceived: number
    likes: number
  }

  export type LanguageLearnerUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedPlatforms?: boolean | LanguageLearnerUserCountOutputTypeCountOwnedPlatformsArgs
    reviews?: boolean | LanguageLearnerUserCountOutputTypeCountReviewsArgs
    votesGiven?: boolean | LanguageLearnerUserCountOutputTypeCountVotesGivenArgs
    votesReceived?: boolean | LanguageLearnerUserCountOutputTypeCountVotesReceivedArgs
    likes?: boolean | LanguageLearnerUserCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * LanguageLearnerUserCountOutputType without action
   */
  export type LanguageLearnerUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserCountOutputType
     */
    select?: LanguageLearnerUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LanguageLearnerUserCountOutputType without action
   */
  export type LanguageLearnerUserCountOutputTypeCountOwnedPlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerPlatformWhereInput
  }

  /**
   * LanguageLearnerUserCountOutputType without action
   */
  export type LanguageLearnerUserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerReviewWhereInput
  }

  /**
   * LanguageLearnerUserCountOutputType without action
   */
  export type LanguageLearnerUserCountOutputTypeCountVotesGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerUserVoteWhereInput
  }

  /**
   * LanguageLearnerUserCountOutputType without action
   */
  export type LanguageLearnerUserCountOutputTypeCountVotesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerUserVoteWhereInput
  }

  /**
   * LanguageLearnerUserCountOutputType without action
   */
  export type LanguageLearnerUserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerReviewLikeWhereInput
  }


  /**
   * Count Type LanguageLearnerPlatformCountOutputType
   */

  export type LanguageLearnerPlatformCountOutputType = {
    reviews: number
  }

  export type LanguageLearnerPlatformCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | LanguageLearnerPlatformCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * LanguageLearnerPlatformCountOutputType without action
   */
  export type LanguageLearnerPlatformCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatformCountOutputType
     */
    select?: LanguageLearnerPlatformCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LanguageLearnerPlatformCountOutputType without action
   */
  export type LanguageLearnerPlatformCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerReviewWhereInput
  }


  /**
   * Count Type LanguageLearnerReviewCountOutputType
   */

  export type LanguageLearnerReviewCountOutputType = {
    likes: number
  }

  export type LanguageLearnerReviewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likes?: boolean | LanguageLearnerReviewCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * LanguageLearnerReviewCountOutputType without action
   */
  export type LanguageLearnerReviewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewCountOutputType
     */
    select?: LanguageLearnerReviewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LanguageLearnerReviewCountOutputType without action
   */
  export type LanguageLearnerReviewCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerReviewLikeWhereInput
  }


  /**
   * Count Type GameHubUserCountOutputType
   */

  export type GameHubUserCountOutputType = {
    players: number
    tournaments: number
  }

  export type GameHubUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | GameHubUserCountOutputTypeCountPlayersArgs
    tournaments?: boolean | GameHubUserCountOutputTypeCountTournamentsArgs
  }

  // Custom InputTypes
  /**
   * GameHubUserCountOutputType without action
   */
  export type GameHubUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUserCountOutputType
     */
    select?: GameHubUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameHubUserCountOutputType without action
   */
  export type GameHubUserCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubPlayerWhereInput
  }

  /**
   * GameHubUserCountOutputType without action
   */
  export type GameHubUserCountOutputTypeCountTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubTournamentWhereInput
  }


  /**
   * Count Type GameHubPlayerCountOutputType
   */

  export type GameHubPlayerCountOutputType = {
    tournaments: number
  }

  export type GameHubPlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournaments?: boolean | GameHubPlayerCountOutputTypeCountTournamentsArgs
  }

  // Custom InputTypes
  /**
   * GameHubPlayerCountOutputType without action
   */
  export type GameHubPlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayerCountOutputType
     */
    select?: GameHubPlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameHubPlayerCountOutputType without action
   */
  export type GameHubPlayerCountOutputTypeCountTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubTournamentPlayerWhereInput
  }


  /**
   * Count Type GameHubTournamentCountOutputType
   */

  export type GameHubTournamentCountOutputType = {
    players: number
  }

  export type GameHubTournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | GameHubTournamentCountOutputTypeCountPlayersArgs
  }

  // Custom InputTypes
  /**
   * GameHubTournamentCountOutputType without action
   */
  export type GameHubTournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentCountOutputType
     */
    select?: GameHubTournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameHubTournamentCountOutputType without action
   */
  export type GameHubTournamentCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubTournamentPlayerWhereInput
  }


  /**
   * Count Type UserHealthTrackerCountOutputType
   */

  export type UserHealthTrackerCountOutputType = {
    schedules: number
    records: number
  }

  export type UserHealthTrackerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | UserHealthTrackerCountOutputTypeCountSchedulesArgs
    records?: boolean | UserHealthTrackerCountOutputTypeCountRecordsArgs
  }

  // Custom InputTypes
  /**
   * UserHealthTrackerCountOutputType without action
   */
  export type UserHealthTrackerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTrackerCountOutputType
     */
    select?: UserHealthTrackerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserHealthTrackerCountOutputType without action
   */
  export type UserHealthTrackerCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleHealthTrackerWhereInput
  }

  /**
   * UserHealthTrackerCountOutputType without action
   */
  export type UserHealthTrackerCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordHealthTrackerWhereInput
  }


  /**
   * Count Type UserMusicLoverCountOutputType
   */

  export type UserMusicLoverCountOutputType = {
    concerts: number
    reviews: number
  }

  export type UserMusicLoverCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    concerts?: boolean | UserMusicLoverCountOutputTypeCountConcertsArgs
    reviews?: boolean | UserMusicLoverCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserMusicLoverCountOutputType without action
   */
  export type UserMusicLoverCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLoverCountOutputType
     */
    select?: UserMusicLoverCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserMusicLoverCountOutputType without action
   */
  export type UserMusicLoverCountOutputTypeCountConcertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConcertMusicLoverWhereInput
  }

  /**
   * UserMusicLoverCountOutputType without action
   */
  export type UserMusicLoverCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewMusicLoverWhereInput
  }


  /**
   * Count Type ConcertMusicLoverCountOutputType
   */

  export type ConcertMusicLoverCountOutputType = {
    reviews: number
  }

  export type ConcertMusicLoverCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | ConcertMusicLoverCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ConcertMusicLoverCountOutputType without action
   */
  export type ConcertMusicLoverCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLoverCountOutputType
     */
    select?: ConcertMusicLoverCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConcertMusicLoverCountOutputType without action
   */
  export type ConcertMusicLoverCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewMusicLoverWhereInput
  }


  /**
   * Count Type UserSocialButterflyCountOutputType
   */

  export type UserSocialButterflyCountOutputType = {
    events: number
    reviews: number
    likes: number
    bookmarks: number
    reports: number
  }

  export type UserSocialButterflyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | UserSocialButterflyCountOutputTypeCountEventsArgs
    reviews?: boolean | UserSocialButterflyCountOutputTypeCountReviewsArgs
    likes?: boolean | UserSocialButterflyCountOutputTypeCountLikesArgs
    bookmarks?: boolean | UserSocialButterflyCountOutputTypeCountBookmarksArgs
    reports?: boolean | UserSocialButterflyCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * UserSocialButterflyCountOutputType without action
   */
  export type UserSocialButterflyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterflyCountOutputType
     */
    select?: UserSocialButterflyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserSocialButterflyCountOutputType without action
   */
  export type UserSocialButterflyCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventSocialButterflyWhereInput
  }

  /**
   * UserSocialButterflyCountOutputType without action
   */
  export type UserSocialButterflyCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewSocialButterflyWhereInput
  }

  /**
   * UserSocialButterflyCountOutputType without action
   */
  export type UserSocialButterflyCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeSocialButterflyWhereInput
  }

  /**
   * UserSocialButterflyCountOutputType without action
   */
  export type UserSocialButterflyCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkSocialButterflyWhereInput
  }

  /**
   * UserSocialButterflyCountOutputType without action
   */
  export type UserSocialButterflyCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSocialButterflyWhereInput
  }


  /**
   * Count Type EventSocialButterflyCountOutputType
   */

  export type EventSocialButterflyCountOutputType = {
    reviews: number
    bookmarks: number
    likes: number
    reports: number
  }

  export type EventSocialButterflyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | EventSocialButterflyCountOutputTypeCountReviewsArgs
    bookmarks?: boolean | EventSocialButterflyCountOutputTypeCountBookmarksArgs
    likes?: boolean | EventSocialButterflyCountOutputTypeCountLikesArgs
    reports?: boolean | EventSocialButterflyCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * EventSocialButterflyCountOutputType without action
   */
  export type EventSocialButterflyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterflyCountOutputType
     */
    select?: EventSocialButterflyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventSocialButterflyCountOutputType without action
   */
  export type EventSocialButterflyCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewSocialButterflyWhereInput
  }

  /**
   * EventSocialButterflyCountOutputType without action
   */
  export type EventSocialButterflyCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkSocialButterflyWhereInput
  }

  /**
   * EventSocialButterflyCountOutputType without action
   */
  export type EventSocialButterflyCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeSocialButterflyWhereInput
  }

  /**
   * EventSocialButterflyCountOutputType without action
   */
  export type EventSocialButterflyCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSocialButterflyWhereInput
  }


  /**
   * Count Type ReviewSocialButterflyCountOutputType
   */

  export type ReviewSocialButterflyCountOutputType = {
    reports: number
  }

  export type ReviewSocialButterflyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | ReviewSocialButterflyCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * ReviewSocialButterflyCountOutputType without action
   */
  export type ReviewSocialButterflyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterflyCountOutputType
     */
    select?: ReviewSocialButterflyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewSocialButterflyCountOutputType without action
   */
  export type ReviewSocialButterflyCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSocialButterflyWhereInput
  }


  /**
   * Count Type UserVolunteerOrgCountOutputType
   */

  export type UserVolunteerOrgCountOutputType = {
    activities: number
    applications: number
  }

  export type UserVolunteerOrgCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | UserVolunteerOrgCountOutputTypeCountActivitiesArgs
    applications?: boolean | UserVolunteerOrgCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * UserVolunteerOrgCountOutputType without action
   */
  export type UserVolunteerOrgCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrgCountOutputType
     */
    select?: UserVolunteerOrgCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserVolunteerOrgCountOutputType without action
   */
  export type UserVolunteerOrgCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerActivityWhereInput
  }

  /**
   * UserVolunteerOrgCountOutputType without action
   */
  export type UserVolunteerOrgCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerApplicationWhereInput
  }


  /**
   * Count Type VolunteerActivityCountOutputType
   */

  export type VolunteerActivityCountOutputType = {
    applications: number
  }

  export type VolunteerActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | VolunteerActivityCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * VolunteerActivityCountOutputType without action
   */
  export type VolunteerActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivityCountOutputType
     */
    select?: VolunteerActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VolunteerActivityCountOutputType without action
   */
  export type VolunteerActivityCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerApplicationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model EventOrganizerUser
   */

  export type AggregateEventOrganizerUser = {
    _count: EventOrganizerUserCountAggregateOutputType | null
    _min: EventOrganizerUserMinAggregateOutputType | null
    _max: EventOrganizerUserMaxAggregateOutputType | null
  }

  export type EventOrganizerUserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type EventOrganizerUserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type EventOrganizerUserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    _all: number
  }


  export type EventOrganizerUserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type EventOrganizerUserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type EventOrganizerUserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type EventOrganizerUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerUser to aggregate.
     */
    where?: EventOrganizerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerUsers to fetch.
     */
    orderBy?: EventOrganizerUserOrderByWithRelationInput | EventOrganizerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventOrganizerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventOrganizerUsers
    **/
    _count?: true | EventOrganizerUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventOrganizerUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventOrganizerUserMaxAggregateInputType
  }

  export type GetEventOrganizerUserAggregateType<T extends EventOrganizerUserAggregateArgs> = {
        [P in keyof T & keyof AggregateEventOrganizerUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventOrganizerUser[P]>
      : GetScalarType<T[P], AggregateEventOrganizerUser[P]>
  }




  export type EventOrganizerUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerUserWhereInput
    orderBy?: EventOrganizerUserOrderByWithAggregationInput | EventOrganizerUserOrderByWithAggregationInput[]
    by: EventOrganizerUserScalarFieldEnum[] | EventOrganizerUserScalarFieldEnum
    having?: EventOrganizerUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventOrganizerUserCountAggregateInputType | true
    _min?: EventOrganizerUserMinAggregateInputType
    _max?: EventOrganizerUserMaxAggregateInputType
  }

  export type EventOrganizerUserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    createdAt: Date
    _count: EventOrganizerUserCountAggregateOutputType | null
    _min: EventOrganizerUserMinAggregateOutputType | null
    _max: EventOrganizerUserMaxAggregateOutputType | null
  }

  type GetEventOrganizerUserGroupByPayload<T extends EventOrganizerUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventOrganizerUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventOrganizerUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventOrganizerUserGroupByOutputType[P]>
            : GetScalarType<T[P], EventOrganizerUserGroupByOutputType[P]>
        }
      >
    >


  export type EventOrganizerUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    tasks?: boolean | EventOrganizerUser$tasksArgs<ExtArgs>
    guests?: boolean | EventOrganizerUser$guestsArgs<ExtArgs>
    venues?: boolean | EventOrganizerUser$venuesArgs<ExtArgs>
    serviceProviders?: boolean | EventOrganizerUser$serviceProvidersArgs<ExtArgs>
    _count?: boolean | EventOrganizerUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerUser"]>

  export type EventOrganizerUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["eventOrganizerUser"]>

  export type EventOrganizerUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["eventOrganizerUser"]>

  export type EventOrganizerUserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type EventOrganizerUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "createdAt", ExtArgs["result"]["eventOrganizerUser"]>
  export type EventOrganizerUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | EventOrganizerUser$tasksArgs<ExtArgs>
    guests?: boolean | EventOrganizerUser$guestsArgs<ExtArgs>
    venues?: boolean | EventOrganizerUser$venuesArgs<ExtArgs>
    serviceProviders?: boolean | EventOrganizerUser$serviceProvidersArgs<ExtArgs>
    _count?: boolean | EventOrganizerUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventOrganizerUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EventOrganizerUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventOrganizerUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventOrganizerUser"
    objects: {
      tasks: Prisma.$EventOrganizerTaskPayload<ExtArgs>[]
      guests: Prisma.$EventOrganizerGuestPayload<ExtArgs>[]
      venues: Prisma.$EventOrganizerVenuePayload<ExtArgs>[]
      serviceProviders: Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["eventOrganizerUser"]>
    composites: {}
  }

  type EventOrganizerUserGetPayload<S extends boolean | null | undefined | EventOrganizerUserDefaultArgs> = $Result.GetResult<Prisma.$EventOrganizerUserPayload, S>

  type EventOrganizerUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventOrganizerUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventOrganizerUserCountAggregateInputType | true
    }

  export interface EventOrganizerUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventOrganizerUser'], meta: { name: 'EventOrganizerUser' } }
    /**
     * Find zero or one EventOrganizerUser that matches the filter.
     * @param {EventOrganizerUserFindUniqueArgs} args - Arguments to find a EventOrganizerUser
     * @example
     * // Get one EventOrganizerUser
     * const eventOrganizerUser = await prisma.eventOrganizerUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventOrganizerUserFindUniqueArgs>(args: SelectSubset<T, EventOrganizerUserFindUniqueArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventOrganizerUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventOrganizerUserFindUniqueOrThrowArgs} args - Arguments to find a EventOrganizerUser
     * @example
     * // Get one EventOrganizerUser
     * const eventOrganizerUser = await prisma.eventOrganizerUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventOrganizerUserFindUniqueOrThrowArgs>(args: SelectSubset<T, EventOrganizerUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUserFindFirstArgs} args - Arguments to find a EventOrganizerUser
     * @example
     * // Get one EventOrganizerUser
     * const eventOrganizerUser = await prisma.eventOrganizerUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventOrganizerUserFindFirstArgs>(args?: SelectSubset<T, EventOrganizerUserFindFirstArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUserFindFirstOrThrowArgs} args - Arguments to find a EventOrganizerUser
     * @example
     * // Get one EventOrganizerUser
     * const eventOrganizerUser = await prisma.eventOrganizerUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventOrganizerUserFindFirstOrThrowArgs>(args?: SelectSubset<T, EventOrganizerUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventOrganizerUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventOrganizerUsers
     * const eventOrganizerUsers = await prisma.eventOrganizerUser.findMany()
     * 
     * // Get first 10 EventOrganizerUsers
     * const eventOrganizerUsers = await prisma.eventOrganizerUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventOrganizerUserWithIdOnly = await prisma.eventOrganizerUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventOrganizerUserFindManyArgs>(args?: SelectSubset<T, EventOrganizerUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventOrganizerUser.
     * @param {EventOrganizerUserCreateArgs} args - Arguments to create a EventOrganizerUser.
     * @example
     * // Create one EventOrganizerUser
     * const EventOrganizerUser = await prisma.eventOrganizerUser.create({
     *   data: {
     *     // ... data to create a EventOrganizerUser
     *   }
     * })
     * 
     */
    create<T extends EventOrganizerUserCreateArgs>(args: SelectSubset<T, EventOrganizerUserCreateArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventOrganizerUsers.
     * @param {EventOrganizerUserCreateManyArgs} args - Arguments to create many EventOrganizerUsers.
     * @example
     * // Create many EventOrganizerUsers
     * const eventOrganizerUser = await prisma.eventOrganizerUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventOrganizerUserCreateManyArgs>(args?: SelectSubset<T, EventOrganizerUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventOrganizerUsers and returns the data saved in the database.
     * @param {EventOrganizerUserCreateManyAndReturnArgs} args - Arguments to create many EventOrganizerUsers.
     * @example
     * // Create many EventOrganizerUsers
     * const eventOrganizerUser = await prisma.eventOrganizerUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventOrganizerUsers and only return the `id`
     * const eventOrganizerUserWithIdOnly = await prisma.eventOrganizerUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventOrganizerUserCreateManyAndReturnArgs>(args?: SelectSubset<T, EventOrganizerUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventOrganizerUser.
     * @param {EventOrganizerUserDeleteArgs} args - Arguments to delete one EventOrganizerUser.
     * @example
     * // Delete one EventOrganizerUser
     * const EventOrganizerUser = await prisma.eventOrganizerUser.delete({
     *   where: {
     *     // ... filter to delete one EventOrganizerUser
     *   }
     * })
     * 
     */
    delete<T extends EventOrganizerUserDeleteArgs>(args: SelectSubset<T, EventOrganizerUserDeleteArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventOrganizerUser.
     * @param {EventOrganizerUserUpdateArgs} args - Arguments to update one EventOrganizerUser.
     * @example
     * // Update one EventOrganizerUser
     * const eventOrganizerUser = await prisma.eventOrganizerUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventOrganizerUserUpdateArgs>(args: SelectSubset<T, EventOrganizerUserUpdateArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventOrganizerUsers.
     * @param {EventOrganizerUserDeleteManyArgs} args - Arguments to filter EventOrganizerUsers to delete.
     * @example
     * // Delete a few EventOrganizerUsers
     * const { count } = await prisma.eventOrganizerUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventOrganizerUserDeleteManyArgs>(args?: SelectSubset<T, EventOrganizerUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventOrganizerUsers
     * const eventOrganizerUser = await prisma.eventOrganizerUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventOrganizerUserUpdateManyArgs>(args: SelectSubset<T, EventOrganizerUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerUsers and returns the data updated in the database.
     * @param {EventOrganizerUserUpdateManyAndReturnArgs} args - Arguments to update many EventOrganizerUsers.
     * @example
     * // Update many EventOrganizerUsers
     * const eventOrganizerUser = await prisma.eventOrganizerUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventOrganizerUsers and only return the `id`
     * const eventOrganizerUserWithIdOnly = await prisma.eventOrganizerUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventOrganizerUserUpdateManyAndReturnArgs>(args: SelectSubset<T, EventOrganizerUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventOrganizerUser.
     * @param {EventOrganizerUserUpsertArgs} args - Arguments to update or create a EventOrganizerUser.
     * @example
     * // Update or create a EventOrganizerUser
     * const eventOrganizerUser = await prisma.eventOrganizerUser.upsert({
     *   create: {
     *     // ... data to create a EventOrganizerUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventOrganizerUser we want to update
     *   }
     * })
     */
    upsert<T extends EventOrganizerUserUpsertArgs>(args: SelectSubset<T, EventOrganizerUserUpsertArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventOrganizerUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUserCountArgs} args - Arguments to filter EventOrganizerUsers to count.
     * @example
     * // Count the number of EventOrganizerUsers
     * const count = await prisma.eventOrganizerUser.count({
     *   where: {
     *     // ... the filter for the EventOrganizerUsers we want to count
     *   }
     * })
    **/
    count<T extends EventOrganizerUserCountArgs>(
      args?: Subset<T, EventOrganizerUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventOrganizerUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventOrganizerUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventOrganizerUserAggregateArgs>(args: Subset<T, EventOrganizerUserAggregateArgs>): Prisma.PrismaPromise<GetEventOrganizerUserAggregateType<T>>

    /**
     * Group by EventOrganizerUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventOrganizerUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventOrganizerUserGroupByArgs['orderBy'] }
        : { orderBy?: EventOrganizerUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventOrganizerUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventOrganizerUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventOrganizerUser model
   */
  readonly fields: EventOrganizerUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventOrganizerUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventOrganizerUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tasks<T extends EventOrganizerUser$tasksArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUser$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    guests<T extends EventOrganizerUser$guestsArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUser$guestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    venues<T extends EventOrganizerUser$venuesArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUser$venuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    serviceProviders<T extends EventOrganizerUser$serviceProvidersArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUser$serviceProvidersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventOrganizerUser model
   */ 
  interface EventOrganizerUserFieldRefs {
    readonly id: FieldRef<"EventOrganizerUser", 'String'>
    readonly email: FieldRef<"EventOrganizerUser", 'String'>
    readonly name: FieldRef<"EventOrganizerUser", 'String'>
    readonly password: FieldRef<"EventOrganizerUser", 'String'>
    readonly createdAt: FieldRef<"EventOrganizerUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventOrganizerUser findUnique
   */
  export type EventOrganizerUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerUser to fetch.
     */
    where: EventOrganizerUserWhereUniqueInput
  }

  /**
   * EventOrganizerUser findUniqueOrThrow
   */
  export type EventOrganizerUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerUser to fetch.
     */
    where: EventOrganizerUserWhereUniqueInput
  }

  /**
   * EventOrganizerUser findFirst
   */
  export type EventOrganizerUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerUser to fetch.
     */
    where?: EventOrganizerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerUsers to fetch.
     */
    orderBy?: EventOrganizerUserOrderByWithRelationInput | EventOrganizerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerUsers.
     */
    cursor?: EventOrganizerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerUsers.
     */
    distinct?: EventOrganizerUserScalarFieldEnum | EventOrganizerUserScalarFieldEnum[]
  }

  /**
   * EventOrganizerUser findFirstOrThrow
   */
  export type EventOrganizerUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerUser to fetch.
     */
    where?: EventOrganizerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerUsers to fetch.
     */
    orderBy?: EventOrganizerUserOrderByWithRelationInput | EventOrganizerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerUsers.
     */
    cursor?: EventOrganizerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerUsers.
     */
    distinct?: EventOrganizerUserScalarFieldEnum | EventOrganizerUserScalarFieldEnum[]
  }

  /**
   * EventOrganizerUser findMany
   */
  export type EventOrganizerUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerUsers to fetch.
     */
    where?: EventOrganizerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerUsers to fetch.
     */
    orderBy?: EventOrganizerUserOrderByWithRelationInput | EventOrganizerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventOrganizerUsers.
     */
    cursor?: EventOrganizerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerUsers.
     */
    skip?: number
    distinct?: EventOrganizerUserScalarFieldEnum | EventOrganizerUserScalarFieldEnum[]
  }

  /**
   * EventOrganizerUser create
   */
  export type EventOrganizerUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * The data needed to create a EventOrganizerUser.
     */
    data: XOR<EventOrganizerUserCreateInput, EventOrganizerUserUncheckedCreateInput>
  }

  /**
   * EventOrganizerUser createMany
   */
  export type EventOrganizerUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventOrganizerUsers.
     */
    data: EventOrganizerUserCreateManyInput | EventOrganizerUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizerUser createManyAndReturn
   */
  export type EventOrganizerUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * The data used to create many EventOrganizerUsers.
     */
    data: EventOrganizerUserCreateManyInput | EventOrganizerUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizerUser update
   */
  export type EventOrganizerUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * The data needed to update a EventOrganizerUser.
     */
    data: XOR<EventOrganizerUserUpdateInput, EventOrganizerUserUncheckedUpdateInput>
    /**
     * Choose, which EventOrganizerUser to update.
     */
    where: EventOrganizerUserWhereUniqueInput
  }

  /**
   * EventOrganizerUser updateMany
   */
  export type EventOrganizerUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventOrganizerUsers.
     */
    data: XOR<EventOrganizerUserUpdateManyMutationInput, EventOrganizerUserUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerUsers to update
     */
    where?: EventOrganizerUserWhereInput
    /**
     * Limit how many EventOrganizerUsers to update.
     */
    limit?: number
  }

  /**
   * EventOrganizerUser updateManyAndReturn
   */
  export type EventOrganizerUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * The data used to update EventOrganizerUsers.
     */
    data: XOR<EventOrganizerUserUpdateManyMutationInput, EventOrganizerUserUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerUsers to update
     */
    where?: EventOrganizerUserWhereInput
    /**
     * Limit how many EventOrganizerUsers to update.
     */
    limit?: number
  }

  /**
   * EventOrganizerUser upsert
   */
  export type EventOrganizerUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * The filter to search for the EventOrganizerUser to update in case it exists.
     */
    where: EventOrganizerUserWhereUniqueInput
    /**
     * In case the EventOrganizerUser found by the `where` argument doesn't exist, create a new EventOrganizerUser with this data.
     */
    create: XOR<EventOrganizerUserCreateInput, EventOrganizerUserUncheckedCreateInput>
    /**
     * In case the EventOrganizerUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventOrganizerUserUpdateInput, EventOrganizerUserUncheckedUpdateInput>
  }

  /**
   * EventOrganizerUser delete
   */
  export type EventOrganizerUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
    /**
     * Filter which EventOrganizerUser to delete.
     */
    where: EventOrganizerUserWhereUniqueInput
  }

  /**
   * EventOrganizerUser deleteMany
   */
  export type EventOrganizerUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerUsers to delete
     */
    where?: EventOrganizerUserWhereInput
    /**
     * Limit how many EventOrganizerUsers to delete.
     */
    limit?: number
  }

  /**
   * EventOrganizerUser.tasks
   */
  export type EventOrganizerUser$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    where?: EventOrganizerTaskWhereInput
    orderBy?: EventOrganizerTaskOrderByWithRelationInput | EventOrganizerTaskOrderByWithRelationInput[]
    cursor?: EventOrganizerTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventOrganizerTaskScalarFieldEnum | EventOrganizerTaskScalarFieldEnum[]
  }

  /**
   * EventOrganizerUser.guests
   */
  export type EventOrganizerUser$guestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    where?: EventOrganizerGuestWhereInput
    orderBy?: EventOrganizerGuestOrderByWithRelationInput | EventOrganizerGuestOrderByWithRelationInput[]
    cursor?: EventOrganizerGuestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventOrganizerGuestScalarFieldEnum | EventOrganizerGuestScalarFieldEnum[]
  }

  /**
   * EventOrganizerUser.venues
   */
  export type EventOrganizerUser$venuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    where?: EventOrganizerVenueWhereInput
    orderBy?: EventOrganizerVenueOrderByWithRelationInput | EventOrganizerVenueOrderByWithRelationInput[]
    cursor?: EventOrganizerVenueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventOrganizerVenueScalarFieldEnum | EventOrganizerVenueScalarFieldEnum[]
  }

  /**
   * EventOrganizerUser.serviceProviders
   */
  export type EventOrganizerUser$serviceProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    where?: EventOrganizerServiceProviderWhereInput
    orderBy?: EventOrganizerServiceProviderOrderByWithRelationInput | EventOrganizerServiceProviderOrderByWithRelationInput[]
    cursor?: EventOrganizerServiceProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventOrganizerServiceProviderScalarFieldEnum | EventOrganizerServiceProviderScalarFieldEnum[]
  }

  /**
   * EventOrganizerUser without action
   */
  export type EventOrganizerUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerUser
     */
    select?: EventOrganizerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerUser
     */
    omit?: EventOrganizerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerUserInclude<ExtArgs> | null
  }


  /**
   * Model EventOrganizerTask
   */

  export type AggregateEventOrganizerTask = {
    _count: EventOrganizerTaskCountAggregateOutputType | null
    _min: EventOrganizerTaskMinAggregateOutputType | null
    _max: EventOrganizerTaskMaxAggregateOutputType | null
  }

  export type EventOrganizerTaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    status: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type EventOrganizerTaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    status: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type EventOrganizerTaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    dueDate: number
    status: number
    userId: number
    createdAt: number
    _all: number
  }


  export type EventOrganizerTaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    status?: true
    userId?: true
    createdAt?: true
  }

  export type EventOrganizerTaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    status?: true
    userId?: true
    createdAt?: true
  }

  export type EventOrganizerTaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    dueDate?: true
    status?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type EventOrganizerTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerTask to aggregate.
     */
    where?: EventOrganizerTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerTasks to fetch.
     */
    orderBy?: EventOrganizerTaskOrderByWithRelationInput | EventOrganizerTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventOrganizerTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventOrganizerTasks
    **/
    _count?: true | EventOrganizerTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventOrganizerTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventOrganizerTaskMaxAggregateInputType
  }

  export type GetEventOrganizerTaskAggregateType<T extends EventOrganizerTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateEventOrganizerTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventOrganizerTask[P]>
      : GetScalarType<T[P], AggregateEventOrganizerTask[P]>
  }




  export type EventOrganizerTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerTaskWhereInput
    orderBy?: EventOrganizerTaskOrderByWithAggregationInput | EventOrganizerTaskOrderByWithAggregationInput[]
    by: EventOrganizerTaskScalarFieldEnum[] | EventOrganizerTaskScalarFieldEnum
    having?: EventOrganizerTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventOrganizerTaskCountAggregateInputType | true
    _min?: EventOrganizerTaskMinAggregateInputType
    _max?: EventOrganizerTaskMaxAggregateInputType
  }

  export type EventOrganizerTaskGroupByOutputType = {
    id: string
    title: string
    description: string
    dueDate: Date
    status: string
    userId: string
    createdAt: Date
    _count: EventOrganizerTaskCountAggregateOutputType | null
    _min: EventOrganizerTaskMinAggregateOutputType | null
    _max: EventOrganizerTaskMaxAggregateOutputType | null
  }

  type GetEventOrganizerTaskGroupByPayload<T extends EventOrganizerTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventOrganizerTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventOrganizerTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventOrganizerTaskGroupByOutputType[P]>
            : GetScalarType<T[P], EventOrganizerTaskGroupByOutputType[P]>
        }
      >
    >


  export type EventOrganizerTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerTask"]>

  export type EventOrganizerTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerTask"]>

  export type EventOrganizerTaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerTask"]>

  export type EventOrganizerTaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type EventOrganizerTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "dueDate" | "status" | "userId" | "createdAt", ExtArgs["result"]["eventOrganizerTask"]>
  export type EventOrganizerTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerTaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }

  export type $EventOrganizerTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventOrganizerTask"
    objects: {
      user: Prisma.$EventOrganizerUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      dueDate: Date
      status: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["eventOrganizerTask"]>
    composites: {}
  }

  type EventOrganizerTaskGetPayload<S extends boolean | null | undefined | EventOrganizerTaskDefaultArgs> = $Result.GetResult<Prisma.$EventOrganizerTaskPayload, S>

  type EventOrganizerTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventOrganizerTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventOrganizerTaskCountAggregateInputType | true
    }

  export interface EventOrganizerTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventOrganizerTask'], meta: { name: 'EventOrganizerTask' } }
    /**
     * Find zero or one EventOrganizerTask that matches the filter.
     * @param {EventOrganizerTaskFindUniqueArgs} args - Arguments to find a EventOrganizerTask
     * @example
     * // Get one EventOrganizerTask
     * const eventOrganizerTask = await prisma.eventOrganizerTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventOrganizerTaskFindUniqueArgs>(args: SelectSubset<T, EventOrganizerTaskFindUniqueArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventOrganizerTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventOrganizerTaskFindUniqueOrThrowArgs} args - Arguments to find a EventOrganizerTask
     * @example
     * // Get one EventOrganizerTask
     * const eventOrganizerTask = await prisma.eventOrganizerTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventOrganizerTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, EventOrganizerTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerTaskFindFirstArgs} args - Arguments to find a EventOrganizerTask
     * @example
     * // Get one EventOrganizerTask
     * const eventOrganizerTask = await prisma.eventOrganizerTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventOrganizerTaskFindFirstArgs>(args?: SelectSubset<T, EventOrganizerTaskFindFirstArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerTaskFindFirstOrThrowArgs} args - Arguments to find a EventOrganizerTask
     * @example
     * // Get one EventOrganizerTask
     * const eventOrganizerTask = await prisma.eventOrganizerTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventOrganizerTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, EventOrganizerTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventOrganizerTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventOrganizerTasks
     * const eventOrganizerTasks = await prisma.eventOrganizerTask.findMany()
     * 
     * // Get first 10 EventOrganizerTasks
     * const eventOrganizerTasks = await prisma.eventOrganizerTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventOrganizerTaskWithIdOnly = await prisma.eventOrganizerTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventOrganizerTaskFindManyArgs>(args?: SelectSubset<T, EventOrganizerTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventOrganizerTask.
     * @param {EventOrganizerTaskCreateArgs} args - Arguments to create a EventOrganizerTask.
     * @example
     * // Create one EventOrganizerTask
     * const EventOrganizerTask = await prisma.eventOrganizerTask.create({
     *   data: {
     *     // ... data to create a EventOrganizerTask
     *   }
     * })
     * 
     */
    create<T extends EventOrganizerTaskCreateArgs>(args: SelectSubset<T, EventOrganizerTaskCreateArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventOrganizerTasks.
     * @param {EventOrganizerTaskCreateManyArgs} args - Arguments to create many EventOrganizerTasks.
     * @example
     * // Create many EventOrganizerTasks
     * const eventOrganizerTask = await prisma.eventOrganizerTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventOrganizerTaskCreateManyArgs>(args?: SelectSubset<T, EventOrganizerTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventOrganizerTasks and returns the data saved in the database.
     * @param {EventOrganizerTaskCreateManyAndReturnArgs} args - Arguments to create many EventOrganizerTasks.
     * @example
     * // Create many EventOrganizerTasks
     * const eventOrganizerTask = await prisma.eventOrganizerTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventOrganizerTasks and only return the `id`
     * const eventOrganizerTaskWithIdOnly = await prisma.eventOrganizerTask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventOrganizerTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, EventOrganizerTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventOrganizerTask.
     * @param {EventOrganizerTaskDeleteArgs} args - Arguments to delete one EventOrganizerTask.
     * @example
     * // Delete one EventOrganizerTask
     * const EventOrganizerTask = await prisma.eventOrganizerTask.delete({
     *   where: {
     *     // ... filter to delete one EventOrganizerTask
     *   }
     * })
     * 
     */
    delete<T extends EventOrganizerTaskDeleteArgs>(args: SelectSubset<T, EventOrganizerTaskDeleteArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventOrganizerTask.
     * @param {EventOrganizerTaskUpdateArgs} args - Arguments to update one EventOrganizerTask.
     * @example
     * // Update one EventOrganizerTask
     * const eventOrganizerTask = await prisma.eventOrganizerTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventOrganizerTaskUpdateArgs>(args: SelectSubset<T, EventOrganizerTaskUpdateArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventOrganizerTasks.
     * @param {EventOrganizerTaskDeleteManyArgs} args - Arguments to filter EventOrganizerTasks to delete.
     * @example
     * // Delete a few EventOrganizerTasks
     * const { count } = await prisma.eventOrganizerTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventOrganizerTaskDeleteManyArgs>(args?: SelectSubset<T, EventOrganizerTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventOrganizerTasks
     * const eventOrganizerTask = await prisma.eventOrganizerTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventOrganizerTaskUpdateManyArgs>(args: SelectSubset<T, EventOrganizerTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerTasks and returns the data updated in the database.
     * @param {EventOrganizerTaskUpdateManyAndReturnArgs} args - Arguments to update many EventOrganizerTasks.
     * @example
     * // Update many EventOrganizerTasks
     * const eventOrganizerTask = await prisma.eventOrganizerTask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventOrganizerTasks and only return the `id`
     * const eventOrganizerTaskWithIdOnly = await prisma.eventOrganizerTask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventOrganizerTaskUpdateManyAndReturnArgs>(args: SelectSubset<T, EventOrganizerTaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventOrganizerTask.
     * @param {EventOrganizerTaskUpsertArgs} args - Arguments to update or create a EventOrganizerTask.
     * @example
     * // Update or create a EventOrganizerTask
     * const eventOrganizerTask = await prisma.eventOrganizerTask.upsert({
     *   create: {
     *     // ... data to create a EventOrganizerTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventOrganizerTask we want to update
     *   }
     * })
     */
    upsert<T extends EventOrganizerTaskUpsertArgs>(args: SelectSubset<T, EventOrganizerTaskUpsertArgs<ExtArgs>>): Prisma__EventOrganizerTaskClient<$Result.GetResult<Prisma.$EventOrganizerTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventOrganizerTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerTaskCountArgs} args - Arguments to filter EventOrganizerTasks to count.
     * @example
     * // Count the number of EventOrganizerTasks
     * const count = await prisma.eventOrganizerTask.count({
     *   where: {
     *     // ... the filter for the EventOrganizerTasks we want to count
     *   }
     * })
    **/
    count<T extends EventOrganizerTaskCountArgs>(
      args?: Subset<T, EventOrganizerTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventOrganizerTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventOrganizerTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventOrganizerTaskAggregateArgs>(args: Subset<T, EventOrganizerTaskAggregateArgs>): Prisma.PrismaPromise<GetEventOrganizerTaskAggregateType<T>>

    /**
     * Group by EventOrganizerTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventOrganizerTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventOrganizerTaskGroupByArgs['orderBy'] }
        : { orderBy?: EventOrganizerTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventOrganizerTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventOrganizerTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventOrganizerTask model
   */
  readonly fields: EventOrganizerTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventOrganizerTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventOrganizerTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends EventOrganizerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUserDefaultArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventOrganizerTask model
   */ 
  interface EventOrganizerTaskFieldRefs {
    readonly id: FieldRef<"EventOrganizerTask", 'String'>
    readonly title: FieldRef<"EventOrganizerTask", 'String'>
    readonly description: FieldRef<"EventOrganizerTask", 'String'>
    readonly dueDate: FieldRef<"EventOrganizerTask", 'DateTime'>
    readonly status: FieldRef<"EventOrganizerTask", 'String'>
    readonly userId: FieldRef<"EventOrganizerTask", 'String'>
    readonly createdAt: FieldRef<"EventOrganizerTask", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventOrganizerTask findUnique
   */
  export type EventOrganizerTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerTask to fetch.
     */
    where: EventOrganizerTaskWhereUniqueInput
  }

  /**
   * EventOrganizerTask findUniqueOrThrow
   */
  export type EventOrganizerTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerTask to fetch.
     */
    where: EventOrganizerTaskWhereUniqueInput
  }

  /**
   * EventOrganizerTask findFirst
   */
  export type EventOrganizerTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerTask to fetch.
     */
    where?: EventOrganizerTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerTasks to fetch.
     */
    orderBy?: EventOrganizerTaskOrderByWithRelationInput | EventOrganizerTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerTasks.
     */
    cursor?: EventOrganizerTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerTasks.
     */
    distinct?: EventOrganizerTaskScalarFieldEnum | EventOrganizerTaskScalarFieldEnum[]
  }

  /**
   * EventOrganizerTask findFirstOrThrow
   */
  export type EventOrganizerTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerTask to fetch.
     */
    where?: EventOrganizerTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerTasks to fetch.
     */
    orderBy?: EventOrganizerTaskOrderByWithRelationInput | EventOrganizerTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerTasks.
     */
    cursor?: EventOrganizerTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerTasks.
     */
    distinct?: EventOrganizerTaskScalarFieldEnum | EventOrganizerTaskScalarFieldEnum[]
  }

  /**
   * EventOrganizerTask findMany
   */
  export type EventOrganizerTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerTasks to fetch.
     */
    where?: EventOrganizerTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerTasks to fetch.
     */
    orderBy?: EventOrganizerTaskOrderByWithRelationInput | EventOrganizerTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventOrganizerTasks.
     */
    cursor?: EventOrganizerTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerTasks.
     */
    skip?: number
    distinct?: EventOrganizerTaskScalarFieldEnum | EventOrganizerTaskScalarFieldEnum[]
  }

  /**
   * EventOrganizerTask create
   */
  export type EventOrganizerTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a EventOrganizerTask.
     */
    data: XOR<EventOrganizerTaskCreateInput, EventOrganizerTaskUncheckedCreateInput>
  }

  /**
   * EventOrganizerTask createMany
   */
  export type EventOrganizerTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventOrganizerTasks.
     */
    data: EventOrganizerTaskCreateManyInput | EventOrganizerTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizerTask createManyAndReturn
   */
  export type EventOrganizerTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * The data used to create many EventOrganizerTasks.
     */
    data: EventOrganizerTaskCreateManyInput | EventOrganizerTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerTask update
   */
  export type EventOrganizerTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a EventOrganizerTask.
     */
    data: XOR<EventOrganizerTaskUpdateInput, EventOrganizerTaskUncheckedUpdateInput>
    /**
     * Choose, which EventOrganizerTask to update.
     */
    where: EventOrganizerTaskWhereUniqueInput
  }

  /**
   * EventOrganizerTask updateMany
   */
  export type EventOrganizerTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventOrganizerTasks.
     */
    data: XOR<EventOrganizerTaskUpdateManyMutationInput, EventOrganizerTaskUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerTasks to update
     */
    where?: EventOrganizerTaskWhereInput
    /**
     * Limit how many EventOrganizerTasks to update.
     */
    limit?: number
  }

  /**
   * EventOrganizerTask updateManyAndReturn
   */
  export type EventOrganizerTaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * The data used to update EventOrganizerTasks.
     */
    data: XOR<EventOrganizerTaskUpdateManyMutationInput, EventOrganizerTaskUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerTasks to update
     */
    where?: EventOrganizerTaskWhereInput
    /**
     * Limit how many EventOrganizerTasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerTask upsert
   */
  export type EventOrganizerTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the EventOrganizerTask to update in case it exists.
     */
    where: EventOrganizerTaskWhereUniqueInput
    /**
     * In case the EventOrganizerTask found by the `where` argument doesn't exist, create a new EventOrganizerTask with this data.
     */
    create: XOR<EventOrganizerTaskCreateInput, EventOrganizerTaskUncheckedCreateInput>
    /**
     * In case the EventOrganizerTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventOrganizerTaskUpdateInput, EventOrganizerTaskUncheckedUpdateInput>
  }

  /**
   * EventOrganizerTask delete
   */
  export type EventOrganizerTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
    /**
     * Filter which EventOrganizerTask to delete.
     */
    where: EventOrganizerTaskWhereUniqueInput
  }

  /**
   * EventOrganizerTask deleteMany
   */
  export type EventOrganizerTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerTasks to delete
     */
    where?: EventOrganizerTaskWhereInput
    /**
     * Limit how many EventOrganizerTasks to delete.
     */
    limit?: number
  }

  /**
   * EventOrganizerTask without action
   */
  export type EventOrganizerTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerTask
     */
    select?: EventOrganizerTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerTask
     */
    omit?: EventOrganizerTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerTaskInclude<ExtArgs> | null
  }


  /**
   * Model EventOrganizerGuest
   */

  export type AggregateEventOrganizerGuest = {
    _count: EventOrganizerGuestCountAggregateOutputType | null
    _min: EventOrganizerGuestMinAggregateOutputType | null
    _max: EventOrganizerGuestMaxAggregateOutputType | null
  }

  export type EventOrganizerGuestMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    name: string | null
    email: string | null
    phone: string | null
    status: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type EventOrganizerGuestMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    name: string | null
    email: string | null
    phone: string | null
    status: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type EventOrganizerGuestCountAggregateOutputType = {
    id: number
    eventId: number
    name: number
    email: number
    phone: number
    status: number
    userId: number
    createdAt: number
    _all: number
  }


  export type EventOrganizerGuestMinAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    email?: true
    phone?: true
    status?: true
    userId?: true
    createdAt?: true
  }

  export type EventOrganizerGuestMaxAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    email?: true
    phone?: true
    status?: true
    userId?: true
    createdAt?: true
  }

  export type EventOrganizerGuestCountAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    email?: true
    phone?: true
    status?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type EventOrganizerGuestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerGuest to aggregate.
     */
    where?: EventOrganizerGuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerGuests to fetch.
     */
    orderBy?: EventOrganizerGuestOrderByWithRelationInput | EventOrganizerGuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventOrganizerGuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerGuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerGuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventOrganizerGuests
    **/
    _count?: true | EventOrganizerGuestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventOrganizerGuestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventOrganizerGuestMaxAggregateInputType
  }

  export type GetEventOrganizerGuestAggregateType<T extends EventOrganizerGuestAggregateArgs> = {
        [P in keyof T & keyof AggregateEventOrganizerGuest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventOrganizerGuest[P]>
      : GetScalarType<T[P], AggregateEventOrganizerGuest[P]>
  }




  export type EventOrganizerGuestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerGuestWhereInput
    orderBy?: EventOrganizerGuestOrderByWithAggregationInput | EventOrganizerGuestOrderByWithAggregationInput[]
    by: EventOrganizerGuestScalarFieldEnum[] | EventOrganizerGuestScalarFieldEnum
    having?: EventOrganizerGuestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventOrganizerGuestCountAggregateInputType | true
    _min?: EventOrganizerGuestMinAggregateInputType
    _max?: EventOrganizerGuestMaxAggregateInputType
  }

  export type EventOrganizerGuestGroupByOutputType = {
    id: string
    eventId: string
    name: string
    email: string
    phone: string
    status: string
    userId: string
    createdAt: Date
    _count: EventOrganizerGuestCountAggregateOutputType | null
    _min: EventOrganizerGuestMinAggregateOutputType | null
    _max: EventOrganizerGuestMaxAggregateOutputType | null
  }

  type GetEventOrganizerGuestGroupByPayload<T extends EventOrganizerGuestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventOrganizerGuestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventOrganizerGuestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventOrganizerGuestGroupByOutputType[P]>
            : GetScalarType<T[P], EventOrganizerGuestGroupByOutputType[P]>
        }
      >
    >


  export type EventOrganizerGuestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerGuest"]>

  export type EventOrganizerGuestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerGuest"]>

  export type EventOrganizerGuestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerGuest"]>

  export type EventOrganizerGuestSelectScalar = {
    id?: boolean
    eventId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type EventOrganizerGuestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "name" | "email" | "phone" | "status" | "userId" | "createdAt", ExtArgs["result"]["eventOrganizerGuest"]>
  export type EventOrganizerGuestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerGuestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerGuestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }

  export type $EventOrganizerGuestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventOrganizerGuest"
    objects: {
      user: Prisma.$EventOrganizerUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      name: string
      email: string
      phone: string
      status: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["eventOrganizerGuest"]>
    composites: {}
  }

  type EventOrganizerGuestGetPayload<S extends boolean | null | undefined | EventOrganizerGuestDefaultArgs> = $Result.GetResult<Prisma.$EventOrganizerGuestPayload, S>

  type EventOrganizerGuestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventOrganizerGuestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventOrganizerGuestCountAggregateInputType | true
    }

  export interface EventOrganizerGuestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventOrganizerGuest'], meta: { name: 'EventOrganizerGuest' } }
    /**
     * Find zero or one EventOrganizerGuest that matches the filter.
     * @param {EventOrganizerGuestFindUniqueArgs} args - Arguments to find a EventOrganizerGuest
     * @example
     * // Get one EventOrganizerGuest
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventOrganizerGuestFindUniqueArgs>(args: SelectSubset<T, EventOrganizerGuestFindUniqueArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventOrganizerGuest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventOrganizerGuestFindUniqueOrThrowArgs} args - Arguments to find a EventOrganizerGuest
     * @example
     * // Get one EventOrganizerGuest
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventOrganizerGuestFindUniqueOrThrowArgs>(args: SelectSubset<T, EventOrganizerGuestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerGuest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGuestFindFirstArgs} args - Arguments to find a EventOrganizerGuest
     * @example
     * // Get one EventOrganizerGuest
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventOrganizerGuestFindFirstArgs>(args?: SelectSubset<T, EventOrganizerGuestFindFirstArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerGuest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGuestFindFirstOrThrowArgs} args - Arguments to find a EventOrganizerGuest
     * @example
     * // Get one EventOrganizerGuest
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventOrganizerGuestFindFirstOrThrowArgs>(args?: SelectSubset<T, EventOrganizerGuestFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventOrganizerGuests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGuestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventOrganizerGuests
     * const eventOrganizerGuests = await prisma.eventOrganizerGuest.findMany()
     * 
     * // Get first 10 EventOrganizerGuests
     * const eventOrganizerGuests = await prisma.eventOrganizerGuest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventOrganizerGuestWithIdOnly = await prisma.eventOrganizerGuest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventOrganizerGuestFindManyArgs>(args?: SelectSubset<T, EventOrganizerGuestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventOrganizerGuest.
     * @param {EventOrganizerGuestCreateArgs} args - Arguments to create a EventOrganizerGuest.
     * @example
     * // Create one EventOrganizerGuest
     * const EventOrganizerGuest = await prisma.eventOrganizerGuest.create({
     *   data: {
     *     // ... data to create a EventOrganizerGuest
     *   }
     * })
     * 
     */
    create<T extends EventOrganizerGuestCreateArgs>(args: SelectSubset<T, EventOrganizerGuestCreateArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventOrganizerGuests.
     * @param {EventOrganizerGuestCreateManyArgs} args - Arguments to create many EventOrganizerGuests.
     * @example
     * // Create many EventOrganizerGuests
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventOrganizerGuestCreateManyArgs>(args?: SelectSubset<T, EventOrganizerGuestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventOrganizerGuests and returns the data saved in the database.
     * @param {EventOrganizerGuestCreateManyAndReturnArgs} args - Arguments to create many EventOrganizerGuests.
     * @example
     * // Create many EventOrganizerGuests
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventOrganizerGuests and only return the `id`
     * const eventOrganizerGuestWithIdOnly = await prisma.eventOrganizerGuest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventOrganizerGuestCreateManyAndReturnArgs>(args?: SelectSubset<T, EventOrganizerGuestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventOrganizerGuest.
     * @param {EventOrganizerGuestDeleteArgs} args - Arguments to delete one EventOrganizerGuest.
     * @example
     * // Delete one EventOrganizerGuest
     * const EventOrganizerGuest = await prisma.eventOrganizerGuest.delete({
     *   where: {
     *     // ... filter to delete one EventOrganizerGuest
     *   }
     * })
     * 
     */
    delete<T extends EventOrganizerGuestDeleteArgs>(args: SelectSubset<T, EventOrganizerGuestDeleteArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventOrganizerGuest.
     * @param {EventOrganizerGuestUpdateArgs} args - Arguments to update one EventOrganizerGuest.
     * @example
     * // Update one EventOrganizerGuest
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventOrganizerGuestUpdateArgs>(args: SelectSubset<T, EventOrganizerGuestUpdateArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventOrganizerGuests.
     * @param {EventOrganizerGuestDeleteManyArgs} args - Arguments to filter EventOrganizerGuests to delete.
     * @example
     * // Delete a few EventOrganizerGuests
     * const { count } = await prisma.eventOrganizerGuest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventOrganizerGuestDeleteManyArgs>(args?: SelectSubset<T, EventOrganizerGuestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerGuests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGuestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventOrganizerGuests
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventOrganizerGuestUpdateManyArgs>(args: SelectSubset<T, EventOrganizerGuestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerGuests and returns the data updated in the database.
     * @param {EventOrganizerGuestUpdateManyAndReturnArgs} args - Arguments to update many EventOrganizerGuests.
     * @example
     * // Update many EventOrganizerGuests
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventOrganizerGuests and only return the `id`
     * const eventOrganizerGuestWithIdOnly = await prisma.eventOrganizerGuest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventOrganizerGuestUpdateManyAndReturnArgs>(args: SelectSubset<T, EventOrganizerGuestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventOrganizerGuest.
     * @param {EventOrganizerGuestUpsertArgs} args - Arguments to update or create a EventOrganizerGuest.
     * @example
     * // Update or create a EventOrganizerGuest
     * const eventOrganizerGuest = await prisma.eventOrganizerGuest.upsert({
     *   create: {
     *     // ... data to create a EventOrganizerGuest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventOrganizerGuest we want to update
     *   }
     * })
     */
    upsert<T extends EventOrganizerGuestUpsertArgs>(args: SelectSubset<T, EventOrganizerGuestUpsertArgs<ExtArgs>>): Prisma__EventOrganizerGuestClient<$Result.GetResult<Prisma.$EventOrganizerGuestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventOrganizerGuests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGuestCountArgs} args - Arguments to filter EventOrganizerGuests to count.
     * @example
     * // Count the number of EventOrganizerGuests
     * const count = await prisma.eventOrganizerGuest.count({
     *   where: {
     *     // ... the filter for the EventOrganizerGuests we want to count
     *   }
     * })
    **/
    count<T extends EventOrganizerGuestCountArgs>(
      args?: Subset<T, EventOrganizerGuestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventOrganizerGuestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventOrganizerGuest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGuestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventOrganizerGuestAggregateArgs>(args: Subset<T, EventOrganizerGuestAggregateArgs>): Prisma.PrismaPromise<GetEventOrganizerGuestAggregateType<T>>

    /**
     * Group by EventOrganizerGuest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGuestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventOrganizerGuestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventOrganizerGuestGroupByArgs['orderBy'] }
        : { orderBy?: EventOrganizerGuestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventOrganizerGuestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventOrganizerGuestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventOrganizerGuest model
   */
  readonly fields: EventOrganizerGuestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventOrganizerGuest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventOrganizerGuestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends EventOrganizerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUserDefaultArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventOrganizerGuest model
   */ 
  interface EventOrganizerGuestFieldRefs {
    readonly id: FieldRef<"EventOrganizerGuest", 'String'>
    readonly eventId: FieldRef<"EventOrganizerGuest", 'String'>
    readonly name: FieldRef<"EventOrganizerGuest", 'String'>
    readonly email: FieldRef<"EventOrganizerGuest", 'String'>
    readonly phone: FieldRef<"EventOrganizerGuest", 'String'>
    readonly status: FieldRef<"EventOrganizerGuest", 'String'>
    readonly userId: FieldRef<"EventOrganizerGuest", 'String'>
    readonly createdAt: FieldRef<"EventOrganizerGuest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventOrganizerGuest findUnique
   */
  export type EventOrganizerGuestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerGuest to fetch.
     */
    where: EventOrganizerGuestWhereUniqueInput
  }

  /**
   * EventOrganizerGuest findUniqueOrThrow
   */
  export type EventOrganizerGuestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerGuest to fetch.
     */
    where: EventOrganizerGuestWhereUniqueInput
  }

  /**
   * EventOrganizerGuest findFirst
   */
  export type EventOrganizerGuestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerGuest to fetch.
     */
    where?: EventOrganizerGuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerGuests to fetch.
     */
    orderBy?: EventOrganizerGuestOrderByWithRelationInput | EventOrganizerGuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerGuests.
     */
    cursor?: EventOrganizerGuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerGuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerGuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerGuests.
     */
    distinct?: EventOrganizerGuestScalarFieldEnum | EventOrganizerGuestScalarFieldEnum[]
  }

  /**
   * EventOrganizerGuest findFirstOrThrow
   */
  export type EventOrganizerGuestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerGuest to fetch.
     */
    where?: EventOrganizerGuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerGuests to fetch.
     */
    orderBy?: EventOrganizerGuestOrderByWithRelationInput | EventOrganizerGuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerGuests.
     */
    cursor?: EventOrganizerGuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerGuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerGuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerGuests.
     */
    distinct?: EventOrganizerGuestScalarFieldEnum | EventOrganizerGuestScalarFieldEnum[]
  }

  /**
   * EventOrganizerGuest findMany
   */
  export type EventOrganizerGuestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerGuests to fetch.
     */
    where?: EventOrganizerGuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerGuests to fetch.
     */
    orderBy?: EventOrganizerGuestOrderByWithRelationInput | EventOrganizerGuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventOrganizerGuests.
     */
    cursor?: EventOrganizerGuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerGuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerGuests.
     */
    skip?: number
    distinct?: EventOrganizerGuestScalarFieldEnum | EventOrganizerGuestScalarFieldEnum[]
  }

  /**
   * EventOrganizerGuest create
   */
  export type EventOrganizerGuestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * The data needed to create a EventOrganizerGuest.
     */
    data: XOR<EventOrganizerGuestCreateInput, EventOrganizerGuestUncheckedCreateInput>
  }

  /**
   * EventOrganizerGuest createMany
   */
  export type EventOrganizerGuestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventOrganizerGuests.
     */
    data: EventOrganizerGuestCreateManyInput | EventOrganizerGuestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizerGuest createManyAndReturn
   */
  export type EventOrganizerGuestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * The data used to create many EventOrganizerGuests.
     */
    data: EventOrganizerGuestCreateManyInput | EventOrganizerGuestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerGuest update
   */
  export type EventOrganizerGuestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * The data needed to update a EventOrganizerGuest.
     */
    data: XOR<EventOrganizerGuestUpdateInput, EventOrganizerGuestUncheckedUpdateInput>
    /**
     * Choose, which EventOrganizerGuest to update.
     */
    where: EventOrganizerGuestWhereUniqueInput
  }

  /**
   * EventOrganizerGuest updateMany
   */
  export type EventOrganizerGuestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventOrganizerGuests.
     */
    data: XOR<EventOrganizerGuestUpdateManyMutationInput, EventOrganizerGuestUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerGuests to update
     */
    where?: EventOrganizerGuestWhereInput
    /**
     * Limit how many EventOrganizerGuests to update.
     */
    limit?: number
  }

  /**
   * EventOrganizerGuest updateManyAndReturn
   */
  export type EventOrganizerGuestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * The data used to update EventOrganizerGuests.
     */
    data: XOR<EventOrganizerGuestUpdateManyMutationInput, EventOrganizerGuestUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerGuests to update
     */
    where?: EventOrganizerGuestWhereInput
    /**
     * Limit how many EventOrganizerGuests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerGuest upsert
   */
  export type EventOrganizerGuestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * The filter to search for the EventOrganizerGuest to update in case it exists.
     */
    where: EventOrganizerGuestWhereUniqueInput
    /**
     * In case the EventOrganizerGuest found by the `where` argument doesn't exist, create a new EventOrganizerGuest with this data.
     */
    create: XOR<EventOrganizerGuestCreateInput, EventOrganizerGuestUncheckedCreateInput>
    /**
     * In case the EventOrganizerGuest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventOrganizerGuestUpdateInput, EventOrganizerGuestUncheckedUpdateInput>
  }

  /**
   * EventOrganizerGuest delete
   */
  export type EventOrganizerGuestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
    /**
     * Filter which EventOrganizerGuest to delete.
     */
    where: EventOrganizerGuestWhereUniqueInput
  }

  /**
   * EventOrganizerGuest deleteMany
   */
  export type EventOrganizerGuestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerGuests to delete
     */
    where?: EventOrganizerGuestWhereInput
    /**
     * Limit how many EventOrganizerGuests to delete.
     */
    limit?: number
  }

  /**
   * EventOrganizerGuest without action
   */
  export type EventOrganizerGuestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerGuest
     */
    select?: EventOrganizerGuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerGuest
     */
    omit?: EventOrganizerGuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerGuestInclude<ExtArgs> | null
  }


  /**
   * Model EventOrganizerVenue
   */

  export type AggregateEventOrganizerVenue = {
    _count: EventOrganizerVenueCountAggregateOutputType | null
    _avg: EventOrganizerVenueAvgAggregateOutputType | null
    _sum: EventOrganizerVenueSumAggregateOutputType | null
    _min: EventOrganizerVenueMinAggregateOutputType | null
    _max: EventOrganizerVenueMaxAggregateOutputType | null
  }

  export type EventOrganizerVenueAvgAggregateOutputType = {
    capacity: number | null
  }

  export type EventOrganizerVenueSumAggregateOutputType = {
    capacity: number | null
  }

  export type EventOrganizerVenueMinAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    capacity: number | null
    amenities: string | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type EventOrganizerVenueMaxAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    capacity: number | null
    amenities: string | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type EventOrganizerVenueCountAggregateOutputType = {
    id: number
    name: number
    location: number
    capacity: number
    amenities: number
    submittedBy: number
    createdAt: number
    _all: number
  }


  export type EventOrganizerVenueAvgAggregateInputType = {
    capacity?: true
  }

  export type EventOrganizerVenueSumAggregateInputType = {
    capacity?: true
  }

  export type EventOrganizerVenueMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    capacity?: true
    amenities?: true
    submittedBy?: true
    createdAt?: true
  }

  export type EventOrganizerVenueMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    capacity?: true
    amenities?: true
    submittedBy?: true
    createdAt?: true
  }

  export type EventOrganizerVenueCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    capacity?: true
    amenities?: true
    submittedBy?: true
    createdAt?: true
    _all?: true
  }

  export type EventOrganizerVenueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerVenue to aggregate.
     */
    where?: EventOrganizerVenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerVenues to fetch.
     */
    orderBy?: EventOrganizerVenueOrderByWithRelationInput | EventOrganizerVenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventOrganizerVenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerVenues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerVenues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventOrganizerVenues
    **/
    _count?: true | EventOrganizerVenueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventOrganizerVenueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventOrganizerVenueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventOrganizerVenueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventOrganizerVenueMaxAggregateInputType
  }

  export type GetEventOrganizerVenueAggregateType<T extends EventOrganizerVenueAggregateArgs> = {
        [P in keyof T & keyof AggregateEventOrganizerVenue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventOrganizerVenue[P]>
      : GetScalarType<T[P], AggregateEventOrganizerVenue[P]>
  }




  export type EventOrganizerVenueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerVenueWhereInput
    orderBy?: EventOrganizerVenueOrderByWithAggregationInput | EventOrganizerVenueOrderByWithAggregationInput[]
    by: EventOrganizerVenueScalarFieldEnum[] | EventOrganizerVenueScalarFieldEnum
    having?: EventOrganizerVenueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventOrganizerVenueCountAggregateInputType | true
    _avg?: EventOrganizerVenueAvgAggregateInputType
    _sum?: EventOrganizerVenueSumAggregateInputType
    _min?: EventOrganizerVenueMinAggregateInputType
    _max?: EventOrganizerVenueMaxAggregateInputType
  }

  export type EventOrganizerVenueGroupByOutputType = {
    id: string
    name: string
    location: string
    capacity: number
    amenities: string
    submittedBy: string
    createdAt: Date
    _count: EventOrganizerVenueCountAggregateOutputType | null
    _avg: EventOrganizerVenueAvgAggregateOutputType | null
    _sum: EventOrganizerVenueSumAggregateOutputType | null
    _min: EventOrganizerVenueMinAggregateOutputType | null
    _max: EventOrganizerVenueMaxAggregateOutputType | null
  }

  type GetEventOrganizerVenueGroupByPayload<T extends EventOrganizerVenueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventOrganizerVenueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventOrganizerVenueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventOrganizerVenueGroupByOutputType[P]>
            : GetScalarType<T[P], EventOrganizerVenueGroupByOutputType[P]>
        }
      >
    >


  export type EventOrganizerVenueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    capacity?: boolean
    amenities?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerVenue"]>

  export type EventOrganizerVenueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    capacity?: boolean
    amenities?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerVenue"]>

  export type EventOrganizerVenueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    capacity?: boolean
    amenities?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerVenue"]>

  export type EventOrganizerVenueSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    capacity?: boolean
    amenities?: boolean
    submittedBy?: boolean
    createdAt?: boolean
  }

  export type EventOrganizerVenueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "location" | "capacity" | "amenities" | "submittedBy" | "createdAt", ExtArgs["result"]["eventOrganizerVenue"]>
  export type EventOrganizerVenueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerVenueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerVenueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }

  export type $EventOrganizerVenuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventOrganizerVenue"
    objects: {
      user: Prisma.$EventOrganizerUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      location: string
      capacity: number
      amenities: string
      submittedBy: string
      createdAt: Date
    }, ExtArgs["result"]["eventOrganizerVenue"]>
    composites: {}
  }

  type EventOrganizerVenueGetPayload<S extends boolean | null | undefined | EventOrganizerVenueDefaultArgs> = $Result.GetResult<Prisma.$EventOrganizerVenuePayload, S>

  type EventOrganizerVenueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventOrganizerVenueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventOrganizerVenueCountAggregateInputType | true
    }

  export interface EventOrganizerVenueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventOrganizerVenue'], meta: { name: 'EventOrganizerVenue' } }
    /**
     * Find zero or one EventOrganizerVenue that matches the filter.
     * @param {EventOrganizerVenueFindUniqueArgs} args - Arguments to find a EventOrganizerVenue
     * @example
     * // Get one EventOrganizerVenue
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventOrganizerVenueFindUniqueArgs>(args: SelectSubset<T, EventOrganizerVenueFindUniqueArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventOrganizerVenue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventOrganizerVenueFindUniqueOrThrowArgs} args - Arguments to find a EventOrganizerVenue
     * @example
     * // Get one EventOrganizerVenue
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventOrganizerVenueFindUniqueOrThrowArgs>(args: SelectSubset<T, EventOrganizerVenueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerVenue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerVenueFindFirstArgs} args - Arguments to find a EventOrganizerVenue
     * @example
     * // Get one EventOrganizerVenue
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventOrganizerVenueFindFirstArgs>(args?: SelectSubset<T, EventOrganizerVenueFindFirstArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerVenue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerVenueFindFirstOrThrowArgs} args - Arguments to find a EventOrganizerVenue
     * @example
     * // Get one EventOrganizerVenue
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventOrganizerVenueFindFirstOrThrowArgs>(args?: SelectSubset<T, EventOrganizerVenueFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventOrganizerVenues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerVenueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventOrganizerVenues
     * const eventOrganizerVenues = await prisma.eventOrganizerVenue.findMany()
     * 
     * // Get first 10 EventOrganizerVenues
     * const eventOrganizerVenues = await prisma.eventOrganizerVenue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventOrganizerVenueWithIdOnly = await prisma.eventOrganizerVenue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventOrganizerVenueFindManyArgs>(args?: SelectSubset<T, EventOrganizerVenueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventOrganizerVenue.
     * @param {EventOrganizerVenueCreateArgs} args - Arguments to create a EventOrganizerVenue.
     * @example
     * // Create one EventOrganizerVenue
     * const EventOrganizerVenue = await prisma.eventOrganizerVenue.create({
     *   data: {
     *     // ... data to create a EventOrganizerVenue
     *   }
     * })
     * 
     */
    create<T extends EventOrganizerVenueCreateArgs>(args: SelectSubset<T, EventOrganizerVenueCreateArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventOrganizerVenues.
     * @param {EventOrganizerVenueCreateManyArgs} args - Arguments to create many EventOrganizerVenues.
     * @example
     * // Create many EventOrganizerVenues
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventOrganizerVenueCreateManyArgs>(args?: SelectSubset<T, EventOrganizerVenueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventOrganizerVenues and returns the data saved in the database.
     * @param {EventOrganizerVenueCreateManyAndReturnArgs} args - Arguments to create many EventOrganizerVenues.
     * @example
     * // Create many EventOrganizerVenues
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventOrganizerVenues and only return the `id`
     * const eventOrganizerVenueWithIdOnly = await prisma.eventOrganizerVenue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventOrganizerVenueCreateManyAndReturnArgs>(args?: SelectSubset<T, EventOrganizerVenueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventOrganizerVenue.
     * @param {EventOrganizerVenueDeleteArgs} args - Arguments to delete one EventOrganizerVenue.
     * @example
     * // Delete one EventOrganizerVenue
     * const EventOrganizerVenue = await prisma.eventOrganizerVenue.delete({
     *   where: {
     *     // ... filter to delete one EventOrganizerVenue
     *   }
     * })
     * 
     */
    delete<T extends EventOrganizerVenueDeleteArgs>(args: SelectSubset<T, EventOrganizerVenueDeleteArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventOrganizerVenue.
     * @param {EventOrganizerVenueUpdateArgs} args - Arguments to update one EventOrganizerVenue.
     * @example
     * // Update one EventOrganizerVenue
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventOrganizerVenueUpdateArgs>(args: SelectSubset<T, EventOrganizerVenueUpdateArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventOrganizerVenues.
     * @param {EventOrganizerVenueDeleteManyArgs} args - Arguments to filter EventOrganizerVenues to delete.
     * @example
     * // Delete a few EventOrganizerVenues
     * const { count } = await prisma.eventOrganizerVenue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventOrganizerVenueDeleteManyArgs>(args?: SelectSubset<T, EventOrganizerVenueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerVenues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerVenueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventOrganizerVenues
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventOrganizerVenueUpdateManyArgs>(args: SelectSubset<T, EventOrganizerVenueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerVenues and returns the data updated in the database.
     * @param {EventOrganizerVenueUpdateManyAndReturnArgs} args - Arguments to update many EventOrganizerVenues.
     * @example
     * // Update many EventOrganizerVenues
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventOrganizerVenues and only return the `id`
     * const eventOrganizerVenueWithIdOnly = await prisma.eventOrganizerVenue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventOrganizerVenueUpdateManyAndReturnArgs>(args: SelectSubset<T, EventOrganizerVenueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventOrganizerVenue.
     * @param {EventOrganizerVenueUpsertArgs} args - Arguments to update or create a EventOrganizerVenue.
     * @example
     * // Update or create a EventOrganizerVenue
     * const eventOrganizerVenue = await prisma.eventOrganizerVenue.upsert({
     *   create: {
     *     // ... data to create a EventOrganizerVenue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventOrganizerVenue we want to update
     *   }
     * })
     */
    upsert<T extends EventOrganizerVenueUpsertArgs>(args: SelectSubset<T, EventOrganizerVenueUpsertArgs<ExtArgs>>): Prisma__EventOrganizerVenueClient<$Result.GetResult<Prisma.$EventOrganizerVenuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventOrganizerVenues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerVenueCountArgs} args - Arguments to filter EventOrganizerVenues to count.
     * @example
     * // Count the number of EventOrganizerVenues
     * const count = await prisma.eventOrganizerVenue.count({
     *   where: {
     *     // ... the filter for the EventOrganizerVenues we want to count
     *   }
     * })
    **/
    count<T extends EventOrganizerVenueCountArgs>(
      args?: Subset<T, EventOrganizerVenueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventOrganizerVenueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventOrganizerVenue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerVenueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventOrganizerVenueAggregateArgs>(args: Subset<T, EventOrganizerVenueAggregateArgs>): Prisma.PrismaPromise<GetEventOrganizerVenueAggregateType<T>>

    /**
     * Group by EventOrganizerVenue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerVenueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventOrganizerVenueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventOrganizerVenueGroupByArgs['orderBy'] }
        : { orderBy?: EventOrganizerVenueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventOrganizerVenueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventOrganizerVenueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventOrganizerVenue model
   */
  readonly fields: EventOrganizerVenueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventOrganizerVenue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventOrganizerVenueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends EventOrganizerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUserDefaultArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventOrganizerVenue model
   */ 
  interface EventOrganizerVenueFieldRefs {
    readonly id: FieldRef<"EventOrganizerVenue", 'String'>
    readonly name: FieldRef<"EventOrganizerVenue", 'String'>
    readonly location: FieldRef<"EventOrganizerVenue", 'String'>
    readonly capacity: FieldRef<"EventOrganizerVenue", 'Int'>
    readonly amenities: FieldRef<"EventOrganizerVenue", 'String'>
    readonly submittedBy: FieldRef<"EventOrganizerVenue", 'String'>
    readonly createdAt: FieldRef<"EventOrganizerVenue", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventOrganizerVenue findUnique
   */
  export type EventOrganizerVenueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerVenue to fetch.
     */
    where: EventOrganizerVenueWhereUniqueInput
  }

  /**
   * EventOrganizerVenue findUniqueOrThrow
   */
  export type EventOrganizerVenueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerVenue to fetch.
     */
    where: EventOrganizerVenueWhereUniqueInput
  }

  /**
   * EventOrganizerVenue findFirst
   */
  export type EventOrganizerVenueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerVenue to fetch.
     */
    where?: EventOrganizerVenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerVenues to fetch.
     */
    orderBy?: EventOrganizerVenueOrderByWithRelationInput | EventOrganizerVenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerVenues.
     */
    cursor?: EventOrganizerVenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerVenues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerVenues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerVenues.
     */
    distinct?: EventOrganizerVenueScalarFieldEnum | EventOrganizerVenueScalarFieldEnum[]
  }

  /**
   * EventOrganizerVenue findFirstOrThrow
   */
  export type EventOrganizerVenueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerVenue to fetch.
     */
    where?: EventOrganizerVenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerVenues to fetch.
     */
    orderBy?: EventOrganizerVenueOrderByWithRelationInput | EventOrganizerVenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerVenues.
     */
    cursor?: EventOrganizerVenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerVenues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerVenues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerVenues.
     */
    distinct?: EventOrganizerVenueScalarFieldEnum | EventOrganizerVenueScalarFieldEnum[]
  }

  /**
   * EventOrganizerVenue findMany
   */
  export type EventOrganizerVenueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerVenues to fetch.
     */
    where?: EventOrganizerVenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerVenues to fetch.
     */
    orderBy?: EventOrganizerVenueOrderByWithRelationInput | EventOrganizerVenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventOrganizerVenues.
     */
    cursor?: EventOrganizerVenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerVenues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerVenues.
     */
    skip?: number
    distinct?: EventOrganizerVenueScalarFieldEnum | EventOrganizerVenueScalarFieldEnum[]
  }

  /**
   * EventOrganizerVenue create
   */
  export type EventOrganizerVenueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * The data needed to create a EventOrganizerVenue.
     */
    data: XOR<EventOrganizerVenueCreateInput, EventOrganizerVenueUncheckedCreateInput>
  }

  /**
   * EventOrganizerVenue createMany
   */
  export type EventOrganizerVenueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventOrganizerVenues.
     */
    data: EventOrganizerVenueCreateManyInput | EventOrganizerVenueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizerVenue createManyAndReturn
   */
  export type EventOrganizerVenueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * The data used to create many EventOrganizerVenues.
     */
    data: EventOrganizerVenueCreateManyInput | EventOrganizerVenueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerVenue update
   */
  export type EventOrganizerVenueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * The data needed to update a EventOrganizerVenue.
     */
    data: XOR<EventOrganizerVenueUpdateInput, EventOrganizerVenueUncheckedUpdateInput>
    /**
     * Choose, which EventOrganizerVenue to update.
     */
    where: EventOrganizerVenueWhereUniqueInput
  }

  /**
   * EventOrganizerVenue updateMany
   */
  export type EventOrganizerVenueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventOrganizerVenues.
     */
    data: XOR<EventOrganizerVenueUpdateManyMutationInput, EventOrganizerVenueUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerVenues to update
     */
    where?: EventOrganizerVenueWhereInput
    /**
     * Limit how many EventOrganizerVenues to update.
     */
    limit?: number
  }

  /**
   * EventOrganizerVenue updateManyAndReturn
   */
  export type EventOrganizerVenueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * The data used to update EventOrganizerVenues.
     */
    data: XOR<EventOrganizerVenueUpdateManyMutationInput, EventOrganizerVenueUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerVenues to update
     */
    where?: EventOrganizerVenueWhereInput
    /**
     * Limit how many EventOrganizerVenues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerVenue upsert
   */
  export type EventOrganizerVenueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * The filter to search for the EventOrganizerVenue to update in case it exists.
     */
    where: EventOrganizerVenueWhereUniqueInput
    /**
     * In case the EventOrganizerVenue found by the `where` argument doesn't exist, create a new EventOrganizerVenue with this data.
     */
    create: XOR<EventOrganizerVenueCreateInput, EventOrganizerVenueUncheckedCreateInput>
    /**
     * In case the EventOrganizerVenue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventOrganizerVenueUpdateInput, EventOrganizerVenueUncheckedUpdateInput>
  }

  /**
   * EventOrganizerVenue delete
   */
  export type EventOrganizerVenueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
    /**
     * Filter which EventOrganizerVenue to delete.
     */
    where: EventOrganizerVenueWhereUniqueInput
  }

  /**
   * EventOrganizerVenue deleteMany
   */
  export type EventOrganizerVenueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerVenues to delete
     */
    where?: EventOrganizerVenueWhereInput
    /**
     * Limit how many EventOrganizerVenues to delete.
     */
    limit?: number
  }

  /**
   * EventOrganizerVenue without action
   */
  export type EventOrganizerVenueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerVenue
     */
    select?: EventOrganizerVenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerVenue
     */
    omit?: EventOrganizerVenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerVenueInclude<ExtArgs> | null
  }


  /**
   * Model EventOrganizerServiceProvider
   */

  export type AggregateEventOrganizerServiceProvider = {
    _count: EventOrganizerServiceProviderCountAggregateOutputType | null
    _min: EventOrganizerServiceProviderMinAggregateOutputType | null
    _max: EventOrganizerServiceProviderMaxAggregateOutputType | null
  }

  export type EventOrganizerServiceProviderMinAggregateOutputType = {
    id: string | null
    name: string | null
    serviceType: string | null
    contactInfo: string | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type EventOrganizerServiceProviderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    serviceType: string | null
    contactInfo: string | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type EventOrganizerServiceProviderCountAggregateOutputType = {
    id: number
    name: number
    serviceType: number
    contactInfo: number
    submittedBy: number
    createdAt: number
    _all: number
  }


  export type EventOrganizerServiceProviderMinAggregateInputType = {
    id?: true
    name?: true
    serviceType?: true
    contactInfo?: true
    submittedBy?: true
    createdAt?: true
  }

  export type EventOrganizerServiceProviderMaxAggregateInputType = {
    id?: true
    name?: true
    serviceType?: true
    contactInfo?: true
    submittedBy?: true
    createdAt?: true
  }

  export type EventOrganizerServiceProviderCountAggregateInputType = {
    id?: true
    name?: true
    serviceType?: true
    contactInfo?: true
    submittedBy?: true
    createdAt?: true
    _all?: true
  }

  export type EventOrganizerServiceProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerServiceProvider to aggregate.
     */
    where?: EventOrganizerServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerServiceProviders to fetch.
     */
    orderBy?: EventOrganizerServiceProviderOrderByWithRelationInput | EventOrganizerServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventOrganizerServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventOrganizerServiceProviders
    **/
    _count?: true | EventOrganizerServiceProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventOrganizerServiceProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventOrganizerServiceProviderMaxAggregateInputType
  }

  export type GetEventOrganizerServiceProviderAggregateType<T extends EventOrganizerServiceProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateEventOrganizerServiceProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventOrganizerServiceProvider[P]>
      : GetScalarType<T[P], AggregateEventOrganizerServiceProvider[P]>
  }




  export type EventOrganizerServiceProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerServiceProviderWhereInput
    orderBy?: EventOrganizerServiceProviderOrderByWithAggregationInput | EventOrganizerServiceProviderOrderByWithAggregationInput[]
    by: EventOrganizerServiceProviderScalarFieldEnum[] | EventOrganizerServiceProviderScalarFieldEnum
    having?: EventOrganizerServiceProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventOrganizerServiceProviderCountAggregateInputType | true
    _min?: EventOrganizerServiceProviderMinAggregateInputType
    _max?: EventOrganizerServiceProviderMaxAggregateInputType
  }

  export type EventOrganizerServiceProviderGroupByOutputType = {
    id: string
    name: string
    serviceType: string
    contactInfo: string
    submittedBy: string
    createdAt: Date
    _count: EventOrganizerServiceProviderCountAggregateOutputType | null
    _min: EventOrganizerServiceProviderMinAggregateOutputType | null
    _max: EventOrganizerServiceProviderMaxAggregateOutputType | null
  }

  type GetEventOrganizerServiceProviderGroupByPayload<T extends EventOrganizerServiceProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventOrganizerServiceProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventOrganizerServiceProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventOrganizerServiceProviderGroupByOutputType[P]>
            : GetScalarType<T[P], EventOrganizerServiceProviderGroupByOutputType[P]>
        }
      >
    >


  export type EventOrganizerServiceProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    serviceType?: boolean
    contactInfo?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerServiceProvider"]>

  export type EventOrganizerServiceProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    serviceType?: boolean
    contactInfo?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerServiceProvider"]>

  export type EventOrganizerServiceProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    serviceType?: boolean
    contactInfo?: boolean
    submittedBy?: boolean
    createdAt?: boolean
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizerServiceProvider"]>

  export type EventOrganizerServiceProviderSelectScalar = {
    id?: boolean
    name?: boolean
    serviceType?: boolean
    contactInfo?: boolean
    submittedBy?: boolean
    createdAt?: boolean
  }

  export type EventOrganizerServiceProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "serviceType" | "contactInfo" | "submittedBy" | "createdAt", ExtArgs["result"]["eventOrganizerServiceProvider"]>
  export type EventOrganizerServiceProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerServiceProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }
  export type EventOrganizerServiceProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EventOrganizerUserDefaultArgs<ExtArgs>
  }

  export type $EventOrganizerServiceProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventOrganizerServiceProvider"
    objects: {
      user: Prisma.$EventOrganizerUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      serviceType: string
      contactInfo: string
      submittedBy: string
      createdAt: Date
    }, ExtArgs["result"]["eventOrganizerServiceProvider"]>
    composites: {}
  }

  type EventOrganizerServiceProviderGetPayload<S extends boolean | null | undefined | EventOrganizerServiceProviderDefaultArgs> = $Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload, S>

  type EventOrganizerServiceProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventOrganizerServiceProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventOrganizerServiceProviderCountAggregateInputType | true
    }

  export interface EventOrganizerServiceProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventOrganizerServiceProvider'], meta: { name: 'EventOrganizerServiceProvider' } }
    /**
     * Find zero or one EventOrganizerServiceProvider that matches the filter.
     * @param {EventOrganizerServiceProviderFindUniqueArgs} args - Arguments to find a EventOrganizerServiceProvider
     * @example
     * // Get one EventOrganizerServiceProvider
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventOrganizerServiceProviderFindUniqueArgs>(args: SelectSubset<T, EventOrganizerServiceProviderFindUniqueArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventOrganizerServiceProvider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventOrganizerServiceProviderFindUniqueOrThrowArgs} args - Arguments to find a EventOrganizerServiceProvider
     * @example
     * // Get one EventOrganizerServiceProvider
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventOrganizerServiceProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, EventOrganizerServiceProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerServiceProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerServiceProviderFindFirstArgs} args - Arguments to find a EventOrganizerServiceProvider
     * @example
     * // Get one EventOrganizerServiceProvider
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventOrganizerServiceProviderFindFirstArgs>(args?: SelectSubset<T, EventOrganizerServiceProviderFindFirstArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventOrganizerServiceProvider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerServiceProviderFindFirstOrThrowArgs} args - Arguments to find a EventOrganizerServiceProvider
     * @example
     * // Get one EventOrganizerServiceProvider
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventOrganizerServiceProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, EventOrganizerServiceProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventOrganizerServiceProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerServiceProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventOrganizerServiceProviders
     * const eventOrganizerServiceProviders = await prisma.eventOrganizerServiceProvider.findMany()
     * 
     * // Get first 10 EventOrganizerServiceProviders
     * const eventOrganizerServiceProviders = await prisma.eventOrganizerServiceProvider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventOrganizerServiceProviderWithIdOnly = await prisma.eventOrganizerServiceProvider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventOrganizerServiceProviderFindManyArgs>(args?: SelectSubset<T, EventOrganizerServiceProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventOrganizerServiceProvider.
     * @param {EventOrganizerServiceProviderCreateArgs} args - Arguments to create a EventOrganizerServiceProvider.
     * @example
     * // Create one EventOrganizerServiceProvider
     * const EventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.create({
     *   data: {
     *     // ... data to create a EventOrganizerServiceProvider
     *   }
     * })
     * 
     */
    create<T extends EventOrganizerServiceProviderCreateArgs>(args: SelectSubset<T, EventOrganizerServiceProviderCreateArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventOrganizerServiceProviders.
     * @param {EventOrganizerServiceProviderCreateManyArgs} args - Arguments to create many EventOrganizerServiceProviders.
     * @example
     * // Create many EventOrganizerServiceProviders
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventOrganizerServiceProviderCreateManyArgs>(args?: SelectSubset<T, EventOrganizerServiceProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventOrganizerServiceProviders and returns the data saved in the database.
     * @param {EventOrganizerServiceProviderCreateManyAndReturnArgs} args - Arguments to create many EventOrganizerServiceProviders.
     * @example
     * // Create many EventOrganizerServiceProviders
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventOrganizerServiceProviders and only return the `id`
     * const eventOrganizerServiceProviderWithIdOnly = await prisma.eventOrganizerServiceProvider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventOrganizerServiceProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, EventOrganizerServiceProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventOrganizerServiceProvider.
     * @param {EventOrganizerServiceProviderDeleteArgs} args - Arguments to delete one EventOrganizerServiceProvider.
     * @example
     * // Delete one EventOrganizerServiceProvider
     * const EventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.delete({
     *   where: {
     *     // ... filter to delete one EventOrganizerServiceProvider
     *   }
     * })
     * 
     */
    delete<T extends EventOrganizerServiceProviderDeleteArgs>(args: SelectSubset<T, EventOrganizerServiceProviderDeleteArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventOrganizerServiceProvider.
     * @param {EventOrganizerServiceProviderUpdateArgs} args - Arguments to update one EventOrganizerServiceProvider.
     * @example
     * // Update one EventOrganizerServiceProvider
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventOrganizerServiceProviderUpdateArgs>(args: SelectSubset<T, EventOrganizerServiceProviderUpdateArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventOrganizerServiceProviders.
     * @param {EventOrganizerServiceProviderDeleteManyArgs} args - Arguments to filter EventOrganizerServiceProviders to delete.
     * @example
     * // Delete a few EventOrganizerServiceProviders
     * const { count } = await prisma.eventOrganizerServiceProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventOrganizerServiceProviderDeleteManyArgs>(args?: SelectSubset<T, EventOrganizerServiceProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerServiceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerServiceProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventOrganizerServiceProviders
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventOrganizerServiceProviderUpdateManyArgs>(args: SelectSubset<T, EventOrganizerServiceProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizerServiceProviders and returns the data updated in the database.
     * @param {EventOrganizerServiceProviderUpdateManyAndReturnArgs} args - Arguments to update many EventOrganizerServiceProviders.
     * @example
     * // Update many EventOrganizerServiceProviders
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventOrganizerServiceProviders and only return the `id`
     * const eventOrganizerServiceProviderWithIdOnly = await prisma.eventOrganizerServiceProvider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventOrganizerServiceProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, EventOrganizerServiceProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventOrganizerServiceProvider.
     * @param {EventOrganizerServiceProviderUpsertArgs} args - Arguments to update or create a EventOrganizerServiceProvider.
     * @example
     * // Update or create a EventOrganizerServiceProvider
     * const eventOrganizerServiceProvider = await prisma.eventOrganizerServiceProvider.upsert({
     *   create: {
     *     // ... data to create a EventOrganizerServiceProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventOrganizerServiceProvider we want to update
     *   }
     * })
     */
    upsert<T extends EventOrganizerServiceProviderUpsertArgs>(args: SelectSubset<T, EventOrganizerServiceProviderUpsertArgs<ExtArgs>>): Prisma__EventOrganizerServiceProviderClient<$Result.GetResult<Prisma.$EventOrganizerServiceProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventOrganizerServiceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerServiceProviderCountArgs} args - Arguments to filter EventOrganizerServiceProviders to count.
     * @example
     * // Count the number of EventOrganizerServiceProviders
     * const count = await prisma.eventOrganizerServiceProvider.count({
     *   where: {
     *     // ... the filter for the EventOrganizerServiceProviders we want to count
     *   }
     * })
    **/
    count<T extends EventOrganizerServiceProviderCountArgs>(
      args?: Subset<T, EventOrganizerServiceProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventOrganizerServiceProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventOrganizerServiceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerServiceProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventOrganizerServiceProviderAggregateArgs>(args: Subset<T, EventOrganizerServiceProviderAggregateArgs>): Prisma.PrismaPromise<GetEventOrganizerServiceProviderAggregateType<T>>

    /**
     * Group by EventOrganizerServiceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerServiceProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventOrganizerServiceProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventOrganizerServiceProviderGroupByArgs['orderBy'] }
        : { orderBy?: EventOrganizerServiceProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventOrganizerServiceProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventOrganizerServiceProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventOrganizerServiceProvider model
   */
  readonly fields: EventOrganizerServiceProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventOrganizerServiceProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventOrganizerServiceProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends EventOrganizerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerUserDefaultArgs<ExtArgs>>): Prisma__EventOrganizerUserClient<$Result.GetResult<Prisma.$EventOrganizerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventOrganizerServiceProvider model
   */ 
  interface EventOrganizerServiceProviderFieldRefs {
    readonly id: FieldRef<"EventOrganizerServiceProvider", 'String'>
    readonly name: FieldRef<"EventOrganizerServiceProvider", 'String'>
    readonly serviceType: FieldRef<"EventOrganizerServiceProvider", 'String'>
    readonly contactInfo: FieldRef<"EventOrganizerServiceProvider", 'String'>
    readonly submittedBy: FieldRef<"EventOrganizerServiceProvider", 'String'>
    readonly createdAt: FieldRef<"EventOrganizerServiceProvider", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventOrganizerServiceProvider findUnique
   */
  export type EventOrganizerServiceProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerServiceProvider to fetch.
     */
    where: EventOrganizerServiceProviderWhereUniqueInput
  }

  /**
   * EventOrganizerServiceProvider findUniqueOrThrow
   */
  export type EventOrganizerServiceProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerServiceProvider to fetch.
     */
    where: EventOrganizerServiceProviderWhereUniqueInput
  }

  /**
   * EventOrganizerServiceProvider findFirst
   */
  export type EventOrganizerServiceProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerServiceProvider to fetch.
     */
    where?: EventOrganizerServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerServiceProviders to fetch.
     */
    orderBy?: EventOrganizerServiceProviderOrderByWithRelationInput | EventOrganizerServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerServiceProviders.
     */
    cursor?: EventOrganizerServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerServiceProviders.
     */
    distinct?: EventOrganizerServiceProviderScalarFieldEnum | EventOrganizerServiceProviderScalarFieldEnum[]
  }

  /**
   * EventOrganizerServiceProvider findFirstOrThrow
   */
  export type EventOrganizerServiceProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerServiceProvider to fetch.
     */
    where?: EventOrganizerServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerServiceProviders to fetch.
     */
    orderBy?: EventOrganizerServiceProviderOrderByWithRelationInput | EventOrganizerServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizerServiceProviders.
     */
    cursor?: EventOrganizerServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizerServiceProviders.
     */
    distinct?: EventOrganizerServiceProviderScalarFieldEnum | EventOrganizerServiceProviderScalarFieldEnum[]
  }

  /**
   * EventOrganizerServiceProvider findMany
   */
  export type EventOrganizerServiceProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizerServiceProviders to fetch.
     */
    where?: EventOrganizerServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizerServiceProviders to fetch.
     */
    orderBy?: EventOrganizerServiceProviderOrderByWithRelationInput | EventOrganizerServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventOrganizerServiceProviders.
     */
    cursor?: EventOrganizerServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizerServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizerServiceProviders.
     */
    skip?: number
    distinct?: EventOrganizerServiceProviderScalarFieldEnum | EventOrganizerServiceProviderScalarFieldEnum[]
  }

  /**
   * EventOrganizerServiceProvider create
   */
  export type EventOrganizerServiceProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a EventOrganizerServiceProvider.
     */
    data: XOR<EventOrganizerServiceProviderCreateInput, EventOrganizerServiceProviderUncheckedCreateInput>
  }

  /**
   * EventOrganizerServiceProvider createMany
   */
  export type EventOrganizerServiceProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventOrganizerServiceProviders.
     */
    data: EventOrganizerServiceProviderCreateManyInput | EventOrganizerServiceProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizerServiceProvider createManyAndReturn
   */
  export type EventOrganizerServiceProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * The data used to create many EventOrganizerServiceProviders.
     */
    data: EventOrganizerServiceProviderCreateManyInput | EventOrganizerServiceProviderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerServiceProvider update
   */
  export type EventOrganizerServiceProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a EventOrganizerServiceProvider.
     */
    data: XOR<EventOrganizerServiceProviderUpdateInput, EventOrganizerServiceProviderUncheckedUpdateInput>
    /**
     * Choose, which EventOrganizerServiceProvider to update.
     */
    where: EventOrganizerServiceProviderWhereUniqueInput
  }

  /**
   * EventOrganizerServiceProvider updateMany
   */
  export type EventOrganizerServiceProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventOrganizerServiceProviders.
     */
    data: XOR<EventOrganizerServiceProviderUpdateManyMutationInput, EventOrganizerServiceProviderUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerServiceProviders to update
     */
    where?: EventOrganizerServiceProviderWhereInput
    /**
     * Limit how many EventOrganizerServiceProviders to update.
     */
    limit?: number
  }

  /**
   * EventOrganizerServiceProvider updateManyAndReturn
   */
  export type EventOrganizerServiceProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * The data used to update EventOrganizerServiceProviders.
     */
    data: XOR<EventOrganizerServiceProviderUpdateManyMutationInput, EventOrganizerServiceProviderUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizerServiceProviders to update
     */
    where?: EventOrganizerServiceProviderWhereInput
    /**
     * Limit how many EventOrganizerServiceProviders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventOrganizerServiceProvider upsert
   */
  export type EventOrganizerServiceProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the EventOrganizerServiceProvider to update in case it exists.
     */
    where: EventOrganizerServiceProviderWhereUniqueInput
    /**
     * In case the EventOrganizerServiceProvider found by the `where` argument doesn't exist, create a new EventOrganizerServiceProvider with this data.
     */
    create: XOR<EventOrganizerServiceProviderCreateInput, EventOrganizerServiceProviderUncheckedCreateInput>
    /**
     * In case the EventOrganizerServiceProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventOrganizerServiceProviderUpdateInput, EventOrganizerServiceProviderUncheckedUpdateInput>
  }

  /**
   * EventOrganizerServiceProvider delete
   */
  export type EventOrganizerServiceProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
    /**
     * Filter which EventOrganizerServiceProvider to delete.
     */
    where: EventOrganizerServiceProviderWhereUniqueInput
  }

  /**
   * EventOrganizerServiceProvider deleteMany
   */
  export type EventOrganizerServiceProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizerServiceProviders to delete
     */
    where?: EventOrganizerServiceProviderWhereInput
    /**
     * Limit how many EventOrganizerServiceProviders to delete.
     */
    limit?: number
  }

  /**
   * EventOrganizerServiceProvider without action
   */
  export type EventOrganizerServiceProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerServiceProvider
     */
    select?: EventOrganizerServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizerServiceProvider
     */
    omit?: EventOrganizerServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerServiceProviderInclude<ExtArgs> | null
  }


  /**
   * Model LanguageLearnerUser
   */

  export type AggregateLanguageLearnerUser = {
    _count: LanguageLearnerUserCountAggregateOutputType | null
    _min: LanguageLearnerUserMinAggregateOutputType | null
    _max: LanguageLearnerUserMaxAggregateOutputType | null
  }

  export type LanguageLearnerUserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerUserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerUserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    createdAt: number
    _all: number
  }


  export type LanguageLearnerUserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type LanguageLearnerUserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type LanguageLearnerUserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type LanguageLearnerUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerUser to aggregate.
     */
    where?: LanguageLearnerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUsers to fetch.
     */
    orderBy?: LanguageLearnerUserOrderByWithRelationInput | LanguageLearnerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageLearnerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguageLearnerUsers
    **/
    _count?: true | LanguageLearnerUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageLearnerUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageLearnerUserMaxAggregateInputType
  }

  export type GetLanguageLearnerUserAggregateType<T extends LanguageLearnerUserAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguageLearnerUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguageLearnerUser[P]>
      : GetScalarType<T[P], AggregateLanguageLearnerUser[P]>
  }




  export type LanguageLearnerUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerUserWhereInput
    orderBy?: LanguageLearnerUserOrderByWithAggregationInput | LanguageLearnerUserOrderByWithAggregationInput[]
    by: LanguageLearnerUserScalarFieldEnum[] | LanguageLearnerUserScalarFieldEnum
    having?: LanguageLearnerUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageLearnerUserCountAggregateInputType | true
    _min?: LanguageLearnerUserMinAggregateInputType
    _max?: LanguageLearnerUserMaxAggregateInputType
  }

  export type LanguageLearnerUserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    role: string
    createdAt: Date
    _count: LanguageLearnerUserCountAggregateOutputType | null
    _min: LanguageLearnerUserMinAggregateOutputType | null
    _max: LanguageLearnerUserMaxAggregateOutputType | null
  }

  type GetLanguageLearnerUserGroupByPayload<T extends LanguageLearnerUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageLearnerUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageLearnerUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageLearnerUserGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageLearnerUserGroupByOutputType[P]>
        }
      >
    >


  export type LanguageLearnerUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    ownedPlatforms?: boolean | LanguageLearnerUser$ownedPlatformsArgs<ExtArgs>
    reviews?: boolean | LanguageLearnerUser$reviewsArgs<ExtArgs>
    votesGiven?: boolean | LanguageLearnerUser$votesGivenArgs<ExtArgs>
    votesReceived?: boolean | LanguageLearnerUser$votesReceivedArgs<ExtArgs>
    likes?: boolean | LanguageLearnerUser$likesArgs<ExtArgs>
    _count?: boolean | LanguageLearnerUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerUser"]>

  export type LanguageLearnerUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["languageLearnerUser"]>

  export type LanguageLearnerUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["languageLearnerUser"]>

  export type LanguageLearnerUserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type LanguageLearnerUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "createdAt", ExtArgs["result"]["languageLearnerUser"]>
  export type LanguageLearnerUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedPlatforms?: boolean | LanguageLearnerUser$ownedPlatformsArgs<ExtArgs>
    reviews?: boolean | LanguageLearnerUser$reviewsArgs<ExtArgs>
    votesGiven?: boolean | LanguageLearnerUser$votesGivenArgs<ExtArgs>
    votesReceived?: boolean | LanguageLearnerUser$votesReceivedArgs<ExtArgs>
    likes?: boolean | LanguageLearnerUser$likesArgs<ExtArgs>
    _count?: boolean | LanguageLearnerUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LanguageLearnerUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LanguageLearnerUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguageLearnerUser"
    objects: {
      ownedPlatforms: Prisma.$LanguageLearnerPlatformPayload<ExtArgs>[]
      reviews: Prisma.$LanguageLearnerReviewPayload<ExtArgs>[]
      votesGiven: Prisma.$LanguageLearnerUserVotePayload<ExtArgs>[]
      votesReceived: Prisma.$LanguageLearnerUserVotePayload<ExtArgs>[]
      likes: Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      role: string
      createdAt: Date
    }, ExtArgs["result"]["languageLearnerUser"]>
    composites: {}
  }

  type LanguageLearnerUserGetPayload<S extends boolean | null | undefined | LanguageLearnerUserDefaultArgs> = $Result.GetResult<Prisma.$LanguageLearnerUserPayload, S>

  type LanguageLearnerUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageLearnerUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageLearnerUserCountAggregateInputType | true
    }

  export interface LanguageLearnerUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguageLearnerUser'], meta: { name: 'LanguageLearnerUser' } }
    /**
     * Find zero or one LanguageLearnerUser that matches the filter.
     * @param {LanguageLearnerUserFindUniqueArgs} args - Arguments to find a LanguageLearnerUser
     * @example
     * // Get one LanguageLearnerUser
     * const languageLearnerUser = await prisma.languageLearnerUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageLearnerUserFindUniqueArgs>(args: SelectSubset<T, LanguageLearnerUserFindUniqueArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LanguageLearnerUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageLearnerUserFindUniqueOrThrowArgs} args - Arguments to find a LanguageLearnerUser
     * @example
     * // Get one LanguageLearnerUser
     * const languageLearnerUser = await prisma.languageLearnerUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageLearnerUserFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageLearnerUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserFindFirstArgs} args - Arguments to find a LanguageLearnerUser
     * @example
     * // Get one LanguageLearnerUser
     * const languageLearnerUser = await prisma.languageLearnerUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageLearnerUserFindFirstArgs>(args?: SelectSubset<T, LanguageLearnerUserFindFirstArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserFindFirstOrThrowArgs} args - Arguments to find a LanguageLearnerUser
     * @example
     * // Get one LanguageLearnerUser
     * const languageLearnerUser = await prisma.languageLearnerUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageLearnerUserFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageLearnerUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LanguageLearnerUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguageLearnerUsers
     * const languageLearnerUsers = await prisma.languageLearnerUser.findMany()
     * 
     * // Get first 10 LanguageLearnerUsers
     * const languageLearnerUsers = await prisma.languageLearnerUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageLearnerUserWithIdOnly = await prisma.languageLearnerUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageLearnerUserFindManyArgs>(args?: SelectSubset<T, LanguageLearnerUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LanguageLearnerUser.
     * @param {LanguageLearnerUserCreateArgs} args - Arguments to create a LanguageLearnerUser.
     * @example
     * // Create one LanguageLearnerUser
     * const LanguageLearnerUser = await prisma.languageLearnerUser.create({
     *   data: {
     *     // ... data to create a LanguageLearnerUser
     *   }
     * })
     * 
     */
    create<T extends LanguageLearnerUserCreateArgs>(args: SelectSubset<T, LanguageLearnerUserCreateArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LanguageLearnerUsers.
     * @param {LanguageLearnerUserCreateManyArgs} args - Arguments to create many LanguageLearnerUsers.
     * @example
     * // Create many LanguageLearnerUsers
     * const languageLearnerUser = await prisma.languageLearnerUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageLearnerUserCreateManyArgs>(args?: SelectSubset<T, LanguageLearnerUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LanguageLearnerUsers and returns the data saved in the database.
     * @param {LanguageLearnerUserCreateManyAndReturnArgs} args - Arguments to create many LanguageLearnerUsers.
     * @example
     * // Create many LanguageLearnerUsers
     * const languageLearnerUser = await prisma.languageLearnerUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LanguageLearnerUsers and only return the `id`
     * const languageLearnerUserWithIdOnly = await prisma.languageLearnerUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguageLearnerUserCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguageLearnerUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LanguageLearnerUser.
     * @param {LanguageLearnerUserDeleteArgs} args - Arguments to delete one LanguageLearnerUser.
     * @example
     * // Delete one LanguageLearnerUser
     * const LanguageLearnerUser = await prisma.languageLearnerUser.delete({
     *   where: {
     *     // ... filter to delete one LanguageLearnerUser
     *   }
     * })
     * 
     */
    delete<T extends LanguageLearnerUserDeleteArgs>(args: SelectSubset<T, LanguageLearnerUserDeleteArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LanguageLearnerUser.
     * @param {LanguageLearnerUserUpdateArgs} args - Arguments to update one LanguageLearnerUser.
     * @example
     * // Update one LanguageLearnerUser
     * const languageLearnerUser = await prisma.languageLearnerUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageLearnerUserUpdateArgs>(args: SelectSubset<T, LanguageLearnerUserUpdateArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LanguageLearnerUsers.
     * @param {LanguageLearnerUserDeleteManyArgs} args - Arguments to filter LanguageLearnerUsers to delete.
     * @example
     * // Delete a few LanguageLearnerUsers
     * const { count } = await prisma.languageLearnerUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageLearnerUserDeleteManyArgs>(args?: SelectSubset<T, LanguageLearnerUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguageLearnerUsers
     * const languageLearnerUser = await prisma.languageLearnerUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageLearnerUserUpdateManyArgs>(args: SelectSubset<T, LanguageLearnerUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerUsers and returns the data updated in the database.
     * @param {LanguageLearnerUserUpdateManyAndReturnArgs} args - Arguments to update many LanguageLearnerUsers.
     * @example
     * // Update many LanguageLearnerUsers
     * const languageLearnerUser = await prisma.languageLearnerUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LanguageLearnerUsers and only return the `id`
     * const languageLearnerUserWithIdOnly = await prisma.languageLearnerUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LanguageLearnerUserUpdateManyAndReturnArgs>(args: SelectSubset<T, LanguageLearnerUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LanguageLearnerUser.
     * @param {LanguageLearnerUserUpsertArgs} args - Arguments to update or create a LanguageLearnerUser.
     * @example
     * // Update or create a LanguageLearnerUser
     * const languageLearnerUser = await prisma.languageLearnerUser.upsert({
     *   create: {
     *     // ... data to create a LanguageLearnerUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguageLearnerUser we want to update
     *   }
     * })
     */
    upsert<T extends LanguageLearnerUserUpsertArgs>(args: SelectSubset<T, LanguageLearnerUserUpsertArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LanguageLearnerUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserCountArgs} args - Arguments to filter LanguageLearnerUsers to count.
     * @example
     * // Count the number of LanguageLearnerUsers
     * const count = await prisma.languageLearnerUser.count({
     *   where: {
     *     // ... the filter for the LanguageLearnerUsers we want to count
     *   }
     * })
    **/
    count<T extends LanguageLearnerUserCountArgs>(
      args?: Subset<T, LanguageLearnerUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageLearnerUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguageLearnerUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageLearnerUserAggregateArgs>(args: Subset<T, LanguageLearnerUserAggregateArgs>): Prisma.PrismaPromise<GetLanguageLearnerUserAggregateType<T>>

    /**
     * Group by LanguageLearnerUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageLearnerUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageLearnerUserGroupByArgs['orderBy'] }
        : { orderBy?: LanguageLearnerUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageLearnerUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageLearnerUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguageLearnerUser model
   */
  readonly fields: LanguageLearnerUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguageLearnerUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageLearnerUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ownedPlatforms<T extends LanguageLearnerUser$ownedPlatformsArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUser$ownedPlatformsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends LanguageLearnerUser$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUser$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    votesGiven<T extends LanguageLearnerUser$votesGivenArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUser$votesGivenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    votesReceived<T extends LanguageLearnerUser$votesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUser$votesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends LanguageLearnerUser$likesArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUser$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LanguageLearnerUser model
   */ 
  interface LanguageLearnerUserFieldRefs {
    readonly id: FieldRef<"LanguageLearnerUser", 'String'>
    readonly email: FieldRef<"LanguageLearnerUser", 'String'>
    readonly name: FieldRef<"LanguageLearnerUser", 'String'>
    readonly password: FieldRef<"LanguageLearnerUser", 'String'>
    readonly role: FieldRef<"LanguageLearnerUser", 'String'>
    readonly createdAt: FieldRef<"LanguageLearnerUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LanguageLearnerUser findUnique
   */
  export type LanguageLearnerUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUser to fetch.
     */
    where: LanguageLearnerUserWhereUniqueInput
  }

  /**
   * LanguageLearnerUser findUniqueOrThrow
   */
  export type LanguageLearnerUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUser to fetch.
     */
    where: LanguageLearnerUserWhereUniqueInput
  }

  /**
   * LanguageLearnerUser findFirst
   */
  export type LanguageLearnerUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUser to fetch.
     */
    where?: LanguageLearnerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUsers to fetch.
     */
    orderBy?: LanguageLearnerUserOrderByWithRelationInput | LanguageLearnerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerUsers.
     */
    cursor?: LanguageLearnerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerUsers.
     */
    distinct?: LanguageLearnerUserScalarFieldEnum | LanguageLearnerUserScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser findFirstOrThrow
   */
  export type LanguageLearnerUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUser to fetch.
     */
    where?: LanguageLearnerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUsers to fetch.
     */
    orderBy?: LanguageLearnerUserOrderByWithRelationInput | LanguageLearnerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerUsers.
     */
    cursor?: LanguageLearnerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerUsers.
     */
    distinct?: LanguageLearnerUserScalarFieldEnum | LanguageLearnerUserScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser findMany
   */
  export type LanguageLearnerUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUsers to fetch.
     */
    where?: LanguageLearnerUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUsers to fetch.
     */
    orderBy?: LanguageLearnerUserOrderByWithRelationInput | LanguageLearnerUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguageLearnerUsers.
     */
    cursor?: LanguageLearnerUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUsers.
     */
    skip?: number
    distinct?: LanguageLearnerUserScalarFieldEnum | LanguageLearnerUserScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser create
   */
  export type LanguageLearnerUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguageLearnerUser.
     */
    data: XOR<LanguageLearnerUserCreateInput, LanguageLearnerUserUncheckedCreateInput>
  }

  /**
   * LanguageLearnerUser createMany
   */
  export type LanguageLearnerUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguageLearnerUsers.
     */
    data: LanguageLearnerUserCreateManyInput | LanguageLearnerUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageLearnerUser createManyAndReturn
   */
  export type LanguageLearnerUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * The data used to create many LanguageLearnerUsers.
     */
    data: LanguageLearnerUserCreateManyInput | LanguageLearnerUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageLearnerUser update
   */
  export type LanguageLearnerUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguageLearnerUser.
     */
    data: XOR<LanguageLearnerUserUpdateInput, LanguageLearnerUserUncheckedUpdateInput>
    /**
     * Choose, which LanguageLearnerUser to update.
     */
    where: LanguageLearnerUserWhereUniqueInput
  }

  /**
   * LanguageLearnerUser updateMany
   */
  export type LanguageLearnerUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguageLearnerUsers.
     */
    data: XOR<LanguageLearnerUserUpdateManyMutationInput, LanguageLearnerUserUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerUsers to update
     */
    where?: LanguageLearnerUserWhereInput
    /**
     * Limit how many LanguageLearnerUsers to update.
     */
    limit?: number
  }

  /**
   * LanguageLearnerUser updateManyAndReturn
   */
  export type LanguageLearnerUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * The data used to update LanguageLearnerUsers.
     */
    data: XOR<LanguageLearnerUserUpdateManyMutationInput, LanguageLearnerUserUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerUsers to update
     */
    where?: LanguageLearnerUserWhereInput
    /**
     * Limit how many LanguageLearnerUsers to update.
     */
    limit?: number
  }

  /**
   * LanguageLearnerUser upsert
   */
  export type LanguageLearnerUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguageLearnerUser to update in case it exists.
     */
    where: LanguageLearnerUserWhereUniqueInput
    /**
     * In case the LanguageLearnerUser found by the `where` argument doesn't exist, create a new LanguageLearnerUser with this data.
     */
    create: XOR<LanguageLearnerUserCreateInput, LanguageLearnerUserUncheckedCreateInput>
    /**
     * In case the LanguageLearnerUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageLearnerUserUpdateInput, LanguageLearnerUserUncheckedUpdateInput>
  }

  /**
   * LanguageLearnerUser delete
   */
  export type LanguageLearnerUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
    /**
     * Filter which LanguageLearnerUser to delete.
     */
    where: LanguageLearnerUserWhereUniqueInput
  }

  /**
   * LanguageLearnerUser deleteMany
   */
  export type LanguageLearnerUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerUsers to delete
     */
    where?: LanguageLearnerUserWhereInput
    /**
     * Limit how many LanguageLearnerUsers to delete.
     */
    limit?: number
  }

  /**
   * LanguageLearnerUser.ownedPlatforms
   */
  export type LanguageLearnerUser$ownedPlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    where?: LanguageLearnerPlatformWhereInput
    orderBy?: LanguageLearnerPlatformOrderByWithRelationInput | LanguageLearnerPlatformOrderByWithRelationInput[]
    cursor?: LanguageLearnerPlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageLearnerPlatformScalarFieldEnum | LanguageLearnerPlatformScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser.reviews
   */
  export type LanguageLearnerUser$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    where?: LanguageLearnerReviewWhereInput
    orderBy?: LanguageLearnerReviewOrderByWithRelationInput | LanguageLearnerReviewOrderByWithRelationInput[]
    cursor?: LanguageLearnerReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageLearnerReviewScalarFieldEnum | LanguageLearnerReviewScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser.votesGiven
   */
  export type LanguageLearnerUser$votesGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    where?: LanguageLearnerUserVoteWhereInput
    orderBy?: LanguageLearnerUserVoteOrderByWithRelationInput | LanguageLearnerUserVoteOrderByWithRelationInput[]
    cursor?: LanguageLearnerUserVoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageLearnerUserVoteScalarFieldEnum | LanguageLearnerUserVoteScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser.votesReceived
   */
  export type LanguageLearnerUser$votesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    where?: LanguageLearnerUserVoteWhereInput
    orderBy?: LanguageLearnerUserVoteOrderByWithRelationInput | LanguageLearnerUserVoteOrderByWithRelationInput[]
    cursor?: LanguageLearnerUserVoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageLearnerUserVoteScalarFieldEnum | LanguageLearnerUserVoteScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser.likes
   */
  export type LanguageLearnerUser$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    where?: LanguageLearnerReviewLikeWhereInput
    orderBy?: LanguageLearnerReviewLikeOrderByWithRelationInput | LanguageLearnerReviewLikeOrderByWithRelationInput[]
    cursor?: LanguageLearnerReviewLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageLearnerReviewLikeScalarFieldEnum | LanguageLearnerReviewLikeScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUser without action
   */
  export type LanguageLearnerUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUser
     */
    select?: LanguageLearnerUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUser
     */
    omit?: LanguageLearnerUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserInclude<ExtArgs> | null
  }


  /**
   * Model LanguageLearnerPlatform
   */

  export type AggregateLanguageLearnerPlatform = {
    _count: LanguageLearnerPlatformCountAggregateOutputType | null
    _min: LanguageLearnerPlatformMinAggregateOutputType | null
    _max: LanguageLearnerPlatformMaxAggregateOutputType | null
  }

  export type LanguageLearnerPlatformMinAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    languagesOffered: string | null
    description: string | null
    ownerId: string | null
    status: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerPlatformMaxAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    languagesOffered: string | null
    description: string | null
    ownerId: string | null
    status: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerPlatformCountAggregateOutputType = {
    id: number
    name: number
    website: number
    languagesOffered: number
    description: number
    ownerId: number
    status: number
    createdAt: number
    _all: number
  }


  export type LanguageLearnerPlatformMinAggregateInputType = {
    id?: true
    name?: true
    website?: true
    languagesOffered?: true
    description?: true
    ownerId?: true
    status?: true
    createdAt?: true
  }

  export type LanguageLearnerPlatformMaxAggregateInputType = {
    id?: true
    name?: true
    website?: true
    languagesOffered?: true
    description?: true
    ownerId?: true
    status?: true
    createdAt?: true
  }

  export type LanguageLearnerPlatformCountAggregateInputType = {
    id?: true
    name?: true
    website?: true
    languagesOffered?: true
    description?: true
    ownerId?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type LanguageLearnerPlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerPlatform to aggregate.
     */
    where?: LanguageLearnerPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerPlatforms to fetch.
     */
    orderBy?: LanguageLearnerPlatformOrderByWithRelationInput | LanguageLearnerPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageLearnerPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguageLearnerPlatforms
    **/
    _count?: true | LanguageLearnerPlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageLearnerPlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageLearnerPlatformMaxAggregateInputType
  }

  export type GetLanguageLearnerPlatformAggregateType<T extends LanguageLearnerPlatformAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguageLearnerPlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguageLearnerPlatform[P]>
      : GetScalarType<T[P], AggregateLanguageLearnerPlatform[P]>
  }




  export type LanguageLearnerPlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerPlatformWhereInput
    orderBy?: LanguageLearnerPlatformOrderByWithAggregationInput | LanguageLearnerPlatformOrderByWithAggregationInput[]
    by: LanguageLearnerPlatformScalarFieldEnum[] | LanguageLearnerPlatformScalarFieldEnum
    having?: LanguageLearnerPlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageLearnerPlatformCountAggregateInputType | true
    _min?: LanguageLearnerPlatformMinAggregateInputType
    _max?: LanguageLearnerPlatformMaxAggregateInputType
  }

  export type LanguageLearnerPlatformGroupByOutputType = {
    id: string
    name: string
    website: string
    languagesOffered: string
    description: string
    ownerId: string
    status: string
    createdAt: Date
    _count: LanguageLearnerPlatformCountAggregateOutputType | null
    _min: LanguageLearnerPlatformMinAggregateOutputType | null
    _max: LanguageLearnerPlatformMaxAggregateOutputType | null
  }

  type GetLanguageLearnerPlatformGroupByPayload<T extends LanguageLearnerPlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageLearnerPlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageLearnerPlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageLearnerPlatformGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageLearnerPlatformGroupByOutputType[P]>
        }
      >
    >


  export type LanguageLearnerPlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    languagesOffered?: boolean
    description?: boolean
    ownerId?: boolean
    status?: boolean
    createdAt?: boolean
    owner?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    reviews?: boolean | LanguageLearnerPlatform$reviewsArgs<ExtArgs>
    _count?: boolean | LanguageLearnerPlatformCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerPlatform"]>

  export type LanguageLearnerPlatformSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    languagesOffered?: boolean
    description?: boolean
    ownerId?: boolean
    status?: boolean
    createdAt?: boolean
    owner?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerPlatform"]>

  export type LanguageLearnerPlatformSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    languagesOffered?: boolean
    description?: boolean
    ownerId?: boolean
    status?: boolean
    createdAt?: boolean
    owner?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerPlatform"]>

  export type LanguageLearnerPlatformSelectScalar = {
    id?: boolean
    name?: boolean
    website?: boolean
    languagesOffered?: boolean
    description?: boolean
    ownerId?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type LanguageLearnerPlatformOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "website" | "languagesOffered" | "description" | "ownerId" | "status" | "createdAt", ExtArgs["result"]["languageLearnerPlatform"]>
  export type LanguageLearnerPlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    reviews?: boolean | LanguageLearnerPlatform$reviewsArgs<ExtArgs>
    _count?: boolean | LanguageLearnerPlatformCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerPlatformIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerPlatformIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }

  export type $LanguageLearnerPlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguageLearnerPlatform"
    objects: {
      owner: Prisma.$LanguageLearnerUserPayload<ExtArgs>
      reviews: Prisma.$LanguageLearnerReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      website: string
      languagesOffered: string
      description: string
      ownerId: string
      status: string
      createdAt: Date
    }, ExtArgs["result"]["languageLearnerPlatform"]>
    composites: {}
  }

  type LanguageLearnerPlatformGetPayload<S extends boolean | null | undefined | LanguageLearnerPlatformDefaultArgs> = $Result.GetResult<Prisma.$LanguageLearnerPlatformPayload, S>

  type LanguageLearnerPlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageLearnerPlatformFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageLearnerPlatformCountAggregateInputType | true
    }

  export interface LanguageLearnerPlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguageLearnerPlatform'], meta: { name: 'LanguageLearnerPlatform' } }
    /**
     * Find zero or one LanguageLearnerPlatform that matches the filter.
     * @param {LanguageLearnerPlatformFindUniqueArgs} args - Arguments to find a LanguageLearnerPlatform
     * @example
     * // Get one LanguageLearnerPlatform
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageLearnerPlatformFindUniqueArgs>(args: SelectSubset<T, LanguageLearnerPlatformFindUniqueArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LanguageLearnerPlatform that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageLearnerPlatformFindUniqueOrThrowArgs} args - Arguments to find a LanguageLearnerPlatform
     * @example
     * // Get one LanguageLearnerPlatform
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageLearnerPlatformFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageLearnerPlatformFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerPlatform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerPlatformFindFirstArgs} args - Arguments to find a LanguageLearnerPlatform
     * @example
     * // Get one LanguageLearnerPlatform
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageLearnerPlatformFindFirstArgs>(args?: SelectSubset<T, LanguageLearnerPlatformFindFirstArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerPlatform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerPlatformFindFirstOrThrowArgs} args - Arguments to find a LanguageLearnerPlatform
     * @example
     * // Get one LanguageLearnerPlatform
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageLearnerPlatformFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageLearnerPlatformFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LanguageLearnerPlatforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerPlatformFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguageLearnerPlatforms
     * const languageLearnerPlatforms = await prisma.languageLearnerPlatform.findMany()
     * 
     * // Get first 10 LanguageLearnerPlatforms
     * const languageLearnerPlatforms = await prisma.languageLearnerPlatform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageLearnerPlatformWithIdOnly = await prisma.languageLearnerPlatform.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageLearnerPlatformFindManyArgs>(args?: SelectSubset<T, LanguageLearnerPlatformFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LanguageLearnerPlatform.
     * @param {LanguageLearnerPlatformCreateArgs} args - Arguments to create a LanguageLearnerPlatform.
     * @example
     * // Create one LanguageLearnerPlatform
     * const LanguageLearnerPlatform = await prisma.languageLearnerPlatform.create({
     *   data: {
     *     // ... data to create a LanguageLearnerPlatform
     *   }
     * })
     * 
     */
    create<T extends LanguageLearnerPlatformCreateArgs>(args: SelectSubset<T, LanguageLearnerPlatformCreateArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LanguageLearnerPlatforms.
     * @param {LanguageLearnerPlatformCreateManyArgs} args - Arguments to create many LanguageLearnerPlatforms.
     * @example
     * // Create many LanguageLearnerPlatforms
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageLearnerPlatformCreateManyArgs>(args?: SelectSubset<T, LanguageLearnerPlatformCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LanguageLearnerPlatforms and returns the data saved in the database.
     * @param {LanguageLearnerPlatformCreateManyAndReturnArgs} args - Arguments to create many LanguageLearnerPlatforms.
     * @example
     * // Create many LanguageLearnerPlatforms
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LanguageLearnerPlatforms and only return the `id`
     * const languageLearnerPlatformWithIdOnly = await prisma.languageLearnerPlatform.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguageLearnerPlatformCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguageLearnerPlatformCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LanguageLearnerPlatform.
     * @param {LanguageLearnerPlatformDeleteArgs} args - Arguments to delete one LanguageLearnerPlatform.
     * @example
     * // Delete one LanguageLearnerPlatform
     * const LanguageLearnerPlatform = await prisma.languageLearnerPlatform.delete({
     *   where: {
     *     // ... filter to delete one LanguageLearnerPlatform
     *   }
     * })
     * 
     */
    delete<T extends LanguageLearnerPlatformDeleteArgs>(args: SelectSubset<T, LanguageLearnerPlatformDeleteArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LanguageLearnerPlatform.
     * @param {LanguageLearnerPlatformUpdateArgs} args - Arguments to update one LanguageLearnerPlatform.
     * @example
     * // Update one LanguageLearnerPlatform
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageLearnerPlatformUpdateArgs>(args: SelectSubset<T, LanguageLearnerPlatformUpdateArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LanguageLearnerPlatforms.
     * @param {LanguageLearnerPlatformDeleteManyArgs} args - Arguments to filter LanguageLearnerPlatforms to delete.
     * @example
     * // Delete a few LanguageLearnerPlatforms
     * const { count } = await prisma.languageLearnerPlatform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageLearnerPlatformDeleteManyArgs>(args?: SelectSubset<T, LanguageLearnerPlatformDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerPlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerPlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguageLearnerPlatforms
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageLearnerPlatformUpdateManyArgs>(args: SelectSubset<T, LanguageLearnerPlatformUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerPlatforms and returns the data updated in the database.
     * @param {LanguageLearnerPlatformUpdateManyAndReturnArgs} args - Arguments to update many LanguageLearnerPlatforms.
     * @example
     * // Update many LanguageLearnerPlatforms
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LanguageLearnerPlatforms and only return the `id`
     * const languageLearnerPlatformWithIdOnly = await prisma.languageLearnerPlatform.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LanguageLearnerPlatformUpdateManyAndReturnArgs>(args: SelectSubset<T, LanguageLearnerPlatformUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LanguageLearnerPlatform.
     * @param {LanguageLearnerPlatformUpsertArgs} args - Arguments to update or create a LanguageLearnerPlatform.
     * @example
     * // Update or create a LanguageLearnerPlatform
     * const languageLearnerPlatform = await prisma.languageLearnerPlatform.upsert({
     *   create: {
     *     // ... data to create a LanguageLearnerPlatform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguageLearnerPlatform we want to update
     *   }
     * })
     */
    upsert<T extends LanguageLearnerPlatformUpsertArgs>(args: SelectSubset<T, LanguageLearnerPlatformUpsertArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LanguageLearnerPlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerPlatformCountArgs} args - Arguments to filter LanguageLearnerPlatforms to count.
     * @example
     * // Count the number of LanguageLearnerPlatforms
     * const count = await prisma.languageLearnerPlatform.count({
     *   where: {
     *     // ... the filter for the LanguageLearnerPlatforms we want to count
     *   }
     * })
    **/
    count<T extends LanguageLearnerPlatformCountArgs>(
      args?: Subset<T, LanguageLearnerPlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageLearnerPlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguageLearnerPlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerPlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageLearnerPlatformAggregateArgs>(args: Subset<T, LanguageLearnerPlatformAggregateArgs>): Prisma.PrismaPromise<GetLanguageLearnerPlatformAggregateType<T>>

    /**
     * Group by LanguageLearnerPlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerPlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageLearnerPlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageLearnerPlatformGroupByArgs['orderBy'] }
        : { orderBy?: LanguageLearnerPlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageLearnerPlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageLearnerPlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguageLearnerPlatform model
   */
  readonly fields: LanguageLearnerPlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguageLearnerPlatform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageLearnerPlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends LanguageLearnerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUserDefaultArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviews<T extends LanguageLearnerPlatform$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerPlatform$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LanguageLearnerPlatform model
   */ 
  interface LanguageLearnerPlatformFieldRefs {
    readonly id: FieldRef<"LanguageLearnerPlatform", 'String'>
    readonly name: FieldRef<"LanguageLearnerPlatform", 'String'>
    readonly website: FieldRef<"LanguageLearnerPlatform", 'String'>
    readonly languagesOffered: FieldRef<"LanguageLearnerPlatform", 'String'>
    readonly description: FieldRef<"LanguageLearnerPlatform", 'String'>
    readonly ownerId: FieldRef<"LanguageLearnerPlatform", 'String'>
    readonly status: FieldRef<"LanguageLearnerPlatform", 'String'>
    readonly createdAt: FieldRef<"LanguageLearnerPlatform", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LanguageLearnerPlatform findUnique
   */
  export type LanguageLearnerPlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerPlatform to fetch.
     */
    where: LanguageLearnerPlatformWhereUniqueInput
  }

  /**
   * LanguageLearnerPlatform findUniqueOrThrow
   */
  export type LanguageLearnerPlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerPlatform to fetch.
     */
    where: LanguageLearnerPlatformWhereUniqueInput
  }

  /**
   * LanguageLearnerPlatform findFirst
   */
  export type LanguageLearnerPlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerPlatform to fetch.
     */
    where?: LanguageLearnerPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerPlatforms to fetch.
     */
    orderBy?: LanguageLearnerPlatformOrderByWithRelationInput | LanguageLearnerPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerPlatforms.
     */
    cursor?: LanguageLearnerPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerPlatforms.
     */
    distinct?: LanguageLearnerPlatformScalarFieldEnum | LanguageLearnerPlatformScalarFieldEnum[]
  }

  /**
   * LanguageLearnerPlatform findFirstOrThrow
   */
  export type LanguageLearnerPlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerPlatform to fetch.
     */
    where?: LanguageLearnerPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerPlatforms to fetch.
     */
    orderBy?: LanguageLearnerPlatformOrderByWithRelationInput | LanguageLearnerPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerPlatforms.
     */
    cursor?: LanguageLearnerPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerPlatforms.
     */
    distinct?: LanguageLearnerPlatformScalarFieldEnum | LanguageLearnerPlatformScalarFieldEnum[]
  }

  /**
   * LanguageLearnerPlatform findMany
   */
  export type LanguageLearnerPlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerPlatforms to fetch.
     */
    where?: LanguageLearnerPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerPlatforms to fetch.
     */
    orderBy?: LanguageLearnerPlatformOrderByWithRelationInput | LanguageLearnerPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguageLearnerPlatforms.
     */
    cursor?: LanguageLearnerPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerPlatforms.
     */
    skip?: number
    distinct?: LanguageLearnerPlatformScalarFieldEnum | LanguageLearnerPlatformScalarFieldEnum[]
  }

  /**
   * LanguageLearnerPlatform create
   */
  export type LanguageLearnerPlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguageLearnerPlatform.
     */
    data: XOR<LanguageLearnerPlatformCreateInput, LanguageLearnerPlatformUncheckedCreateInput>
  }

  /**
   * LanguageLearnerPlatform createMany
   */
  export type LanguageLearnerPlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguageLearnerPlatforms.
     */
    data: LanguageLearnerPlatformCreateManyInput | LanguageLearnerPlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageLearnerPlatform createManyAndReturn
   */
  export type LanguageLearnerPlatformCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * The data used to create many LanguageLearnerPlatforms.
     */
    data: LanguageLearnerPlatformCreateManyInput | LanguageLearnerPlatformCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerPlatform update
   */
  export type LanguageLearnerPlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguageLearnerPlatform.
     */
    data: XOR<LanguageLearnerPlatformUpdateInput, LanguageLearnerPlatformUncheckedUpdateInput>
    /**
     * Choose, which LanguageLearnerPlatform to update.
     */
    where: LanguageLearnerPlatformWhereUniqueInput
  }

  /**
   * LanguageLearnerPlatform updateMany
   */
  export type LanguageLearnerPlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguageLearnerPlatforms.
     */
    data: XOR<LanguageLearnerPlatformUpdateManyMutationInput, LanguageLearnerPlatformUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerPlatforms to update
     */
    where?: LanguageLearnerPlatformWhereInput
    /**
     * Limit how many LanguageLearnerPlatforms to update.
     */
    limit?: number
  }

  /**
   * LanguageLearnerPlatform updateManyAndReturn
   */
  export type LanguageLearnerPlatformUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * The data used to update LanguageLearnerPlatforms.
     */
    data: XOR<LanguageLearnerPlatformUpdateManyMutationInput, LanguageLearnerPlatformUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerPlatforms to update
     */
    where?: LanguageLearnerPlatformWhereInput
    /**
     * Limit how many LanguageLearnerPlatforms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerPlatform upsert
   */
  export type LanguageLearnerPlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguageLearnerPlatform to update in case it exists.
     */
    where: LanguageLearnerPlatformWhereUniqueInput
    /**
     * In case the LanguageLearnerPlatform found by the `where` argument doesn't exist, create a new LanguageLearnerPlatform with this data.
     */
    create: XOR<LanguageLearnerPlatformCreateInput, LanguageLearnerPlatformUncheckedCreateInput>
    /**
     * In case the LanguageLearnerPlatform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageLearnerPlatformUpdateInput, LanguageLearnerPlatformUncheckedUpdateInput>
  }

  /**
   * LanguageLearnerPlatform delete
   */
  export type LanguageLearnerPlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
    /**
     * Filter which LanguageLearnerPlatform to delete.
     */
    where: LanguageLearnerPlatformWhereUniqueInput
  }

  /**
   * LanguageLearnerPlatform deleteMany
   */
  export type LanguageLearnerPlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerPlatforms to delete
     */
    where?: LanguageLearnerPlatformWhereInput
    /**
     * Limit how many LanguageLearnerPlatforms to delete.
     */
    limit?: number
  }

  /**
   * LanguageLearnerPlatform.reviews
   */
  export type LanguageLearnerPlatform$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    where?: LanguageLearnerReviewWhereInput
    orderBy?: LanguageLearnerReviewOrderByWithRelationInput | LanguageLearnerReviewOrderByWithRelationInput[]
    cursor?: LanguageLearnerReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageLearnerReviewScalarFieldEnum | LanguageLearnerReviewScalarFieldEnum[]
  }

  /**
   * LanguageLearnerPlatform without action
   */
  export type LanguageLearnerPlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerPlatform
     */
    select?: LanguageLearnerPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerPlatform
     */
    omit?: LanguageLearnerPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerPlatformInclude<ExtArgs> | null
  }


  /**
   * Model LanguageLearnerReview
   */

  export type AggregateLanguageLearnerReview = {
    _count: LanguageLearnerReviewCountAggregateOutputType | null
    _avg: LanguageLearnerReviewAvgAggregateOutputType | null
    _sum: LanguageLearnerReviewSumAggregateOutputType | null
    _min: LanguageLearnerReviewMinAggregateOutputType | null
    _max: LanguageLearnerReviewMaxAggregateOutputType | null
  }

  export type LanguageLearnerReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type LanguageLearnerReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type LanguageLearnerReviewMinAggregateOutputType = {
    id: string | null
    platformId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    status: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerReviewMaxAggregateOutputType = {
    id: string | null
    platformId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    status: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerReviewCountAggregateOutputType = {
    id: number
    platformId: number
    userId: number
    rating: number
    comment: number
    status: number
    createdAt: number
    _all: number
  }


  export type LanguageLearnerReviewAvgAggregateInputType = {
    rating?: true
  }

  export type LanguageLearnerReviewSumAggregateInputType = {
    rating?: true
  }

  export type LanguageLearnerReviewMinAggregateInputType = {
    id?: true
    platformId?: true
    userId?: true
    rating?: true
    comment?: true
    status?: true
    createdAt?: true
  }

  export type LanguageLearnerReviewMaxAggregateInputType = {
    id?: true
    platformId?: true
    userId?: true
    rating?: true
    comment?: true
    status?: true
    createdAt?: true
  }

  export type LanguageLearnerReviewCountAggregateInputType = {
    id?: true
    platformId?: true
    userId?: true
    rating?: true
    comment?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type LanguageLearnerReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerReview to aggregate.
     */
    where?: LanguageLearnerReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviews to fetch.
     */
    orderBy?: LanguageLearnerReviewOrderByWithRelationInput | LanguageLearnerReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageLearnerReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguageLearnerReviews
    **/
    _count?: true | LanguageLearnerReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguageLearnerReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguageLearnerReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageLearnerReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageLearnerReviewMaxAggregateInputType
  }

  export type GetLanguageLearnerReviewAggregateType<T extends LanguageLearnerReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguageLearnerReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguageLearnerReview[P]>
      : GetScalarType<T[P], AggregateLanguageLearnerReview[P]>
  }




  export type LanguageLearnerReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerReviewWhereInput
    orderBy?: LanguageLearnerReviewOrderByWithAggregationInput | LanguageLearnerReviewOrderByWithAggregationInput[]
    by: LanguageLearnerReviewScalarFieldEnum[] | LanguageLearnerReviewScalarFieldEnum
    having?: LanguageLearnerReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageLearnerReviewCountAggregateInputType | true
    _avg?: LanguageLearnerReviewAvgAggregateInputType
    _sum?: LanguageLearnerReviewSumAggregateInputType
    _min?: LanguageLearnerReviewMinAggregateInputType
    _max?: LanguageLearnerReviewMaxAggregateInputType
  }

  export type LanguageLearnerReviewGroupByOutputType = {
    id: string
    platformId: string
    userId: string
    rating: number
    comment: string
    status: string
    createdAt: Date
    _count: LanguageLearnerReviewCountAggregateOutputType | null
    _avg: LanguageLearnerReviewAvgAggregateOutputType | null
    _sum: LanguageLearnerReviewSumAggregateOutputType | null
    _min: LanguageLearnerReviewMinAggregateOutputType | null
    _max: LanguageLearnerReviewMaxAggregateOutputType | null
  }

  type GetLanguageLearnerReviewGroupByPayload<T extends LanguageLearnerReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageLearnerReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageLearnerReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageLearnerReviewGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageLearnerReviewGroupByOutputType[P]>
        }
      >
    >


  export type LanguageLearnerReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platformId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    status?: boolean
    createdAt?: boolean
    platform?: boolean | LanguageLearnerPlatformDefaultArgs<ExtArgs>
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    likes?: boolean | LanguageLearnerReview$likesArgs<ExtArgs>
    _count?: boolean | LanguageLearnerReviewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerReview"]>

  export type LanguageLearnerReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platformId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    status?: boolean
    createdAt?: boolean
    platform?: boolean | LanguageLearnerPlatformDefaultArgs<ExtArgs>
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerReview"]>

  export type LanguageLearnerReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platformId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    status?: boolean
    createdAt?: boolean
    platform?: boolean | LanguageLearnerPlatformDefaultArgs<ExtArgs>
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerReview"]>

  export type LanguageLearnerReviewSelectScalar = {
    id?: boolean
    platformId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type LanguageLearnerReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "platformId" | "userId" | "rating" | "comment" | "status" | "createdAt", ExtArgs["result"]["languageLearnerReview"]>
  export type LanguageLearnerReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platform?: boolean | LanguageLearnerPlatformDefaultArgs<ExtArgs>
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    likes?: boolean | LanguageLearnerReview$likesArgs<ExtArgs>
    _count?: boolean | LanguageLearnerReviewCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platform?: boolean | LanguageLearnerPlatformDefaultArgs<ExtArgs>
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platform?: boolean | LanguageLearnerPlatformDefaultArgs<ExtArgs>
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }

  export type $LanguageLearnerReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguageLearnerReview"
    objects: {
      platform: Prisma.$LanguageLearnerPlatformPayload<ExtArgs>
      user: Prisma.$LanguageLearnerUserPayload<ExtArgs>
      likes: Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      platformId: string
      userId: string
      rating: number
      comment: string
      status: string
      createdAt: Date
    }, ExtArgs["result"]["languageLearnerReview"]>
    composites: {}
  }

  type LanguageLearnerReviewGetPayload<S extends boolean | null | undefined | LanguageLearnerReviewDefaultArgs> = $Result.GetResult<Prisma.$LanguageLearnerReviewPayload, S>

  type LanguageLearnerReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageLearnerReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageLearnerReviewCountAggregateInputType | true
    }

  export interface LanguageLearnerReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguageLearnerReview'], meta: { name: 'LanguageLearnerReview' } }
    /**
     * Find zero or one LanguageLearnerReview that matches the filter.
     * @param {LanguageLearnerReviewFindUniqueArgs} args - Arguments to find a LanguageLearnerReview
     * @example
     * // Get one LanguageLearnerReview
     * const languageLearnerReview = await prisma.languageLearnerReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageLearnerReviewFindUniqueArgs>(args: SelectSubset<T, LanguageLearnerReviewFindUniqueArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LanguageLearnerReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageLearnerReviewFindUniqueOrThrowArgs} args - Arguments to find a LanguageLearnerReview
     * @example
     * // Get one LanguageLearnerReview
     * const languageLearnerReview = await prisma.languageLearnerReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageLearnerReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageLearnerReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewFindFirstArgs} args - Arguments to find a LanguageLearnerReview
     * @example
     * // Get one LanguageLearnerReview
     * const languageLearnerReview = await prisma.languageLearnerReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageLearnerReviewFindFirstArgs>(args?: SelectSubset<T, LanguageLearnerReviewFindFirstArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewFindFirstOrThrowArgs} args - Arguments to find a LanguageLearnerReview
     * @example
     * // Get one LanguageLearnerReview
     * const languageLearnerReview = await prisma.languageLearnerReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageLearnerReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageLearnerReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LanguageLearnerReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguageLearnerReviews
     * const languageLearnerReviews = await prisma.languageLearnerReview.findMany()
     * 
     * // Get first 10 LanguageLearnerReviews
     * const languageLearnerReviews = await prisma.languageLearnerReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageLearnerReviewWithIdOnly = await prisma.languageLearnerReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageLearnerReviewFindManyArgs>(args?: SelectSubset<T, LanguageLearnerReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LanguageLearnerReview.
     * @param {LanguageLearnerReviewCreateArgs} args - Arguments to create a LanguageLearnerReview.
     * @example
     * // Create one LanguageLearnerReview
     * const LanguageLearnerReview = await prisma.languageLearnerReview.create({
     *   data: {
     *     // ... data to create a LanguageLearnerReview
     *   }
     * })
     * 
     */
    create<T extends LanguageLearnerReviewCreateArgs>(args: SelectSubset<T, LanguageLearnerReviewCreateArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LanguageLearnerReviews.
     * @param {LanguageLearnerReviewCreateManyArgs} args - Arguments to create many LanguageLearnerReviews.
     * @example
     * // Create many LanguageLearnerReviews
     * const languageLearnerReview = await prisma.languageLearnerReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageLearnerReviewCreateManyArgs>(args?: SelectSubset<T, LanguageLearnerReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LanguageLearnerReviews and returns the data saved in the database.
     * @param {LanguageLearnerReviewCreateManyAndReturnArgs} args - Arguments to create many LanguageLearnerReviews.
     * @example
     * // Create many LanguageLearnerReviews
     * const languageLearnerReview = await prisma.languageLearnerReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LanguageLearnerReviews and only return the `id`
     * const languageLearnerReviewWithIdOnly = await prisma.languageLearnerReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguageLearnerReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguageLearnerReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LanguageLearnerReview.
     * @param {LanguageLearnerReviewDeleteArgs} args - Arguments to delete one LanguageLearnerReview.
     * @example
     * // Delete one LanguageLearnerReview
     * const LanguageLearnerReview = await prisma.languageLearnerReview.delete({
     *   where: {
     *     // ... filter to delete one LanguageLearnerReview
     *   }
     * })
     * 
     */
    delete<T extends LanguageLearnerReviewDeleteArgs>(args: SelectSubset<T, LanguageLearnerReviewDeleteArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LanguageLearnerReview.
     * @param {LanguageLearnerReviewUpdateArgs} args - Arguments to update one LanguageLearnerReview.
     * @example
     * // Update one LanguageLearnerReview
     * const languageLearnerReview = await prisma.languageLearnerReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageLearnerReviewUpdateArgs>(args: SelectSubset<T, LanguageLearnerReviewUpdateArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LanguageLearnerReviews.
     * @param {LanguageLearnerReviewDeleteManyArgs} args - Arguments to filter LanguageLearnerReviews to delete.
     * @example
     * // Delete a few LanguageLearnerReviews
     * const { count } = await prisma.languageLearnerReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageLearnerReviewDeleteManyArgs>(args?: SelectSubset<T, LanguageLearnerReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguageLearnerReviews
     * const languageLearnerReview = await prisma.languageLearnerReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageLearnerReviewUpdateManyArgs>(args: SelectSubset<T, LanguageLearnerReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerReviews and returns the data updated in the database.
     * @param {LanguageLearnerReviewUpdateManyAndReturnArgs} args - Arguments to update many LanguageLearnerReviews.
     * @example
     * // Update many LanguageLearnerReviews
     * const languageLearnerReview = await prisma.languageLearnerReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LanguageLearnerReviews and only return the `id`
     * const languageLearnerReviewWithIdOnly = await prisma.languageLearnerReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LanguageLearnerReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, LanguageLearnerReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LanguageLearnerReview.
     * @param {LanguageLearnerReviewUpsertArgs} args - Arguments to update or create a LanguageLearnerReview.
     * @example
     * // Update or create a LanguageLearnerReview
     * const languageLearnerReview = await prisma.languageLearnerReview.upsert({
     *   create: {
     *     // ... data to create a LanguageLearnerReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguageLearnerReview we want to update
     *   }
     * })
     */
    upsert<T extends LanguageLearnerReviewUpsertArgs>(args: SelectSubset<T, LanguageLearnerReviewUpsertArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LanguageLearnerReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewCountArgs} args - Arguments to filter LanguageLearnerReviews to count.
     * @example
     * // Count the number of LanguageLearnerReviews
     * const count = await prisma.languageLearnerReview.count({
     *   where: {
     *     // ... the filter for the LanguageLearnerReviews we want to count
     *   }
     * })
    **/
    count<T extends LanguageLearnerReviewCountArgs>(
      args?: Subset<T, LanguageLearnerReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageLearnerReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguageLearnerReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageLearnerReviewAggregateArgs>(args: Subset<T, LanguageLearnerReviewAggregateArgs>): Prisma.PrismaPromise<GetLanguageLearnerReviewAggregateType<T>>

    /**
     * Group by LanguageLearnerReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageLearnerReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageLearnerReviewGroupByArgs['orderBy'] }
        : { orderBy?: LanguageLearnerReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageLearnerReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageLearnerReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguageLearnerReview model
   */
  readonly fields: LanguageLearnerReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguageLearnerReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageLearnerReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    platform<T extends LanguageLearnerPlatformDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerPlatformDefaultArgs<ExtArgs>>): Prisma__LanguageLearnerPlatformClient<$Result.GetResult<Prisma.$LanguageLearnerPlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends LanguageLearnerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUserDefaultArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    likes<T extends LanguageLearnerReview$likesArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerReview$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LanguageLearnerReview model
   */ 
  interface LanguageLearnerReviewFieldRefs {
    readonly id: FieldRef<"LanguageLearnerReview", 'String'>
    readonly platformId: FieldRef<"LanguageLearnerReview", 'String'>
    readonly userId: FieldRef<"LanguageLearnerReview", 'String'>
    readonly rating: FieldRef<"LanguageLearnerReview", 'Int'>
    readonly comment: FieldRef<"LanguageLearnerReview", 'String'>
    readonly status: FieldRef<"LanguageLearnerReview", 'String'>
    readonly createdAt: FieldRef<"LanguageLearnerReview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LanguageLearnerReview findUnique
   */
  export type LanguageLearnerReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReview to fetch.
     */
    where: LanguageLearnerReviewWhereUniqueInput
  }

  /**
   * LanguageLearnerReview findUniqueOrThrow
   */
  export type LanguageLearnerReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReview to fetch.
     */
    where: LanguageLearnerReviewWhereUniqueInput
  }

  /**
   * LanguageLearnerReview findFirst
   */
  export type LanguageLearnerReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReview to fetch.
     */
    where?: LanguageLearnerReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviews to fetch.
     */
    orderBy?: LanguageLearnerReviewOrderByWithRelationInput | LanguageLearnerReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerReviews.
     */
    cursor?: LanguageLearnerReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerReviews.
     */
    distinct?: LanguageLearnerReviewScalarFieldEnum | LanguageLearnerReviewScalarFieldEnum[]
  }

  /**
   * LanguageLearnerReview findFirstOrThrow
   */
  export type LanguageLearnerReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReview to fetch.
     */
    where?: LanguageLearnerReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviews to fetch.
     */
    orderBy?: LanguageLearnerReviewOrderByWithRelationInput | LanguageLearnerReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerReviews.
     */
    cursor?: LanguageLearnerReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerReviews.
     */
    distinct?: LanguageLearnerReviewScalarFieldEnum | LanguageLearnerReviewScalarFieldEnum[]
  }

  /**
   * LanguageLearnerReview findMany
   */
  export type LanguageLearnerReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReviews to fetch.
     */
    where?: LanguageLearnerReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviews to fetch.
     */
    orderBy?: LanguageLearnerReviewOrderByWithRelationInput | LanguageLearnerReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguageLearnerReviews.
     */
    cursor?: LanguageLearnerReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviews.
     */
    skip?: number
    distinct?: LanguageLearnerReviewScalarFieldEnum | LanguageLearnerReviewScalarFieldEnum[]
  }

  /**
   * LanguageLearnerReview create
   */
  export type LanguageLearnerReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguageLearnerReview.
     */
    data: XOR<LanguageLearnerReviewCreateInput, LanguageLearnerReviewUncheckedCreateInput>
  }

  /**
   * LanguageLearnerReview createMany
   */
  export type LanguageLearnerReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguageLearnerReviews.
     */
    data: LanguageLearnerReviewCreateManyInput | LanguageLearnerReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageLearnerReview createManyAndReturn
   */
  export type LanguageLearnerReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * The data used to create many LanguageLearnerReviews.
     */
    data: LanguageLearnerReviewCreateManyInput | LanguageLearnerReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerReview update
   */
  export type LanguageLearnerReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguageLearnerReview.
     */
    data: XOR<LanguageLearnerReviewUpdateInput, LanguageLearnerReviewUncheckedUpdateInput>
    /**
     * Choose, which LanguageLearnerReview to update.
     */
    where: LanguageLearnerReviewWhereUniqueInput
  }

  /**
   * LanguageLearnerReview updateMany
   */
  export type LanguageLearnerReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguageLearnerReviews.
     */
    data: XOR<LanguageLearnerReviewUpdateManyMutationInput, LanguageLearnerReviewUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerReviews to update
     */
    where?: LanguageLearnerReviewWhereInput
    /**
     * Limit how many LanguageLearnerReviews to update.
     */
    limit?: number
  }

  /**
   * LanguageLearnerReview updateManyAndReturn
   */
  export type LanguageLearnerReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * The data used to update LanguageLearnerReviews.
     */
    data: XOR<LanguageLearnerReviewUpdateManyMutationInput, LanguageLearnerReviewUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerReviews to update
     */
    where?: LanguageLearnerReviewWhereInput
    /**
     * Limit how many LanguageLearnerReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerReview upsert
   */
  export type LanguageLearnerReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguageLearnerReview to update in case it exists.
     */
    where: LanguageLearnerReviewWhereUniqueInput
    /**
     * In case the LanguageLearnerReview found by the `where` argument doesn't exist, create a new LanguageLearnerReview with this data.
     */
    create: XOR<LanguageLearnerReviewCreateInput, LanguageLearnerReviewUncheckedCreateInput>
    /**
     * In case the LanguageLearnerReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageLearnerReviewUpdateInput, LanguageLearnerReviewUncheckedUpdateInput>
  }

  /**
   * LanguageLearnerReview delete
   */
  export type LanguageLearnerReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
    /**
     * Filter which LanguageLearnerReview to delete.
     */
    where: LanguageLearnerReviewWhereUniqueInput
  }

  /**
   * LanguageLearnerReview deleteMany
   */
  export type LanguageLearnerReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerReviews to delete
     */
    where?: LanguageLearnerReviewWhereInput
    /**
     * Limit how many LanguageLearnerReviews to delete.
     */
    limit?: number
  }

  /**
   * LanguageLearnerReview.likes
   */
  export type LanguageLearnerReview$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    where?: LanguageLearnerReviewLikeWhereInput
    orderBy?: LanguageLearnerReviewLikeOrderByWithRelationInput | LanguageLearnerReviewLikeOrderByWithRelationInput[]
    cursor?: LanguageLearnerReviewLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageLearnerReviewLikeScalarFieldEnum | LanguageLearnerReviewLikeScalarFieldEnum[]
  }

  /**
   * LanguageLearnerReview without action
   */
  export type LanguageLearnerReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReview
     */
    select?: LanguageLearnerReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReview
     */
    omit?: LanguageLearnerReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewInclude<ExtArgs> | null
  }


  /**
   * Model LanguageLearnerReviewLike
   */

  export type AggregateLanguageLearnerReviewLike = {
    _count: LanguageLearnerReviewLikeCountAggregateOutputType | null
    _min: LanguageLearnerReviewLikeMinAggregateOutputType | null
    _max: LanguageLearnerReviewLikeMaxAggregateOutputType | null
  }

  export type LanguageLearnerReviewLikeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    reviewId: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerReviewLikeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    reviewId: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerReviewLikeCountAggregateOutputType = {
    id: number
    userId: number
    reviewId: number
    createdAt: number
    _all: number
  }


  export type LanguageLearnerReviewLikeMinAggregateInputType = {
    id?: true
    userId?: true
    reviewId?: true
    createdAt?: true
  }

  export type LanguageLearnerReviewLikeMaxAggregateInputType = {
    id?: true
    userId?: true
    reviewId?: true
    createdAt?: true
  }

  export type LanguageLearnerReviewLikeCountAggregateInputType = {
    id?: true
    userId?: true
    reviewId?: true
    createdAt?: true
    _all?: true
  }

  export type LanguageLearnerReviewLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerReviewLike to aggregate.
     */
    where?: LanguageLearnerReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviewLikes to fetch.
     */
    orderBy?: LanguageLearnerReviewLikeOrderByWithRelationInput | LanguageLearnerReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageLearnerReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguageLearnerReviewLikes
    **/
    _count?: true | LanguageLearnerReviewLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageLearnerReviewLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageLearnerReviewLikeMaxAggregateInputType
  }

  export type GetLanguageLearnerReviewLikeAggregateType<T extends LanguageLearnerReviewLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguageLearnerReviewLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguageLearnerReviewLike[P]>
      : GetScalarType<T[P], AggregateLanguageLearnerReviewLike[P]>
  }




  export type LanguageLearnerReviewLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerReviewLikeWhereInput
    orderBy?: LanguageLearnerReviewLikeOrderByWithAggregationInput | LanguageLearnerReviewLikeOrderByWithAggregationInput[]
    by: LanguageLearnerReviewLikeScalarFieldEnum[] | LanguageLearnerReviewLikeScalarFieldEnum
    having?: LanguageLearnerReviewLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageLearnerReviewLikeCountAggregateInputType | true
    _min?: LanguageLearnerReviewLikeMinAggregateInputType
    _max?: LanguageLearnerReviewLikeMaxAggregateInputType
  }

  export type LanguageLearnerReviewLikeGroupByOutputType = {
    id: string
    userId: string
    reviewId: string
    createdAt: Date
    _count: LanguageLearnerReviewLikeCountAggregateOutputType | null
    _min: LanguageLearnerReviewLikeMinAggregateOutputType | null
    _max: LanguageLearnerReviewLikeMaxAggregateOutputType | null
  }

  type GetLanguageLearnerReviewLikeGroupByPayload<T extends LanguageLearnerReviewLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageLearnerReviewLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageLearnerReviewLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageLearnerReviewLikeGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageLearnerReviewLikeGroupByOutputType[P]>
        }
      >
    >


  export type LanguageLearnerReviewLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    reviewId?: boolean
    createdAt?: boolean
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    review?: boolean | LanguageLearnerReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerReviewLike"]>

  export type LanguageLearnerReviewLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    reviewId?: boolean
    createdAt?: boolean
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    review?: boolean | LanguageLearnerReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerReviewLike"]>

  export type LanguageLearnerReviewLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    reviewId?: boolean
    createdAt?: boolean
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    review?: boolean | LanguageLearnerReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerReviewLike"]>

  export type LanguageLearnerReviewLikeSelectScalar = {
    id?: boolean
    userId?: boolean
    reviewId?: boolean
    createdAt?: boolean
  }

  export type LanguageLearnerReviewLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "reviewId" | "createdAt", ExtArgs["result"]["languageLearnerReviewLike"]>
  export type LanguageLearnerReviewLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    review?: boolean | LanguageLearnerReviewDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerReviewLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    review?: boolean | LanguageLearnerReviewDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerReviewLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    review?: boolean | LanguageLearnerReviewDefaultArgs<ExtArgs>
  }

  export type $LanguageLearnerReviewLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguageLearnerReviewLike"
    objects: {
      user: Prisma.$LanguageLearnerUserPayload<ExtArgs>
      review: Prisma.$LanguageLearnerReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      reviewId: string
      createdAt: Date
    }, ExtArgs["result"]["languageLearnerReviewLike"]>
    composites: {}
  }

  type LanguageLearnerReviewLikeGetPayload<S extends boolean | null | undefined | LanguageLearnerReviewLikeDefaultArgs> = $Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload, S>

  type LanguageLearnerReviewLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageLearnerReviewLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageLearnerReviewLikeCountAggregateInputType | true
    }

  export interface LanguageLearnerReviewLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguageLearnerReviewLike'], meta: { name: 'LanguageLearnerReviewLike' } }
    /**
     * Find zero or one LanguageLearnerReviewLike that matches the filter.
     * @param {LanguageLearnerReviewLikeFindUniqueArgs} args - Arguments to find a LanguageLearnerReviewLike
     * @example
     * // Get one LanguageLearnerReviewLike
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageLearnerReviewLikeFindUniqueArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeFindUniqueArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LanguageLearnerReviewLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageLearnerReviewLikeFindUniqueOrThrowArgs} args - Arguments to find a LanguageLearnerReviewLike
     * @example
     * // Get one LanguageLearnerReviewLike
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageLearnerReviewLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerReviewLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewLikeFindFirstArgs} args - Arguments to find a LanguageLearnerReviewLike
     * @example
     * // Get one LanguageLearnerReviewLike
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageLearnerReviewLikeFindFirstArgs>(args?: SelectSubset<T, LanguageLearnerReviewLikeFindFirstArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerReviewLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewLikeFindFirstOrThrowArgs} args - Arguments to find a LanguageLearnerReviewLike
     * @example
     * // Get one LanguageLearnerReviewLike
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageLearnerReviewLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageLearnerReviewLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LanguageLearnerReviewLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguageLearnerReviewLikes
     * const languageLearnerReviewLikes = await prisma.languageLearnerReviewLike.findMany()
     * 
     * // Get first 10 LanguageLearnerReviewLikes
     * const languageLearnerReviewLikes = await prisma.languageLearnerReviewLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageLearnerReviewLikeWithIdOnly = await prisma.languageLearnerReviewLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageLearnerReviewLikeFindManyArgs>(args?: SelectSubset<T, LanguageLearnerReviewLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LanguageLearnerReviewLike.
     * @param {LanguageLearnerReviewLikeCreateArgs} args - Arguments to create a LanguageLearnerReviewLike.
     * @example
     * // Create one LanguageLearnerReviewLike
     * const LanguageLearnerReviewLike = await prisma.languageLearnerReviewLike.create({
     *   data: {
     *     // ... data to create a LanguageLearnerReviewLike
     *   }
     * })
     * 
     */
    create<T extends LanguageLearnerReviewLikeCreateArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeCreateArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LanguageLearnerReviewLikes.
     * @param {LanguageLearnerReviewLikeCreateManyArgs} args - Arguments to create many LanguageLearnerReviewLikes.
     * @example
     * // Create many LanguageLearnerReviewLikes
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageLearnerReviewLikeCreateManyArgs>(args?: SelectSubset<T, LanguageLearnerReviewLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LanguageLearnerReviewLikes and returns the data saved in the database.
     * @param {LanguageLearnerReviewLikeCreateManyAndReturnArgs} args - Arguments to create many LanguageLearnerReviewLikes.
     * @example
     * // Create many LanguageLearnerReviewLikes
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LanguageLearnerReviewLikes and only return the `id`
     * const languageLearnerReviewLikeWithIdOnly = await prisma.languageLearnerReviewLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguageLearnerReviewLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguageLearnerReviewLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LanguageLearnerReviewLike.
     * @param {LanguageLearnerReviewLikeDeleteArgs} args - Arguments to delete one LanguageLearnerReviewLike.
     * @example
     * // Delete one LanguageLearnerReviewLike
     * const LanguageLearnerReviewLike = await prisma.languageLearnerReviewLike.delete({
     *   where: {
     *     // ... filter to delete one LanguageLearnerReviewLike
     *   }
     * })
     * 
     */
    delete<T extends LanguageLearnerReviewLikeDeleteArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeDeleteArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LanguageLearnerReviewLike.
     * @param {LanguageLearnerReviewLikeUpdateArgs} args - Arguments to update one LanguageLearnerReviewLike.
     * @example
     * // Update one LanguageLearnerReviewLike
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageLearnerReviewLikeUpdateArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeUpdateArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LanguageLearnerReviewLikes.
     * @param {LanguageLearnerReviewLikeDeleteManyArgs} args - Arguments to filter LanguageLearnerReviewLikes to delete.
     * @example
     * // Delete a few LanguageLearnerReviewLikes
     * const { count } = await prisma.languageLearnerReviewLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageLearnerReviewLikeDeleteManyArgs>(args?: SelectSubset<T, LanguageLearnerReviewLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerReviewLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguageLearnerReviewLikes
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageLearnerReviewLikeUpdateManyArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerReviewLikes and returns the data updated in the database.
     * @param {LanguageLearnerReviewLikeUpdateManyAndReturnArgs} args - Arguments to update many LanguageLearnerReviewLikes.
     * @example
     * // Update many LanguageLearnerReviewLikes
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LanguageLearnerReviewLikes and only return the `id`
     * const languageLearnerReviewLikeWithIdOnly = await prisma.languageLearnerReviewLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LanguageLearnerReviewLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LanguageLearnerReviewLike.
     * @param {LanguageLearnerReviewLikeUpsertArgs} args - Arguments to update or create a LanguageLearnerReviewLike.
     * @example
     * // Update or create a LanguageLearnerReviewLike
     * const languageLearnerReviewLike = await prisma.languageLearnerReviewLike.upsert({
     *   create: {
     *     // ... data to create a LanguageLearnerReviewLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguageLearnerReviewLike we want to update
     *   }
     * })
     */
    upsert<T extends LanguageLearnerReviewLikeUpsertArgs>(args: SelectSubset<T, LanguageLearnerReviewLikeUpsertArgs<ExtArgs>>): Prisma__LanguageLearnerReviewLikeClient<$Result.GetResult<Prisma.$LanguageLearnerReviewLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LanguageLearnerReviewLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewLikeCountArgs} args - Arguments to filter LanguageLearnerReviewLikes to count.
     * @example
     * // Count the number of LanguageLearnerReviewLikes
     * const count = await prisma.languageLearnerReviewLike.count({
     *   where: {
     *     // ... the filter for the LanguageLearnerReviewLikes we want to count
     *   }
     * })
    **/
    count<T extends LanguageLearnerReviewLikeCountArgs>(
      args?: Subset<T, LanguageLearnerReviewLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageLearnerReviewLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguageLearnerReviewLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageLearnerReviewLikeAggregateArgs>(args: Subset<T, LanguageLearnerReviewLikeAggregateArgs>): Prisma.PrismaPromise<GetLanguageLearnerReviewLikeAggregateType<T>>

    /**
     * Group by LanguageLearnerReviewLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerReviewLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageLearnerReviewLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageLearnerReviewLikeGroupByArgs['orderBy'] }
        : { orderBy?: LanguageLearnerReviewLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageLearnerReviewLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageLearnerReviewLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguageLearnerReviewLike model
   */
  readonly fields: LanguageLearnerReviewLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguageLearnerReviewLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageLearnerReviewLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends LanguageLearnerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUserDefaultArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    review<T extends LanguageLearnerReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerReviewDefaultArgs<ExtArgs>>): Prisma__LanguageLearnerReviewClient<$Result.GetResult<Prisma.$LanguageLearnerReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LanguageLearnerReviewLike model
   */ 
  interface LanguageLearnerReviewLikeFieldRefs {
    readonly id: FieldRef<"LanguageLearnerReviewLike", 'String'>
    readonly userId: FieldRef<"LanguageLearnerReviewLike", 'String'>
    readonly reviewId: FieldRef<"LanguageLearnerReviewLike", 'String'>
    readonly createdAt: FieldRef<"LanguageLearnerReviewLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LanguageLearnerReviewLike findUnique
   */
  export type LanguageLearnerReviewLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReviewLike to fetch.
     */
    where: LanguageLearnerReviewLikeWhereUniqueInput
  }

  /**
   * LanguageLearnerReviewLike findUniqueOrThrow
   */
  export type LanguageLearnerReviewLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReviewLike to fetch.
     */
    where: LanguageLearnerReviewLikeWhereUniqueInput
  }

  /**
   * LanguageLearnerReviewLike findFirst
   */
  export type LanguageLearnerReviewLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReviewLike to fetch.
     */
    where?: LanguageLearnerReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviewLikes to fetch.
     */
    orderBy?: LanguageLearnerReviewLikeOrderByWithRelationInput | LanguageLearnerReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerReviewLikes.
     */
    cursor?: LanguageLearnerReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerReviewLikes.
     */
    distinct?: LanguageLearnerReviewLikeScalarFieldEnum | LanguageLearnerReviewLikeScalarFieldEnum[]
  }

  /**
   * LanguageLearnerReviewLike findFirstOrThrow
   */
  export type LanguageLearnerReviewLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReviewLike to fetch.
     */
    where?: LanguageLearnerReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviewLikes to fetch.
     */
    orderBy?: LanguageLearnerReviewLikeOrderByWithRelationInput | LanguageLearnerReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerReviewLikes.
     */
    cursor?: LanguageLearnerReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerReviewLikes.
     */
    distinct?: LanguageLearnerReviewLikeScalarFieldEnum | LanguageLearnerReviewLikeScalarFieldEnum[]
  }

  /**
   * LanguageLearnerReviewLike findMany
   */
  export type LanguageLearnerReviewLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerReviewLikes to fetch.
     */
    where?: LanguageLearnerReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerReviewLikes to fetch.
     */
    orderBy?: LanguageLearnerReviewLikeOrderByWithRelationInput | LanguageLearnerReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguageLearnerReviewLikes.
     */
    cursor?: LanguageLearnerReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerReviewLikes.
     */
    skip?: number
    distinct?: LanguageLearnerReviewLikeScalarFieldEnum | LanguageLearnerReviewLikeScalarFieldEnum[]
  }

  /**
   * LanguageLearnerReviewLike create
   */
  export type LanguageLearnerReviewLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguageLearnerReviewLike.
     */
    data: XOR<LanguageLearnerReviewLikeCreateInput, LanguageLearnerReviewLikeUncheckedCreateInput>
  }

  /**
   * LanguageLearnerReviewLike createMany
   */
  export type LanguageLearnerReviewLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguageLearnerReviewLikes.
     */
    data: LanguageLearnerReviewLikeCreateManyInput | LanguageLearnerReviewLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageLearnerReviewLike createManyAndReturn
   */
  export type LanguageLearnerReviewLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * The data used to create many LanguageLearnerReviewLikes.
     */
    data: LanguageLearnerReviewLikeCreateManyInput | LanguageLearnerReviewLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerReviewLike update
   */
  export type LanguageLearnerReviewLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguageLearnerReviewLike.
     */
    data: XOR<LanguageLearnerReviewLikeUpdateInput, LanguageLearnerReviewLikeUncheckedUpdateInput>
    /**
     * Choose, which LanguageLearnerReviewLike to update.
     */
    where: LanguageLearnerReviewLikeWhereUniqueInput
  }

  /**
   * LanguageLearnerReviewLike updateMany
   */
  export type LanguageLearnerReviewLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguageLearnerReviewLikes.
     */
    data: XOR<LanguageLearnerReviewLikeUpdateManyMutationInput, LanguageLearnerReviewLikeUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerReviewLikes to update
     */
    where?: LanguageLearnerReviewLikeWhereInput
    /**
     * Limit how many LanguageLearnerReviewLikes to update.
     */
    limit?: number
  }

  /**
   * LanguageLearnerReviewLike updateManyAndReturn
   */
  export type LanguageLearnerReviewLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * The data used to update LanguageLearnerReviewLikes.
     */
    data: XOR<LanguageLearnerReviewLikeUpdateManyMutationInput, LanguageLearnerReviewLikeUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerReviewLikes to update
     */
    where?: LanguageLearnerReviewLikeWhereInput
    /**
     * Limit how many LanguageLearnerReviewLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerReviewLike upsert
   */
  export type LanguageLearnerReviewLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguageLearnerReviewLike to update in case it exists.
     */
    where: LanguageLearnerReviewLikeWhereUniqueInput
    /**
     * In case the LanguageLearnerReviewLike found by the `where` argument doesn't exist, create a new LanguageLearnerReviewLike with this data.
     */
    create: XOR<LanguageLearnerReviewLikeCreateInput, LanguageLearnerReviewLikeUncheckedCreateInput>
    /**
     * In case the LanguageLearnerReviewLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageLearnerReviewLikeUpdateInput, LanguageLearnerReviewLikeUncheckedUpdateInput>
  }

  /**
   * LanguageLearnerReviewLike delete
   */
  export type LanguageLearnerReviewLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
    /**
     * Filter which LanguageLearnerReviewLike to delete.
     */
    where: LanguageLearnerReviewLikeWhereUniqueInput
  }

  /**
   * LanguageLearnerReviewLike deleteMany
   */
  export type LanguageLearnerReviewLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerReviewLikes to delete
     */
    where?: LanguageLearnerReviewLikeWhereInput
    /**
     * Limit how many LanguageLearnerReviewLikes to delete.
     */
    limit?: number
  }

  /**
   * LanguageLearnerReviewLike without action
   */
  export type LanguageLearnerReviewLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerReviewLike
     */
    select?: LanguageLearnerReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerReviewLike
     */
    omit?: LanguageLearnerReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerReviewLikeInclude<ExtArgs> | null
  }


  /**
   * Model LanguageLearnerUserVote
   */

  export type AggregateLanguageLearnerUserVote = {
    _count: LanguageLearnerUserVoteCountAggregateOutputType | null
    _min: LanguageLearnerUserVoteMinAggregateOutputType | null
    _max: LanguageLearnerUserVoteMaxAggregateOutputType | null
  }

  export type LanguageLearnerUserVoteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    voterId: string | null
    voteType: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerUserVoteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    voterId: string | null
    voteType: string | null
    createdAt: Date | null
  }

  export type LanguageLearnerUserVoteCountAggregateOutputType = {
    id: number
    userId: number
    voterId: number
    voteType: number
    createdAt: number
    _all: number
  }


  export type LanguageLearnerUserVoteMinAggregateInputType = {
    id?: true
    userId?: true
    voterId?: true
    voteType?: true
    createdAt?: true
  }

  export type LanguageLearnerUserVoteMaxAggregateInputType = {
    id?: true
    userId?: true
    voterId?: true
    voteType?: true
    createdAt?: true
  }

  export type LanguageLearnerUserVoteCountAggregateInputType = {
    id?: true
    userId?: true
    voterId?: true
    voteType?: true
    createdAt?: true
    _all?: true
  }

  export type LanguageLearnerUserVoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerUserVote to aggregate.
     */
    where?: LanguageLearnerUserVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUserVotes to fetch.
     */
    orderBy?: LanguageLearnerUserVoteOrderByWithRelationInput | LanguageLearnerUserVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageLearnerUserVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUserVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUserVotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguageLearnerUserVotes
    **/
    _count?: true | LanguageLearnerUserVoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageLearnerUserVoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageLearnerUserVoteMaxAggregateInputType
  }

  export type GetLanguageLearnerUserVoteAggregateType<T extends LanguageLearnerUserVoteAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguageLearnerUserVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguageLearnerUserVote[P]>
      : GetScalarType<T[P], AggregateLanguageLearnerUserVote[P]>
  }




  export type LanguageLearnerUserVoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageLearnerUserVoteWhereInput
    orderBy?: LanguageLearnerUserVoteOrderByWithAggregationInput | LanguageLearnerUserVoteOrderByWithAggregationInput[]
    by: LanguageLearnerUserVoteScalarFieldEnum[] | LanguageLearnerUserVoteScalarFieldEnum
    having?: LanguageLearnerUserVoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageLearnerUserVoteCountAggregateInputType | true
    _min?: LanguageLearnerUserVoteMinAggregateInputType
    _max?: LanguageLearnerUserVoteMaxAggregateInputType
  }

  export type LanguageLearnerUserVoteGroupByOutputType = {
    id: string
    userId: string
    voterId: string
    voteType: string
    createdAt: Date
    _count: LanguageLearnerUserVoteCountAggregateOutputType | null
    _min: LanguageLearnerUserVoteMinAggregateOutputType | null
    _max: LanguageLearnerUserVoteMaxAggregateOutputType | null
  }

  type GetLanguageLearnerUserVoteGroupByPayload<T extends LanguageLearnerUserVoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageLearnerUserVoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageLearnerUserVoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageLearnerUserVoteGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageLearnerUserVoteGroupByOutputType[P]>
        }
      >
    >


  export type LanguageLearnerUserVoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    voterId?: boolean
    voteType?: boolean
    createdAt?: boolean
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    voter?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerUserVote"]>

  export type LanguageLearnerUserVoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    voterId?: boolean
    voteType?: boolean
    createdAt?: boolean
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    voter?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerUserVote"]>

  export type LanguageLearnerUserVoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    voterId?: boolean
    voteType?: boolean
    createdAt?: boolean
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    voter?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageLearnerUserVote"]>

  export type LanguageLearnerUserVoteSelectScalar = {
    id?: boolean
    userId?: boolean
    voterId?: boolean
    voteType?: boolean
    createdAt?: boolean
  }

  export type LanguageLearnerUserVoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "voterId" | "voteType" | "createdAt", ExtArgs["result"]["languageLearnerUserVote"]>
  export type LanguageLearnerUserVoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    voter?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerUserVoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    voter?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }
  export type LanguageLearnerUserVoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
    voter?: boolean | LanguageLearnerUserDefaultArgs<ExtArgs>
  }

  export type $LanguageLearnerUserVotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguageLearnerUserVote"
    objects: {
      user: Prisma.$LanguageLearnerUserPayload<ExtArgs>
      voter: Prisma.$LanguageLearnerUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      voterId: string
      voteType: string
      createdAt: Date
    }, ExtArgs["result"]["languageLearnerUserVote"]>
    composites: {}
  }

  type LanguageLearnerUserVoteGetPayload<S extends boolean | null | undefined | LanguageLearnerUserVoteDefaultArgs> = $Result.GetResult<Prisma.$LanguageLearnerUserVotePayload, S>

  type LanguageLearnerUserVoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageLearnerUserVoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageLearnerUserVoteCountAggregateInputType | true
    }

  export interface LanguageLearnerUserVoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguageLearnerUserVote'], meta: { name: 'LanguageLearnerUserVote' } }
    /**
     * Find zero or one LanguageLearnerUserVote that matches the filter.
     * @param {LanguageLearnerUserVoteFindUniqueArgs} args - Arguments to find a LanguageLearnerUserVote
     * @example
     * // Get one LanguageLearnerUserVote
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageLearnerUserVoteFindUniqueArgs>(args: SelectSubset<T, LanguageLearnerUserVoteFindUniqueArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LanguageLearnerUserVote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageLearnerUserVoteFindUniqueOrThrowArgs} args - Arguments to find a LanguageLearnerUserVote
     * @example
     * // Get one LanguageLearnerUserVote
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageLearnerUserVoteFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageLearnerUserVoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerUserVote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserVoteFindFirstArgs} args - Arguments to find a LanguageLearnerUserVote
     * @example
     * // Get one LanguageLearnerUserVote
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageLearnerUserVoteFindFirstArgs>(args?: SelectSubset<T, LanguageLearnerUserVoteFindFirstArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageLearnerUserVote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserVoteFindFirstOrThrowArgs} args - Arguments to find a LanguageLearnerUserVote
     * @example
     * // Get one LanguageLearnerUserVote
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageLearnerUserVoteFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageLearnerUserVoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LanguageLearnerUserVotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserVoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguageLearnerUserVotes
     * const languageLearnerUserVotes = await prisma.languageLearnerUserVote.findMany()
     * 
     * // Get first 10 LanguageLearnerUserVotes
     * const languageLearnerUserVotes = await prisma.languageLearnerUserVote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageLearnerUserVoteWithIdOnly = await prisma.languageLearnerUserVote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageLearnerUserVoteFindManyArgs>(args?: SelectSubset<T, LanguageLearnerUserVoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LanguageLearnerUserVote.
     * @param {LanguageLearnerUserVoteCreateArgs} args - Arguments to create a LanguageLearnerUserVote.
     * @example
     * // Create one LanguageLearnerUserVote
     * const LanguageLearnerUserVote = await prisma.languageLearnerUserVote.create({
     *   data: {
     *     // ... data to create a LanguageLearnerUserVote
     *   }
     * })
     * 
     */
    create<T extends LanguageLearnerUserVoteCreateArgs>(args: SelectSubset<T, LanguageLearnerUserVoteCreateArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LanguageLearnerUserVotes.
     * @param {LanguageLearnerUserVoteCreateManyArgs} args - Arguments to create many LanguageLearnerUserVotes.
     * @example
     * // Create many LanguageLearnerUserVotes
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageLearnerUserVoteCreateManyArgs>(args?: SelectSubset<T, LanguageLearnerUserVoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LanguageLearnerUserVotes and returns the data saved in the database.
     * @param {LanguageLearnerUserVoteCreateManyAndReturnArgs} args - Arguments to create many LanguageLearnerUserVotes.
     * @example
     * // Create many LanguageLearnerUserVotes
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LanguageLearnerUserVotes and only return the `id`
     * const languageLearnerUserVoteWithIdOnly = await prisma.languageLearnerUserVote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LanguageLearnerUserVoteCreateManyAndReturnArgs>(args?: SelectSubset<T, LanguageLearnerUserVoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LanguageLearnerUserVote.
     * @param {LanguageLearnerUserVoteDeleteArgs} args - Arguments to delete one LanguageLearnerUserVote.
     * @example
     * // Delete one LanguageLearnerUserVote
     * const LanguageLearnerUserVote = await prisma.languageLearnerUserVote.delete({
     *   where: {
     *     // ... filter to delete one LanguageLearnerUserVote
     *   }
     * })
     * 
     */
    delete<T extends LanguageLearnerUserVoteDeleteArgs>(args: SelectSubset<T, LanguageLearnerUserVoteDeleteArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LanguageLearnerUserVote.
     * @param {LanguageLearnerUserVoteUpdateArgs} args - Arguments to update one LanguageLearnerUserVote.
     * @example
     * // Update one LanguageLearnerUserVote
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageLearnerUserVoteUpdateArgs>(args: SelectSubset<T, LanguageLearnerUserVoteUpdateArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LanguageLearnerUserVotes.
     * @param {LanguageLearnerUserVoteDeleteManyArgs} args - Arguments to filter LanguageLearnerUserVotes to delete.
     * @example
     * // Delete a few LanguageLearnerUserVotes
     * const { count } = await prisma.languageLearnerUserVote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageLearnerUserVoteDeleteManyArgs>(args?: SelectSubset<T, LanguageLearnerUserVoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerUserVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserVoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguageLearnerUserVotes
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageLearnerUserVoteUpdateManyArgs>(args: SelectSubset<T, LanguageLearnerUserVoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageLearnerUserVotes and returns the data updated in the database.
     * @param {LanguageLearnerUserVoteUpdateManyAndReturnArgs} args - Arguments to update many LanguageLearnerUserVotes.
     * @example
     * // Update many LanguageLearnerUserVotes
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LanguageLearnerUserVotes and only return the `id`
     * const languageLearnerUserVoteWithIdOnly = await prisma.languageLearnerUserVote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LanguageLearnerUserVoteUpdateManyAndReturnArgs>(args: SelectSubset<T, LanguageLearnerUserVoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LanguageLearnerUserVote.
     * @param {LanguageLearnerUserVoteUpsertArgs} args - Arguments to update or create a LanguageLearnerUserVote.
     * @example
     * // Update or create a LanguageLearnerUserVote
     * const languageLearnerUserVote = await prisma.languageLearnerUserVote.upsert({
     *   create: {
     *     // ... data to create a LanguageLearnerUserVote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguageLearnerUserVote we want to update
     *   }
     * })
     */
    upsert<T extends LanguageLearnerUserVoteUpsertArgs>(args: SelectSubset<T, LanguageLearnerUserVoteUpsertArgs<ExtArgs>>): Prisma__LanguageLearnerUserVoteClient<$Result.GetResult<Prisma.$LanguageLearnerUserVotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LanguageLearnerUserVotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserVoteCountArgs} args - Arguments to filter LanguageLearnerUserVotes to count.
     * @example
     * // Count the number of LanguageLearnerUserVotes
     * const count = await prisma.languageLearnerUserVote.count({
     *   where: {
     *     // ... the filter for the LanguageLearnerUserVotes we want to count
     *   }
     * })
    **/
    count<T extends LanguageLearnerUserVoteCountArgs>(
      args?: Subset<T, LanguageLearnerUserVoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageLearnerUserVoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguageLearnerUserVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserVoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageLearnerUserVoteAggregateArgs>(args: Subset<T, LanguageLearnerUserVoteAggregateArgs>): Prisma.PrismaPromise<GetLanguageLearnerUserVoteAggregateType<T>>

    /**
     * Group by LanguageLearnerUserVote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageLearnerUserVoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageLearnerUserVoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageLearnerUserVoteGroupByArgs['orderBy'] }
        : { orderBy?: LanguageLearnerUserVoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageLearnerUserVoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageLearnerUserVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguageLearnerUserVote model
   */
  readonly fields: LanguageLearnerUserVoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguageLearnerUserVote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageLearnerUserVoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends LanguageLearnerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUserDefaultArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    voter<T extends LanguageLearnerUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LanguageLearnerUserDefaultArgs<ExtArgs>>): Prisma__LanguageLearnerUserClient<$Result.GetResult<Prisma.$LanguageLearnerUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LanguageLearnerUserVote model
   */ 
  interface LanguageLearnerUserVoteFieldRefs {
    readonly id: FieldRef<"LanguageLearnerUserVote", 'String'>
    readonly userId: FieldRef<"LanguageLearnerUserVote", 'String'>
    readonly voterId: FieldRef<"LanguageLearnerUserVote", 'String'>
    readonly voteType: FieldRef<"LanguageLearnerUserVote", 'String'>
    readonly createdAt: FieldRef<"LanguageLearnerUserVote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LanguageLearnerUserVote findUnique
   */
  export type LanguageLearnerUserVoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUserVote to fetch.
     */
    where: LanguageLearnerUserVoteWhereUniqueInput
  }

  /**
   * LanguageLearnerUserVote findUniqueOrThrow
   */
  export type LanguageLearnerUserVoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUserVote to fetch.
     */
    where: LanguageLearnerUserVoteWhereUniqueInput
  }

  /**
   * LanguageLearnerUserVote findFirst
   */
  export type LanguageLearnerUserVoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUserVote to fetch.
     */
    where?: LanguageLearnerUserVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUserVotes to fetch.
     */
    orderBy?: LanguageLearnerUserVoteOrderByWithRelationInput | LanguageLearnerUserVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerUserVotes.
     */
    cursor?: LanguageLearnerUserVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUserVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUserVotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerUserVotes.
     */
    distinct?: LanguageLearnerUserVoteScalarFieldEnum | LanguageLearnerUserVoteScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUserVote findFirstOrThrow
   */
  export type LanguageLearnerUserVoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUserVote to fetch.
     */
    where?: LanguageLearnerUserVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUserVotes to fetch.
     */
    orderBy?: LanguageLearnerUserVoteOrderByWithRelationInput | LanguageLearnerUserVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageLearnerUserVotes.
     */
    cursor?: LanguageLearnerUserVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUserVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUserVotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageLearnerUserVotes.
     */
    distinct?: LanguageLearnerUserVoteScalarFieldEnum | LanguageLearnerUserVoteScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUserVote findMany
   */
  export type LanguageLearnerUserVoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * Filter, which LanguageLearnerUserVotes to fetch.
     */
    where?: LanguageLearnerUserVoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageLearnerUserVotes to fetch.
     */
    orderBy?: LanguageLearnerUserVoteOrderByWithRelationInput | LanguageLearnerUserVoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguageLearnerUserVotes.
     */
    cursor?: LanguageLearnerUserVoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageLearnerUserVotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageLearnerUserVotes.
     */
    skip?: number
    distinct?: LanguageLearnerUserVoteScalarFieldEnum | LanguageLearnerUserVoteScalarFieldEnum[]
  }

  /**
   * LanguageLearnerUserVote create
   */
  export type LanguageLearnerUserVoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguageLearnerUserVote.
     */
    data: XOR<LanguageLearnerUserVoteCreateInput, LanguageLearnerUserVoteUncheckedCreateInput>
  }

  /**
   * LanguageLearnerUserVote createMany
   */
  export type LanguageLearnerUserVoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguageLearnerUserVotes.
     */
    data: LanguageLearnerUserVoteCreateManyInput | LanguageLearnerUserVoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageLearnerUserVote createManyAndReturn
   */
  export type LanguageLearnerUserVoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * The data used to create many LanguageLearnerUserVotes.
     */
    data: LanguageLearnerUserVoteCreateManyInput | LanguageLearnerUserVoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerUserVote update
   */
  export type LanguageLearnerUserVoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguageLearnerUserVote.
     */
    data: XOR<LanguageLearnerUserVoteUpdateInput, LanguageLearnerUserVoteUncheckedUpdateInput>
    /**
     * Choose, which LanguageLearnerUserVote to update.
     */
    where: LanguageLearnerUserVoteWhereUniqueInput
  }

  /**
   * LanguageLearnerUserVote updateMany
   */
  export type LanguageLearnerUserVoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguageLearnerUserVotes.
     */
    data: XOR<LanguageLearnerUserVoteUpdateManyMutationInput, LanguageLearnerUserVoteUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerUserVotes to update
     */
    where?: LanguageLearnerUserVoteWhereInput
    /**
     * Limit how many LanguageLearnerUserVotes to update.
     */
    limit?: number
  }

  /**
   * LanguageLearnerUserVote updateManyAndReturn
   */
  export type LanguageLearnerUserVoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * The data used to update LanguageLearnerUserVotes.
     */
    data: XOR<LanguageLearnerUserVoteUpdateManyMutationInput, LanguageLearnerUserVoteUncheckedUpdateManyInput>
    /**
     * Filter which LanguageLearnerUserVotes to update
     */
    where?: LanguageLearnerUserVoteWhereInput
    /**
     * Limit how many LanguageLearnerUserVotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LanguageLearnerUserVote upsert
   */
  export type LanguageLearnerUserVoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguageLearnerUserVote to update in case it exists.
     */
    where: LanguageLearnerUserVoteWhereUniqueInput
    /**
     * In case the LanguageLearnerUserVote found by the `where` argument doesn't exist, create a new LanguageLearnerUserVote with this data.
     */
    create: XOR<LanguageLearnerUserVoteCreateInput, LanguageLearnerUserVoteUncheckedCreateInput>
    /**
     * In case the LanguageLearnerUserVote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageLearnerUserVoteUpdateInput, LanguageLearnerUserVoteUncheckedUpdateInput>
  }

  /**
   * LanguageLearnerUserVote delete
   */
  export type LanguageLearnerUserVoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
    /**
     * Filter which LanguageLearnerUserVote to delete.
     */
    where: LanguageLearnerUserVoteWhereUniqueInput
  }

  /**
   * LanguageLearnerUserVote deleteMany
   */
  export type LanguageLearnerUserVoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageLearnerUserVotes to delete
     */
    where?: LanguageLearnerUserVoteWhereInput
    /**
     * Limit how many LanguageLearnerUserVotes to delete.
     */
    limit?: number
  }

  /**
   * LanguageLearnerUserVote without action
   */
  export type LanguageLearnerUserVoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageLearnerUserVote
     */
    select?: LanguageLearnerUserVoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageLearnerUserVote
     */
    omit?: LanguageLearnerUserVoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageLearnerUserVoteInclude<ExtArgs> | null
  }


  /**
   * Model GameHubUser
   */

  export type AggregateGameHubUser = {
    _count: GameHubUserCountAggregateOutputType | null
    _min: GameHubUserMinAggregateOutputType | null
    _max: GameHubUserMaxAggregateOutputType | null
  }

  export type GameHubUserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type GameHubUserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type GameHubUserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    validated: number
    createdAt: number
    _all: number
  }


  export type GameHubUserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    validated?: true
    createdAt?: true
  }

  export type GameHubUserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    validated?: true
    createdAt?: true
  }

  export type GameHubUserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type GameHubUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubUser to aggregate.
     */
    where?: GameHubUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubUsers to fetch.
     */
    orderBy?: GameHubUserOrderByWithRelationInput | GameHubUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameHubUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameHubUsers
    **/
    _count?: true | GameHubUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameHubUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameHubUserMaxAggregateInputType
  }

  export type GetGameHubUserAggregateType<T extends GameHubUserAggregateArgs> = {
        [P in keyof T & keyof AggregateGameHubUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameHubUser[P]>
      : GetScalarType<T[P], AggregateGameHubUser[P]>
  }




  export type GameHubUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubUserWhereInput
    orderBy?: GameHubUserOrderByWithAggregationInput | GameHubUserOrderByWithAggregationInput[]
    by: GameHubUserScalarFieldEnum[] | GameHubUserScalarFieldEnum
    having?: GameHubUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameHubUserCountAggregateInputType | true
    _min?: GameHubUserMinAggregateInputType
    _max?: GameHubUserMaxAggregateInputType
  }

  export type GameHubUserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    role: string
    validated: boolean
    createdAt: Date
    _count: GameHubUserCountAggregateOutputType | null
    _min: GameHubUserMinAggregateOutputType | null
    _max: GameHubUserMaxAggregateOutputType | null
  }

  type GetGameHubUserGroupByPayload<T extends GameHubUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameHubUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameHubUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameHubUserGroupByOutputType[P]>
            : GetScalarType<T[P], GameHubUserGroupByOutputType[P]>
        }
      >
    >


  export type GameHubUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    validated?: boolean
    createdAt?: boolean
    players?: boolean | GameHubUser$playersArgs<ExtArgs>
    tournaments?: boolean | GameHubUser$tournamentsArgs<ExtArgs>
    _count?: boolean | GameHubUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubUser"]>

  export type GameHubUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    validated?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gameHubUser"]>

  export type GameHubUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    validated?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gameHubUser"]>

  export type GameHubUserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type GameHubUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "validated" | "createdAt", ExtArgs["result"]["gameHubUser"]>
  export type GameHubUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | GameHubUser$playersArgs<ExtArgs>
    tournaments?: boolean | GameHubUser$tournamentsArgs<ExtArgs>
    _count?: boolean | GameHubUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameHubUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameHubUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GameHubUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameHubUser"
    objects: {
      players: Prisma.$GameHubPlayerPayload<ExtArgs>[]
      tournaments: Prisma.$GameHubTournamentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      role: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["gameHubUser"]>
    composites: {}
  }

  type GameHubUserGetPayload<S extends boolean | null | undefined | GameHubUserDefaultArgs> = $Result.GetResult<Prisma.$GameHubUserPayload, S>

  type GameHubUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameHubUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameHubUserCountAggregateInputType | true
    }

  export interface GameHubUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameHubUser'], meta: { name: 'GameHubUser' } }
    /**
     * Find zero or one GameHubUser that matches the filter.
     * @param {GameHubUserFindUniqueArgs} args - Arguments to find a GameHubUser
     * @example
     * // Get one GameHubUser
     * const gameHubUser = await prisma.gameHubUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameHubUserFindUniqueArgs>(args: SelectSubset<T, GameHubUserFindUniqueArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameHubUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameHubUserFindUniqueOrThrowArgs} args - Arguments to find a GameHubUser
     * @example
     * // Get one GameHubUser
     * const gameHubUser = await prisma.gameHubUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameHubUserFindUniqueOrThrowArgs>(args: SelectSubset<T, GameHubUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubUserFindFirstArgs} args - Arguments to find a GameHubUser
     * @example
     * // Get one GameHubUser
     * const gameHubUser = await prisma.gameHubUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameHubUserFindFirstArgs>(args?: SelectSubset<T, GameHubUserFindFirstArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubUserFindFirstOrThrowArgs} args - Arguments to find a GameHubUser
     * @example
     * // Get one GameHubUser
     * const gameHubUser = await prisma.gameHubUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameHubUserFindFirstOrThrowArgs>(args?: SelectSubset<T, GameHubUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameHubUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameHubUsers
     * const gameHubUsers = await prisma.gameHubUser.findMany()
     * 
     * // Get first 10 GameHubUsers
     * const gameHubUsers = await prisma.gameHubUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameHubUserWithIdOnly = await prisma.gameHubUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameHubUserFindManyArgs>(args?: SelectSubset<T, GameHubUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameHubUser.
     * @param {GameHubUserCreateArgs} args - Arguments to create a GameHubUser.
     * @example
     * // Create one GameHubUser
     * const GameHubUser = await prisma.gameHubUser.create({
     *   data: {
     *     // ... data to create a GameHubUser
     *   }
     * })
     * 
     */
    create<T extends GameHubUserCreateArgs>(args: SelectSubset<T, GameHubUserCreateArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameHubUsers.
     * @param {GameHubUserCreateManyArgs} args - Arguments to create many GameHubUsers.
     * @example
     * // Create many GameHubUsers
     * const gameHubUser = await prisma.gameHubUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameHubUserCreateManyArgs>(args?: SelectSubset<T, GameHubUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameHubUsers and returns the data saved in the database.
     * @param {GameHubUserCreateManyAndReturnArgs} args - Arguments to create many GameHubUsers.
     * @example
     * // Create many GameHubUsers
     * const gameHubUser = await prisma.gameHubUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameHubUsers and only return the `id`
     * const gameHubUserWithIdOnly = await prisma.gameHubUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameHubUserCreateManyAndReturnArgs>(args?: SelectSubset<T, GameHubUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameHubUser.
     * @param {GameHubUserDeleteArgs} args - Arguments to delete one GameHubUser.
     * @example
     * // Delete one GameHubUser
     * const GameHubUser = await prisma.gameHubUser.delete({
     *   where: {
     *     // ... filter to delete one GameHubUser
     *   }
     * })
     * 
     */
    delete<T extends GameHubUserDeleteArgs>(args: SelectSubset<T, GameHubUserDeleteArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameHubUser.
     * @param {GameHubUserUpdateArgs} args - Arguments to update one GameHubUser.
     * @example
     * // Update one GameHubUser
     * const gameHubUser = await prisma.gameHubUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameHubUserUpdateArgs>(args: SelectSubset<T, GameHubUserUpdateArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameHubUsers.
     * @param {GameHubUserDeleteManyArgs} args - Arguments to filter GameHubUsers to delete.
     * @example
     * // Delete a few GameHubUsers
     * const { count } = await prisma.gameHubUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameHubUserDeleteManyArgs>(args?: SelectSubset<T, GameHubUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameHubUsers
     * const gameHubUser = await prisma.gameHubUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameHubUserUpdateManyArgs>(args: SelectSubset<T, GameHubUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubUsers and returns the data updated in the database.
     * @param {GameHubUserUpdateManyAndReturnArgs} args - Arguments to update many GameHubUsers.
     * @example
     * // Update many GameHubUsers
     * const gameHubUser = await prisma.gameHubUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameHubUsers and only return the `id`
     * const gameHubUserWithIdOnly = await prisma.gameHubUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameHubUserUpdateManyAndReturnArgs>(args: SelectSubset<T, GameHubUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameHubUser.
     * @param {GameHubUserUpsertArgs} args - Arguments to update or create a GameHubUser.
     * @example
     * // Update or create a GameHubUser
     * const gameHubUser = await prisma.gameHubUser.upsert({
     *   create: {
     *     // ... data to create a GameHubUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameHubUser we want to update
     *   }
     * })
     */
    upsert<T extends GameHubUserUpsertArgs>(args: SelectSubset<T, GameHubUserUpsertArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameHubUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubUserCountArgs} args - Arguments to filter GameHubUsers to count.
     * @example
     * // Count the number of GameHubUsers
     * const count = await prisma.gameHubUser.count({
     *   where: {
     *     // ... the filter for the GameHubUsers we want to count
     *   }
     * })
    **/
    count<T extends GameHubUserCountArgs>(
      args?: Subset<T, GameHubUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameHubUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameHubUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameHubUserAggregateArgs>(args: Subset<T, GameHubUserAggregateArgs>): Prisma.PrismaPromise<GetGameHubUserAggregateType<T>>

    /**
     * Group by GameHubUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameHubUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameHubUserGroupByArgs['orderBy'] }
        : { orderBy?: GameHubUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameHubUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameHubUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameHubUser model
   */
  readonly fields: GameHubUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameHubUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameHubUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    players<T extends GameHubUser$playersArgs<ExtArgs> = {}>(args?: Subset<T, GameHubUser$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tournaments<T extends GameHubUser$tournamentsArgs<ExtArgs> = {}>(args?: Subset<T, GameHubUser$tournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameHubUser model
   */ 
  interface GameHubUserFieldRefs {
    readonly id: FieldRef<"GameHubUser", 'String'>
    readonly email: FieldRef<"GameHubUser", 'String'>
    readonly name: FieldRef<"GameHubUser", 'String'>
    readonly password: FieldRef<"GameHubUser", 'String'>
    readonly role: FieldRef<"GameHubUser", 'String'>
    readonly validated: FieldRef<"GameHubUser", 'Boolean'>
    readonly createdAt: FieldRef<"GameHubUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameHubUser findUnique
   */
  export type GameHubUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * Filter, which GameHubUser to fetch.
     */
    where: GameHubUserWhereUniqueInput
  }

  /**
   * GameHubUser findUniqueOrThrow
   */
  export type GameHubUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * Filter, which GameHubUser to fetch.
     */
    where: GameHubUserWhereUniqueInput
  }

  /**
   * GameHubUser findFirst
   */
  export type GameHubUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * Filter, which GameHubUser to fetch.
     */
    where?: GameHubUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubUsers to fetch.
     */
    orderBy?: GameHubUserOrderByWithRelationInput | GameHubUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubUsers.
     */
    cursor?: GameHubUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubUsers.
     */
    distinct?: GameHubUserScalarFieldEnum | GameHubUserScalarFieldEnum[]
  }

  /**
   * GameHubUser findFirstOrThrow
   */
  export type GameHubUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * Filter, which GameHubUser to fetch.
     */
    where?: GameHubUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubUsers to fetch.
     */
    orderBy?: GameHubUserOrderByWithRelationInput | GameHubUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubUsers.
     */
    cursor?: GameHubUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubUsers.
     */
    distinct?: GameHubUserScalarFieldEnum | GameHubUserScalarFieldEnum[]
  }

  /**
   * GameHubUser findMany
   */
  export type GameHubUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * Filter, which GameHubUsers to fetch.
     */
    where?: GameHubUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubUsers to fetch.
     */
    orderBy?: GameHubUserOrderByWithRelationInput | GameHubUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameHubUsers.
     */
    cursor?: GameHubUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubUsers.
     */
    skip?: number
    distinct?: GameHubUserScalarFieldEnum | GameHubUserScalarFieldEnum[]
  }

  /**
   * GameHubUser create
   */
  export type GameHubUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * The data needed to create a GameHubUser.
     */
    data: XOR<GameHubUserCreateInput, GameHubUserUncheckedCreateInput>
  }

  /**
   * GameHubUser createMany
   */
  export type GameHubUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameHubUsers.
     */
    data: GameHubUserCreateManyInput | GameHubUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameHubUser createManyAndReturn
   */
  export type GameHubUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * The data used to create many GameHubUsers.
     */
    data: GameHubUserCreateManyInput | GameHubUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameHubUser update
   */
  export type GameHubUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * The data needed to update a GameHubUser.
     */
    data: XOR<GameHubUserUpdateInput, GameHubUserUncheckedUpdateInput>
    /**
     * Choose, which GameHubUser to update.
     */
    where: GameHubUserWhereUniqueInput
  }

  /**
   * GameHubUser updateMany
   */
  export type GameHubUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameHubUsers.
     */
    data: XOR<GameHubUserUpdateManyMutationInput, GameHubUserUncheckedUpdateManyInput>
    /**
     * Filter which GameHubUsers to update
     */
    where?: GameHubUserWhereInput
    /**
     * Limit how many GameHubUsers to update.
     */
    limit?: number
  }

  /**
   * GameHubUser updateManyAndReturn
   */
  export type GameHubUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * The data used to update GameHubUsers.
     */
    data: XOR<GameHubUserUpdateManyMutationInput, GameHubUserUncheckedUpdateManyInput>
    /**
     * Filter which GameHubUsers to update
     */
    where?: GameHubUserWhereInput
    /**
     * Limit how many GameHubUsers to update.
     */
    limit?: number
  }

  /**
   * GameHubUser upsert
   */
  export type GameHubUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * The filter to search for the GameHubUser to update in case it exists.
     */
    where: GameHubUserWhereUniqueInput
    /**
     * In case the GameHubUser found by the `where` argument doesn't exist, create a new GameHubUser with this data.
     */
    create: XOR<GameHubUserCreateInput, GameHubUserUncheckedCreateInput>
    /**
     * In case the GameHubUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameHubUserUpdateInput, GameHubUserUncheckedUpdateInput>
  }

  /**
   * GameHubUser delete
   */
  export type GameHubUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
    /**
     * Filter which GameHubUser to delete.
     */
    where: GameHubUserWhereUniqueInput
  }

  /**
   * GameHubUser deleteMany
   */
  export type GameHubUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubUsers to delete
     */
    where?: GameHubUserWhereInput
    /**
     * Limit how many GameHubUsers to delete.
     */
    limit?: number
  }

  /**
   * GameHubUser.players
   */
  export type GameHubUser$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    where?: GameHubPlayerWhereInput
    orderBy?: GameHubPlayerOrderByWithRelationInput | GameHubPlayerOrderByWithRelationInput[]
    cursor?: GameHubPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameHubPlayerScalarFieldEnum | GameHubPlayerScalarFieldEnum[]
  }

  /**
   * GameHubUser.tournaments
   */
  export type GameHubUser$tournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    where?: GameHubTournamentWhereInput
    orderBy?: GameHubTournamentOrderByWithRelationInput | GameHubTournamentOrderByWithRelationInput[]
    cursor?: GameHubTournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameHubTournamentScalarFieldEnum | GameHubTournamentScalarFieldEnum[]
  }

  /**
   * GameHubUser without action
   */
  export type GameHubUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubUser
     */
    select?: GameHubUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubUser
     */
    omit?: GameHubUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubUserInclude<ExtArgs> | null
  }


  /**
   * Model GameHubPlayer
   */

  export type AggregateGameHubPlayer = {
    _count: GameHubPlayerCountAggregateOutputType | null
    _min: GameHubPlayerMinAggregateOutputType | null
    _max: GameHubPlayerMaxAggregateOutputType | null
  }

  export type GameHubPlayerMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    rank: string | null
    mainGame: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type GameHubPlayerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    rank: string | null
    mainGame: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type GameHubPlayerCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    rank: number
    mainGame: number
    validated: number
    createdAt: number
    _all: number
  }


  export type GameHubPlayerMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    rank?: true
    mainGame?: true
    validated?: true
    createdAt?: true
  }

  export type GameHubPlayerMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    rank?: true
    mainGame?: true
    validated?: true
    createdAt?: true
  }

  export type GameHubPlayerCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    rank?: true
    mainGame?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type GameHubPlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubPlayer to aggregate.
     */
    where?: GameHubPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubPlayers to fetch.
     */
    orderBy?: GameHubPlayerOrderByWithRelationInput | GameHubPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameHubPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameHubPlayers
    **/
    _count?: true | GameHubPlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameHubPlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameHubPlayerMaxAggregateInputType
  }

  export type GetGameHubPlayerAggregateType<T extends GameHubPlayerAggregateArgs> = {
        [P in keyof T & keyof AggregateGameHubPlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameHubPlayer[P]>
      : GetScalarType<T[P], AggregateGameHubPlayer[P]>
  }




  export type GameHubPlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubPlayerWhereInput
    orderBy?: GameHubPlayerOrderByWithAggregationInput | GameHubPlayerOrderByWithAggregationInput[]
    by: GameHubPlayerScalarFieldEnum[] | GameHubPlayerScalarFieldEnum
    having?: GameHubPlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameHubPlayerCountAggregateInputType | true
    _min?: GameHubPlayerMinAggregateInputType
    _max?: GameHubPlayerMaxAggregateInputType
  }

  export type GameHubPlayerGroupByOutputType = {
    id: string
    name: string
    userId: string
    rank: string
    mainGame: string
    validated: boolean
    createdAt: Date
    _count: GameHubPlayerCountAggregateOutputType | null
    _min: GameHubPlayerMinAggregateOutputType | null
    _max: GameHubPlayerMaxAggregateOutputType | null
  }

  type GetGameHubPlayerGroupByPayload<T extends GameHubPlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameHubPlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameHubPlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameHubPlayerGroupByOutputType[P]>
            : GetScalarType<T[P], GameHubPlayerGroupByOutputType[P]>
        }
      >
    >


  export type GameHubPlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    rank?: boolean
    mainGame?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | GameHubUserDefaultArgs<ExtArgs>
    tournaments?: boolean | GameHubPlayer$tournamentsArgs<ExtArgs>
    _count?: boolean | GameHubPlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubPlayer"]>

  export type GameHubPlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    rank?: boolean
    mainGame?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubPlayer"]>

  export type GameHubPlayerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    rank?: boolean
    mainGame?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubPlayer"]>

  export type GameHubPlayerSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    rank?: boolean
    mainGame?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type GameHubPlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId" | "rank" | "mainGame" | "validated" | "createdAt", ExtArgs["result"]["gameHubPlayer"]>
  export type GameHubPlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GameHubUserDefaultArgs<ExtArgs>
    tournaments?: boolean | GameHubPlayer$tournamentsArgs<ExtArgs>
    _count?: boolean | GameHubPlayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameHubPlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }
  export type GameHubPlayerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }

  export type $GameHubPlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameHubPlayer"
    objects: {
      user: Prisma.$GameHubUserPayload<ExtArgs>
      tournaments: Prisma.$GameHubTournamentPlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      rank: string
      mainGame: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["gameHubPlayer"]>
    composites: {}
  }

  type GameHubPlayerGetPayload<S extends boolean | null | undefined | GameHubPlayerDefaultArgs> = $Result.GetResult<Prisma.$GameHubPlayerPayload, S>

  type GameHubPlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameHubPlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameHubPlayerCountAggregateInputType | true
    }

  export interface GameHubPlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameHubPlayer'], meta: { name: 'GameHubPlayer' } }
    /**
     * Find zero or one GameHubPlayer that matches the filter.
     * @param {GameHubPlayerFindUniqueArgs} args - Arguments to find a GameHubPlayer
     * @example
     * // Get one GameHubPlayer
     * const gameHubPlayer = await prisma.gameHubPlayer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameHubPlayerFindUniqueArgs>(args: SelectSubset<T, GameHubPlayerFindUniqueArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameHubPlayer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameHubPlayerFindUniqueOrThrowArgs} args - Arguments to find a GameHubPlayer
     * @example
     * // Get one GameHubPlayer
     * const gameHubPlayer = await prisma.gameHubPlayer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameHubPlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, GameHubPlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubPlayer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubPlayerFindFirstArgs} args - Arguments to find a GameHubPlayer
     * @example
     * // Get one GameHubPlayer
     * const gameHubPlayer = await prisma.gameHubPlayer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameHubPlayerFindFirstArgs>(args?: SelectSubset<T, GameHubPlayerFindFirstArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubPlayer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubPlayerFindFirstOrThrowArgs} args - Arguments to find a GameHubPlayer
     * @example
     * // Get one GameHubPlayer
     * const gameHubPlayer = await prisma.gameHubPlayer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameHubPlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, GameHubPlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameHubPlayers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubPlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameHubPlayers
     * const gameHubPlayers = await prisma.gameHubPlayer.findMany()
     * 
     * // Get first 10 GameHubPlayers
     * const gameHubPlayers = await prisma.gameHubPlayer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameHubPlayerWithIdOnly = await prisma.gameHubPlayer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameHubPlayerFindManyArgs>(args?: SelectSubset<T, GameHubPlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameHubPlayer.
     * @param {GameHubPlayerCreateArgs} args - Arguments to create a GameHubPlayer.
     * @example
     * // Create one GameHubPlayer
     * const GameHubPlayer = await prisma.gameHubPlayer.create({
     *   data: {
     *     // ... data to create a GameHubPlayer
     *   }
     * })
     * 
     */
    create<T extends GameHubPlayerCreateArgs>(args: SelectSubset<T, GameHubPlayerCreateArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameHubPlayers.
     * @param {GameHubPlayerCreateManyArgs} args - Arguments to create many GameHubPlayers.
     * @example
     * // Create many GameHubPlayers
     * const gameHubPlayer = await prisma.gameHubPlayer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameHubPlayerCreateManyArgs>(args?: SelectSubset<T, GameHubPlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameHubPlayers and returns the data saved in the database.
     * @param {GameHubPlayerCreateManyAndReturnArgs} args - Arguments to create many GameHubPlayers.
     * @example
     * // Create many GameHubPlayers
     * const gameHubPlayer = await prisma.gameHubPlayer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameHubPlayers and only return the `id`
     * const gameHubPlayerWithIdOnly = await prisma.gameHubPlayer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameHubPlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, GameHubPlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameHubPlayer.
     * @param {GameHubPlayerDeleteArgs} args - Arguments to delete one GameHubPlayer.
     * @example
     * // Delete one GameHubPlayer
     * const GameHubPlayer = await prisma.gameHubPlayer.delete({
     *   where: {
     *     // ... filter to delete one GameHubPlayer
     *   }
     * })
     * 
     */
    delete<T extends GameHubPlayerDeleteArgs>(args: SelectSubset<T, GameHubPlayerDeleteArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameHubPlayer.
     * @param {GameHubPlayerUpdateArgs} args - Arguments to update one GameHubPlayer.
     * @example
     * // Update one GameHubPlayer
     * const gameHubPlayer = await prisma.gameHubPlayer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameHubPlayerUpdateArgs>(args: SelectSubset<T, GameHubPlayerUpdateArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameHubPlayers.
     * @param {GameHubPlayerDeleteManyArgs} args - Arguments to filter GameHubPlayers to delete.
     * @example
     * // Delete a few GameHubPlayers
     * const { count } = await prisma.gameHubPlayer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameHubPlayerDeleteManyArgs>(args?: SelectSubset<T, GameHubPlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubPlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameHubPlayers
     * const gameHubPlayer = await prisma.gameHubPlayer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameHubPlayerUpdateManyArgs>(args: SelectSubset<T, GameHubPlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubPlayers and returns the data updated in the database.
     * @param {GameHubPlayerUpdateManyAndReturnArgs} args - Arguments to update many GameHubPlayers.
     * @example
     * // Update many GameHubPlayers
     * const gameHubPlayer = await prisma.gameHubPlayer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameHubPlayers and only return the `id`
     * const gameHubPlayerWithIdOnly = await prisma.gameHubPlayer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameHubPlayerUpdateManyAndReturnArgs>(args: SelectSubset<T, GameHubPlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameHubPlayer.
     * @param {GameHubPlayerUpsertArgs} args - Arguments to update or create a GameHubPlayer.
     * @example
     * // Update or create a GameHubPlayer
     * const gameHubPlayer = await prisma.gameHubPlayer.upsert({
     *   create: {
     *     // ... data to create a GameHubPlayer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameHubPlayer we want to update
     *   }
     * })
     */
    upsert<T extends GameHubPlayerUpsertArgs>(args: SelectSubset<T, GameHubPlayerUpsertArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameHubPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubPlayerCountArgs} args - Arguments to filter GameHubPlayers to count.
     * @example
     * // Count the number of GameHubPlayers
     * const count = await prisma.gameHubPlayer.count({
     *   where: {
     *     // ... the filter for the GameHubPlayers we want to count
     *   }
     * })
    **/
    count<T extends GameHubPlayerCountArgs>(
      args?: Subset<T, GameHubPlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameHubPlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameHubPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubPlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameHubPlayerAggregateArgs>(args: Subset<T, GameHubPlayerAggregateArgs>): Prisma.PrismaPromise<GetGameHubPlayerAggregateType<T>>

    /**
     * Group by GameHubPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubPlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameHubPlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameHubPlayerGroupByArgs['orderBy'] }
        : { orderBy?: GameHubPlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameHubPlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameHubPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameHubPlayer model
   */
  readonly fields: GameHubPlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameHubPlayer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameHubPlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends GameHubUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameHubUserDefaultArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tournaments<T extends GameHubPlayer$tournamentsArgs<ExtArgs> = {}>(args?: Subset<T, GameHubPlayer$tournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameHubPlayer model
   */ 
  interface GameHubPlayerFieldRefs {
    readonly id: FieldRef<"GameHubPlayer", 'String'>
    readonly name: FieldRef<"GameHubPlayer", 'String'>
    readonly userId: FieldRef<"GameHubPlayer", 'String'>
    readonly rank: FieldRef<"GameHubPlayer", 'String'>
    readonly mainGame: FieldRef<"GameHubPlayer", 'String'>
    readonly validated: FieldRef<"GameHubPlayer", 'Boolean'>
    readonly createdAt: FieldRef<"GameHubPlayer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameHubPlayer findUnique
   */
  export type GameHubPlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubPlayer to fetch.
     */
    where: GameHubPlayerWhereUniqueInput
  }

  /**
   * GameHubPlayer findUniqueOrThrow
   */
  export type GameHubPlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubPlayer to fetch.
     */
    where: GameHubPlayerWhereUniqueInput
  }

  /**
   * GameHubPlayer findFirst
   */
  export type GameHubPlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubPlayer to fetch.
     */
    where?: GameHubPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubPlayers to fetch.
     */
    orderBy?: GameHubPlayerOrderByWithRelationInput | GameHubPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubPlayers.
     */
    cursor?: GameHubPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubPlayers.
     */
    distinct?: GameHubPlayerScalarFieldEnum | GameHubPlayerScalarFieldEnum[]
  }

  /**
   * GameHubPlayer findFirstOrThrow
   */
  export type GameHubPlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubPlayer to fetch.
     */
    where?: GameHubPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubPlayers to fetch.
     */
    orderBy?: GameHubPlayerOrderByWithRelationInput | GameHubPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubPlayers.
     */
    cursor?: GameHubPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubPlayers.
     */
    distinct?: GameHubPlayerScalarFieldEnum | GameHubPlayerScalarFieldEnum[]
  }

  /**
   * GameHubPlayer findMany
   */
  export type GameHubPlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubPlayers to fetch.
     */
    where?: GameHubPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubPlayers to fetch.
     */
    orderBy?: GameHubPlayerOrderByWithRelationInput | GameHubPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameHubPlayers.
     */
    cursor?: GameHubPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubPlayers.
     */
    skip?: number
    distinct?: GameHubPlayerScalarFieldEnum | GameHubPlayerScalarFieldEnum[]
  }

  /**
   * GameHubPlayer create
   */
  export type GameHubPlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a GameHubPlayer.
     */
    data: XOR<GameHubPlayerCreateInput, GameHubPlayerUncheckedCreateInput>
  }

  /**
   * GameHubPlayer createMany
   */
  export type GameHubPlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameHubPlayers.
     */
    data: GameHubPlayerCreateManyInput | GameHubPlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameHubPlayer createManyAndReturn
   */
  export type GameHubPlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * The data used to create many GameHubPlayers.
     */
    data: GameHubPlayerCreateManyInput | GameHubPlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameHubPlayer update
   */
  export type GameHubPlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a GameHubPlayer.
     */
    data: XOR<GameHubPlayerUpdateInput, GameHubPlayerUncheckedUpdateInput>
    /**
     * Choose, which GameHubPlayer to update.
     */
    where: GameHubPlayerWhereUniqueInput
  }

  /**
   * GameHubPlayer updateMany
   */
  export type GameHubPlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameHubPlayers.
     */
    data: XOR<GameHubPlayerUpdateManyMutationInput, GameHubPlayerUncheckedUpdateManyInput>
    /**
     * Filter which GameHubPlayers to update
     */
    where?: GameHubPlayerWhereInput
    /**
     * Limit how many GameHubPlayers to update.
     */
    limit?: number
  }

  /**
   * GameHubPlayer updateManyAndReturn
   */
  export type GameHubPlayerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * The data used to update GameHubPlayers.
     */
    data: XOR<GameHubPlayerUpdateManyMutationInput, GameHubPlayerUncheckedUpdateManyInput>
    /**
     * Filter which GameHubPlayers to update
     */
    where?: GameHubPlayerWhereInput
    /**
     * Limit how many GameHubPlayers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameHubPlayer upsert
   */
  export type GameHubPlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the GameHubPlayer to update in case it exists.
     */
    where: GameHubPlayerWhereUniqueInput
    /**
     * In case the GameHubPlayer found by the `where` argument doesn't exist, create a new GameHubPlayer with this data.
     */
    create: XOR<GameHubPlayerCreateInput, GameHubPlayerUncheckedCreateInput>
    /**
     * In case the GameHubPlayer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameHubPlayerUpdateInput, GameHubPlayerUncheckedUpdateInput>
  }

  /**
   * GameHubPlayer delete
   */
  export type GameHubPlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
    /**
     * Filter which GameHubPlayer to delete.
     */
    where: GameHubPlayerWhereUniqueInput
  }

  /**
   * GameHubPlayer deleteMany
   */
  export type GameHubPlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubPlayers to delete
     */
    where?: GameHubPlayerWhereInput
    /**
     * Limit how many GameHubPlayers to delete.
     */
    limit?: number
  }

  /**
   * GameHubPlayer.tournaments
   */
  export type GameHubPlayer$tournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    where?: GameHubTournamentPlayerWhereInput
    orderBy?: GameHubTournamentPlayerOrderByWithRelationInput | GameHubTournamentPlayerOrderByWithRelationInput[]
    cursor?: GameHubTournamentPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameHubTournamentPlayerScalarFieldEnum | GameHubTournamentPlayerScalarFieldEnum[]
  }

  /**
   * GameHubPlayer without action
   */
  export type GameHubPlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubPlayer
     */
    select?: GameHubPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubPlayer
     */
    omit?: GameHubPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubPlayerInclude<ExtArgs> | null
  }


  /**
   * Model GameHubTournament
   */

  export type AggregateGameHubTournament = {
    _count: GameHubTournamentCountAggregateOutputType | null
    _min: GameHubTournamentMinAggregateOutputType | null
    _max: GameHubTournamentMaxAggregateOutputType | null
  }

  export type GameHubTournamentMinAggregateOutputType = {
    id: string | null
    title: string | null
    game: string | null
    date: Date | null
    rules: string | null
    organizerId: string | null
    createdAt: Date | null
  }

  export type GameHubTournamentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    game: string | null
    date: Date | null
    rules: string | null
    organizerId: string | null
    createdAt: Date | null
  }

  export type GameHubTournamentCountAggregateOutputType = {
    id: number
    title: number
    game: number
    date: number
    rules: number
    organizerId: number
    createdAt: number
    _all: number
  }


  export type GameHubTournamentMinAggregateInputType = {
    id?: true
    title?: true
    game?: true
    date?: true
    rules?: true
    organizerId?: true
    createdAt?: true
  }

  export type GameHubTournamentMaxAggregateInputType = {
    id?: true
    title?: true
    game?: true
    date?: true
    rules?: true
    organizerId?: true
    createdAt?: true
  }

  export type GameHubTournamentCountAggregateInputType = {
    id?: true
    title?: true
    game?: true
    date?: true
    rules?: true
    organizerId?: true
    createdAt?: true
    _all?: true
  }

  export type GameHubTournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubTournament to aggregate.
     */
    where?: GameHubTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournaments to fetch.
     */
    orderBy?: GameHubTournamentOrderByWithRelationInput | GameHubTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameHubTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameHubTournaments
    **/
    _count?: true | GameHubTournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameHubTournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameHubTournamentMaxAggregateInputType
  }

  export type GetGameHubTournamentAggregateType<T extends GameHubTournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateGameHubTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameHubTournament[P]>
      : GetScalarType<T[P], AggregateGameHubTournament[P]>
  }




  export type GameHubTournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubTournamentWhereInput
    orderBy?: GameHubTournamentOrderByWithAggregationInput | GameHubTournamentOrderByWithAggregationInput[]
    by: GameHubTournamentScalarFieldEnum[] | GameHubTournamentScalarFieldEnum
    having?: GameHubTournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameHubTournamentCountAggregateInputType | true
    _min?: GameHubTournamentMinAggregateInputType
    _max?: GameHubTournamentMaxAggregateInputType
  }

  export type GameHubTournamentGroupByOutputType = {
    id: string
    title: string
    game: string
    date: Date
    rules: string
    organizerId: string
    createdAt: Date
    _count: GameHubTournamentCountAggregateOutputType | null
    _min: GameHubTournamentMinAggregateOutputType | null
    _max: GameHubTournamentMaxAggregateOutputType | null
  }

  type GetGameHubTournamentGroupByPayload<T extends GameHubTournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameHubTournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameHubTournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameHubTournamentGroupByOutputType[P]>
            : GetScalarType<T[P], GameHubTournamentGroupByOutputType[P]>
        }
      >
    >


  export type GameHubTournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    game?: boolean
    date?: boolean
    rules?: boolean
    organizerId?: boolean
    createdAt?: boolean
    organizer?: boolean | GameHubUserDefaultArgs<ExtArgs>
    players?: boolean | GameHubTournament$playersArgs<ExtArgs>
    _count?: boolean | GameHubTournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubTournament"]>

  export type GameHubTournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    game?: boolean
    date?: boolean
    rules?: boolean
    organizerId?: boolean
    createdAt?: boolean
    organizer?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubTournament"]>

  export type GameHubTournamentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    game?: boolean
    date?: boolean
    rules?: boolean
    organizerId?: boolean
    createdAt?: boolean
    organizer?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubTournament"]>

  export type GameHubTournamentSelectScalar = {
    id?: boolean
    title?: boolean
    game?: boolean
    date?: boolean
    rules?: boolean
    organizerId?: boolean
    createdAt?: boolean
  }

  export type GameHubTournamentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "game" | "date" | "rules" | "organizerId" | "createdAt", ExtArgs["result"]["gameHubTournament"]>
  export type GameHubTournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | GameHubUserDefaultArgs<ExtArgs>
    players?: boolean | GameHubTournament$playersArgs<ExtArgs>
    _count?: boolean | GameHubTournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameHubTournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }
  export type GameHubTournamentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | GameHubUserDefaultArgs<ExtArgs>
  }

  export type $GameHubTournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameHubTournament"
    objects: {
      organizer: Prisma.$GameHubUserPayload<ExtArgs>
      players: Prisma.$GameHubTournamentPlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      game: string
      date: Date
      rules: string
      organizerId: string
      createdAt: Date
    }, ExtArgs["result"]["gameHubTournament"]>
    composites: {}
  }

  type GameHubTournamentGetPayload<S extends boolean | null | undefined | GameHubTournamentDefaultArgs> = $Result.GetResult<Prisma.$GameHubTournamentPayload, S>

  type GameHubTournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameHubTournamentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameHubTournamentCountAggregateInputType | true
    }

  export interface GameHubTournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameHubTournament'], meta: { name: 'GameHubTournament' } }
    /**
     * Find zero or one GameHubTournament that matches the filter.
     * @param {GameHubTournamentFindUniqueArgs} args - Arguments to find a GameHubTournament
     * @example
     * // Get one GameHubTournament
     * const gameHubTournament = await prisma.gameHubTournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameHubTournamentFindUniqueArgs>(args: SelectSubset<T, GameHubTournamentFindUniqueArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameHubTournament that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameHubTournamentFindUniqueOrThrowArgs} args - Arguments to find a GameHubTournament
     * @example
     * // Get one GameHubTournament
     * const gameHubTournament = await prisma.gameHubTournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameHubTournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, GameHubTournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubTournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentFindFirstArgs} args - Arguments to find a GameHubTournament
     * @example
     * // Get one GameHubTournament
     * const gameHubTournament = await prisma.gameHubTournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameHubTournamentFindFirstArgs>(args?: SelectSubset<T, GameHubTournamentFindFirstArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubTournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentFindFirstOrThrowArgs} args - Arguments to find a GameHubTournament
     * @example
     * // Get one GameHubTournament
     * const gameHubTournament = await prisma.gameHubTournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameHubTournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, GameHubTournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameHubTournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameHubTournaments
     * const gameHubTournaments = await prisma.gameHubTournament.findMany()
     * 
     * // Get first 10 GameHubTournaments
     * const gameHubTournaments = await prisma.gameHubTournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameHubTournamentWithIdOnly = await prisma.gameHubTournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameHubTournamentFindManyArgs>(args?: SelectSubset<T, GameHubTournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameHubTournament.
     * @param {GameHubTournamentCreateArgs} args - Arguments to create a GameHubTournament.
     * @example
     * // Create one GameHubTournament
     * const GameHubTournament = await prisma.gameHubTournament.create({
     *   data: {
     *     // ... data to create a GameHubTournament
     *   }
     * })
     * 
     */
    create<T extends GameHubTournamentCreateArgs>(args: SelectSubset<T, GameHubTournamentCreateArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameHubTournaments.
     * @param {GameHubTournamentCreateManyArgs} args - Arguments to create many GameHubTournaments.
     * @example
     * // Create many GameHubTournaments
     * const gameHubTournament = await prisma.gameHubTournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameHubTournamentCreateManyArgs>(args?: SelectSubset<T, GameHubTournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameHubTournaments and returns the data saved in the database.
     * @param {GameHubTournamentCreateManyAndReturnArgs} args - Arguments to create many GameHubTournaments.
     * @example
     * // Create many GameHubTournaments
     * const gameHubTournament = await prisma.gameHubTournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameHubTournaments and only return the `id`
     * const gameHubTournamentWithIdOnly = await prisma.gameHubTournament.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameHubTournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, GameHubTournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameHubTournament.
     * @param {GameHubTournamentDeleteArgs} args - Arguments to delete one GameHubTournament.
     * @example
     * // Delete one GameHubTournament
     * const GameHubTournament = await prisma.gameHubTournament.delete({
     *   where: {
     *     // ... filter to delete one GameHubTournament
     *   }
     * })
     * 
     */
    delete<T extends GameHubTournamentDeleteArgs>(args: SelectSubset<T, GameHubTournamentDeleteArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameHubTournament.
     * @param {GameHubTournamentUpdateArgs} args - Arguments to update one GameHubTournament.
     * @example
     * // Update one GameHubTournament
     * const gameHubTournament = await prisma.gameHubTournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameHubTournamentUpdateArgs>(args: SelectSubset<T, GameHubTournamentUpdateArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameHubTournaments.
     * @param {GameHubTournamentDeleteManyArgs} args - Arguments to filter GameHubTournaments to delete.
     * @example
     * // Delete a few GameHubTournaments
     * const { count } = await prisma.gameHubTournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameHubTournamentDeleteManyArgs>(args?: SelectSubset<T, GameHubTournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubTournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameHubTournaments
     * const gameHubTournament = await prisma.gameHubTournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameHubTournamentUpdateManyArgs>(args: SelectSubset<T, GameHubTournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubTournaments and returns the data updated in the database.
     * @param {GameHubTournamentUpdateManyAndReturnArgs} args - Arguments to update many GameHubTournaments.
     * @example
     * // Update many GameHubTournaments
     * const gameHubTournament = await prisma.gameHubTournament.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameHubTournaments and only return the `id`
     * const gameHubTournamentWithIdOnly = await prisma.gameHubTournament.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameHubTournamentUpdateManyAndReturnArgs>(args: SelectSubset<T, GameHubTournamentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameHubTournament.
     * @param {GameHubTournamentUpsertArgs} args - Arguments to update or create a GameHubTournament.
     * @example
     * // Update or create a GameHubTournament
     * const gameHubTournament = await prisma.gameHubTournament.upsert({
     *   create: {
     *     // ... data to create a GameHubTournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameHubTournament we want to update
     *   }
     * })
     */
    upsert<T extends GameHubTournamentUpsertArgs>(args: SelectSubset<T, GameHubTournamentUpsertArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameHubTournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentCountArgs} args - Arguments to filter GameHubTournaments to count.
     * @example
     * // Count the number of GameHubTournaments
     * const count = await prisma.gameHubTournament.count({
     *   where: {
     *     // ... the filter for the GameHubTournaments we want to count
     *   }
     * })
    **/
    count<T extends GameHubTournamentCountArgs>(
      args?: Subset<T, GameHubTournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameHubTournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameHubTournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameHubTournamentAggregateArgs>(args: Subset<T, GameHubTournamentAggregateArgs>): Prisma.PrismaPromise<GetGameHubTournamentAggregateType<T>>

    /**
     * Group by GameHubTournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameHubTournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameHubTournamentGroupByArgs['orderBy'] }
        : { orderBy?: GameHubTournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameHubTournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameHubTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameHubTournament model
   */
  readonly fields: GameHubTournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameHubTournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameHubTournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends GameHubUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameHubUserDefaultArgs<ExtArgs>>): Prisma__GameHubUserClient<$Result.GetResult<Prisma.$GameHubUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    players<T extends GameHubTournament$playersArgs<ExtArgs> = {}>(args?: Subset<T, GameHubTournament$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameHubTournament model
   */ 
  interface GameHubTournamentFieldRefs {
    readonly id: FieldRef<"GameHubTournament", 'String'>
    readonly title: FieldRef<"GameHubTournament", 'String'>
    readonly game: FieldRef<"GameHubTournament", 'String'>
    readonly date: FieldRef<"GameHubTournament", 'DateTime'>
    readonly rules: FieldRef<"GameHubTournament", 'String'>
    readonly organizerId: FieldRef<"GameHubTournament", 'String'>
    readonly createdAt: FieldRef<"GameHubTournament", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameHubTournament findUnique
   */
  export type GameHubTournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournament to fetch.
     */
    where: GameHubTournamentWhereUniqueInput
  }

  /**
   * GameHubTournament findUniqueOrThrow
   */
  export type GameHubTournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournament to fetch.
     */
    where: GameHubTournamentWhereUniqueInput
  }

  /**
   * GameHubTournament findFirst
   */
  export type GameHubTournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournament to fetch.
     */
    where?: GameHubTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournaments to fetch.
     */
    orderBy?: GameHubTournamentOrderByWithRelationInput | GameHubTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubTournaments.
     */
    cursor?: GameHubTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubTournaments.
     */
    distinct?: GameHubTournamentScalarFieldEnum | GameHubTournamentScalarFieldEnum[]
  }

  /**
   * GameHubTournament findFirstOrThrow
   */
  export type GameHubTournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournament to fetch.
     */
    where?: GameHubTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournaments to fetch.
     */
    orderBy?: GameHubTournamentOrderByWithRelationInput | GameHubTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubTournaments.
     */
    cursor?: GameHubTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubTournaments.
     */
    distinct?: GameHubTournamentScalarFieldEnum | GameHubTournamentScalarFieldEnum[]
  }

  /**
   * GameHubTournament findMany
   */
  export type GameHubTournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournaments to fetch.
     */
    where?: GameHubTournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournaments to fetch.
     */
    orderBy?: GameHubTournamentOrderByWithRelationInput | GameHubTournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameHubTournaments.
     */
    cursor?: GameHubTournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournaments.
     */
    skip?: number
    distinct?: GameHubTournamentScalarFieldEnum | GameHubTournamentScalarFieldEnum[]
  }

  /**
   * GameHubTournament create
   */
  export type GameHubTournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a GameHubTournament.
     */
    data: XOR<GameHubTournamentCreateInput, GameHubTournamentUncheckedCreateInput>
  }

  /**
   * GameHubTournament createMany
   */
  export type GameHubTournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameHubTournaments.
     */
    data: GameHubTournamentCreateManyInput | GameHubTournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameHubTournament createManyAndReturn
   */
  export type GameHubTournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * The data used to create many GameHubTournaments.
     */
    data: GameHubTournamentCreateManyInput | GameHubTournamentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameHubTournament update
   */
  export type GameHubTournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a GameHubTournament.
     */
    data: XOR<GameHubTournamentUpdateInput, GameHubTournamentUncheckedUpdateInput>
    /**
     * Choose, which GameHubTournament to update.
     */
    where: GameHubTournamentWhereUniqueInput
  }

  /**
   * GameHubTournament updateMany
   */
  export type GameHubTournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameHubTournaments.
     */
    data: XOR<GameHubTournamentUpdateManyMutationInput, GameHubTournamentUncheckedUpdateManyInput>
    /**
     * Filter which GameHubTournaments to update
     */
    where?: GameHubTournamentWhereInput
    /**
     * Limit how many GameHubTournaments to update.
     */
    limit?: number
  }

  /**
   * GameHubTournament updateManyAndReturn
   */
  export type GameHubTournamentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * The data used to update GameHubTournaments.
     */
    data: XOR<GameHubTournamentUpdateManyMutationInput, GameHubTournamentUncheckedUpdateManyInput>
    /**
     * Filter which GameHubTournaments to update
     */
    where?: GameHubTournamentWhereInput
    /**
     * Limit how many GameHubTournaments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameHubTournament upsert
   */
  export type GameHubTournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the GameHubTournament to update in case it exists.
     */
    where: GameHubTournamentWhereUniqueInput
    /**
     * In case the GameHubTournament found by the `where` argument doesn't exist, create a new GameHubTournament with this data.
     */
    create: XOR<GameHubTournamentCreateInput, GameHubTournamentUncheckedCreateInput>
    /**
     * In case the GameHubTournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameHubTournamentUpdateInput, GameHubTournamentUncheckedUpdateInput>
  }

  /**
   * GameHubTournament delete
   */
  export type GameHubTournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
    /**
     * Filter which GameHubTournament to delete.
     */
    where: GameHubTournamentWhereUniqueInput
  }

  /**
   * GameHubTournament deleteMany
   */
  export type GameHubTournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubTournaments to delete
     */
    where?: GameHubTournamentWhereInput
    /**
     * Limit how many GameHubTournaments to delete.
     */
    limit?: number
  }

  /**
   * GameHubTournament.players
   */
  export type GameHubTournament$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    where?: GameHubTournamentPlayerWhereInput
    orderBy?: GameHubTournamentPlayerOrderByWithRelationInput | GameHubTournamentPlayerOrderByWithRelationInput[]
    cursor?: GameHubTournamentPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameHubTournamentPlayerScalarFieldEnum | GameHubTournamentPlayerScalarFieldEnum[]
  }

  /**
   * GameHubTournament without action
   */
  export type GameHubTournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournament
     */
    select?: GameHubTournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournament
     */
    omit?: GameHubTournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentInclude<ExtArgs> | null
  }


  /**
   * Model GameHubTournamentPlayer
   */

  export type AggregateGameHubTournamentPlayer = {
    _count: GameHubTournamentPlayerCountAggregateOutputType | null
    _min: GameHubTournamentPlayerMinAggregateOutputType | null
    _max: GameHubTournamentPlayerMaxAggregateOutputType | null
  }

  export type GameHubTournamentPlayerMinAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    playerId: string | null
    joinedAt: Date | null
  }

  export type GameHubTournamentPlayerMaxAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    playerId: string | null
    joinedAt: Date | null
  }

  export type GameHubTournamentPlayerCountAggregateOutputType = {
    id: number
    tournamentId: number
    playerId: number
    joinedAt: number
    _all: number
  }


  export type GameHubTournamentPlayerMinAggregateInputType = {
    id?: true
    tournamentId?: true
    playerId?: true
    joinedAt?: true
  }

  export type GameHubTournamentPlayerMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    playerId?: true
    joinedAt?: true
  }

  export type GameHubTournamentPlayerCountAggregateInputType = {
    id?: true
    tournamentId?: true
    playerId?: true
    joinedAt?: true
    _all?: true
  }

  export type GameHubTournamentPlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubTournamentPlayer to aggregate.
     */
    where?: GameHubTournamentPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournamentPlayers to fetch.
     */
    orderBy?: GameHubTournamentPlayerOrderByWithRelationInput | GameHubTournamentPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameHubTournamentPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournamentPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournamentPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameHubTournamentPlayers
    **/
    _count?: true | GameHubTournamentPlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameHubTournamentPlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameHubTournamentPlayerMaxAggregateInputType
  }

  export type GetGameHubTournamentPlayerAggregateType<T extends GameHubTournamentPlayerAggregateArgs> = {
        [P in keyof T & keyof AggregateGameHubTournamentPlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameHubTournamentPlayer[P]>
      : GetScalarType<T[P], AggregateGameHubTournamentPlayer[P]>
  }




  export type GameHubTournamentPlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameHubTournamentPlayerWhereInput
    orderBy?: GameHubTournamentPlayerOrderByWithAggregationInput | GameHubTournamentPlayerOrderByWithAggregationInput[]
    by: GameHubTournamentPlayerScalarFieldEnum[] | GameHubTournamentPlayerScalarFieldEnum
    having?: GameHubTournamentPlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameHubTournamentPlayerCountAggregateInputType | true
    _min?: GameHubTournamentPlayerMinAggregateInputType
    _max?: GameHubTournamentPlayerMaxAggregateInputType
  }

  export type GameHubTournamentPlayerGroupByOutputType = {
    id: string
    tournamentId: string
    playerId: string
    joinedAt: Date
    _count: GameHubTournamentPlayerCountAggregateOutputType | null
    _min: GameHubTournamentPlayerMinAggregateOutputType | null
    _max: GameHubTournamentPlayerMaxAggregateOutputType | null
  }

  type GetGameHubTournamentPlayerGroupByPayload<T extends GameHubTournamentPlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameHubTournamentPlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameHubTournamentPlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameHubTournamentPlayerGroupByOutputType[P]>
            : GetScalarType<T[P], GameHubTournamentPlayerGroupByOutputType[P]>
        }
      >
    >


  export type GameHubTournamentPlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    playerId?: boolean
    joinedAt?: boolean
    tournament?: boolean | GameHubTournamentDefaultArgs<ExtArgs>
    player?: boolean | GameHubPlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubTournamentPlayer"]>

  export type GameHubTournamentPlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    playerId?: boolean
    joinedAt?: boolean
    tournament?: boolean | GameHubTournamentDefaultArgs<ExtArgs>
    player?: boolean | GameHubPlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubTournamentPlayer"]>

  export type GameHubTournamentPlayerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    playerId?: boolean
    joinedAt?: boolean
    tournament?: boolean | GameHubTournamentDefaultArgs<ExtArgs>
    player?: boolean | GameHubPlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameHubTournamentPlayer"]>

  export type GameHubTournamentPlayerSelectScalar = {
    id?: boolean
    tournamentId?: boolean
    playerId?: boolean
    joinedAt?: boolean
  }

  export type GameHubTournamentPlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tournamentId" | "playerId" | "joinedAt", ExtArgs["result"]["gameHubTournamentPlayer"]>
  export type GameHubTournamentPlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | GameHubTournamentDefaultArgs<ExtArgs>
    player?: boolean | GameHubPlayerDefaultArgs<ExtArgs>
  }
  export type GameHubTournamentPlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | GameHubTournamentDefaultArgs<ExtArgs>
    player?: boolean | GameHubPlayerDefaultArgs<ExtArgs>
  }
  export type GameHubTournamentPlayerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | GameHubTournamentDefaultArgs<ExtArgs>
    player?: boolean | GameHubPlayerDefaultArgs<ExtArgs>
  }

  export type $GameHubTournamentPlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameHubTournamentPlayer"
    objects: {
      tournament: Prisma.$GameHubTournamentPayload<ExtArgs>
      player: Prisma.$GameHubPlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tournamentId: string
      playerId: string
      joinedAt: Date
    }, ExtArgs["result"]["gameHubTournamentPlayer"]>
    composites: {}
  }

  type GameHubTournamentPlayerGetPayload<S extends boolean | null | undefined | GameHubTournamentPlayerDefaultArgs> = $Result.GetResult<Prisma.$GameHubTournamentPlayerPayload, S>

  type GameHubTournamentPlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameHubTournamentPlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameHubTournamentPlayerCountAggregateInputType | true
    }

  export interface GameHubTournamentPlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameHubTournamentPlayer'], meta: { name: 'GameHubTournamentPlayer' } }
    /**
     * Find zero or one GameHubTournamentPlayer that matches the filter.
     * @param {GameHubTournamentPlayerFindUniqueArgs} args - Arguments to find a GameHubTournamentPlayer
     * @example
     * // Get one GameHubTournamentPlayer
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameHubTournamentPlayerFindUniqueArgs>(args: SelectSubset<T, GameHubTournamentPlayerFindUniqueArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameHubTournamentPlayer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameHubTournamentPlayerFindUniqueOrThrowArgs} args - Arguments to find a GameHubTournamentPlayer
     * @example
     * // Get one GameHubTournamentPlayer
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameHubTournamentPlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, GameHubTournamentPlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubTournamentPlayer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentPlayerFindFirstArgs} args - Arguments to find a GameHubTournamentPlayer
     * @example
     * // Get one GameHubTournamentPlayer
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameHubTournamentPlayerFindFirstArgs>(args?: SelectSubset<T, GameHubTournamentPlayerFindFirstArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameHubTournamentPlayer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentPlayerFindFirstOrThrowArgs} args - Arguments to find a GameHubTournamentPlayer
     * @example
     * // Get one GameHubTournamentPlayer
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameHubTournamentPlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, GameHubTournamentPlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameHubTournamentPlayers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentPlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameHubTournamentPlayers
     * const gameHubTournamentPlayers = await prisma.gameHubTournamentPlayer.findMany()
     * 
     * // Get first 10 GameHubTournamentPlayers
     * const gameHubTournamentPlayers = await prisma.gameHubTournamentPlayer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameHubTournamentPlayerWithIdOnly = await prisma.gameHubTournamentPlayer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameHubTournamentPlayerFindManyArgs>(args?: SelectSubset<T, GameHubTournamentPlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameHubTournamentPlayer.
     * @param {GameHubTournamentPlayerCreateArgs} args - Arguments to create a GameHubTournamentPlayer.
     * @example
     * // Create one GameHubTournamentPlayer
     * const GameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.create({
     *   data: {
     *     // ... data to create a GameHubTournamentPlayer
     *   }
     * })
     * 
     */
    create<T extends GameHubTournamentPlayerCreateArgs>(args: SelectSubset<T, GameHubTournamentPlayerCreateArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameHubTournamentPlayers.
     * @param {GameHubTournamentPlayerCreateManyArgs} args - Arguments to create many GameHubTournamentPlayers.
     * @example
     * // Create many GameHubTournamentPlayers
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameHubTournamentPlayerCreateManyArgs>(args?: SelectSubset<T, GameHubTournamentPlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameHubTournamentPlayers and returns the data saved in the database.
     * @param {GameHubTournamentPlayerCreateManyAndReturnArgs} args - Arguments to create many GameHubTournamentPlayers.
     * @example
     * // Create many GameHubTournamentPlayers
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameHubTournamentPlayers and only return the `id`
     * const gameHubTournamentPlayerWithIdOnly = await prisma.gameHubTournamentPlayer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameHubTournamentPlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, GameHubTournamentPlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameHubTournamentPlayer.
     * @param {GameHubTournamentPlayerDeleteArgs} args - Arguments to delete one GameHubTournamentPlayer.
     * @example
     * // Delete one GameHubTournamentPlayer
     * const GameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.delete({
     *   where: {
     *     // ... filter to delete one GameHubTournamentPlayer
     *   }
     * })
     * 
     */
    delete<T extends GameHubTournamentPlayerDeleteArgs>(args: SelectSubset<T, GameHubTournamentPlayerDeleteArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameHubTournamentPlayer.
     * @param {GameHubTournamentPlayerUpdateArgs} args - Arguments to update one GameHubTournamentPlayer.
     * @example
     * // Update one GameHubTournamentPlayer
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameHubTournamentPlayerUpdateArgs>(args: SelectSubset<T, GameHubTournamentPlayerUpdateArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameHubTournamentPlayers.
     * @param {GameHubTournamentPlayerDeleteManyArgs} args - Arguments to filter GameHubTournamentPlayers to delete.
     * @example
     * // Delete a few GameHubTournamentPlayers
     * const { count } = await prisma.gameHubTournamentPlayer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameHubTournamentPlayerDeleteManyArgs>(args?: SelectSubset<T, GameHubTournamentPlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubTournamentPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentPlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameHubTournamentPlayers
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameHubTournamentPlayerUpdateManyArgs>(args: SelectSubset<T, GameHubTournamentPlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHubTournamentPlayers and returns the data updated in the database.
     * @param {GameHubTournamentPlayerUpdateManyAndReturnArgs} args - Arguments to update many GameHubTournamentPlayers.
     * @example
     * // Update many GameHubTournamentPlayers
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameHubTournamentPlayers and only return the `id`
     * const gameHubTournamentPlayerWithIdOnly = await prisma.gameHubTournamentPlayer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameHubTournamentPlayerUpdateManyAndReturnArgs>(args: SelectSubset<T, GameHubTournamentPlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameHubTournamentPlayer.
     * @param {GameHubTournamentPlayerUpsertArgs} args - Arguments to update or create a GameHubTournamentPlayer.
     * @example
     * // Update or create a GameHubTournamentPlayer
     * const gameHubTournamentPlayer = await prisma.gameHubTournamentPlayer.upsert({
     *   create: {
     *     // ... data to create a GameHubTournamentPlayer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameHubTournamentPlayer we want to update
     *   }
     * })
     */
    upsert<T extends GameHubTournamentPlayerUpsertArgs>(args: SelectSubset<T, GameHubTournamentPlayerUpsertArgs<ExtArgs>>): Prisma__GameHubTournamentPlayerClient<$Result.GetResult<Prisma.$GameHubTournamentPlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameHubTournamentPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentPlayerCountArgs} args - Arguments to filter GameHubTournamentPlayers to count.
     * @example
     * // Count the number of GameHubTournamentPlayers
     * const count = await prisma.gameHubTournamentPlayer.count({
     *   where: {
     *     // ... the filter for the GameHubTournamentPlayers we want to count
     *   }
     * })
    **/
    count<T extends GameHubTournamentPlayerCountArgs>(
      args?: Subset<T, GameHubTournamentPlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameHubTournamentPlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameHubTournamentPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentPlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameHubTournamentPlayerAggregateArgs>(args: Subset<T, GameHubTournamentPlayerAggregateArgs>): Prisma.PrismaPromise<GetGameHubTournamentPlayerAggregateType<T>>

    /**
     * Group by GameHubTournamentPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHubTournamentPlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameHubTournamentPlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameHubTournamentPlayerGroupByArgs['orderBy'] }
        : { orderBy?: GameHubTournamentPlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameHubTournamentPlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameHubTournamentPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameHubTournamentPlayer model
   */
  readonly fields: GameHubTournamentPlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameHubTournamentPlayer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameHubTournamentPlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends GameHubTournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameHubTournamentDefaultArgs<ExtArgs>>): Prisma__GameHubTournamentClient<$Result.GetResult<Prisma.$GameHubTournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    player<T extends GameHubPlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameHubPlayerDefaultArgs<ExtArgs>>): Prisma__GameHubPlayerClient<$Result.GetResult<Prisma.$GameHubPlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameHubTournamentPlayer model
   */ 
  interface GameHubTournamentPlayerFieldRefs {
    readonly id: FieldRef<"GameHubTournamentPlayer", 'String'>
    readonly tournamentId: FieldRef<"GameHubTournamentPlayer", 'String'>
    readonly playerId: FieldRef<"GameHubTournamentPlayer", 'String'>
    readonly joinedAt: FieldRef<"GameHubTournamentPlayer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameHubTournamentPlayer findUnique
   */
  export type GameHubTournamentPlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournamentPlayer to fetch.
     */
    where: GameHubTournamentPlayerWhereUniqueInput
  }

  /**
   * GameHubTournamentPlayer findUniqueOrThrow
   */
  export type GameHubTournamentPlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournamentPlayer to fetch.
     */
    where: GameHubTournamentPlayerWhereUniqueInput
  }

  /**
   * GameHubTournamentPlayer findFirst
   */
  export type GameHubTournamentPlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournamentPlayer to fetch.
     */
    where?: GameHubTournamentPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournamentPlayers to fetch.
     */
    orderBy?: GameHubTournamentPlayerOrderByWithRelationInput | GameHubTournamentPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubTournamentPlayers.
     */
    cursor?: GameHubTournamentPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournamentPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournamentPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubTournamentPlayers.
     */
    distinct?: GameHubTournamentPlayerScalarFieldEnum | GameHubTournamentPlayerScalarFieldEnum[]
  }

  /**
   * GameHubTournamentPlayer findFirstOrThrow
   */
  export type GameHubTournamentPlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournamentPlayer to fetch.
     */
    where?: GameHubTournamentPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournamentPlayers to fetch.
     */
    orderBy?: GameHubTournamentPlayerOrderByWithRelationInput | GameHubTournamentPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameHubTournamentPlayers.
     */
    cursor?: GameHubTournamentPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournamentPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournamentPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameHubTournamentPlayers.
     */
    distinct?: GameHubTournamentPlayerScalarFieldEnum | GameHubTournamentPlayerScalarFieldEnum[]
  }

  /**
   * GameHubTournamentPlayer findMany
   */
  export type GameHubTournamentPlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * Filter, which GameHubTournamentPlayers to fetch.
     */
    where?: GameHubTournamentPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameHubTournamentPlayers to fetch.
     */
    orderBy?: GameHubTournamentPlayerOrderByWithRelationInput | GameHubTournamentPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameHubTournamentPlayers.
     */
    cursor?: GameHubTournamentPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameHubTournamentPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameHubTournamentPlayers.
     */
    skip?: number
    distinct?: GameHubTournamentPlayerScalarFieldEnum | GameHubTournamentPlayerScalarFieldEnum[]
  }

  /**
   * GameHubTournamentPlayer create
   */
  export type GameHubTournamentPlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a GameHubTournamentPlayer.
     */
    data: XOR<GameHubTournamentPlayerCreateInput, GameHubTournamentPlayerUncheckedCreateInput>
  }

  /**
   * GameHubTournamentPlayer createMany
   */
  export type GameHubTournamentPlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameHubTournamentPlayers.
     */
    data: GameHubTournamentPlayerCreateManyInput | GameHubTournamentPlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameHubTournamentPlayer createManyAndReturn
   */
  export type GameHubTournamentPlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * The data used to create many GameHubTournamentPlayers.
     */
    data: GameHubTournamentPlayerCreateManyInput | GameHubTournamentPlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameHubTournamentPlayer update
   */
  export type GameHubTournamentPlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a GameHubTournamentPlayer.
     */
    data: XOR<GameHubTournamentPlayerUpdateInput, GameHubTournamentPlayerUncheckedUpdateInput>
    /**
     * Choose, which GameHubTournamentPlayer to update.
     */
    where: GameHubTournamentPlayerWhereUniqueInput
  }

  /**
   * GameHubTournamentPlayer updateMany
   */
  export type GameHubTournamentPlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameHubTournamentPlayers.
     */
    data: XOR<GameHubTournamentPlayerUpdateManyMutationInput, GameHubTournamentPlayerUncheckedUpdateManyInput>
    /**
     * Filter which GameHubTournamentPlayers to update
     */
    where?: GameHubTournamentPlayerWhereInput
    /**
     * Limit how many GameHubTournamentPlayers to update.
     */
    limit?: number
  }

  /**
   * GameHubTournamentPlayer updateManyAndReturn
   */
  export type GameHubTournamentPlayerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * The data used to update GameHubTournamentPlayers.
     */
    data: XOR<GameHubTournamentPlayerUpdateManyMutationInput, GameHubTournamentPlayerUncheckedUpdateManyInput>
    /**
     * Filter which GameHubTournamentPlayers to update
     */
    where?: GameHubTournamentPlayerWhereInput
    /**
     * Limit how many GameHubTournamentPlayers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameHubTournamentPlayer upsert
   */
  export type GameHubTournamentPlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the GameHubTournamentPlayer to update in case it exists.
     */
    where: GameHubTournamentPlayerWhereUniqueInput
    /**
     * In case the GameHubTournamentPlayer found by the `where` argument doesn't exist, create a new GameHubTournamentPlayer with this data.
     */
    create: XOR<GameHubTournamentPlayerCreateInput, GameHubTournamentPlayerUncheckedCreateInput>
    /**
     * In case the GameHubTournamentPlayer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameHubTournamentPlayerUpdateInput, GameHubTournamentPlayerUncheckedUpdateInput>
  }

  /**
   * GameHubTournamentPlayer delete
   */
  export type GameHubTournamentPlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
    /**
     * Filter which GameHubTournamentPlayer to delete.
     */
    where: GameHubTournamentPlayerWhereUniqueInput
  }

  /**
   * GameHubTournamentPlayer deleteMany
   */
  export type GameHubTournamentPlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameHubTournamentPlayers to delete
     */
    where?: GameHubTournamentPlayerWhereInput
    /**
     * Limit how many GameHubTournamentPlayers to delete.
     */
    limit?: number
  }

  /**
   * GameHubTournamentPlayer without action
   */
  export type GameHubTournamentPlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameHubTournamentPlayer
     */
    select?: GameHubTournamentPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameHubTournamentPlayer
     */
    omit?: GameHubTournamentPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameHubTournamentPlayerInclude<ExtArgs> | null
  }


  /**
   * Model UserHealthTracker
   */

  export type AggregateUserHealthTracker = {
    _count: UserHealthTrackerCountAggregateOutputType | null
    _min: UserHealthTrackerMinAggregateOutputType | null
    _max: UserHealthTrackerMaxAggregateOutputType | null
  }

  export type UserHealthTrackerMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserHealthTrackerMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserHealthTrackerCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserHealthTrackerMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserHealthTrackerMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserHealthTrackerCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserHealthTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserHealthTracker to aggregate.
     */
    where?: UserHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHealthTrackers to fetch.
     */
    orderBy?: UserHealthTrackerOrderByWithRelationInput | UserHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserHealthTrackers
    **/
    _count?: true | UserHealthTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserHealthTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserHealthTrackerMaxAggregateInputType
  }

  export type GetUserHealthTrackerAggregateType<T extends UserHealthTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateUserHealthTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserHealthTracker[P]>
      : GetScalarType<T[P], AggregateUserHealthTracker[P]>
  }




  export type UserHealthTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserHealthTrackerWhereInput
    orderBy?: UserHealthTrackerOrderByWithAggregationInput | UserHealthTrackerOrderByWithAggregationInput[]
    by: UserHealthTrackerScalarFieldEnum[] | UserHealthTrackerScalarFieldEnum
    having?: UserHealthTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserHealthTrackerCountAggregateInputType | true
    _min?: UserHealthTrackerMinAggregateInputType
    _max?: UserHealthTrackerMaxAggregateInputType
  }

  export type UserHealthTrackerGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    createdAt: Date
    _count: UserHealthTrackerCountAggregateOutputType | null
    _min: UserHealthTrackerMinAggregateOutputType | null
    _max: UserHealthTrackerMaxAggregateOutputType | null
  }

  type GetUserHealthTrackerGroupByPayload<T extends UserHealthTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserHealthTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserHealthTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserHealthTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], UserHealthTrackerGroupByOutputType[P]>
        }
      >
    >


  export type UserHealthTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    schedules?: boolean | UserHealthTracker$schedulesArgs<ExtArgs>
    records?: boolean | UserHealthTracker$recordsArgs<ExtArgs>
    _count?: boolean | UserHealthTrackerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userHealthTracker"]>

  export type UserHealthTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userHealthTracker"]>

  export type UserHealthTrackerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userHealthTracker"]>

  export type UserHealthTrackerSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UserHealthTrackerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "createdAt", ExtArgs["result"]["userHealthTracker"]>
  export type UserHealthTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | UserHealthTracker$schedulesArgs<ExtArgs>
    records?: boolean | UserHealthTracker$recordsArgs<ExtArgs>
    _count?: boolean | UserHealthTrackerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserHealthTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserHealthTrackerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserHealthTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserHealthTracker"
    objects: {
      schedules: Prisma.$ScheduleHealthTrackerPayload<ExtArgs>[]
      records: Prisma.$RecordHealthTrackerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["userHealthTracker"]>
    composites: {}
  }

  type UserHealthTrackerGetPayload<S extends boolean | null | undefined | UserHealthTrackerDefaultArgs> = $Result.GetResult<Prisma.$UserHealthTrackerPayload, S>

  type UserHealthTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserHealthTrackerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserHealthTrackerCountAggregateInputType | true
    }

  export interface UserHealthTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserHealthTracker'], meta: { name: 'UserHealthTracker' } }
    /**
     * Find zero or one UserHealthTracker that matches the filter.
     * @param {UserHealthTrackerFindUniqueArgs} args - Arguments to find a UserHealthTracker
     * @example
     * // Get one UserHealthTracker
     * const userHealthTracker = await prisma.userHealthTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserHealthTrackerFindUniqueArgs>(args: SelectSubset<T, UserHealthTrackerFindUniqueArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserHealthTracker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserHealthTrackerFindUniqueOrThrowArgs} args - Arguments to find a UserHealthTracker
     * @example
     * // Get one UserHealthTracker
     * const userHealthTracker = await prisma.userHealthTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserHealthTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, UserHealthTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserHealthTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHealthTrackerFindFirstArgs} args - Arguments to find a UserHealthTracker
     * @example
     * // Get one UserHealthTracker
     * const userHealthTracker = await prisma.userHealthTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserHealthTrackerFindFirstArgs>(args?: SelectSubset<T, UserHealthTrackerFindFirstArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserHealthTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHealthTrackerFindFirstOrThrowArgs} args - Arguments to find a UserHealthTracker
     * @example
     * // Get one UserHealthTracker
     * const userHealthTracker = await prisma.userHealthTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserHealthTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, UserHealthTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserHealthTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHealthTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserHealthTrackers
     * const userHealthTrackers = await prisma.userHealthTracker.findMany()
     * 
     * // Get first 10 UserHealthTrackers
     * const userHealthTrackers = await prisma.userHealthTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userHealthTrackerWithIdOnly = await prisma.userHealthTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserHealthTrackerFindManyArgs>(args?: SelectSubset<T, UserHealthTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserHealthTracker.
     * @param {UserHealthTrackerCreateArgs} args - Arguments to create a UserHealthTracker.
     * @example
     * // Create one UserHealthTracker
     * const UserHealthTracker = await prisma.userHealthTracker.create({
     *   data: {
     *     // ... data to create a UserHealthTracker
     *   }
     * })
     * 
     */
    create<T extends UserHealthTrackerCreateArgs>(args: SelectSubset<T, UserHealthTrackerCreateArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserHealthTrackers.
     * @param {UserHealthTrackerCreateManyArgs} args - Arguments to create many UserHealthTrackers.
     * @example
     * // Create many UserHealthTrackers
     * const userHealthTracker = await prisma.userHealthTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserHealthTrackerCreateManyArgs>(args?: SelectSubset<T, UserHealthTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserHealthTrackers and returns the data saved in the database.
     * @param {UserHealthTrackerCreateManyAndReturnArgs} args - Arguments to create many UserHealthTrackers.
     * @example
     * // Create many UserHealthTrackers
     * const userHealthTracker = await prisma.userHealthTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserHealthTrackers and only return the `id`
     * const userHealthTrackerWithIdOnly = await prisma.userHealthTracker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserHealthTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, UserHealthTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserHealthTracker.
     * @param {UserHealthTrackerDeleteArgs} args - Arguments to delete one UserHealthTracker.
     * @example
     * // Delete one UserHealthTracker
     * const UserHealthTracker = await prisma.userHealthTracker.delete({
     *   where: {
     *     // ... filter to delete one UserHealthTracker
     *   }
     * })
     * 
     */
    delete<T extends UserHealthTrackerDeleteArgs>(args: SelectSubset<T, UserHealthTrackerDeleteArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserHealthTracker.
     * @param {UserHealthTrackerUpdateArgs} args - Arguments to update one UserHealthTracker.
     * @example
     * // Update one UserHealthTracker
     * const userHealthTracker = await prisma.userHealthTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserHealthTrackerUpdateArgs>(args: SelectSubset<T, UserHealthTrackerUpdateArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserHealthTrackers.
     * @param {UserHealthTrackerDeleteManyArgs} args - Arguments to filter UserHealthTrackers to delete.
     * @example
     * // Delete a few UserHealthTrackers
     * const { count } = await prisma.userHealthTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserHealthTrackerDeleteManyArgs>(args?: SelectSubset<T, UserHealthTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHealthTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserHealthTrackers
     * const userHealthTracker = await prisma.userHealthTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserHealthTrackerUpdateManyArgs>(args: SelectSubset<T, UserHealthTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserHealthTrackers and returns the data updated in the database.
     * @param {UserHealthTrackerUpdateManyAndReturnArgs} args - Arguments to update many UserHealthTrackers.
     * @example
     * // Update many UserHealthTrackers
     * const userHealthTracker = await prisma.userHealthTracker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserHealthTrackers and only return the `id`
     * const userHealthTrackerWithIdOnly = await prisma.userHealthTracker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserHealthTrackerUpdateManyAndReturnArgs>(args: SelectSubset<T, UserHealthTrackerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserHealthTracker.
     * @param {UserHealthTrackerUpsertArgs} args - Arguments to update or create a UserHealthTracker.
     * @example
     * // Update or create a UserHealthTracker
     * const userHealthTracker = await prisma.userHealthTracker.upsert({
     *   create: {
     *     // ... data to create a UserHealthTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserHealthTracker we want to update
     *   }
     * })
     */
    upsert<T extends UserHealthTrackerUpsertArgs>(args: SelectSubset<T, UserHealthTrackerUpsertArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHealthTrackerCountArgs} args - Arguments to filter UserHealthTrackers to count.
     * @example
     * // Count the number of UserHealthTrackers
     * const count = await prisma.userHealthTracker.count({
     *   where: {
     *     // ... the filter for the UserHealthTrackers we want to count
     *   }
     * })
    **/
    count<T extends UserHealthTrackerCountArgs>(
      args?: Subset<T, UserHealthTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserHealthTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHealthTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserHealthTrackerAggregateArgs>(args: Subset<T, UserHealthTrackerAggregateArgs>): Prisma.PrismaPromise<GetUserHealthTrackerAggregateType<T>>

    /**
     * Group by UserHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHealthTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserHealthTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserHealthTrackerGroupByArgs['orderBy'] }
        : { orderBy?: UserHealthTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserHealthTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserHealthTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserHealthTracker model
   */
  readonly fields: UserHealthTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserHealthTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserHealthTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedules<T extends UserHealthTracker$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, UserHealthTracker$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    records<T extends UserHealthTracker$recordsArgs<ExtArgs> = {}>(args?: Subset<T, UserHealthTracker$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserHealthTracker model
   */ 
  interface UserHealthTrackerFieldRefs {
    readonly id: FieldRef<"UserHealthTracker", 'String'>
    readonly email: FieldRef<"UserHealthTracker", 'String'>
    readonly name: FieldRef<"UserHealthTracker", 'String'>
    readonly password: FieldRef<"UserHealthTracker", 'String'>
    readonly createdAt: FieldRef<"UserHealthTracker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserHealthTracker findUnique
   */
  export type UserHealthTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which UserHealthTracker to fetch.
     */
    where: UserHealthTrackerWhereUniqueInput
  }

  /**
   * UserHealthTracker findUniqueOrThrow
   */
  export type UserHealthTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which UserHealthTracker to fetch.
     */
    where: UserHealthTrackerWhereUniqueInput
  }

  /**
   * UserHealthTracker findFirst
   */
  export type UserHealthTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which UserHealthTracker to fetch.
     */
    where?: UserHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHealthTrackers to fetch.
     */
    orderBy?: UserHealthTrackerOrderByWithRelationInput | UserHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserHealthTrackers.
     */
    cursor?: UserHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserHealthTrackers.
     */
    distinct?: UserHealthTrackerScalarFieldEnum | UserHealthTrackerScalarFieldEnum[]
  }

  /**
   * UserHealthTracker findFirstOrThrow
   */
  export type UserHealthTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which UserHealthTracker to fetch.
     */
    where?: UserHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHealthTrackers to fetch.
     */
    orderBy?: UserHealthTrackerOrderByWithRelationInput | UserHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserHealthTrackers.
     */
    cursor?: UserHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserHealthTrackers.
     */
    distinct?: UserHealthTrackerScalarFieldEnum | UserHealthTrackerScalarFieldEnum[]
  }

  /**
   * UserHealthTracker findMany
   */
  export type UserHealthTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which UserHealthTrackers to fetch.
     */
    where?: UserHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserHealthTrackers to fetch.
     */
    orderBy?: UserHealthTrackerOrderByWithRelationInput | UserHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserHealthTrackers.
     */
    cursor?: UserHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserHealthTrackers.
     */
    skip?: number
    distinct?: UserHealthTrackerScalarFieldEnum | UserHealthTrackerScalarFieldEnum[]
  }

  /**
   * UserHealthTracker create
   */
  export type UserHealthTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a UserHealthTracker.
     */
    data: XOR<UserHealthTrackerCreateInput, UserHealthTrackerUncheckedCreateInput>
  }

  /**
   * UserHealthTracker createMany
   */
  export type UserHealthTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserHealthTrackers.
     */
    data: UserHealthTrackerCreateManyInput | UserHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserHealthTracker createManyAndReturn
   */
  export type UserHealthTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to create many UserHealthTrackers.
     */
    data: UserHealthTrackerCreateManyInput | UserHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserHealthTracker update
   */
  export type UserHealthTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a UserHealthTracker.
     */
    data: XOR<UserHealthTrackerUpdateInput, UserHealthTrackerUncheckedUpdateInput>
    /**
     * Choose, which UserHealthTracker to update.
     */
    where: UserHealthTrackerWhereUniqueInput
  }

  /**
   * UserHealthTracker updateMany
   */
  export type UserHealthTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserHealthTrackers.
     */
    data: XOR<UserHealthTrackerUpdateManyMutationInput, UserHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which UserHealthTrackers to update
     */
    where?: UserHealthTrackerWhereInput
    /**
     * Limit how many UserHealthTrackers to update.
     */
    limit?: number
  }

  /**
   * UserHealthTracker updateManyAndReturn
   */
  export type UserHealthTrackerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to update UserHealthTrackers.
     */
    data: XOR<UserHealthTrackerUpdateManyMutationInput, UserHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which UserHealthTrackers to update
     */
    where?: UserHealthTrackerWhereInput
    /**
     * Limit how many UserHealthTrackers to update.
     */
    limit?: number
  }

  /**
   * UserHealthTracker upsert
   */
  export type UserHealthTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the UserHealthTracker to update in case it exists.
     */
    where: UserHealthTrackerWhereUniqueInput
    /**
     * In case the UserHealthTracker found by the `where` argument doesn't exist, create a new UserHealthTracker with this data.
     */
    create: XOR<UserHealthTrackerCreateInput, UserHealthTrackerUncheckedCreateInput>
    /**
     * In case the UserHealthTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserHealthTrackerUpdateInput, UserHealthTrackerUncheckedUpdateInput>
  }

  /**
   * UserHealthTracker delete
   */
  export type UserHealthTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter which UserHealthTracker to delete.
     */
    where: UserHealthTrackerWhereUniqueInput
  }

  /**
   * UserHealthTracker deleteMany
   */
  export type UserHealthTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserHealthTrackers to delete
     */
    where?: UserHealthTrackerWhereInput
    /**
     * Limit how many UserHealthTrackers to delete.
     */
    limit?: number
  }

  /**
   * UserHealthTracker.schedules
   */
  export type UserHealthTracker$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    where?: ScheduleHealthTrackerWhereInput
    orderBy?: ScheduleHealthTrackerOrderByWithRelationInput | ScheduleHealthTrackerOrderByWithRelationInput[]
    cursor?: ScheduleHealthTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleHealthTrackerScalarFieldEnum | ScheduleHealthTrackerScalarFieldEnum[]
  }

  /**
   * UserHealthTracker.records
   */
  export type UserHealthTracker$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    where?: RecordHealthTrackerWhereInput
    orderBy?: RecordHealthTrackerOrderByWithRelationInput | RecordHealthTrackerOrderByWithRelationInput[]
    cursor?: RecordHealthTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecordHealthTrackerScalarFieldEnum | RecordHealthTrackerScalarFieldEnum[]
  }

  /**
   * UserHealthTracker without action
   */
  export type UserHealthTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserHealthTracker
     */
    select?: UserHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserHealthTracker
     */
    omit?: UserHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHealthTrackerInclude<ExtArgs> | null
  }


  /**
   * Model ScheduleHealthTracker
   */

  export type AggregateScheduleHealthTracker = {
    _count: ScheduleHealthTrackerCountAggregateOutputType | null
    _min: ScheduleHealthTrackerMinAggregateOutputType | null
    _max: ScheduleHealthTrackerMaxAggregateOutputType | null
  }

  export type ScheduleHealthTrackerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    dateTime: Date | null
    notes: string | null
    createdAt: Date | null
  }

  export type ScheduleHealthTrackerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    dateTime: Date | null
    notes: string | null
    createdAt: Date | null
  }

  export type ScheduleHealthTrackerCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    dateTime: number
    notes: number
    createdAt: number
    _all: number
  }


  export type ScheduleHealthTrackerMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    dateTime?: true
    notes?: true
    createdAt?: true
  }

  export type ScheduleHealthTrackerMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    dateTime?: true
    notes?: true
    createdAt?: true
  }

  export type ScheduleHealthTrackerCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    dateTime?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type ScheduleHealthTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleHealthTracker to aggregate.
     */
    where?: ScheduleHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleHealthTrackers to fetch.
     */
    orderBy?: ScheduleHealthTrackerOrderByWithRelationInput | ScheduleHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduleHealthTrackers
    **/
    _count?: true | ScheduleHealthTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleHealthTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleHealthTrackerMaxAggregateInputType
  }

  export type GetScheduleHealthTrackerAggregateType<T extends ScheduleHealthTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduleHealthTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduleHealthTracker[P]>
      : GetScalarType<T[P], AggregateScheduleHealthTracker[P]>
  }




  export type ScheduleHealthTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleHealthTrackerWhereInput
    orderBy?: ScheduleHealthTrackerOrderByWithAggregationInput | ScheduleHealthTrackerOrderByWithAggregationInput[]
    by: ScheduleHealthTrackerScalarFieldEnum[] | ScheduleHealthTrackerScalarFieldEnum
    having?: ScheduleHealthTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleHealthTrackerCountAggregateInputType | true
    _min?: ScheduleHealthTrackerMinAggregateInputType
    _max?: ScheduleHealthTrackerMaxAggregateInputType
  }

  export type ScheduleHealthTrackerGroupByOutputType = {
    id: string
    userId: string
    type: string
    title: string
    dateTime: Date
    notes: string | null
    createdAt: Date
    _count: ScheduleHealthTrackerCountAggregateOutputType | null
    _min: ScheduleHealthTrackerMinAggregateOutputType | null
    _max: ScheduleHealthTrackerMaxAggregateOutputType | null
  }

  type GetScheduleHealthTrackerGroupByPayload<T extends ScheduleHealthTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleHealthTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleHealthTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleHealthTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleHealthTrackerGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleHealthTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    dateTime?: boolean
    notes?: boolean
    createdAt?: boolean
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleHealthTracker"]>

  export type ScheduleHealthTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    dateTime?: boolean
    notes?: boolean
    createdAt?: boolean
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleHealthTracker"]>

  export type ScheduleHealthTrackerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    dateTime?: boolean
    notes?: boolean
    createdAt?: boolean
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleHealthTracker"]>

  export type ScheduleHealthTrackerSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    dateTime?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type ScheduleHealthTrackerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "title" | "dateTime" | "notes" | "createdAt", ExtArgs["result"]["scheduleHealthTracker"]>
  export type ScheduleHealthTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }
  export type ScheduleHealthTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }
  export type ScheduleHealthTrackerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }

  export type $ScheduleHealthTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduleHealthTracker"
    objects: {
      user: Prisma.$UserHealthTrackerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      title: string
      dateTime: Date
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["scheduleHealthTracker"]>
    composites: {}
  }

  type ScheduleHealthTrackerGetPayload<S extends boolean | null | undefined | ScheduleHealthTrackerDefaultArgs> = $Result.GetResult<Prisma.$ScheduleHealthTrackerPayload, S>

  type ScheduleHealthTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduleHealthTrackerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduleHealthTrackerCountAggregateInputType | true
    }

  export interface ScheduleHealthTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduleHealthTracker'], meta: { name: 'ScheduleHealthTracker' } }
    /**
     * Find zero or one ScheduleHealthTracker that matches the filter.
     * @param {ScheduleHealthTrackerFindUniqueArgs} args - Arguments to find a ScheduleHealthTracker
     * @example
     * // Get one ScheduleHealthTracker
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleHealthTrackerFindUniqueArgs>(args: SelectSubset<T, ScheduleHealthTrackerFindUniqueArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScheduleHealthTracker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduleHealthTrackerFindUniqueOrThrowArgs} args - Arguments to find a ScheduleHealthTracker
     * @example
     * // Get one ScheduleHealthTracker
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleHealthTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleHealthTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduleHealthTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleHealthTrackerFindFirstArgs} args - Arguments to find a ScheduleHealthTracker
     * @example
     * // Get one ScheduleHealthTracker
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleHealthTrackerFindFirstArgs>(args?: SelectSubset<T, ScheduleHealthTrackerFindFirstArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduleHealthTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleHealthTrackerFindFirstOrThrowArgs} args - Arguments to find a ScheduleHealthTracker
     * @example
     * // Get one ScheduleHealthTracker
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleHealthTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleHealthTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScheduleHealthTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleHealthTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduleHealthTrackers
     * const scheduleHealthTrackers = await prisma.scheduleHealthTracker.findMany()
     * 
     * // Get first 10 ScheduleHealthTrackers
     * const scheduleHealthTrackers = await prisma.scheduleHealthTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleHealthTrackerWithIdOnly = await prisma.scheduleHealthTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleHealthTrackerFindManyArgs>(args?: SelectSubset<T, ScheduleHealthTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScheduleHealthTracker.
     * @param {ScheduleHealthTrackerCreateArgs} args - Arguments to create a ScheduleHealthTracker.
     * @example
     * // Create one ScheduleHealthTracker
     * const ScheduleHealthTracker = await prisma.scheduleHealthTracker.create({
     *   data: {
     *     // ... data to create a ScheduleHealthTracker
     *   }
     * })
     * 
     */
    create<T extends ScheduleHealthTrackerCreateArgs>(args: SelectSubset<T, ScheduleHealthTrackerCreateArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScheduleHealthTrackers.
     * @param {ScheduleHealthTrackerCreateManyArgs} args - Arguments to create many ScheduleHealthTrackers.
     * @example
     * // Create many ScheduleHealthTrackers
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleHealthTrackerCreateManyArgs>(args?: SelectSubset<T, ScheduleHealthTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScheduleHealthTrackers and returns the data saved in the database.
     * @param {ScheduleHealthTrackerCreateManyAndReturnArgs} args - Arguments to create many ScheduleHealthTrackers.
     * @example
     * // Create many ScheduleHealthTrackers
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScheduleHealthTrackers and only return the `id`
     * const scheduleHealthTrackerWithIdOnly = await prisma.scheduleHealthTracker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleHealthTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleHealthTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScheduleHealthTracker.
     * @param {ScheduleHealthTrackerDeleteArgs} args - Arguments to delete one ScheduleHealthTracker.
     * @example
     * // Delete one ScheduleHealthTracker
     * const ScheduleHealthTracker = await prisma.scheduleHealthTracker.delete({
     *   where: {
     *     // ... filter to delete one ScheduleHealthTracker
     *   }
     * })
     * 
     */
    delete<T extends ScheduleHealthTrackerDeleteArgs>(args: SelectSubset<T, ScheduleHealthTrackerDeleteArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScheduleHealthTracker.
     * @param {ScheduleHealthTrackerUpdateArgs} args - Arguments to update one ScheduleHealthTracker.
     * @example
     * // Update one ScheduleHealthTracker
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleHealthTrackerUpdateArgs>(args: SelectSubset<T, ScheduleHealthTrackerUpdateArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScheduleHealthTrackers.
     * @param {ScheduleHealthTrackerDeleteManyArgs} args - Arguments to filter ScheduleHealthTrackers to delete.
     * @example
     * // Delete a few ScheduleHealthTrackers
     * const { count } = await prisma.scheduleHealthTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleHealthTrackerDeleteManyArgs>(args?: SelectSubset<T, ScheduleHealthTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleHealthTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduleHealthTrackers
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleHealthTrackerUpdateManyArgs>(args: SelectSubset<T, ScheduleHealthTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleHealthTrackers and returns the data updated in the database.
     * @param {ScheduleHealthTrackerUpdateManyAndReturnArgs} args - Arguments to update many ScheduleHealthTrackers.
     * @example
     * // Update many ScheduleHealthTrackers
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScheduleHealthTrackers and only return the `id`
     * const scheduleHealthTrackerWithIdOnly = await prisma.scheduleHealthTracker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduleHealthTrackerUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduleHealthTrackerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScheduleHealthTracker.
     * @param {ScheduleHealthTrackerUpsertArgs} args - Arguments to update or create a ScheduleHealthTracker.
     * @example
     * // Update or create a ScheduleHealthTracker
     * const scheduleHealthTracker = await prisma.scheduleHealthTracker.upsert({
     *   create: {
     *     // ... data to create a ScheduleHealthTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduleHealthTracker we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleHealthTrackerUpsertArgs>(args: SelectSubset<T, ScheduleHealthTrackerUpsertArgs<ExtArgs>>): Prisma__ScheduleHealthTrackerClient<$Result.GetResult<Prisma.$ScheduleHealthTrackerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScheduleHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleHealthTrackerCountArgs} args - Arguments to filter ScheduleHealthTrackers to count.
     * @example
     * // Count the number of ScheduleHealthTrackers
     * const count = await prisma.scheduleHealthTracker.count({
     *   where: {
     *     // ... the filter for the ScheduleHealthTrackers we want to count
     *   }
     * })
    **/
    count<T extends ScheduleHealthTrackerCountArgs>(
      args?: Subset<T, ScheduleHealthTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleHealthTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduleHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleHealthTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleHealthTrackerAggregateArgs>(args: Subset<T, ScheduleHealthTrackerAggregateArgs>): Prisma.PrismaPromise<GetScheduleHealthTrackerAggregateType<T>>

    /**
     * Group by ScheduleHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleHealthTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleHealthTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleHealthTrackerGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleHealthTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleHealthTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleHealthTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduleHealthTracker model
   */
  readonly fields: ScheduleHealthTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduleHealthTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleHealthTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserHealthTrackerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserHealthTrackerDefaultArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduleHealthTracker model
   */ 
  interface ScheduleHealthTrackerFieldRefs {
    readonly id: FieldRef<"ScheduleHealthTracker", 'String'>
    readonly userId: FieldRef<"ScheduleHealthTracker", 'String'>
    readonly type: FieldRef<"ScheduleHealthTracker", 'String'>
    readonly title: FieldRef<"ScheduleHealthTracker", 'String'>
    readonly dateTime: FieldRef<"ScheduleHealthTracker", 'DateTime'>
    readonly notes: FieldRef<"ScheduleHealthTracker", 'String'>
    readonly createdAt: FieldRef<"ScheduleHealthTracker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduleHealthTracker findUnique
   */
  export type ScheduleHealthTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleHealthTracker to fetch.
     */
    where: ScheduleHealthTrackerWhereUniqueInput
  }

  /**
   * ScheduleHealthTracker findUniqueOrThrow
   */
  export type ScheduleHealthTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleHealthTracker to fetch.
     */
    where: ScheduleHealthTrackerWhereUniqueInput
  }

  /**
   * ScheduleHealthTracker findFirst
   */
  export type ScheduleHealthTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleHealthTracker to fetch.
     */
    where?: ScheduleHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleHealthTrackers to fetch.
     */
    orderBy?: ScheduleHealthTrackerOrderByWithRelationInput | ScheduleHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleHealthTrackers.
     */
    cursor?: ScheduleHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleHealthTrackers.
     */
    distinct?: ScheduleHealthTrackerScalarFieldEnum | ScheduleHealthTrackerScalarFieldEnum[]
  }

  /**
   * ScheduleHealthTracker findFirstOrThrow
   */
  export type ScheduleHealthTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleHealthTracker to fetch.
     */
    where?: ScheduleHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleHealthTrackers to fetch.
     */
    orderBy?: ScheduleHealthTrackerOrderByWithRelationInput | ScheduleHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleHealthTrackers.
     */
    cursor?: ScheduleHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleHealthTrackers.
     */
    distinct?: ScheduleHealthTrackerScalarFieldEnum | ScheduleHealthTrackerScalarFieldEnum[]
  }

  /**
   * ScheduleHealthTracker findMany
   */
  export type ScheduleHealthTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleHealthTrackers to fetch.
     */
    where?: ScheduleHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleHealthTrackers to fetch.
     */
    orderBy?: ScheduleHealthTrackerOrderByWithRelationInput | ScheduleHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduleHealthTrackers.
     */
    cursor?: ScheduleHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleHealthTrackers.
     */
    skip?: number
    distinct?: ScheduleHealthTrackerScalarFieldEnum | ScheduleHealthTrackerScalarFieldEnum[]
  }

  /**
   * ScheduleHealthTracker create
   */
  export type ScheduleHealthTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduleHealthTracker.
     */
    data: XOR<ScheduleHealthTrackerCreateInput, ScheduleHealthTrackerUncheckedCreateInput>
  }

  /**
   * ScheduleHealthTracker createMany
   */
  export type ScheduleHealthTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduleHealthTrackers.
     */
    data: ScheduleHealthTrackerCreateManyInput | ScheduleHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduleHealthTracker createManyAndReturn
   */
  export type ScheduleHealthTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to create many ScheduleHealthTrackers.
     */
    data: ScheduleHealthTrackerCreateManyInput | ScheduleHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScheduleHealthTracker update
   */
  export type ScheduleHealthTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduleHealthTracker.
     */
    data: XOR<ScheduleHealthTrackerUpdateInput, ScheduleHealthTrackerUncheckedUpdateInput>
    /**
     * Choose, which ScheduleHealthTracker to update.
     */
    where: ScheduleHealthTrackerWhereUniqueInput
  }

  /**
   * ScheduleHealthTracker updateMany
   */
  export type ScheduleHealthTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduleHealthTrackers.
     */
    data: XOR<ScheduleHealthTrackerUpdateManyMutationInput, ScheduleHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleHealthTrackers to update
     */
    where?: ScheduleHealthTrackerWhereInput
    /**
     * Limit how many ScheduleHealthTrackers to update.
     */
    limit?: number
  }

  /**
   * ScheduleHealthTracker updateManyAndReturn
   */
  export type ScheduleHealthTrackerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to update ScheduleHealthTrackers.
     */
    data: XOR<ScheduleHealthTrackerUpdateManyMutationInput, ScheduleHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleHealthTrackers to update
     */
    where?: ScheduleHealthTrackerWhereInput
    /**
     * Limit how many ScheduleHealthTrackers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScheduleHealthTracker upsert
   */
  export type ScheduleHealthTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduleHealthTracker to update in case it exists.
     */
    where: ScheduleHealthTrackerWhereUniqueInput
    /**
     * In case the ScheduleHealthTracker found by the `where` argument doesn't exist, create a new ScheduleHealthTracker with this data.
     */
    create: XOR<ScheduleHealthTrackerCreateInput, ScheduleHealthTrackerUncheckedCreateInput>
    /**
     * In case the ScheduleHealthTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleHealthTrackerUpdateInput, ScheduleHealthTrackerUncheckedUpdateInput>
  }

  /**
   * ScheduleHealthTracker delete
   */
  export type ScheduleHealthTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter which ScheduleHealthTracker to delete.
     */
    where: ScheduleHealthTrackerWhereUniqueInput
  }

  /**
   * ScheduleHealthTracker deleteMany
   */
  export type ScheduleHealthTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleHealthTrackers to delete
     */
    where?: ScheduleHealthTrackerWhereInput
    /**
     * Limit how many ScheduleHealthTrackers to delete.
     */
    limit?: number
  }

  /**
   * ScheduleHealthTracker without action
   */
  export type ScheduleHealthTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleHealthTracker
     */
    select?: ScheduleHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduleHealthTracker
     */
    omit?: ScheduleHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleHealthTrackerInclude<ExtArgs> | null
  }


  /**
   * Model RecordHealthTracker
   */

  export type AggregateRecordHealthTracker = {
    _count: RecordHealthTrackerCountAggregateOutputType | null
    _min: RecordHealthTrackerMinAggregateOutputType | null
    _max: RecordHealthTrackerMaxAggregateOutputType | null
  }

  export type RecordHealthTrackerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    description: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type RecordHealthTrackerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    description: string | null
    date: Date | null
    createdAt: Date | null
  }

  export type RecordHealthTrackerCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    description: number
    date: number
    createdAt: number
    _all: number
  }


  export type RecordHealthTrackerMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    description?: true
    date?: true
    createdAt?: true
  }

  export type RecordHealthTrackerMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    description?: true
    date?: true
    createdAt?: true
  }

  export type RecordHealthTrackerCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    description?: true
    date?: true
    createdAt?: true
    _all?: true
  }

  export type RecordHealthTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecordHealthTracker to aggregate.
     */
    where?: RecordHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecordHealthTrackers to fetch.
     */
    orderBy?: RecordHealthTrackerOrderByWithRelationInput | RecordHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecordHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecordHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecordHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecordHealthTrackers
    **/
    _count?: true | RecordHealthTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordHealthTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordHealthTrackerMaxAggregateInputType
  }

  export type GetRecordHealthTrackerAggregateType<T extends RecordHealthTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateRecordHealthTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecordHealthTracker[P]>
      : GetScalarType<T[P], AggregateRecordHealthTracker[P]>
  }




  export type RecordHealthTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordHealthTrackerWhereInput
    orderBy?: RecordHealthTrackerOrderByWithAggregationInput | RecordHealthTrackerOrderByWithAggregationInput[]
    by: RecordHealthTrackerScalarFieldEnum[] | RecordHealthTrackerScalarFieldEnum
    having?: RecordHealthTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordHealthTrackerCountAggregateInputType | true
    _min?: RecordHealthTrackerMinAggregateInputType
    _max?: RecordHealthTrackerMaxAggregateInputType
  }

  export type RecordHealthTrackerGroupByOutputType = {
    id: string
    userId: string
    type: string
    description: string
    date: Date
    createdAt: Date
    _count: RecordHealthTrackerCountAggregateOutputType | null
    _min: RecordHealthTrackerMinAggregateOutputType | null
    _max: RecordHealthTrackerMaxAggregateOutputType | null
  }

  type GetRecordHealthTrackerGroupByPayload<T extends RecordHealthTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecordHealthTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordHealthTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordHealthTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], RecordHealthTrackerGroupByOutputType[P]>
        }
      >
    >


  export type RecordHealthTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    date?: boolean
    createdAt?: boolean
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recordHealthTracker"]>

  export type RecordHealthTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    date?: boolean
    createdAt?: boolean
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recordHealthTracker"]>

  export type RecordHealthTrackerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    date?: boolean
    createdAt?: boolean
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recordHealthTracker"]>

  export type RecordHealthTrackerSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    description?: boolean
    date?: boolean
    createdAt?: boolean
  }

  export type RecordHealthTrackerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "description" | "date" | "createdAt", ExtArgs["result"]["recordHealthTracker"]>
  export type RecordHealthTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }
  export type RecordHealthTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }
  export type RecordHealthTrackerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserHealthTrackerDefaultArgs<ExtArgs>
  }

  export type $RecordHealthTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecordHealthTracker"
    objects: {
      user: Prisma.$UserHealthTrackerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      description: string
      date: Date
      createdAt: Date
    }, ExtArgs["result"]["recordHealthTracker"]>
    composites: {}
  }

  type RecordHealthTrackerGetPayload<S extends boolean | null | undefined | RecordHealthTrackerDefaultArgs> = $Result.GetResult<Prisma.$RecordHealthTrackerPayload, S>

  type RecordHealthTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecordHealthTrackerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecordHealthTrackerCountAggregateInputType | true
    }

  export interface RecordHealthTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecordHealthTracker'], meta: { name: 'RecordHealthTracker' } }
    /**
     * Find zero or one RecordHealthTracker that matches the filter.
     * @param {RecordHealthTrackerFindUniqueArgs} args - Arguments to find a RecordHealthTracker
     * @example
     * // Get one RecordHealthTracker
     * const recordHealthTracker = await prisma.recordHealthTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecordHealthTrackerFindUniqueArgs>(args: SelectSubset<T, RecordHealthTrackerFindUniqueArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RecordHealthTracker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecordHealthTrackerFindUniqueOrThrowArgs} args - Arguments to find a RecordHealthTracker
     * @example
     * // Get one RecordHealthTracker
     * const recordHealthTracker = await prisma.recordHealthTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecordHealthTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, RecordHealthTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecordHealthTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordHealthTrackerFindFirstArgs} args - Arguments to find a RecordHealthTracker
     * @example
     * // Get one RecordHealthTracker
     * const recordHealthTracker = await prisma.recordHealthTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecordHealthTrackerFindFirstArgs>(args?: SelectSubset<T, RecordHealthTrackerFindFirstArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecordHealthTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordHealthTrackerFindFirstOrThrowArgs} args - Arguments to find a RecordHealthTracker
     * @example
     * // Get one RecordHealthTracker
     * const recordHealthTracker = await prisma.recordHealthTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecordHealthTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, RecordHealthTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RecordHealthTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordHealthTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecordHealthTrackers
     * const recordHealthTrackers = await prisma.recordHealthTracker.findMany()
     * 
     * // Get first 10 RecordHealthTrackers
     * const recordHealthTrackers = await prisma.recordHealthTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordHealthTrackerWithIdOnly = await prisma.recordHealthTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecordHealthTrackerFindManyArgs>(args?: SelectSubset<T, RecordHealthTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RecordHealthTracker.
     * @param {RecordHealthTrackerCreateArgs} args - Arguments to create a RecordHealthTracker.
     * @example
     * // Create one RecordHealthTracker
     * const RecordHealthTracker = await prisma.recordHealthTracker.create({
     *   data: {
     *     // ... data to create a RecordHealthTracker
     *   }
     * })
     * 
     */
    create<T extends RecordHealthTrackerCreateArgs>(args: SelectSubset<T, RecordHealthTrackerCreateArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RecordHealthTrackers.
     * @param {RecordHealthTrackerCreateManyArgs} args - Arguments to create many RecordHealthTrackers.
     * @example
     * // Create many RecordHealthTrackers
     * const recordHealthTracker = await prisma.recordHealthTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecordHealthTrackerCreateManyArgs>(args?: SelectSubset<T, RecordHealthTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecordHealthTrackers and returns the data saved in the database.
     * @param {RecordHealthTrackerCreateManyAndReturnArgs} args - Arguments to create many RecordHealthTrackers.
     * @example
     * // Create many RecordHealthTrackers
     * const recordHealthTracker = await prisma.recordHealthTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecordHealthTrackers and only return the `id`
     * const recordHealthTrackerWithIdOnly = await prisma.recordHealthTracker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecordHealthTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, RecordHealthTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RecordHealthTracker.
     * @param {RecordHealthTrackerDeleteArgs} args - Arguments to delete one RecordHealthTracker.
     * @example
     * // Delete one RecordHealthTracker
     * const RecordHealthTracker = await prisma.recordHealthTracker.delete({
     *   where: {
     *     // ... filter to delete one RecordHealthTracker
     *   }
     * })
     * 
     */
    delete<T extends RecordHealthTrackerDeleteArgs>(args: SelectSubset<T, RecordHealthTrackerDeleteArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RecordHealthTracker.
     * @param {RecordHealthTrackerUpdateArgs} args - Arguments to update one RecordHealthTracker.
     * @example
     * // Update one RecordHealthTracker
     * const recordHealthTracker = await prisma.recordHealthTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecordHealthTrackerUpdateArgs>(args: SelectSubset<T, RecordHealthTrackerUpdateArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RecordHealthTrackers.
     * @param {RecordHealthTrackerDeleteManyArgs} args - Arguments to filter RecordHealthTrackers to delete.
     * @example
     * // Delete a few RecordHealthTrackers
     * const { count } = await prisma.recordHealthTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecordHealthTrackerDeleteManyArgs>(args?: SelectSubset<T, RecordHealthTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecordHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordHealthTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecordHealthTrackers
     * const recordHealthTracker = await prisma.recordHealthTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecordHealthTrackerUpdateManyArgs>(args: SelectSubset<T, RecordHealthTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecordHealthTrackers and returns the data updated in the database.
     * @param {RecordHealthTrackerUpdateManyAndReturnArgs} args - Arguments to update many RecordHealthTrackers.
     * @example
     * // Update many RecordHealthTrackers
     * const recordHealthTracker = await prisma.recordHealthTracker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RecordHealthTrackers and only return the `id`
     * const recordHealthTrackerWithIdOnly = await prisma.recordHealthTracker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecordHealthTrackerUpdateManyAndReturnArgs>(args: SelectSubset<T, RecordHealthTrackerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RecordHealthTracker.
     * @param {RecordHealthTrackerUpsertArgs} args - Arguments to update or create a RecordHealthTracker.
     * @example
     * // Update or create a RecordHealthTracker
     * const recordHealthTracker = await prisma.recordHealthTracker.upsert({
     *   create: {
     *     // ... data to create a RecordHealthTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecordHealthTracker we want to update
     *   }
     * })
     */
    upsert<T extends RecordHealthTrackerUpsertArgs>(args: SelectSubset<T, RecordHealthTrackerUpsertArgs<ExtArgs>>): Prisma__RecordHealthTrackerClient<$Result.GetResult<Prisma.$RecordHealthTrackerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RecordHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordHealthTrackerCountArgs} args - Arguments to filter RecordHealthTrackers to count.
     * @example
     * // Count the number of RecordHealthTrackers
     * const count = await prisma.recordHealthTracker.count({
     *   where: {
     *     // ... the filter for the RecordHealthTrackers we want to count
     *   }
     * })
    **/
    count<T extends RecordHealthTrackerCountArgs>(
      args?: Subset<T, RecordHealthTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordHealthTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecordHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordHealthTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordHealthTrackerAggregateArgs>(args: Subset<T, RecordHealthTrackerAggregateArgs>): Prisma.PrismaPromise<GetRecordHealthTrackerAggregateType<T>>

    /**
     * Group by RecordHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordHealthTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordHealthTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordHealthTrackerGroupByArgs['orderBy'] }
        : { orderBy?: RecordHealthTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordHealthTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordHealthTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecordHealthTracker model
   */
  readonly fields: RecordHealthTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecordHealthTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecordHealthTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserHealthTrackerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserHealthTrackerDefaultArgs<ExtArgs>>): Prisma__UserHealthTrackerClient<$Result.GetResult<Prisma.$UserHealthTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecordHealthTracker model
   */ 
  interface RecordHealthTrackerFieldRefs {
    readonly id: FieldRef<"RecordHealthTracker", 'String'>
    readonly userId: FieldRef<"RecordHealthTracker", 'String'>
    readonly type: FieldRef<"RecordHealthTracker", 'String'>
    readonly description: FieldRef<"RecordHealthTracker", 'String'>
    readonly date: FieldRef<"RecordHealthTracker", 'DateTime'>
    readonly createdAt: FieldRef<"RecordHealthTracker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RecordHealthTracker findUnique
   */
  export type RecordHealthTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which RecordHealthTracker to fetch.
     */
    where: RecordHealthTrackerWhereUniqueInput
  }

  /**
   * RecordHealthTracker findUniqueOrThrow
   */
  export type RecordHealthTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which RecordHealthTracker to fetch.
     */
    where: RecordHealthTrackerWhereUniqueInput
  }

  /**
   * RecordHealthTracker findFirst
   */
  export type RecordHealthTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which RecordHealthTracker to fetch.
     */
    where?: RecordHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecordHealthTrackers to fetch.
     */
    orderBy?: RecordHealthTrackerOrderByWithRelationInput | RecordHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecordHealthTrackers.
     */
    cursor?: RecordHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecordHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecordHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecordHealthTrackers.
     */
    distinct?: RecordHealthTrackerScalarFieldEnum | RecordHealthTrackerScalarFieldEnum[]
  }

  /**
   * RecordHealthTracker findFirstOrThrow
   */
  export type RecordHealthTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which RecordHealthTracker to fetch.
     */
    where?: RecordHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecordHealthTrackers to fetch.
     */
    orderBy?: RecordHealthTrackerOrderByWithRelationInput | RecordHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecordHealthTrackers.
     */
    cursor?: RecordHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecordHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecordHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecordHealthTrackers.
     */
    distinct?: RecordHealthTrackerScalarFieldEnum | RecordHealthTrackerScalarFieldEnum[]
  }

  /**
   * RecordHealthTracker findMany
   */
  export type RecordHealthTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter, which RecordHealthTrackers to fetch.
     */
    where?: RecordHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecordHealthTrackers to fetch.
     */
    orderBy?: RecordHealthTrackerOrderByWithRelationInput | RecordHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecordHealthTrackers.
     */
    cursor?: RecordHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecordHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecordHealthTrackers.
     */
    skip?: number
    distinct?: RecordHealthTrackerScalarFieldEnum | RecordHealthTrackerScalarFieldEnum[]
  }

  /**
   * RecordHealthTracker create
   */
  export type RecordHealthTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a RecordHealthTracker.
     */
    data: XOR<RecordHealthTrackerCreateInput, RecordHealthTrackerUncheckedCreateInput>
  }

  /**
   * RecordHealthTracker createMany
   */
  export type RecordHealthTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecordHealthTrackers.
     */
    data: RecordHealthTrackerCreateManyInput | RecordHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecordHealthTracker createManyAndReturn
   */
  export type RecordHealthTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to create many RecordHealthTrackers.
     */
    data: RecordHealthTrackerCreateManyInput | RecordHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecordHealthTracker update
   */
  export type RecordHealthTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a RecordHealthTracker.
     */
    data: XOR<RecordHealthTrackerUpdateInput, RecordHealthTrackerUncheckedUpdateInput>
    /**
     * Choose, which RecordHealthTracker to update.
     */
    where: RecordHealthTrackerWhereUniqueInput
  }

  /**
   * RecordHealthTracker updateMany
   */
  export type RecordHealthTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecordHealthTrackers.
     */
    data: XOR<RecordHealthTrackerUpdateManyMutationInput, RecordHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which RecordHealthTrackers to update
     */
    where?: RecordHealthTrackerWhereInput
    /**
     * Limit how many RecordHealthTrackers to update.
     */
    limit?: number
  }

  /**
   * RecordHealthTracker updateManyAndReturn
   */
  export type RecordHealthTrackerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to update RecordHealthTrackers.
     */
    data: XOR<RecordHealthTrackerUpdateManyMutationInput, RecordHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which RecordHealthTrackers to update
     */
    where?: RecordHealthTrackerWhereInput
    /**
     * Limit how many RecordHealthTrackers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecordHealthTracker upsert
   */
  export type RecordHealthTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the RecordHealthTracker to update in case it exists.
     */
    where: RecordHealthTrackerWhereUniqueInput
    /**
     * In case the RecordHealthTracker found by the `where` argument doesn't exist, create a new RecordHealthTracker with this data.
     */
    create: XOR<RecordHealthTrackerCreateInput, RecordHealthTrackerUncheckedCreateInput>
    /**
     * In case the RecordHealthTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecordHealthTrackerUpdateInput, RecordHealthTrackerUncheckedUpdateInput>
  }

  /**
   * RecordHealthTracker delete
   */
  export type RecordHealthTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
    /**
     * Filter which RecordHealthTracker to delete.
     */
    where: RecordHealthTrackerWhereUniqueInput
  }

  /**
   * RecordHealthTracker deleteMany
   */
  export type RecordHealthTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecordHealthTrackers to delete
     */
    where?: RecordHealthTrackerWhereInput
    /**
     * Limit how many RecordHealthTrackers to delete.
     */
    limit?: number
  }

  /**
   * RecordHealthTracker without action
   */
  export type RecordHealthTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordHealthTracker
     */
    select?: RecordHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecordHealthTracker
     */
    omit?: RecordHealthTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordHealthTrackerInclude<ExtArgs> | null
  }


  /**
   * Model ClinicHealthTracker
   */

  export type AggregateClinicHealthTracker = {
    _count: ClinicHealthTrackerCountAggregateOutputType | null
    _min: ClinicHealthTrackerMinAggregateOutputType | null
    _max: ClinicHealthTrackerMaxAggregateOutputType | null
  }

  export type ClinicHealthTrackerMinAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    contact: string | null
    createdAt: Date | null
  }

  export type ClinicHealthTrackerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    contact: string | null
    createdAt: Date | null
  }

  export type ClinicHealthTrackerCountAggregateOutputType = {
    id: number
    name: number
    location: number
    availableSlots: number
    contact: number
    createdAt: number
    _all: number
  }


  export type ClinicHealthTrackerMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    contact?: true
    createdAt?: true
  }

  export type ClinicHealthTrackerMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    contact?: true
    createdAt?: true
  }

  export type ClinicHealthTrackerCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    availableSlots?: true
    contact?: true
    createdAt?: true
    _all?: true
  }

  export type ClinicHealthTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicHealthTracker to aggregate.
     */
    where?: ClinicHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicHealthTrackers to fetch.
     */
    orderBy?: ClinicHealthTrackerOrderByWithRelationInput | ClinicHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClinicHealthTrackers
    **/
    _count?: true | ClinicHealthTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicHealthTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicHealthTrackerMaxAggregateInputType
  }

  export type GetClinicHealthTrackerAggregateType<T extends ClinicHealthTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateClinicHealthTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinicHealthTracker[P]>
      : GetScalarType<T[P], AggregateClinicHealthTracker[P]>
  }




  export type ClinicHealthTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicHealthTrackerWhereInput
    orderBy?: ClinicHealthTrackerOrderByWithAggregationInput | ClinicHealthTrackerOrderByWithAggregationInput[]
    by: ClinicHealthTrackerScalarFieldEnum[] | ClinicHealthTrackerScalarFieldEnum
    having?: ClinicHealthTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicHealthTrackerCountAggregateInputType | true
    _min?: ClinicHealthTrackerMinAggregateInputType
    _max?: ClinicHealthTrackerMaxAggregateInputType
  }

  export type ClinicHealthTrackerGroupByOutputType = {
    id: string
    name: string
    location: string
    availableSlots: string[]
    contact: string
    createdAt: Date
    _count: ClinicHealthTrackerCountAggregateOutputType | null
    _min: ClinicHealthTrackerMinAggregateOutputType | null
    _max: ClinicHealthTrackerMaxAggregateOutputType | null
  }

  type GetClinicHealthTrackerGroupByPayload<T extends ClinicHealthTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicHealthTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicHealthTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicHealthTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicHealthTrackerGroupByOutputType[P]>
        }
      >
    >


  export type ClinicHealthTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["clinicHealthTracker"]>

  export type ClinicHealthTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["clinicHealthTracker"]>

  export type ClinicHealthTrackerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["clinicHealthTracker"]>

  export type ClinicHealthTrackerSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
  }

  export type ClinicHealthTrackerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "location" | "availableSlots" | "contact" | "createdAt", ExtArgs["result"]["clinicHealthTracker"]>

  export type $ClinicHealthTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClinicHealthTracker"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      location: string
      availableSlots: string[]
      contact: string
      createdAt: Date
    }, ExtArgs["result"]["clinicHealthTracker"]>
    composites: {}
  }

  type ClinicHealthTrackerGetPayload<S extends boolean | null | undefined | ClinicHealthTrackerDefaultArgs> = $Result.GetResult<Prisma.$ClinicHealthTrackerPayload, S>

  type ClinicHealthTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClinicHealthTrackerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClinicHealthTrackerCountAggregateInputType | true
    }

  export interface ClinicHealthTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClinicHealthTracker'], meta: { name: 'ClinicHealthTracker' } }
    /**
     * Find zero or one ClinicHealthTracker that matches the filter.
     * @param {ClinicHealthTrackerFindUniqueArgs} args - Arguments to find a ClinicHealthTracker
     * @example
     * // Get one ClinicHealthTracker
     * const clinicHealthTracker = await prisma.clinicHealthTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClinicHealthTrackerFindUniqueArgs>(args: SelectSubset<T, ClinicHealthTrackerFindUniqueArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClinicHealthTracker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClinicHealthTrackerFindUniqueOrThrowArgs} args - Arguments to find a ClinicHealthTracker
     * @example
     * // Get one ClinicHealthTracker
     * const clinicHealthTracker = await prisma.clinicHealthTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClinicHealthTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, ClinicHealthTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClinicHealthTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicHealthTrackerFindFirstArgs} args - Arguments to find a ClinicHealthTracker
     * @example
     * // Get one ClinicHealthTracker
     * const clinicHealthTracker = await prisma.clinicHealthTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClinicHealthTrackerFindFirstArgs>(args?: SelectSubset<T, ClinicHealthTrackerFindFirstArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClinicHealthTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicHealthTrackerFindFirstOrThrowArgs} args - Arguments to find a ClinicHealthTracker
     * @example
     * // Get one ClinicHealthTracker
     * const clinicHealthTracker = await prisma.clinicHealthTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClinicHealthTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, ClinicHealthTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClinicHealthTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicHealthTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClinicHealthTrackers
     * const clinicHealthTrackers = await prisma.clinicHealthTracker.findMany()
     * 
     * // Get first 10 ClinicHealthTrackers
     * const clinicHealthTrackers = await prisma.clinicHealthTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicHealthTrackerWithIdOnly = await prisma.clinicHealthTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClinicHealthTrackerFindManyArgs>(args?: SelectSubset<T, ClinicHealthTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClinicHealthTracker.
     * @param {ClinicHealthTrackerCreateArgs} args - Arguments to create a ClinicHealthTracker.
     * @example
     * // Create one ClinicHealthTracker
     * const ClinicHealthTracker = await prisma.clinicHealthTracker.create({
     *   data: {
     *     // ... data to create a ClinicHealthTracker
     *   }
     * })
     * 
     */
    create<T extends ClinicHealthTrackerCreateArgs>(args: SelectSubset<T, ClinicHealthTrackerCreateArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClinicHealthTrackers.
     * @param {ClinicHealthTrackerCreateManyArgs} args - Arguments to create many ClinicHealthTrackers.
     * @example
     * // Create many ClinicHealthTrackers
     * const clinicHealthTracker = await prisma.clinicHealthTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClinicHealthTrackerCreateManyArgs>(args?: SelectSubset<T, ClinicHealthTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClinicHealthTrackers and returns the data saved in the database.
     * @param {ClinicHealthTrackerCreateManyAndReturnArgs} args - Arguments to create many ClinicHealthTrackers.
     * @example
     * // Create many ClinicHealthTrackers
     * const clinicHealthTracker = await prisma.clinicHealthTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClinicHealthTrackers and only return the `id`
     * const clinicHealthTrackerWithIdOnly = await prisma.clinicHealthTracker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClinicHealthTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, ClinicHealthTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClinicHealthTracker.
     * @param {ClinicHealthTrackerDeleteArgs} args - Arguments to delete one ClinicHealthTracker.
     * @example
     * // Delete one ClinicHealthTracker
     * const ClinicHealthTracker = await prisma.clinicHealthTracker.delete({
     *   where: {
     *     // ... filter to delete one ClinicHealthTracker
     *   }
     * })
     * 
     */
    delete<T extends ClinicHealthTrackerDeleteArgs>(args: SelectSubset<T, ClinicHealthTrackerDeleteArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClinicHealthTracker.
     * @param {ClinicHealthTrackerUpdateArgs} args - Arguments to update one ClinicHealthTracker.
     * @example
     * // Update one ClinicHealthTracker
     * const clinicHealthTracker = await prisma.clinicHealthTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClinicHealthTrackerUpdateArgs>(args: SelectSubset<T, ClinicHealthTrackerUpdateArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClinicHealthTrackers.
     * @param {ClinicHealthTrackerDeleteManyArgs} args - Arguments to filter ClinicHealthTrackers to delete.
     * @example
     * // Delete a few ClinicHealthTrackers
     * const { count } = await prisma.clinicHealthTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClinicHealthTrackerDeleteManyArgs>(args?: SelectSubset<T, ClinicHealthTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClinicHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicHealthTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClinicHealthTrackers
     * const clinicHealthTracker = await prisma.clinicHealthTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClinicHealthTrackerUpdateManyArgs>(args: SelectSubset<T, ClinicHealthTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClinicHealthTrackers and returns the data updated in the database.
     * @param {ClinicHealthTrackerUpdateManyAndReturnArgs} args - Arguments to update many ClinicHealthTrackers.
     * @example
     * // Update many ClinicHealthTrackers
     * const clinicHealthTracker = await prisma.clinicHealthTracker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClinicHealthTrackers and only return the `id`
     * const clinicHealthTrackerWithIdOnly = await prisma.clinicHealthTracker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClinicHealthTrackerUpdateManyAndReturnArgs>(args: SelectSubset<T, ClinicHealthTrackerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClinicHealthTracker.
     * @param {ClinicHealthTrackerUpsertArgs} args - Arguments to update or create a ClinicHealthTracker.
     * @example
     * // Update or create a ClinicHealthTracker
     * const clinicHealthTracker = await prisma.clinicHealthTracker.upsert({
     *   create: {
     *     // ... data to create a ClinicHealthTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClinicHealthTracker we want to update
     *   }
     * })
     */
    upsert<T extends ClinicHealthTrackerUpsertArgs>(args: SelectSubset<T, ClinicHealthTrackerUpsertArgs<ExtArgs>>): Prisma__ClinicHealthTrackerClient<$Result.GetResult<Prisma.$ClinicHealthTrackerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClinicHealthTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicHealthTrackerCountArgs} args - Arguments to filter ClinicHealthTrackers to count.
     * @example
     * // Count the number of ClinicHealthTrackers
     * const count = await prisma.clinicHealthTracker.count({
     *   where: {
     *     // ... the filter for the ClinicHealthTrackers we want to count
     *   }
     * })
    **/
    count<T extends ClinicHealthTrackerCountArgs>(
      args?: Subset<T, ClinicHealthTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicHealthTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClinicHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicHealthTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicHealthTrackerAggregateArgs>(args: Subset<T, ClinicHealthTrackerAggregateArgs>): Prisma.PrismaPromise<GetClinicHealthTrackerAggregateType<T>>

    /**
     * Group by ClinicHealthTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicHealthTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicHealthTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicHealthTrackerGroupByArgs['orderBy'] }
        : { orderBy?: ClinicHealthTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicHealthTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicHealthTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClinicHealthTracker model
   */
  readonly fields: ClinicHealthTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClinicHealthTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicHealthTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClinicHealthTracker model
   */ 
  interface ClinicHealthTrackerFieldRefs {
    readonly id: FieldRef<"ClinicHealthTracker", 'String'>
    readonly name: FieldRef<"ClinicHealthTracker", 'String'>
    readonly location: FieldRef<"ClinicHealthTracker", 'String'>
    readonly availableSlots: FieldRef<"ClinicHealthTracker", 'String[]'>
    readonly contact: FieldRef<"ClinicHealthTracker", 'String'>
    readonly createdAt: FieldRef<"ClinicHealthTracker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClinicHealthTracker findUnique
   */
  export type ClinicHealthTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * Filter, which ClinicHealthTracker to fetch.
     */
    where: ClinicHealthTrackerWhereUniqueInput
  }

  /**
   * ClinicHealthTracker findUniqueOrThrow
   */
  export type ClinicHealthTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * Filter, which ClinicHealthTracker to fetch.
     */
    where: ClinicHealthTrackerWhereUniqueInput
  }

  /**
   * ClinicHealthTracker findFirst
   */
  export type ClinicHealthTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * Filter, which ClinicHealthTracker to fetch.
     */
    where?: ClinicHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicHealthTrackers to fetch.
     */
    orderBy?: ClinicHealthTrackerOrderByWithRelationInput | ClinicHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicHealthTrackers.
     */
    cursor?: ClinicHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicHealthTrackers.
     */
    distinct?: ClinicHealthTrackerScalarFieldEnum | ClinicHealthTrackerScalarFieldEnum[]
  }

  /**
   * ClinicHealthTracker findFirstOrThrow
   */
  export type ClinicHealthTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * Filter, which ClinicHealthTracker to fetch.
     */
    where?: ClinicHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicHealthTrackers to fetch.
     */
    orderBy?: ClinicHealthTrackerOrderByWithRelationInput | ClinicHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicHealthTrackers.
     */
    cursor?: ClinicHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicHealthTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicHealthTrackers.
     */
    distinct?: ClinicHealthTrackerScalarFieldEnum | ClinicHealthTrackerScalarFieldEnum[]
  }

  /**
   * ClinicHealthTracker findMany
   */
  export type ClinicHealthTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * Filter, which ClinicHealthTrackers to fetch.
     */
    where?: ClinicHealthTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicHealthTrackers to fetch.
     */
    orderBy?: ClinicHealthTrackerOrderByWithRelationInput | ClinicHealthTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClinicHealthTrackers.
     */
    cursor?: ClinicHealthTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicHealthTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicHealthTrackers.
     */
    skip?: number
    distinct?: ClinicHealthTrackerScalarFieldEnum | ClinicHealthTrackerScalarFieldEnum[]
  }

  /**
   * ClinicHealthTracker create
   */
  export type ClinicHealthTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * The data needed to create a ClinicHealthTracker.
     */
    data: XOR<ClinicHealthTrackerCreateInput, ClinicHealthTrackerUncheckedCreateInput>
  }

  /**
   * ClinicHealthTracker createMany
   */
  export type ClinicHealthTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClinicHealthTrackers.
     */
    data: ClinicHealthTrackerCreateManyInput | ClinicHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClinicHealthTracker createManyAndReturn
   */
  export type ClinicHealthTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to create many ClinicHealthTrackers.
     */
    data: ClinicHealthTrackerCreateManyInput | ClinicHealthTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClinicHealthTracker update
   */
  export type ClinicHealthTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * The data needed to update a ClinicHealthTracker.
     */
    data: XOR<ClinicHealthTrackerUpdateInput, ClinicHealthTrackerUncheckedUpdateInput>
    /**
     * Choose, which ClinicHealthTracker to update.
     */
    where: ClinicHealthTrackerWhereUniqueInput
  }

  /**
   * ClinicHealthTracker updateMany
   */
  export type ClinicHealthTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClinicHealthTrackers.
     */
    data: XOR<ClinicHealthTrackerUpdateManyMutationInput, ClinicHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which ClinicHealthTrackers to update
     */
    where?: ClinicHealthTrackerWhereInput
    /**
     * Limit how many ClinicHealthTrackers to update.
     */
    limit?: number
  }

  /**
   * ClinicHealthTracker updateManyAndReturn
   */
  export type ClinicHealthTrackerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * The data used to update ClinicHealthTrackers.
     */
    data: XOR<ClinicHealthTrackerUpdateManyMutationInput, ClinicHealthTrackerUncheckedUpdateManyInput>
    /**
     * Filter which ClinicHealthTrackers to update
     */
    where?: ClinicHealthTrackerWhereInput
    /**
     * Limit how many ClinicHealthTrackers to update.
     */
    limit?: number
  }

  /**
   * ClinicHealthTracker upsert
   */
  export type ClinicHealthTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * The filter to search for the ClinicHealthTracker to update in case it exists.
     */
    where: ClinicHealthTrackerWhereUniqueInput
    /**
     * In case the ClinicHealthTracker found by the `where` argument doesn't exist, create a new ClinicHealthTracker with this data.
     */
    create: XOR<ClinicHealthTrackerCreateInput, ClinicHealthTrackerUncheckedCreateInput>
    /**
     * In case the ClinicHealthTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicHealthTrackerUpdateInput, ClinicHealthTrackerUncheckedUpdateInput>
  }

  /**
   * ClinicHealthTracker delete
   */
  export type ClinicHealthTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
    /**
     * Filter which ClinicHealthTracker to delete.
     */
    where: ClinicHealthTrackerWhereUniqueInput
  }

  /**
   * ClinicHealthTracker deleteMany
   */
  export type ClinicHealthTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicHealthTrackers to delete
     */
    where?: ClinicHealthTrackerWhereInput
    /**
     * Limit how many ClinicHealthTrackers to delete.
     */
    limit?: number
  }

  /**
   * ClinicHealthTracker without action
   */
  export type ClinicHealthTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicHealthTracker
     */
    select?: ClinicHealthTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicHealthTracker
     */
    omit?: ClinicHealthTrackerOmit<ExtArgs> | null
  }


  /**
   * Model UserMusicLover
   */

  export type AggregateUserMusicLover = {
    _count: UserMusicLoverCountAggregateOutputType | null
    _min: UserMusicLoverMinAggregateOutputType | null
    _max: UserMusicLoverMaxAggregateOutputType | null
  }

  export type UserMusicLoverMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserMusicLoverMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserMusicLoverCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserMusicLoverMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserMusicLoverMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserMusicLoverCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserMusicLoverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMusicLover to aggregate.
     */
    where?: UserMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicLovers to fetch.
     */
    orderBy?: UserMusicLoverOrderByWithRelationInput | UserMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMusicLovers
    **/
    _count?: true | UserMusicLoverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMusicLoverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMusicLoverMaxAggregateInputType
  }

  export type GetUserMusicLoverAggregateType<T extends UserMusicLoverAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMusicLover]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMusicLover[P]>
      : GetScalarType<T[P], AggregateUserMusicLover[P]>
  }




  export type UserMusicLoverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMusicLoverWhereInput
    orderBy?: UserMusicLoverOrderByWithAggregationInput | UserMusicLoverOrderByWithAggregationInput[]
    by: UserMusicLoverScalarFieldEnum[] | UserMusicLoverScalarFieldEnum
    having?: UserMusicLoverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMusicLoverCountAggregateInputType | true
    _min?: UserMusicLoverMinAggregateInputType
    _max?: UserMusicLoverMaxAggregateInputType
  }

  export type UserMusicLoverGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    createdAt: Date
    _count: UserMusicLoverCountAggregateOutputType | null
    _min: UserMusicLoverMinAggregateOutputType | null
    _max: UserMusicLoverMaxAggregateOutputType | null
  }

  type GetUserMusicLoverGroupByPayload<T extends UserMusicLoverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMusicLoverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMusicLoverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMusicLoverGroupByOutputType[P]>
            : GetScalarType<T[P], UserMusicLoverGroupByOutputType[P]>
        }
      >
    >


  export type UserMusicLoverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    concerts?: boolean | UserMusicLover$concertsArgs<ExtArgs>
    reviews?: boolean | UserMusicLover$reviewsArgs<ExtArgs>
    _count?: boolean | UserMusicLoverCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMusicLover"]>

  export type UserMusicLoverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userMusicLover"]>

  export type UserMusicLoverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userMusicLover"]>

  export type UserMusicLoverSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UserMusicLoverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "createdAt", ExtArgs["result"]["userMusicLover"]>
  export type UserMusicLoverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    concerts?: boolean | UserMusicLover$concertsArgs<ExtArgs>
    reviews?: boolean | UserMusicLover$reviewsArgs<ExtArgs>
    _count?: boolean | UserMusicLoverCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserMusicLoverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserMusicLoverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserMusicLoverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMusicLover"
    objects: {
      concerts: Prisma.$ConcertMusicLoverPayload<ExtArgs>[]
      reviews: Prisma.$ReviewMusicLoverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["userMusicLover"]>
    composites: {}
  }

  type UserMusicLoverGetPayload<S extends boolean | null | undefined | UserMusicLoverDefaultArgs> = $Result.GetResult<Prisma.$UserMusicLoverPayload, S>

  type UserMusicLoverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserMusicLoverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserMusicLoverCountAggregateInputType | true
    }

  export interface UserMusicLoverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMusicLover'], meta: { name: 'UserMusicLover' } }
    /**
     * Find zero or one UserMusicLover that matches the filter.
     * @param {UserMusicLoverFindUniqueArgs} args - Arguments to find a UserMusicLover
     * @example
     * // Get one UserMusicLover
     * const userMusicLover = await prisma.userMusicLover.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMusicLoverFindUniqueArgs>(args: SelectSubset<T, UserMusicLoverFindUniqueArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserMusicLover that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserMusicLoverFindUniqueOrThrowArgs} args - Arguments to find a UserMusicLover
     * @example
     * // Get one UserMusicLover
     * const userMusicLover = await prisma.userMusicLover.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMusicLoverFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMusicLoverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMusicLover that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicLoverFindFirstArgs} args - Arguments to find a UserMusicLover
     * @example
     * // Get one UserMusicLover
     * const userMusicLover = await prisma.userMusicLover.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMusicLoverFindFirstArgs>(args?: SelectSubset<T, UserMusicLoverFindFirstArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMusicLover that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicLoverFindFirstOrThrowArgs} args - Arguments to find a UserMusicLover
     * @example
     * // Get one UserMusicLover
     * const userMusicLover = await prisma.userMusicLover.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMusicLoverFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMusicLoverFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserMusicLovers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicLoverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMusicLovers
     * const userMusicLovers = await prisma.userMusicLover.findMany()
     * 
     * // Get first 10 UserMusicLovers
     * const userMusicLovers = await prisma.userMusicLover.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMusicLoverWithIdOnly = await prisma.userMusicLover.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMusicLoverFindManyArgs>(args?: SelectSubset<T, UserMusicLoverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserMusicLover.
     * @param {UserMusicLoverCreateArgs} args - Arguments to create a UserMusicLover.
     * @example
     * // Create one UserMusicLover
     * const UserMusicLover = await prisma.userMusicLover.create({
     *   data: {
     *     // ... data to create a UserMusicLover
     *   }
     * })
     * 
     */
    create<T extends UserMusicLoverCreateArgs>(args: SelectSubset<T, UserMusicLoverCreateArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserMusicLovers.
     * @param {UserMusicLoverCreateManyArgs} args - Arguments to create many UserMusicLovers.
     * @example
     * // Create many UserMusicLovers
     * const userMusicLover = await prisma.userMusicLover.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMusicLoverCreateManyArgs>(args?: SelectSubset<T, UserMusicLoverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMusicLovers and returns the data saved in the database.
     * @param {UserMusicLoverCreateManyAndReturnArgs} args - Arguments to create many UserMusicLovers.
     * @example
     * // Create many UserMusicLovers
     * const userMusicLover = await prisma.userMusicLover.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMusicLovers and only return the `id`
     * const userMusicLoverWithIdOnly = await prisma.userMusicLover.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserMusicLoverCreateManyAndReturnArgs>(args?: SelectSubset<T, UserMusicLoverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserMusicLover.
     * @param {UserMusicLoverDeleteArgs} args - Arguments to delete one UserMusicLover.
     * @example
     * // Delete one UserMusicLover
     * const UserMusicLover = await prisma.userMusicLover.delete({
     *   where: {
     *     // ... filter to delete one UserMusicLover
     *   }
     * })
     * 
     */
    delete<T extends UserMusicLoverDeleteArgs>(args: SelectSubset<T, UserMusicLoverDeleteArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserMusicLover.
     * @param {UserMusicLoverUpdateArgs} args - Arguments to update one UserMusicLover.
     * @example
     * // Update one UserMusicLover
     * const userMusicLover = await prisma.userMusicLover.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMusicLoverUpdateArgs>(args: SelectSubset<T, UserMusicLoverUpdateArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserMusicLovers.
     * @param {UserMusicLoverDeleteManyArgs} args - Arguments to filter UserMusicLovers to delete.
     * @example
     * // Delete a few UserMusicLovers
     * const { count } = await prisma.userMusicLover.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMusicLoverDeleteManyArgs>(args?: SelectSubset<T, UserMusicLoverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMusicLovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicLoverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMusicLovers
     * const userMusicLover = await prisma.userMusicLover.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMusicLoverUpdateManyArgs>(args: SelectSubset<T, UserMusicLoverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMusicLovers and returns the data updated in the database.
     * @param {UserMusicLoverUpdateManyAndReturnArgs} args - Arguments to update many UserMusicLovers.
     * @example
     * // Update many UserMusicLovers
     * const userMusicLover = await prisma.userMusicLover.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserMusicLovers and only return the `id`
     * const userMusicLoverWithIdOnly = await prisma.userMusicLover.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserMusicLoverUpdateManyAndReturnArgs>(args: SelectSubset<T, UserMusicLoverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserMusicLover.
     * @param {UserMusicLoverUpsertArgs} args - Arguments to update or create a UserMusicLover.
     * @example
     * // Update or create a UserMusicLover
     * const userMusicLover = await prisma.userMusicLover.upsert({
     *   create: {
     *     // ... data to create a UserMusicLover
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMusicLover we want to update
     *   }
     * })
     */
    upsert<T extends UserMusicLoverUpsertArgs>(args: SelectSubset<T, UserMusicLoverUpsertArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserMusicLovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicLoverCountArgs} args - Arguments to filter UserMusicLovers to count.
     * @example
     * // Count the number of UserMusicLovers
     * const count = await prisma.userMusicLover.count({
     *   where: {
     *     // ... the filter for the UserMusicLovers we want to count
     *   }
     * })
    **/
    count<T extends UserMusicLoverCountArgs>(
      args?: Subset<T, UserMusicLoverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMusicLoverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMusicLover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicLoverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMusicLoverAggregateArgs>(args: Subset<T, UserMusicLoverAggregateArgs>): Prisma.PrismaPromise<GetUserMusicLoverAggregateType<T>>

    /**
     * Group by UserMusicLover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicLoverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMusicLoverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMusicLoverGroupByArgs['orderBy'] }
        : { orderBy?: UserMusicLoverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMusicLoverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMusicLoverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMusicLover model
   */
  readonly fields: UserMusicLoverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMusicLover.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMusicLoverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    concerts<T extends UserMusicLover$concertsArgs<ExtArgs> = {}>(args?: Subset<T, UserMusicLover$concertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends UserMusicLover$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, UserMusicLover$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMusicLover model
   */ 
  interface UserMusicLoverFieldRefs {
    readonly id: FieldRef<"UserMusicLover", 'String'>
    readonly email: FieldRef<"UserMusicLover", 'String'>
    readonly name: FieldRef<"UserMusicLover", 'String'>
    readonly password: FieldRef<"UserMusicLover", 'String'>
    readonly createdAt: FieldRef<"UserMusicLover", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMusicLover findUnique
   */
  export type UserMusicLoverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicLover to fetch.
     */
    where: UserMusicLoverWhereUniqueInput
  }

  /**
   * UserMusicLover findUniqueOrThrow
   */
  export type UserMusicLoverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicLover to fetch.
     */
    where: UserMusicLoverWhereUniqueInput
  }

  /**
   * UserMusicLover findFirst
   */
  export type UserMusicLoverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicLover to fetch.
     */
    where?: UserMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicLovers to fetch.
     */
    orderBy?: UserMusicLoverOrderByWithRelationInput | UserMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMusicLovers.
     */
    cursor?: UserMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMusicLovers.
     */
    distinct?: UserMusicLoverScalarFieldEnum | UserMusicLoverScalarFieldEnum[]
  }

  /**
   * UserMusicLover findFirstOrThrow
   */
  export type UserMusicLoverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicLover to fetch.
     */
    where?: UserMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicLovers to fetch.
     */
    orderBy?: UserMusicLoverOrderByWithRelationInput | UserMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMusicLovers.
     */
    cursor?: UserMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMusicLovers.
     */
    distinct?: UserMusicLoverScalarFieldEnum | UserMusicLoverScalarFieldEnum[]
  }

  /**
   * UserMusicLover findMany
   */
  export type UserMusicLoverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicLovers to fetch.
     */
    where?: UserMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicLovers to fetch.
     */
    orderBy?: UserMusicLoverOrderByWithRelationInput | UserMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMusicLovers.
     */
    cursor?: UserMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicLovers.
     */
    skip?: number
    distinct?: UserMusicLoverScalarFieldEnum | UserMusicLoverScalarFieldEnum[]
  }

  /**
   * UserMusicLover create
   */
  export type UserMusicLoverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMusicLover.
     */
    data: XOR<UserMusicLoverCreateInput, UserMusicLoverUncheckedCreateInput>
  }

  /**
   * UserMusicLover createMany
   */
  export type UserMusicLoverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMusicLovers.
     */
    data: UserMusicLoverCreateManyInput | UserMusicLoverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMusicLover createManyAndReturn
   */
  export type UserMusicLoverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * The data used to create many UserMusicLovers.
     */
    data: UserMusicLoverCreateManyInput | UserMusicLoverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMusicLover update
   */
  export type UserMusicLoverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMusicLover.
     */
    data: XOR<UserMusicLoverUpdateInput, UserMusicLoverUncheckedUpdateInput>
    /**
     * Choose, which UserMusicLover to update.
     */
    where: UserMusicLoverWhereUniqueInput
  }

  /**
   * UserMusicLover updateMany
   */
  export type UserMusicLoverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMusicLovers.
     */
    data: XOR<UserMusicLoverUpdateManyMutationInput, UserMusicLoverUncheckedUpdateManyInput>
    /**
     * Filter which UserMusicLovers to update
     */
    where?: UserMusicLoverWhereInput
    /**
     * Limit how many UserMusicLovers to update.
     */
    limit?: number
  }

  /**
   * UserMusicLover updateManyAndReturn
   */
  export type UserMusicLoverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * The data used to update UserMusicLovers.
     */
    data: XOR<UserMusicLoverUpdateManyMutationInput, UserMusicLoverUncheckedUpdateManyInput>
    /**
     * Filter which UserMusicLovers to update
     */
    where?: UserMusicLoverWhereInput
    /**
     * Limit how many UserMusicLovers to update.
     */
    limit?: number
  }

  /**
   * UserMusicLover upsert
   */
  export type UserMusicLoverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMusicLover to update in case it exists.
     */
    where: UserMusicLoverWhereUniqueInput
    /**
     * In case the UserMusicLover found by the `where` argument doesn't exist, create a new UserMusicLover with this data.
     */
    create: XOR<UserMusicLoverCreateInput, UserMusicLoverUncheckedCreateInput>
    /**
     * In case the UserMusicLover was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMusicLoverUpdateInput, UserMusicLoverUncheckedUpdateInput>
  }

  /**
   * UserMusicLover delete
   */
  export type UserMusicLoverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
    /**
     * Filter which UserMusicLover to delete.
     */
    where: UserMusicLoverWhereUniqueInput
  }

  /**
   * UserMusicLover deleteMany
   */
  export type UserMusicLoverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMusicLovers to delete
     */
    where?: UserMusicLoverWhereInput
    /**
     * Limit how many UserMusicLovers to delete.
     */
    limit?: number
  }

  /**
   * UserMusicLover.concerts
   */
  export type UserMusicLover$concertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    where?: ConcertMusicLoverWhereInput
    orderBy?: ConcertMusicLoverOrderByWithRelationInput | ConcertMusicLoverOrderByWithRelationInput[]
    cursor?: ConcertMusicLoverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConcertMusicLoverScalarFieldEnum | ConcertMusicLoverScalarFieldEnum[]
  }

  /**
   * UserMusicLover.reviews
   */
  export type UserMusicLover$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    where?: ReviewMusicLoverWhereInput
    orderBy?: ReviewMusicLoverOrderByWithRelationInput | ReviewMusicLoverOrderByWithRelationInput[]
    cursor?: ReviewMusicLoverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewMusicLoverScalarFieldEnum | ReviewMusicLoverScalarFieldEnum[]
  }

  /**
   * UserMusicLover without action
   */
  export type UserMusicLoverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicLover
     */
    select?: UserMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMusicLover
     */
    omit?: UserMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicLoverInclude<ExtArgs> | null
  }


  /**
   * Model ConcertMusicLover
   */

  export type AggregateConcertMusicLover = {
    _count: ConcertMusicLoverCountAggregateOutputType | null
    _min: ConcertMusicLoverMinAggregateOutputType | null
    _max: ConcertMusicLoverMaxAggregateOutputType | null
  }

  export type ConcertMusicLoverMinAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    venue: string | null
    genre: string | null
    submittedBy: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type ConcertMusicLoverMaxAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    venue: string | null
    genre: string | null
    submittedBy: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type ConcertMusicLoverCountAggregateOutputType = {
    id: number
    title: number
    date: number
    venue: number
    genre: number
    submittedBy: number
    validated: number
    createdAt: number
    _all: number
  }


  export type ConcertMusicLoverMinAggregateInputType = {
    id?: true
    title?: true
    date?: true
    venue?: true
    genre?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
  }

  export type ConcertMusicLoverMaxAggregateInputType = {
    id?: true
    title?: true
    date?: true
    venue?: true
    genre?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
  }

  export type ConcertMusicLoverCountAggregateInputType = {
    id?: true
    title?: true
    date?: true
    venue?: true
    genre?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type ConcertMusicLoverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConcertMusicLover to aggregate.
     */
    where?: ConcertMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConcertMusicLovers to fetch.
     */
    orderBy?: ConcertMusicLoverOrderByWithRelationInput | ConcertMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConcertMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConcertMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConcertMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConcertMusicLovers
    **/
    _count?: true | ConcertMusicLoverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConcertMusicLoverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConcertMusicLoverMaxAggregateInputType
  }

  export type GetConcertMusicLoverAggregateType<T extends ConcertMusicLoverAggregateArgs> = {
        [P in keyof T & keyof AggregateConcertMusicLover]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConcertMusicLover[P]>
      : GetScalarType<T[P], AggregateConcertMusicLover[P]>
  }




  export type ConcertMusicLoverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConcertMusicLoverWhereInput
    orderBy?: ConcertMusicLoverOrderByWithAggregationInput | ConcertMusicLoverOrderByWithAggregationInput[]
    by: ConcertMusicLoverScalarFieldEnum[] | ConcertMusicLoverScalarFieldEnum
    having?: ConcertMusicLoverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConcertMusicLoverCountAggregateInputType | true
    _min?: ConcertMusicLoverMinAggregateInputType
    _max?: ConcertMusicLoverMaxAggregateInputType
  }

  export type ConcertMusicLoverGroupByOutputType = {
    id: string
    title: string
    date: Date
    venue: string
    genre: string
    submittedBy: string
    validated: boolean
    createdAt: Date
    _count: ConcertMusicLoverCountAggregateOutputType | null
    _min: ConcertMusicLoverMinAggregateOutputType | null
    _max: ConcertMusicLoverMaxAggregateOutputType | null
  }

  type GetConcertMusicLoverGroupByPayload<T extends ConcertMusicLoverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConcertMusicLoverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConcertMusicLoverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConcertMusicLoverGroupByOutputType[P]>
            : GetScalarType<T[P], ConcertMusicLoverGroupByOutputType[P]>
        }
      >
    >


  export type ConcertMusicLoverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    venue?: boolean
    genre?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    reviews?: boolean | ConcertMusicLover$reviewsArgs<ExtArgs>
    _count?: boolean | ConcertMusicLoverCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["concertMusicLover"]>

  export type ConcertMusicLoverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    venue?: boolean
    genre?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["concertMusicLover"]>

  export type ConcertMusicLoverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    venue?: boolean
    genre?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["concertMusicLover"]>

  export type ConcertMusicLoverSelectScalar = {
    id?: boolean
    title?: boolean
    date?: boolean
    venue?: boolean
    genre?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type ConcertMusicLoverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "date" | "venue" | "genre" | "submittedBy" | "validated" | "createdAt", ExtArgs["result"]["concertMusicLover"]>
  export type ConcertMusicLoverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    reviews?: boolean | ConcertMusicLover$reviewsArgs<ExtArgs>
    _count?: boolean | ConcertMusicLoverCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConcertMusicLoverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
  }
  export type ConcertMusicLoverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
  }

  export type $ConcertMusicLoverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConcertMusicLover"
    objects: {
      user: Prisma.$UserMusicLoverPayload<ExtArgs>
      reviews: Prisma.$ReviewMusicLoverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      date: Date
      venue: string
      genre: string
      submittedBy: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["concertMusicLover"]>
    composites: {}
  }

  type ConcertMusicLoverGetPayload<S extends boolean | null | undefined | ConcertMusicLoverDefaultArgs> = $Result.GetResult<Prisma.$ConcertMusicLoverPayload, S>

  type ConcertMusicLoverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConcertMusicLoverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConcertMusicLoverCountAggregateInputType | true
    }

  export interface ConcertMusicLoverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConcertMusicLover'], meta: { name: 'ConcertMusicLover' } }
    /**
     * Find zero or one ConcertMusicLover that matches the filter.
     * @param {ConcertMusicLoverFindUniqueArgs} args - Arguments to find a ConcertMusicLover
     * @example
     * // Get one ConcertMusicLover
     * const concertMusicLover = await prisma.concertMusicLover.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConcertMusicLoverFindUniqueArgs>(args: SelectSubset<T, ConcertMusicLoverFindUniqueArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConcertMusicLover that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConcertMusicLoverFindUniqueOrThrowArgs} args - Arguments to find a ConcertMusicLover
     * @example
     * // Get one ConcertMusicLover
     * const concertMusicLover = await prisma.concertMusicLover.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConcertMusicLoverFindUniqueOrThrowArgs>(args: SelectSubset<T, ConcertMusicLoverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConcertMusicLover that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcertMusicLoverFindFirstArgs} args - Arguments to find a ConcertMusicLover
     * @example
     * // Get one ConcertMusicLover
     * const concertMusicLover = await prisma.concertMusicLover.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConcertMusicLoverFindFirstArgs>(args?: SelectSubset<T, ConcertMusicLoverFindFirstArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConcertMusicLover that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcertMusicLoverFindFirstOrThrowArgs} args - Arguments to find a ConcertMusicLover
     * @example
     * // Get one ConcertMusicLover
     * const concertMusicLover = await prisma.concertMusicLover.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConcertMusicLoverFindFirstOrThrowArgs>(args?: SelectSubset<T, ConcertMusicLoverFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConcertMusicLovers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcertMusicLoverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConcertMusicLovers
     * const concertMusicLovers = await prisma.concertMusicLover.findMany()
     * 
     * // Get first 10 ConcertMusicLovers
     * const concertMusicLovers = await prisma.concertMusicLover.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const concertMusicLoverWithIdOnly = await prisma.concertMusicLover.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConcertMusicLoverFindManyArgs>(args?: SelectSubset<T, ConcertMusicLoverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConcertMusicLover.
     * @param {ConcertMusicLoverCreateArgs} args - Arguments to create a ConcertMusicLover.
     * @example
     * // Create one ConcertMusicLover
     * const ConcertMusicLover = await prisma.concertMusicLover.create({
     *   data: {
     *     // ... data to create a ConcertMusicLover
     *   }
     * })
     * 
     */
    create<T extends ConcertMusicLoverCreateArgs>(args: SelectSubset<T, ConcertMusicLoverCreateArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConcertMusicLovers.
     * @param {ConcertMusicLoverCreateManyArgs} args - Arguments to create many ConcertMusicLovers.
     * @example
     * // Create many ConcertMusicLovers
     * const concertMusicLover = await prisma.concertMusicLover.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConcertMusicLoverCreateManyArgs>(args?: SelectSubset<T, ConcertMusicLoverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConcertMusicLovers and returns the data saved in the database.
     * @param {ConcertMusicLoverCreateManyAndReturnArgs} args - Arguments to create many ConcertMusicLovers.
     * @example
     * // Create many ConcertMusicLovers
     * const concertMusicLover = await prisma.concertMusicLover.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConcertMusicLovers and only return the `id`
     * const concertMusicLoverWithIdOnly = await prisma.concertMusicLover.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConcertMusicLoverCreateManyAndReturnArgs>(args?: SelectSubset<T, ConcertMusicLoverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConcertMusicLover.
     * @param {ConcertMusicLoverDeleteArgs} args - Arguments to delete one ConcertMusicLover.
     * @example
     * // Delete one ConcertMusicLover
     * const ConcertMusicLover = await prisma.concertMusicLover.delete({
     *   where: {
     *     // ... filter to delete one ConcertMusicLover
     *   }
     * })
     * 
     */
    delete<T extends ConcertMusicLoverDeleteArgs>(args: SelectSubset<T, ConcertMusicLoverDeleteArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConcertMusicLover.
     * @param {ConcertMusicLoverUpdateArgs} args - Arguments to update one ConcertMusicLover.
     * @example
     * // Update one ConcertMusicLover
     * const concertMusicLover = await prisma.concertMusicLover.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConcertMusicLoverUpdateArgs>(args: SelectSubset<T, ConcertMusicLoverUpdateArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConcertMusicLovers.
     * @param {ConcertMusicLoverDeleteManyArgs} args - Arguments to filter ConcertMusicLovers to delete.
     * @example
     * // Delete a few ConcertMusicLovers
     * const { count } = await prisma.concertMusicLover.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConcertMusicLoverDeleteManyArgs>(args?: SelectSubset<T, ConcertMusicLoverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConcertMusicLovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcertMusicLoverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConcertMusicLovers
     * const concertMusicLover = await prisma.concertMusicLover.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConcertMusicLoverUpdateManyArgs>(args: SelectSubset<T, ConcertMusicLoverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConcertMusicLovers and returns the data updated in the database.
     * @param {ConcertMusicLoverUpdateManyAndReturnArgs} args - Arguments to update many ConcertMusicLovers.
     * @example
     * // Update many ConcertMusicLovers
     * const concertMusicLover = await prisma.concertMusicLover.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConcertMusicLovers and only return the `id`
     * const concertMusicLoverWithIdOnly = await prisma.concertMusicLover.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConcertMusicLoverUpdateManyAndReturnArgs>(args: SelectSubset<T, ConcertMusicLoverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConcertMusicLover.
     * @param {ConcertMusicLoverUpsertArgs} args - Arguments to update or create a ConcertMusicLover.
     * @example
     * // Update or create a ConcertMusicLover
     * const concertMusicLover = await prisma.concertMusicLover.upsert({
     *   create: {
     *     // ... data to create a ConcertMusicLover
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConcertMusicLover we want to update
     *   }
     * })
     */
    upsert<T extends ConcertMusicLoverUpsertArgs>(args: SelectSubset<T, ConcertMusicLoverUpsertArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConcertMusicLovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcertMusicLoverCountArgs} args - Arguments to filter ConcertMusicLovers to count.
     * @example
     * // Count the number of ConcertMusicLovers
     * const count = await prisma.concertMusicLover.count({
     *   where: {
     *     // ... the filter for the ConcertMusicLovers we want to count
     *   }
     * })
    **/
    count<T extends ConcertMusicLoverCountArgs>(
      args?: Subset<T, ConcertMusicLoverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConcertMusicLoverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConcertMusicLover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcertMusicLoverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConcertMusicLoverAggregateArgs>(args: Subset<T, ConcertMusicLoverAggregateArgs>): Prisma.PrismaPromise<GetConcertMusicLoverAggregateType<T>>

    /**
     * Group by ConcertMusicLover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcertMusicLoverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConcertMusicLoverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConcertMusicLoverGroupByArgs['orderBy'] }
        : { orderBy?: ConcertMusicLoverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConcertMusicLoverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConcertMusicLoverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConcertMusicLover model
   */
  readonly fields: ConcertMusicLoverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConcertMusicLover.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConcertMusicLoverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserMusicLoverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserMusicLoverDefaultArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviews<T extends ConcertMusicLover$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, ConcertMusicLover$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConcertMusicLover model
   */ 
  interface ConcertMusicLoverFieldRefs {
    readonly id: FieldRef<"ConcertMusicLover", 'String'>
    readonly title: FieldRef<"ConcertMusicLover", 'String'>
    readonly date: FieldRef<"ConcertMusicLover", 'DateTime'>
    readonly venue: FieldRef<"ConcertMusicLover", 'String'>
    readonly genre: FieldRef<"ConcertMusicLover", 'String'>
    readonly submittedBy: FieldRef<"ConcertMusicLover", 'String'>
    readonly validated: FieldRef<"ConcertMusicLover", 'Boolean'>
    readonly createdAt: FieldRef<"ConcertMusicLover", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConcertMusicLover findUnique
   */
  export type ConcertMusicLoverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ConcertMusicLover to fetch.
     */
    where: ConcertMusicLoverWhereUniqueInput
  }

  /**
   * ConcertMusicLover findUniqueOrThrow
   */
  export type ConcertMusicLoverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ConcertMusicLover to fetch.
     */
    where: ConcertMusicLoverWhereUniqueInput
  }

  /**
   * ConcertMusicLover findFirst
   */
  export type ConcertMusicLoverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ConcertMusicLover to fetch.
     */
    where?: ConcertMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConcertMusicLovers to fetch.
     */
    orderBy?: ConcertMusicLoverOrderByWithRelationInput | ConcertMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConcertMusicLovers.
     */
    cursor?: ConcertMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConcertMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConcertMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConcertMusicLovers.
     */
    distinct?: ConcertMusicLoverScalarFieldEnum | ConcertMusicLoverScalarFieldEnum[]
  }

  /**
   * ConcertMusicLover findFirstOrThrow
   */
  export type ConcertMusicLoverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ConcertMusicLover to fetch.
     */
    where?: ConcertMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConcertMusicLovers to fetch.
     */
    orderBy?: ConcertMusicLoverOrderByWithRelationInput | ConcertMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConcertMusicLovers.
     */
    cursor?: ConcertMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConcertMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConcertMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConcertMusicLovers.
     */
    distinct?: ConcertMusicLoverScalarFieldEnum | ConcertMusicLoverScalarFieldEnum[]
  }

  /**
   * ConcertMusicLover findMany
   */
  export type ConcertMusicLoverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ConcertMusicLovers to fetch.
     */
    where?: ConcertMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConcertMusicLovers to fetch.
     */
    orderBy?: ConcertMusicLoverOrderByWithRelationInput | ConcertMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConcertMusicLovers.
     */
    cursor?: ConcertMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConcertMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConcertMusicLovers.
     */
    skip?: number
    distinct?: ConcertMusicLoverScalarFieldEnum | ConcertMusicLoverScalarFieldEnum[]
  }

  /**
   * ConcertMusicLover create
   */
  export type ConcertMusicLoverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * The data needed to create a ConcertMusicLover.
     */
    data: XOR<ConcertMusicLoverCreateInput, ConcertMusicLoverUncheckedCreateInput>
  }

  /**
   * ConcertMusicLover createMany
   */
  export type ConcertMusicLoverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConcertMusicLovers.
     */
    data: ConcertMusicLoverCreateManyInput | ConcertMusicLoverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConcertMusicLover createManyAndReturn
   */
  export type ConcertMusicLoverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * The data used to create many ConcertMusicLovers.
     */
    data: ConcertMusicLoverCreateManyInput | ConcertMusicLoverCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConcertMusicLover update
   */
  export type ConcertMusicLoverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * The data needed to update a ConcertMusicLover.
     */
    data: XOR<ConcertMusicLoverUpdateInput, ConcertMusicLoverUncheckedUpdateInput>
    /**
     * Choose, which ConcertMusicLover to update.
     */
    where: ConcertMusicLoverWhereUniqueInput
  }

  /**
   * ConcertMusicLover updateMany
   */
  export type ConcertMusicLoverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConcertMusicLovers.
     */
    data: XOR<ConcertMusicLoverUpdateManyMutationInput, ConcertMusicLoverUncheckedUpdateManyInput>
    /**
     * Filter which ConcertMusicLovers to update
     */
    where?: ConcertMusicLoverWhereInput
    /**
     * Limit how many ConcertMusicLovers to update.
     */
    limit?: number
  }

  /**
   * ConcertMusicLover updateManyAndReturn
   */
  export type ConcertMusicLoverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * The data used to update ConcertMusicLovers.
     */
    data: XOR<ConcertMusicLoverUpdateManyMutationInput, ConcertMusicLoverUncheckedUpdateManyInput>
    /**
     * Filter which ConcertMusicLovers to update
     */
    where?: ConcertMusicLoverWhereInput
    /**
     * Limit how many ConcertMusicLovers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConcertMusicLover upsert
   */
  export type ConcertMusicLoverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * The filter to search for the ConcertMusicLover to update in case it exists.
     */
    where: ConcertMusicLoverWhereUniqueInput
    /**
     * In case the ConcertMusicLover found by the `where` argument doesn't exist, create a new ConcertMusicLover with this data.
     */
    create: XOR<ConcertMusicLoverCreateInput, ConcertMusicLoverUncheckedCreateInput>
    /**
     * In case the ConcertMusicLover was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConcertMusicLoverUpdateInput, ConcertMusicLoverUncheckedUpdateInput>
  }

  /**
   * ConcertMusicLover delete
   */
  export type ConcertMusicLoverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
    /**
     * Filter which ConcertMusicLover to delete.
     */
    where: ConcertMusicLoverWhereUniqueInput
  }

  /**
   * ConcertMusicLover deleteMany
   */
  export type ConcertMusicLoverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConcertMusicLovers to delete
     */
    where?: ConcertMusicLoverWhereInput
    /**
     * Limit how many ConcertMusicLovers to delete.
     */
    limit?: number
  }

  /**
   * ConcertMusicLover.reviews
   */
  export type ConcertMusicLover$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    where?: ReviewMusicLoverWhereInput
    orderBy?: ReviewMusicLoverOrderByWithRelationInput | ReviewMusicLoverOrderByWithRelationInput[]
    cursor?: ReviewMusicLoverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewMusicLoverScalarFieldEnum | ReviewMusicLoverScalarFieldEnum[]
  }

  /**
   * ConcertMusicLover without action
   */
  export type ConcertMusicLoverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcertMusicLover
     */
    select?: ConcertMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConcertMusicLover
     */
    omit?: ConcertMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcertMusicLoverInclude<ExtArgs> | null
  }


  /**
   * Model ReviewMusicLover
   */

  export type AggregateReviewMusicLover = {
    _count: ReviewMusicLoverCountAggregateOutputType | null
    _avg: ReviewMusicLoverAvgAggregateOutputType | null
    _sum: ReviewMusicLoverSumAggregateOutputType | null
    _min: ReviewMusicLoverMinAggregateOutputType | null
    _max: ReviewMusicLoverMaxAggregateOutputType | null
  }

  export type ReviewMusicLoverAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMusicLoverSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMusicLoverMinAggregateOutputType = {
    id: string | null
    concertId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type ReviewMusicLoverMaxAggregateOutputType = {
    id: string | null
    concertId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type ReviewMusicLoverCountAggregateOutputType = {
    id: number
    concertId: number
    userId: number
    rating: number
    comment: number
    validated: number
    createdAt: number
    _all: number
  }


  export type ReviewMusicLoverAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewMusicLoverSumAggregateInputType = {
    rating?: true
  }

  export type ReviewMusicLoverMinAggregateInputType = {
    id?: true
    concertId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
  }

  export type ReviewMusicLoverMaxAggregateInputType = {
    id?: true
    concertId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
  }

  export type ReviewMusicLoverCountAggregateInputType = {
    id?: true
    concertId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewMusicLoverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewMusicLover to aggregate.
     */
    where?: ReviewMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMusicLovers to fetch.
     */
    orderBy?: ReviewMusicLoverOrderByWithRelationInput | ReviewMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewMusicLovers
    **/
    _count?: true | ReviewMusicLoverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewMusicLoverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewMusicLoverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMusicLoverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMusicLoverMaxAggregateInputType
  }

  export type GetReviewMusicLoverAggregateType<T extends ReviewMusicLoverAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewMusicLover]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewMusicLover[P]>
      : GetScalarType<T[P], AggregateReviewMusicLover[P]>
  }




  export type ReviewMusicLoverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewMusicLoverWhereInput
    orderBy?: ReviewMusicLoverOrderByWithAggregationInput | ReviewMusicLoverOrderByWithAggregationInput[]
    by: ReviewMusicLoverScalarFieldEnum[] | ReviewMusicLoverScalarFieldEnum
    having?: ReviewMusicLoverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewMusicLoverCountAggregateInputType | true
    _avg?: ReviewMusicLoverAvgAggregateInputType
    _sum?: ReviewMusicLoverSumAggregateInputType
    _min?: ReviewMusicLoverMinAggregateInputType
    _max?: ReviewMusicLoverMaxAggregateInputType
  }

  export type ReviewMusicLoverGroupByOutputType = {
    id: string
    concertId: string
    userId: string
    rating: number
    comment: string
    validated: boolean
    createdAt: Date
    _count: ReviewMusicLoverCountAggregateOutputType | null
    _avg: ReviewMusicLoverAvgAggregateOutputType | null
    _sum: ReviewMusicLoverSumAggregateOutputType | null
    _min: ReviewMusicLoverMinAggregateOutputType | null
    _max: ReviewMusicLoverMaxAggregateOutputType | null
  }

  type GetReviewMusicLoverGroupByPayload<T extends ReviewMusicLoverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewMusicLoverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewMusicLoverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewMusicLoverGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewMusicLoverGroupByOutputType[P]>
        }
      >
    >


  export type ReviewMusicLoverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    concertId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    concert?: boolean | ConcertMusicLoverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewMusicLover"]>

  export type ReviewMusicLoverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    concertId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    concert?: boolean | ConcertMusicLoverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewMusicLover"]>

  export type ReviewMusicLoverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    concertId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    concert?: boolean | ConcertMusicLoverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewMusicLover"]>

  export type ReviewMusicLoverSelectScalar = {
    id?: boolean
    concertId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type ReviewMusicLoverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "concertId" | "userId" | "rating" | "comment" | "validated" | "createdAt", ExtArgs["result"]["reviewMusicLover"]>
  export type ReviewMusicLoverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    concert?: boolean | ConcertMusicLoverDefaultArgs<ExtArgs>
  }
  export type ReviewMusicLoverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    concert?: boolean | ConcertMusicLoverDefaultArgs<ExtArgs>
  }
  export type ReviewMusicLoverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserMusicLoverDefaultArgs<ExtArgs>
    concert?: boolean | ConcertMusicLoverDefaultArgs<ExtArgs>
  }

  export type $ReviewMusicLoverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewMusicLover"
    objects: {
      user: Prisma.$UserMusicLoverPayload<ExtArgs>
      concert: Prisma.$ConcertMusicLoverPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      concertId: string
      userId: string
      rating: number
      comment: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["reviewMusicLover"]>
    composites: {}
  }

  type ReviewMusicLoverGetPayload<S extends boolean | null | undefined | ReviewMusicLoverDefaultArgs> = $Result.GetResult<Prisma.$ReviewMusicLoverPayload, S>

  type ReviewMusicLoverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewMusicLoverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewMusicLoverCountAggregateInputType | true
    }

  export interface ReviewMusicLoverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewMusicLover'], meta: { name: 'ReviewMusicLover' } }
    /**
     * Find zero or one ReviewMusicLover that matches the filter.
     * @param {ReviewMusicLoverFindUniqueArgs} args - Arguments to find a ReviewMusicLover
     * @example
     * // Get one ReviewMusicLover
     * const reviewMusicLover = await prisma.reviewMusicLover.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewMusicLoverFindUniqueArgs>(args: SelectSubset<T, ReviewMusicLoverFindUniqueArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewMusicLover that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewMusicLoverFindUniqueOrThrowArgs} args - Arguments to find a ReviewMusicLover
     * @example
     * // Get one ReviewMusicLover
     * const reviewMusicLover = await prisma.reviewMusicLover.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewMusicLoverFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewMusicLoverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewMusicLover that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMusicLoverFindFirstArgs} args - Arguments to find a ReviewMusicLover
     * @example
     * // Get one ReviewMusicLover
     * const reviewMusicLover = await prisma.reviewMusicLover.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewMusicLoverFindFirstArgs>(args?: SelectSubset<T, ReviewMusicLoverFindFirstArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewMusicLover that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMusicLoverFindFirstOrThrowArgs} args - Arguments to find a ReviewMusicLover
     * @example
     * // Get one ReviewMusicLover
     * const reviewMusicLover = await prisma.reviewMusicLover.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewMusicLoverFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewMusicLoverFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewMusicLovers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMusicLoverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewMusicLovers
     * const reviewMusicLovers = await prisma.reviewMusicLover.findMany()
     * 
     * // Get first 10 ReviewMusicLovers
     * const reviewMusicLovers = await prisma.reviewMusicLover.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewMusicLoverWithIdOnly = await prisma.reviewMusicLover.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewMusicLoverFindManyArgs>(args?: SelectSubset<T, ReviewMusicLoverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewMusicLover.
     * @param {ReviewMusicLoverCreateArgs} args - Arguments to create a ReviewMusicLover.
     * @example
     * // Create one ReviewMusicLover
     * const ReviewMusicLover = await prisma.reviewMusicLover.create({
     *   data: {
     *     // ... data to create a ReviewMusicLover
     *   }
     * })
     * 
     */
    create<T extends ReviewMusicLoverCreateArgs>(args: SelectSubset<T, ReviewMusicLoverCreateArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewMusicLovers.
     * @param {ReviewMusicLoverCreateManyArgs} args - Arguments to create many ReviewMusicLovers.
     * @example
     * // Create many ReviewMusicLovers
     * const reviewMusicLover = await prisma.reviewMusicLover.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewMusicLoverCreateManyArgs>(args?: SelectSubset<T, ReviewMusicLoverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewMusicLovers and returns the data saved in the database.
     * @param {ReviewMusicLoverCreateManyAndReturnArgs} args - Arguments to create many ReviewMusicLovers.
     * @example
     * // Create many ReviewMusicLovers
     * const reviewMusicLover = await prisma.reviewMusicLover.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewMusicLovers and only return the `id`
     * const reviewMusicLoverWithIdOnly = await prisma.reviewMusicLover.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewMusicLoverCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewMusicLoverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewMusicLover.
     * @param {ReviewMusicLoverDeleteArgs} args - Arguments to delete one ReviewMusicLover.
     * @example
     * // Delete one ReviewMusicLover
     * const ReviewMusicLover = await prisma.reviewMusicLover.delete({
     *   where: {
     *     // ... filter to delete one ReviewMusicLover
     *   }
     * })
     * 
     */
    delete<T extends ReviewMusicLoverDeleteArgs>(args: SelectSubset<T, ReviewMusicLoverDeleteArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewMusicLover.
     * @param {ReviewMusicLoverUpdateArgs} args - Arguments to update one ReviewMusicLover.
     * @example
     * // Update one ReviewMusicLover
     * const reviewMusicLover = await prisma.reviewMusicLover.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewMusicLoverUpdateArgs>(args: SelectSubset<T, ReviewMusicLoverUpdateArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewMusicLovers.
     * @param {ReviewMusicLoverDeleteManyArgs} args - Arguments to filter ReviewMusicLovers to delete.
     * @example
     * // Delete a few ReviewMusicLovers
     * const { count } = await prisma.reviewMusicLover.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewMusicLoverDeleteManyArgs>(args?: SelectSubset<T, ReviewMusicLoverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewMusicLovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMusicLoverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewMusicLovers
     * const reviewMusicLover = await prisma.reviewMusicLover.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewMusicLoverUpdateManyArgs>(args: SelectSubset<T, ReviewMusicLoverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewMusicLovers and returns the data updated in the database.
     * @param {ReviewMusicLoverUpdateManyAndReturnArgs} args - Arguments to update many ReviewMusicLovers.
     * @example
     * // Update many ReviewMusicLovers
     * const reviewMusicLover = await prisma.reviewMusicLover.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewMusicLovers and only return the `id`
     * const reviewMusicLoverWithIdOnly = await prisma.reviewMusicLover.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewMusicLoverUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewMusicLoverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewMusicLover.
     * @param {ReviewMusicLoverUpsertArgs} args - Arguments to update or create a ReviewMusicLover.
     * @example
     * // Update or create a ReviewMusicLover
     * const reviewMusicLover = await prisma.reviewMusicLover.upsert({
     *   create: {
     *     // ... data to create a ReviewMusicLover
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewMusicLover we want to update
     *   }
     * })
     */
    upsert<T extends ReviewMusicLoverUpsertArgs>(args: SelectSubset<T, ReviewMusicLoverUpsertArgs<ExtArgs>>): Prisma__ReviewMusicLoverClient<$Result.GetResult<Prisma.$ReviewMusicLoverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewMusicLovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMusicLoverCountArgs} args - Arguments to filter ReviewMusicLovers to count.
     * @example
     * // Count the number of ReviewMusicLovers
     * const count = await prisma.reviewMusicLover.count({
     *   where: {
     *     // ... the filter for the ReviewMusicLovers we want to count
     *   }
     * })
    **/
    count<T extends ReviewMusicLoverCountArgs>(
      args?: Subset<T, ReviewMusicLoverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewMusicLoverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewMusicLover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMusicLoverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewMusicLoverAggregateArgs>(args: Subset<T, ReviewMusicLoverAggregateArgs>): Prisma.PrismaPromise<GetReviewMusicLoverAggregateType<T>>

    /**
     * Group by ReviewMusicLover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMusicLoverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewMusicLoverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewMusicLoverGroupByArgs['orderBy'] }
        : { orderBy?: ReviewMusicLoverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewMusicLoverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewMusicLoverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewMusicLover model
   */
  readonly fields: ReviewMusicLoverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewMusicLover.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewMusicLoverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserMusicLoverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserMusicLoverDefaultArgs<ExtArgs>>): Prisma__UserMusicLoverClient<$Result.GetResult<Prisma.$UserMusicLoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    concert<T extends ConcertMusicLoverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConcertMusicLoverDefaultArgs<ExtArgs>>): Prisma__ConcertMusicLoverClient<$Result.GetResult<Prisma.$ConcertMusicLoverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewMusicLover model
   */ 
  interface ReviewMusicLoverFieldRefs {
    readonly id: FieldRef<"ReviewMusicLover", 'String'>
    readonly concertId: FieldRef<"ReviewMusicLover", 'String'>
    readonly userId: FieldRef<"ReviewMusicLover", 'String'>
    readonly rating: FieldRef<"ReviewMusicLover", 'Int'>
    readonly comment: FieldRef<"ReviewMusicLover", 'String'>
    readonly validated: FieldRef<"ReviewMusicLover", 'Boolean'>
    readonly createdAt: FieldRef<"ReviewMusicLover", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReviewMusicLover findUnique
   */
  export type ReviewMusicLoverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ReviewMusicLover to fetch.
     */
    where: ReviewMusicLoverWhereUniqueInput
  }

  /**
   * ReviewMusicLover findUniqueOrThrow
   */
  export type ReviewMusicLoverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ReviewMusicLover to fetch.
     */
    where: ReviewMusicLoverWhereUniqueInput
  }

  /**
   * ReviewMusicLover findFirst
   */
  export type ReviewMusicLoverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ReviewMusicLover to fetch.
     */
    where?: ReviewMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMusicLovers to fetch.
     */
    orderBy?: ReviewMusicLoverOrderByWithRelationInput | ReviewMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewMusicLovers.
     */
    cursor?: ReviewMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewMusicLovers.
     */
    distinct?: ReviewMusicLoverScalarFieldEnum | ReviewMusicLoverScalarFieldEnum[]
  }

  /**
   * ReviewMusicLover findFirstOrThrow
   */
  export type ReviewMusicLoverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ReviewMusicLover to fetch.
     */
    where?: ReviewMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMusicLovers to fetch.
     */
    orderBy?: ReviewMusicLoverOrderByWithRelationInput | ReviewMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewMusicLovers.
     */
    cursor?: ReviewMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMusicLovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewMusicLovers.
     */
    distinct?: ReviewMusicLoverScalarFieldEnum | ReviewMusicLoverScalarFieldEnum[]
  }

  /**
   * ReviewMusicLover findMany
   */
  export type ReviewMusicLoverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * Filter, which ReviewMusicLovers to fetch.
     */
    where?: ReviewMusicLoverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMusicLovers to fetch.
     */
    orderBy?: ReviewMusicLoverOrderByWithRelationInput | ReviewMusicLoverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewMusicLovers.
     */
    cursor?: ReviewMusicLoverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMusicLovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMusicLovers.
     */
    skip?: number
    distinct?: ReviewMusicLoverScalarFieldEnum | ReviewMusicLoverScalarFieldEnum[]
  }

  /**
   * ReviewMusicLover create
   */
  export type ReviewMusicLoverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewMusicLover.
     */
    data: XOR<ReviewMusicLoverCreateInput, ReviewMusicLoverUncheckedCreateInput>
  }

  /**
   * ReviewMusicLover createMany
   */
  export type ReviewMusicLoverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewMusicLovers.
     */
    data: ReviewMusicLoverCreateManyInput | ReviewMusicLoverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewMusicLover createManyAndReturn
   */
  export type ReviewMusicLoverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewMusicLovers.
     */
    data: ReviewMusicLoverCreateManyInput | ReviewMusicLoverCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewMusicLover update
   */
  export type ReviewMusicLoverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewMusicLover.
     */
    data: XOR<ReviewMusicLoverUpdateInput, ReviewMusicLoverUncheckedUpdateInput>
    /**
     * Choose, which ReviewMusicLover to update.
     */
    where: ReviewMusicLoverWhereUniqueInput
  }

  /**
   * ReviewMusicLover updateMany
   */
  export type ReviewMusicLoverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewMusicLovers.
     */
    data: XOR<ReviewMusicLoverUpdateManyMutationInput, ReviewMusicLoverUncheckedUpdateManyInput>
    /**
     * Filter which ReviewMusicLovers to update
     */
    where?: ReviewMusicLoverWhereInput
    /**
     * Limit how many ReviewMusicLovers to update.
     */
    limit?: number
  }

  /**
   * ReviewMusicLover updateManyAndReturn
   */
  export type ReviewMusicLoverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * The data used to update ReviewMusicLovers.
     */
    data: XOR<ReviewMusicLoverUpdateManyMutationInput, ReviewMusicLoverUncheckedUpdateManyInput>
    /**
     * Filter which ReviewMusicLovers to update
     */
    where?: ReviewMusicLoverWhereInput
    /**
     * Limit how many ReviewMusicLovers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewMusicLover upsert
   */
  export type ReviewMusicLoverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewMusicLover to update in case it exists.
     */
    where: ReviewMusicLoverWhereUniqueInput
    /**
     * In case the ReviewMusicLover found by the `where` argument doesn't exist, create a new ReviewMusicLover with this data.
     */
    create: XOR<ReviewMusicLoverCreateInput, ReviewMusicLoverUncheckedCreateInput>
    /**
     * In case the ReviewMusicLover was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewMusicLoverUpdateInput, ReviewMusicLoverUncheckedUpdateInput>
  }

  /**
   * ReviewMusicLover delete
   */
  export type ReviewMusicLoverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
    /**
     * Filter which ReviewMusicLover to delete.
     */
    where: ReviewMusicLoverWhereUniqueInput
  }

  /**
   * ReviewMusicLover deleteMany
   */
  export type ReviewMusicLoverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewMusicLovers to delete
     */
    where?: ReviewMusicLoverWhereInput
    /**
     * Limit how many ReviewMusicLovers to delete.
     */
    limit?: number
  }

  /**
   * ReviewMusicLover without action
   */
  export type ReviewMusicLoverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewMusicLover
     */
    select?: ReviewMusicLoverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewMusicLover
     */
    omit?: ReviewMusicLoverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewMusicLoverInclude<ExtArgs> | null
  }


  /**
   * Model UserSocialButterfly
   */

  export type AggregateUserSocialButterfly = {
    _count: UserSocialButterflyCountAggregateOutputType | null
    _min: UserSocialButterflyMinAggregateOutputType | null
    _max: UserSocialButterflyMaxAggregateOutputType | null
  }

  export type UserSocialButterflyMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserSocialButterflyMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserSocialButterflyCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserSocialButterflyMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserSocialButterflyMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserSocialButterflyCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserSocialButterflyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSocialButterfly to aggregate.
     */
    where?: UserSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialButterflies to fetch.
     */
    orderBy?: UserSocialButterflyOrderByWithRelationInput | UserSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSocialButterflies
    **/
    _count?: true | UserSocialButterflyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSocialButterflyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSocialButterflyMaxAggregateInputType
  }

  export type GetUserSocialButterflyAggregateType<T extends UserSocialButterflyAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSocialButterfly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSocialButterfly[P]>
      : GetScalarType<T[P], AggregateUserSocialButterfly[P]>
  }




  export type UserSocialButterflyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSocialButterflyWhereInput
    orderBy?: UserSocialButterflyOrderByWithAggregationInput | UserSocialButterflyOrderByWithAggregationInput[]
    by: UserSocialButterflyScalarFieldEnum[] | UserSocialButterflyScalarFieldEnum
    having?: UserSocialButterflyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSocialButterflyCountAggregateInputType | true
    _min?: UserSocialButterflyMinAggregateInputType
    _max?: UserSocialButterflyMaxAggregateInputType
  }

  export type UserSocialButterflyGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    createdAt: Date
    _count: UserSocialButterflyCountAggregateOutputType | null
    _min: UserSocialButterflyMinAggregateOutputType | null
    _max: UserSocialButterflyMaxAggregateOutputType | null
  }

  type GetUserSocialButterflyGroupByPayload<T extends UserSocialButterflyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSocialButterflyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSocialButterflyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSocialButterflyGroupByOutputType[P]>
            : GetScalarType<T[P], UserSocialButterflyGroupByOutputType[P]>
        }
      >
    >


  export type UserSocialButterflySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    events?: boolean | UserSocialButterfly$eventsArgs<ExtArgs>
    reviews?: boolean | UserSocialButterfly$reviewsArgs<ExtArgs>
    likes?: boolean | UserSocialButterfly$likesArgs<ExtArgs>
    bookmarks?: boolean | UserSocialButterfly$bookmarksArgs<ExtArgs>
    reports?: boolean | UserSocialButterfly$reportsArgs<ExtArgs>
    _count?: boolean | UserSocialButterflyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSocialButterfly"]>

  export type UserSocialButterflySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userSocialButterfly"]>

  export type UserSocialButterflySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userSocialButterfly"]>

  export type UserSocialButterflySelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UserSocialButterflyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "createdAt", ExtArgs["result"]["userSocialButterfly"]>
  export type UserSocialButterflyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | UserSocialButterfly$eventsArgs<ExtArgs>
    reviews?: boolean | UserSocialButterfly$reviewsArgs<ExtArgs>
    likes?: boolean | UserSocialButterfly$likesArgs<ExtArgs>
    bookmarks?: boolean | UserSocialButterfly$bookmarksArgs<ExtArgs>
    reports?: boolean | UserSocialButterfly$reportsArgs<ExtArgs>
    _count?: boolean | UserSocialButterflyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserSocialButterflyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserSocialButterflyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserSocialButterflyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSocialButterfly"
    objects: {
      events: Prisma.$EventSocialButterflyPayload<ExtArgs>[]
      reviews: Prisma.$ReviewSocialButterflyPayload<ExtArgs>[]
      likes: Prisma.$LikeSocialButterflyPayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkSocialButterflyPayload<ExtArgs>[]
      reports: Prisma.$ReportSocialButterflyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["userSocialButterfly"]>
    composites: {}
  }

  type UserSocialButterflyGetPayload<S extends boolean | null | undefined | UserSocialButterflyDefaultArgs> = $Result.GetResult<Prisma.$UserSocialButterflyPayload, S>

  type UserSocialButterflyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSocialButterflyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSocialButterflyCountAggregateInputType | true
    }

  export interface UserSocialButterflyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSocialButterfly'], meta: { name: 'UserSocialButterfly' } }
    /**
     * Find zero or one UserSocialButterfly that matches the filter.
     * @param {UserSocialButterflyFindUniqueArgs} args - Arguments to find a UserSocialButterfly
     * @example
     * // Get one UserSocialButterfly
     * const userSocialButterfly = await prisma.userSocialButterfly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSocialButterflyFindUniqueArgs>(args: SelectSubset<T, UserSocialButterflyFindUniqueArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSocialButterfly that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSocialButterflyFindUniqueOrThrowArgs} args - Arguments to find a UserSocialButterfly
     * @example
     * // Get one UserSocialButterfly
     * const userSocialButterfly = await prisma.userSocialButterfly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSocialButterflyFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSocialButterflyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSocialButterfly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialButterflyFindFirstArgs} args - Arguments to find a UserSocialButterfly
     * @example
     * // Get one UserSocialButterfly
     * const userSocialButterfly = await prisma.userSocialButterfly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSocialButterflyFindFirstArgs>(args?: SelectSubset<T, UserSocialButterflyFindFirstArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSocialButterfly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialButterflyFindFirstOrThrowArgs} args - Arguments to find a UserSocialButterfly
     * @example
     * // Get one UserSocialButterfly
     * const userSocialButterfly = await prisma.userSocialButterfly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSocialButterflyFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSocialButterflyFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSocialButterflies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialButterflyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSocialButterflies
     * const userSocialButterflies = await prisma.userSocialButterfly.findMany()
     * 
     * // Get first 10 UserSocialButterflies
     * const userSocialButterflies = await prisma.userSocialButterfly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSocialButterflyWithIdOnly = await prisma.userSocialButterfly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSocialButterflyFindManyArgs>(args?: SelectSubset<T, UserSocialButterflyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSocialButterfly.
     * @param {UserSocialButterflyCreateArgs} args - Arguments to create a UserSocialButterfly.
     * @example
     * // Create one UserSocialButterfly
     * const UserSocialButterfly = await prisma.userSocialButterfly.create({
     *   data: {
     *     // ... data to create a UserSocialButterfly
     *   }
     * })
     * 
     */
    create<T extends UserSocialButterflyCreateArgs>(args: SelectSubset<T, UserSocialButterflyCreateArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSocialButterflies.
     * @param {UserSocialButterflyCreateManyArgs} args - Arguments to create many UserSocialButterflies.
     * @example
     * // Create many UserSocialButterflies
     * const userSocialButterfly = await prisma.userSocialButterfly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSocialButterflyCreateManyArgs>(args?: SelectSubset<T, UserSocialButterflyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSocialButterflies and returns the data saved in the database.
     * @param {UserSocialButterflyCreateManyAndReturnArgs} args - Arguments to create many UserSocialButterflies.
     * @example
     * // Create many UserSocialButterflies
     * const userSocialButterfly = await prisma.userSocialButterfly.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSocialButterflies and only return the `id`
     * const userSocialButterflyWithIdOnly = await prisma.userSocialButterfly.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSocialButterflyCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSocialButterflyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSocialButterfly.
     * @param {UserSocialButterflyDeleteArgs} args - Arguments to delete one UserSocialButterfly.
     * @example
     * // Delete one UserSocialButterfly
     * const UserSocialButterfly = await prisma.userSocialButterfly.delete({
     *   where: {
     *     // ... filter to delete one UserSocialButterfly
     *   }
     * })
     * 
     */
    delete<T extends UserSocialButterflyDeleteArgs>(args: SelectSubset<T, UserSocialButterflyDeleteArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSocialButterfly.
     * @param {UserSocialButterflyUpdateArgs} args - Arguments to update one UserSocialButterfly.
     * @example
     * // Update one UserSocialButterfly
     * const userSocialButterfly = await prisma.userSocialButterfly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSocialButterflyUpdateArgs>(args: SelectSubset<T, UserSocialButterflyUpdateArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSocialButterflies.
     * @param {UserSocialButterflyDeleteManyArgs} args - Arguments to filter UserSocialButterflies to delete.
     * @example
     * // Delete a few UserSocialButterflies
     * const { count } = await prisma.userSocialButterfly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSocialButterflyDeleteManyArgs>(args?: SelectSubset<T, UserSocialButterflyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialButterflyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSocialButterflies
     * const userSocialButterfly = await prisma.userSocialButterfly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSocialButterflyUpdateManyArgs>(args: SelectSubset<T, UserSocialButterflyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSocialButterflies and returns the data updated in the database.
     * @param {UserSocialButterflyUpdateManyAndReturnArgs} args - Arguments to update many UserSocialButterflies.
     * @example
     * // Update many UserSocialButterflies
     * const userSocialButterfly = await prisma.userSocialButterfly.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSocialButterflies and only return the `id`
     * const userSocialButterflyWithIdOnly = await prisma.userSocialButterfly.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSocialButterflyUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSocialButterflyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSocialButterfly.
     * @param {UserSocialButterflyUpsertArgs} args - Arguments to update or create a UserSocialButterfly.
     * @example
     * // Update or create a UserSocialButterfly
     * const userSocialButterfly = await prisma.userSocialButterfly.upsert({
     *   create: {
     *     // ... data to create a UserSocialButterfly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSocialButterfly we want to update
     *   }
     * })
     */
    upsert<T extends UserSocialButterflyUpsertArgs>(args: SelectSubset<T, UserSocialButterflyUpsertArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialButterflyCountArgs} args - Arguments to filter UserSocialButterflies to count.
     * @example
     * // Count the number of UserSocialButterflies
     * const count = await prisma.userSocialButterfly.count({
     *   where: {
     *     // ... the filter for the UserSocialButterflies we want to count
     *   }
     * })
    **/
    count<T extends UserSocialButterflyCountArgs>(
      args?: Subset<T, UserSocialButterflyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSocialButterflyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialButterflyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSocialButterflyAggregateArgs>(args: Subset<T, UserSocialButterflyAggregateArgs>): Prisma.PrismaPromise<GetUserSocialButterflyAggregateType<T>>

    /**
     * Group by UserSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSocialButterflyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSocialButterflyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSocialButterflyGroupByArgs['orderBy'] }
        : { orderBy?: UserSocialButterflyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSocialButterflyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSocialButterflyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSocialButterfly model
   */
  readonly fields: UserSocialButterflyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSocialButterfly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSocialButterflyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends UserSocialButterfly$eventsArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterfly$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends UserSocialButterfly$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterfly$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends UserSocialButterfly$likesArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterfly$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookmarks<T extends UserSocialButterfly$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterfly$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends UserSocialButterfly$reportsArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterfly$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSocialButterfly model
   */ 
  interface UserSocialButterflyFieldRefs {
    readonly id: FieldRef<"UserSocialButterfly", 'String'>
    readonly email: FieldRef<"UserSocialButterfly", 'String'>
    readonly name: FieldRef<"UserSocialButterfly", 'String'>
    readonly password: FieldRef<"UserSocialButterfly", 'String'>
    readonly createdAt: FieldRef<"UserSocialButterfly", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSocialButterfly findUnique
   */
  export type UserSocialButterflyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialButterfly to fetch.
     */
    where: UserSocialButterflyWhereUniqueInput
  }

  /**
   * UserSocialButterfly findUniqueOrThrow
   */
  export type UserSocialButterflyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialButterfly to fetch.
     */
    where: UserSocialButterflyWhereUniqueInput
  }

  /**
   * UserSocialButterfly findFirst
   */
  export type UserSocialButterflyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialButterfly to fetch.
     */
    where?: UserSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialButterflies to fetch.
     */
    orderBy?: UserSocialButterflyOrderByWithRelationInput | UserSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSocialButterflies.
     */
    cursor?: UserSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSocialButterflies.
     */
    distinct?: UserSocialButterflyScalarFieldEnum | UserSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly findFirstOrThrow
   */
  export type UserSocialButterflyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialButterfly to fetch.
     */
    where?: UserSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialButterflies to fetch.
     */
    orderBy?: UserSocialButterflyOrderByWithRelationInput | UserSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSocialButterflies.
     */
    cursor?: UserSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSocialButterflies.
     */
    distinct?: UserSocialButterflyScalarFieldEnum | UserSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly findMany
   */
  export type UserSocialButterflyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which UserSocialButterflies to fetch.
     */
    where?: UserSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSocialButterflies to fetch.
     */
    orderBy?: UserSocialButterflyOrderByWithRelationInput | UserSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSocialButterflies.
     */
    cursor?: UserSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSocialButterflies.
     */
    skip?: number
    distinct?: UserSocialButterflyScalarFieldEnum | UserSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly create
   */
  export type UserSocialButterflyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSocialButterfly.
     */
    data: XOR<UserSocialButterflyCreateInput, UserSocialButterflyUncheckedCreateInput>
  }

  /**
   * UserSocialButterfly createMany
   */
  export type UserSocialButterflyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSocialButterflies.
     */
    data: UserSocialButterflyCreateManyInput | UserSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSocialButterfly createManyAndReturn
   */
  export type UserSocialButterflyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to create many UserSocialButterflies.
     */
    data: UserSocialButterflyCreateManyInput | UserSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSocialButterfly update
   */
  export type UserSocialButterflyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSocialButterfly.
     */
    data: XOR<UserSocialButterflyUpdateInput, UserSocialButterflyUncheckedUpdateInput>
    /**
     * Choose, which UserSocialButterfly to update.
     */
    where: UserSocialButterflyWhereUniqueInput
  }

  /**
   * UserSocialButterfly updateMany
   */
  export type UserSocialButterflyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSocialButterflies.
     */
    data: XOR<UserSocialButterflyUpdateManyMutationInput, UserSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which UserSocialButterflies to update
     */
    where?: UserSocialButterflyWhereInput
    /**
     * Limit how many UserSocialButterflies to update.
     */
    limit?: number
  }

  /**
   * UserSocialButterfly updateManyAndReturn
   */
  export type UserSocialButterflyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to update UserSocialButterflies.
     */
    data: XOR<UserSocialButterflyUpdateManyMutationInput, UserSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which UserSocialButterflies to update
     */
    where?: UserSocialButterflyWhereInput
    /**
     * Limit how many UserSocialButterflies to update.
     */
    limit?: number
  }

  /**
   * UserSocialButterfly upsert
   */
  export type UserSocialButterflyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSocialButterfly to update in case it exists.
     */
    where: UserSocialButterflyWhereUniqueInput
    /**
     * In case the UserSocialButterfly found by the `where` argument doesn't exist, create a new UserSocialButterfly with this data.
     */
    create: XOR<UserSocialButterflyCreateInput, UserSocialButterflyUncheckedCreateInput>
    /**
     * In case the UserSocialButterfly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSocialButterflyUpdateInput, UserSocialButterflyUncheckedUpdateInput>
  }

  /**
   * UserSocialButterfly delete
   */
  export type UserSocialButterflyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter which UserSocialButterfly to delete.
     */
    where: UserSocialButterflyWhereUniqueInput
  }

  /**
   * UserSocialButterfly deleteMany
   */
  export type UserSocialButterflyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSocialButterflies to delete
     */
    where?: UserSocialButterflyWhereInput
    /**
     * Limit how many UserSocialButterflies to delete.
     */
    limit?: number
  }

  /**
   * UserSocialButterfly.events
   */
  export type UserSocialButterfly$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    where?: EventSocialButterflyWhereInput
    orderBy?: EventSocialButterflyOrderByWithRelationInput | EventSocialButterflyOrderByWithRelationInput[]
    cursor?: EventSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventSocialButterflyScalarFieldEnum | EventSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly.reviews
   */
  export type UserSocialButterfly$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    where?: ReviewSocialButterflyWhereInput
    orderBy?: ReviewSocialButterflyOrderByWithRelationInput | ReviewSocialButterflyOrderByWithRelationInput[]
    cursor?: ReviewSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewSocialButterflyScalarFieldEnum | ReviewSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly.likes
   */
  export type UserSocialButterfly$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    where?: LikeSocialButterflyWhereInput
    orderBy?: LikeSocialButterflyOrderByWithRelationInput | LikeSocialButterflyOrderByWithRelationInput[]
    cursor?: LikeSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeSocialButterflyScalarFieldEnum | LikeSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly.bookmarks
   */
  export type UserSocialButterfly$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    where?: BookmarkSocialButterflyWhereInput
    orderBy?: BookmarkSocialButterflyOrderByWithRelationInput | BookmarkSocialButterflyOrderByWithRelationInput[]
    cursor?: BookmarkSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkSocialButterflyScalarFieldEnum | BookmarkSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly.reports
   */
  export type UserSocialButterfly$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    where?: ReportSocialButterflyWhereInput
    orderBy?: ReportSocialButterflyOrderByWithRelationInput | ReportSocialButterflyOrderByWithRelationInput[]
    cursor?: ReportSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportSocialButterflyScalarFieldEnum | ReportSocialButterflyScalarFieldEnum[]
  }

  /**
   * UserSocialButterfly without action
   */
  export type UserSocialButterflyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSocialButterfly
     */
    select?: UserSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSocialButterfly
     */
    omit?: UserSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSocialButterflyInclude<ExtArgs> | null
  }


  /**
   * Model EventSocialButterfly
   */

  export type AggregateEventSocialButterfly = {
    _count: EventSocialButterflyCountAggregateOutputType | null
    _min: EventSocialButterflyMinAggregateOutputType | null
    _max: EventSocialButterflyMaxAggregateOutputType | null
  }

  export type EventSocialButterflyMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    date: Date | null
    location: string | null
    category: string | null
    submittedBy: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type EventSocialButterflyMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    date: Date | null
    location: string | null
    category: string | null
    submittedBy: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type EventSocialButterflyCountAggregateOutputType = {
    id: number
    title: number
    description: number
    date: number
    location: number
    category: number
    submittedBy: number
    validated: number
    createdAt: number
    _all: number
  }


  export type EventSocialButterflyMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    location?: true
    category?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
  }

  export type EventSocialButterflyMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    location?: true
    category?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
  }

  export type EventSocialButterflyCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    location?: true
    category?: true
    submittedBy?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type EventSocialButterflyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventSocialButterfly to aggregate.
     */
    where?: EventSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSocialButterflies to fetch.
     */
    orderBy?: EventSocialButterflyOrderByWithRelationInput | EventSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventSocialButterflies
    **/
    _count?: true | EventSocialButterflyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventSocialButterflyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventSocialButterflyMaxAggregateInputType
  }

  export type GetEventSocialButterflyAggregateType<T extends EventSocialButterflyAggregateArgs> = {
        [P in keyof T & keyof AggregateEventSocialButterfly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventSocialButterfly[P]>
      : GetScalarType<T[P], AggregateEventSocialButterfly[P]>
  }




  export type EventSocialButterflyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventSocialButterflyWhereInput
    orderBy?: EventSocialButterflyOrderByWithAggregationInput | EventSocialButterflyOrderByWithAggregationInput[]
    by: EventSocialButterflyScalarFieldEnum[] | EventSocialButterflyScalarFieldEnum
    having?: EventSocialButterflyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventSocialButterflyCountAggregateInputType | true
    _min?: EventSocialButterflyMinAggregateInputType
    _max?: EventSocialButterflyMaxAggregateInputType
  }

  export type EventSocialButterflyGroupByOutputType = {
    id: string
    title: string
    description: string
    date: Date
    location: string
    category: string
    submittedBy: string
    validated: boolean
    createdAt: Date
    _count: EventSocialButterflyCountAggregateOutputType | null
    _min: EventSocialButterflyMinAggregateOutputType | null
    _max: EventSocialButterflyMaxAggregateOutputType | null
  }

  type GetEventSocialButterflyGroupByPayload<T extends EventSocialButterflyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventSocialButterflyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventSocialButterflyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventSocialButterflyGroupByOutputType[P]>
            : GetScalarType<T[P], EventSocialButterflyGroupByOutputType[P]>
        }
      >
    >


  export type EventSocialButterflySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    category?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    owner?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    reviews?: boolean | EventSocialButterfly$reviewsArgs<ExtArgs>
    bookmarks?: boolean | EventSocialButterfly$bookmarksArgs<ExtArgs>
    likes?: boolean | EventSocialButterfly$likesArgs<ExtArgs>
    reports?: boolean | EventSocialButterfly$reportsArgs<ExtArgs>
    _count?: boolean | EventSocialButterflyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSocialButterfly"]>

  export type EventSocialButterflySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    category?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    owner?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSocialButterfly"]>

  export type EventSocialButterflySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    category?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
    owner?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSocialButterfly"]>

  export type EventSocialButterflySelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    category?: boolean
    submittedBy?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type EventSocialButterflyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "date" | "location" | "category" | "submittedBy" | "validated" | "createdAt", ExtArgs["result"]["eventSocialButterfly"]>
  export type EventSocialButterflyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    reviews?: boolean | EventSocialButterfly$reviewsArgs<ExtArgs>
    bookmarks?: boolean | EventSocialButterfly$bookmarksArgs<ExtArgs>
    likes?: boolean | EventSocialButterfly$likesArgs<ExtArgs>
    reports?: boolean | EventSocialButterfly$reportsArgs<ExtArgs>
    _count?: boolean | EventSocialButterflyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventSocialButterflyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
  }
  export type EventSocialButterflyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
  }

  export type $EventSocialButterflyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventSocialButterfly"
    objects: {
      owner: Prisma.$UserSocialButterflyPayload<ExtArgs>
      reviews: Prisma.$ReviewSocialButterflyPayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkSocialButterflyPayload<ExtArgs>[]
      likes: Prisma.$LikeSocialButterflyPayload<ExtArgs>[]
      reports: Prisma.$ReportSocialButterflyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      date: Date
      location: string
      category: string
      submittedBy: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["eventSocialButterfly"]>
    composites: {}
  }

  type EventSocialButterflyGetPayload<S extends boolean | null | undefined | EventSocialButterflyDefaultArgs> = $Result.GetResult<Prisma.$EventSocialButterflyPayload, S>

  type EventSocialButterflyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventSocialButterflyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventSocialButterflyCountAggregateInputType | true
    }

  export interface EventSocialButterflyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventSocialButterfly'], meta: { name: 'EventSocialButterfly' } }
    /**
     * Find zero or one EventSocialButterfly that matches the filter.
     * @param {EventSocialButterflyFindUniqueArgs} args - Arguments to find a EventSocialButterfly
     * @example
     * // Get one EventSocialButterfly
     * const eventSocialButterfly = await prisma.eventSocialButterfly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventSocialButterflyFindUniqueArgs>(args: SelectSubset<T, EventSocialButterflyFindUniqueArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventSocialButterfly that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventSocialButterflyFindUniqueOrThrowArgs} args - Arguments to find a EventSocialButterfly
     * @example
     * // Get one EventSocialButterfly
     * const eventSocialButterfly = await prisma.eventSocialButterfly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventSocialButterflyFindUniqueOrThrowArgs>(args: SelectSubset<T, EventSocialButterflyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventSocialButterfly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSocialButterflyFindFirstArgs} args - Arguments to find a EventSocialButterfly
     * @example
     * // Get one EventSocialButterfly
     * const eventSocialButterfly = await prisma.eventSocialButterfly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventSocialButterflyFindFirstArgs>(args?: SelectSubset<T, EventSocialButterflyFindFirstArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventSocialButterfly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSocialButterflyFindFirstOrThrowArgs} args - Arguments to find a EventSocialButterfly
     * @example
     * // Get one EventSocialButterfly
     * const eventSocialButterfly = await prisma.eventSocialButterfly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventSocialButterflyFindFirstOrThrowArgs>(args?: SelectSubset<T, EventSocialButterflyFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventSocialButterflies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSocialButterflyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventSocialButterflies
     * const eventSocialButterflies = await prisma.eventSocialButterfly.findMany()
     * 
     * // Get first 10 EventSocialButterflies
     * const eventSocialButterflies = await prisma.eventSocialButterfly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventSocialButterflyWithIdOnly = await prisma.eventSocialButterfly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventSocialButterflyFindManyArgs>(args?: SelectSubset<T, EventSocialButterflyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventSocialButterfly.
     * @param {EventSocialButterflyCreateArgs} args - Arguments to create a EventSocialButterfly.
     * @example
     * // Create one EventSocialButterfly
     * const EventSocialButterfly = await prisma.eventSocialButterfly.create({
     *   data: {
     *     // ... data to create a EventSocialButterfly
     *   }
     * })
     * 
     */
    create<T extends EventSocialButterflyCreateArgs>(args: SelectSubset<T, EventSocialButterflyCreateArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventSocialButterflies.
     * @param {EventSocialButterflyCreateManyArgs} args - Arguments to create many EventSocialButterflies.
     * @example
     * // Create many EventSocialButterflies
     * const eventSocialButterfly = await prisma.eventSocialButterfly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventSocialButterflyCreateManyArgs>(args?: SelectSubset<T, EventSocialButterflyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventSocialButterflies and returns the data saved in the database.
     * @param {EventSocialButterflyCreateManyAndReturnArgs} args - Arguments to create many EventSocialButterflies.
     * @example
     * // Create many EventSocialButterflies
     * const eventSocialButterfly = await prisma.eventSocialButterfly.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventSocialButterflies and only return the `id`
     * const eventSocialButterflyWithIdOnly = await prisma.eventSocialButterfly.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventSocialButterflyCreateManyAndReturnArgs>(args?: SelectSubset<T, EventSocialButterflyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventSocialButterfly.
     * @param {EventSocialButterflyDeleteArgs} args - Arguments to delete one EventSocialButterfly.
     * @example
     * // Delete one EventSocialButterfly
     * const EventSocialButterfly = await prisma.eventSocialButterfly.delete({
     *   where: {
     *     // ... filter to delete one EventSocialButterfly
     *   }
     * })
     * 
     */
    delete<T extends EventSocialButterflyDeleteArgs>(args: SelectSubset<T, EventSocialButterflyDeleteArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventSocialButterfly.
     * @param {EventSocialButterflyUpdateArgs} args - Arguments to update one EventSocialButterfly.
     * @example
     * // Update one EventSocialButterfly
     * const eventSocialButterfly = await prisma.eventSocialButterfly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventSocialButterflyUpdateArgs>(args: SelectSubset<T, EventSocialButterflyUpdateArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventSocialButterflies.
     * @param {EventSocialButterflyDeleteManyArgs} args - Arguments to filter EventSocialButterflies to delete.
     * @example
     * // Delete a few EventSocialButterflies
     * const { count } = await prisma.eventSocialButterfly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventSocialButterflyDeleteManyArgs>(args?: SelectSubset<T, EventSocialButterflyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSocialButterflyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventSocialButterflies
     * const eventSocialButterfly = await prisma.eventSocialButterfly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventSocialButterflyUpdateManyArgs>(args: SelectSubset<T, EventSocialButterflyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventSocialButterflies and returns the data updated in the database.
     * @param {EventSocialButterflyUpdateManyAndReturnArgs} args - Arguments to update many EventSocialButterflies.
     * @example
     * // Update many EventSocialButterflies
     * const eventSocialButterfly = await prisma.eventSocialButterfly.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventSocialButterflies and only return the `id`
     * const eventSocialButterflyWithIdOnly = await prisma.eventSocialButterfly.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventSocialButterflyUpdateManyAndReturnArgs>(args: SelectSubset<T, EventSocialButterflyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventSocialButterfly.
     * @param {EventSocialButterflyUpsertArgs} args - Arguments to update or create a EventSocialButterfly.
     * @example
     * // Update or create a EventSocialButterfly
     * const eventSocialButterfly = await prisma.eventSocialButterfly.upsert({
     *   create: {
     *     // ... data to create a EventSocialButterfly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventSocialButterfly we want to update
     *   }
     * })
     */
    upsert<T extends EventSocialButterflyUpsertArgs>(args: SelectSubset<T, EventSocialButterflyUpsertArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSocialButterflyCountArgs} args - Arguments to filter EventSocialButterflies to count.
     * @example
     * // Count the number of EventSocialButterflies
     * const count = await prisma.eventSocialButterfly.count({
     *   where: {
     *     // ... the filter for the EventSocialButterflies we want to count
     *   }
     * })
    **/
    count<T extends EventSocialButterflyCountArgs>(
      args?: Subset<T, EventSocialButterflyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventSocialButterflyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSocialButterflyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventSocialButterflyAggregateArgs>(args: Subset<T, EventSocialButterflyAggregateArgs>): Prisma.PrismaPromise<GetEventSocialButterflyAggregateType<T>>

    /**
     * Group by EventSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSocialButterflyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventSocialButterflyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventSocialButterflyGroupByArgs['orderBy'] }
        : { orderBy?: EventSocialButterflyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventSocialButterflyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventSocialButterflyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventSocialButterfly model
   */
  readonly fields: EventSocialButterflyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventSocialButterfly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventSocialButterflyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterflyDefaultArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviews<T extends EventSocialButterfly$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, EventSocialButterfly$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookmarks<T extends EventSocialButterfly$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, EventSocialButterfly$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends EventSocialButterfly$likesArgs<ExtArgs> = {}>(args?: Subset<T, EventSocialButterfly$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends EventSocialButterfly$reportsArgs<ExtArgs> = {}>(args?: Subset<T, EventSocialButterfly$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventSocialButterfly model
   */ 
  interface EventSocialButterflyFieldRefs {
    readonly id: FieldRef<"EventSocialButterfly", 'String'>
    readonly title: FieldRef<"EventSocialButterfly", 'String'>
    readonly description: FieldRef<"EventSocialButterfly", 'String'>
    readonly date: FieldRef<"EventSocialButterfly", 'DateTime'>
    readonly location: FieldRef<"EventSocialButterfly", 'String'>
    readonly category: FieldRef<"EventSocialButterfly", 'String'>
    readonly submittedBy: FieldRef<"EventSocialButterfly", 'String'>
    readonly validated: FieldRef<"EventSocialButterfly", 'Boolean'>
    readonly createdAt: FieldRef<"EventSocialButterfly", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventSocialButterfly findUnique
   */
  export type EventSocialButterflyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which EventSocialButterfly to fetch.
     */
    where: EventSocialButterflyWhereUniqueInput
  }

  /**
   * EventSocialButterfly findUniqueOrThrow
   */
  export type EventSocialButterflyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which EventSocialButterfly to fetch.
     */
    where: EventSocialButterflyWhereUniqueInput
  }

  /**
   * EventSocialButterfly findFirst
   */
  export type EventSocialButterflyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which EventSocialButterfly to fetch.
     */
    where?: EventSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSocialButterflies to fetch.
     */
    orderBy?: EventSocialButterflyOrderByWithRelationInput | EventSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventSocialButterflies.
     */
    cursor?: EventSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventSocialButterflies.
     */
    distinct?: EventSocialButterflyScalarFieldEnum | EventSocialButterflyScalarFieldEnum[]
  }

  /**
   * EventSocialButterfly findFirstOrThrow
   */
  export type EventSocialButterflyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which EventSocialButterfly to fetch.
     */
    where?: EventSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSocialButterflies to fetch.
     */
    orderBy?: EventSocialButterflyOrderByWithRelationInput | EventSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventSocialButterflies.
     */
    cursor?: EventSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventSocialButterflies.
     */
    distinct?: EventSocialButterflyScalarFieldEnum | EventSocialButterflyScalarFieldEnum[]
  }

  /**
   * EventSocialButterfly findMany
   */
  export type EventSocialButterflyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which EventSocialButterflies to fetch.
     */
    where?: EventSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSocialButterflies to fetch.
     */
    orderBy?: EventSocialButterflyOrderByWithRelationInput | EventSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventSocialButterflies.
     */
    cursor?: EventSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSocialButterflies.
     */
    skip?: number
    distinct?: EventSocialButterflyScalarFieldEnum | EventSocialButterflyScalarFieldEnum[]
  }

  /**
   * EventSocialButterfly create
   */
  export type EventSocialButterflyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to create a EventSocialButterfly.
     */
    data: XOR<EventSocialButterflyCreateInput, EventSocialButterflyUncheckedCreateInput>
  }

  /**
   * EventSocialButterfly createMany
   */
  export type EventSocialButterflyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventSocialButterflies.
     */
    data: EventSocialButterflyCreateManyInput | EventSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventSocialButterfly createManyAndReturn
   */
  export type EventSocialButterflyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to create many EventSocialButterflies.
     */
    data: EventSocialButterflyCreateManyInput | EventSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventSocialButterfly update
   */
  export type EventSocialButterflyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to update a EventSocialButterfly.
     */
    data: XOR<EventSocialButterflyUpdateInput, EventSocialButterflyUncheckedUpdateInput>
    /**
     * Choose, which EventSocialButterfly to update.
     */
    where: EventSocialButterflyWhereUniqueInput
  }

  /**
   * EventSocialButterfly updateMany
   */
  export type EventSocialButterflyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventSocialButterflies.
     */
    data: XOR<EventSocialButterflyUpdateManyMutationInput, EventSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which EventSocialButterflies to update
     */
    where?: EventSocialButterflyWhereInput
    /**
     * Limit how many EventSocialButterflies to update.
     */
    limit?: number
  }

  /**
   * EventSocialButterfly updateManyAndReturn
   */
  export type EventSocialButterflyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to update EventSocialButterflies.
     */
    data: XOR<EventSocialButterflyUpdateManyMutationInput, EventSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which EventSocialButterflies to update
     */
    where?: EventSocialButterflyWhereInput
    /**
     * Limit how many EventSocialButterflies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventSocialButterfly upsert
   */
  export type EventSocialButterflyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * The filter to search for the EventSocialButterfly to update in case it exists.
     */
    where: EventSocialButterflyWhereUniqueInput
    /**
     * In case the EventSocialButterfly found by the `where` argument doesn't exist, create a new EventSocialButterfly with this data.
     */
    create: XOR<EventSocialButterflyCreateInput, EventSocialButterflyUncheckedCreateInput>
    /**
     * In case the EventSocialButterfly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventSocialButterflyUpdateInput, EventSocialButterflyUncheckedUpdateInput>
  }

  /**
   * EventSocialButterfly delete
   */
  export type EventSocialButterflyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter which EventSocialButterfly to delete.
     */
    where: EventSocialButterflyWhereUniqueInput
  }

  /**
   * EventSocialButterfly deleteMany
   */
  export type EventSocialButterflyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventSocialButterflies to delete
     */
    where?: EventSocialButterflyWhereInput
    /**
     * Limit how many EventSocialButterflies to delete.
     */
    limit?: number
  }

  /**
   * EventSocialButterfly.reviews
   */
  export type EventSocialButterfly$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    where?: ReviewSocialButterflyWhereInput
    orderBy?: ReviewSocialButterflyOrderByWithRelationInput | ReviewSocialButterflyOrderByWithRelationInput[]
    cursor?: ReviewSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewSocialButterflyScalarFieldEnum | ReviewSocialButterflyScalarFieldEnum[]
  }

  /**
   * EventSocialButterfly.bookmarks
   */
  export type EventSocialButterfly$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    where?: BookmarkSocialButterflyWhereInput
    orderBy?: BookmarkSocialButterflyOrderByWithRelationInput | BookmarkSocialButterflyOrderByWithRelationInput[]
    cursor?: BookmarkSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkSocialButterflyScalarFieldEnum | BookmarkSocialButterflyScalarFieldEnum[]
  }

  /**
   * EventSocialButterfly.likes
   */
  export type EventSocialButterfly$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    where?: LikeSocialButterflyWhereInput
    orderBy?: LikeSocialButterflyOrderByWithRelationInput | LikeSocialButterflyOrderByWithRelationInput[]
    cursor?: LikeSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeSocialButterflyScalarFieldEnum | LikeSocialButterflyScalarFieldEnum[]
  }

  /**
   * EventSocialButterfly.reports
   */
  export type EventSocialButterfly$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    where?: ReportSocialButterflyWhereInput
    orderBy?: ReportSocialButterflyOrderByWithRelationInput | ReportSocialButterflyOrderByWithRelationInput[]
    cursor?: ReportSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportSocialButterflyScalarFieldEnum | ReportSocialButterflyScalarFieldEnum[]
  }

  /**
   * EventSocialButterfly without action
   */
  export type EventSocialButterflyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
  }


  /**
   * Model ReviewSocialButterfly
   */

  export type AggregateReviewSocialButterfly = {
    _count: ReviewSocialButterflyCountAggregateOutputType | null
    _avg: ReviewSocialButterflyAvgAggregateOutputType | null
    _sum: ReviewSocialButterflySumAggregateOutputType | null
    _min: ReviewSocialButterflyMinAggregateOutputType | null
    _max: ReviewSocialButterflyMaxAggregateOutputType | null
  }

  export type ReviewSocialButterflyAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSocialButterflySumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSocialButterflyMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type ReviewSocialButterflyMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type ReviewSocialButterflyCountAggregateOutputType = {
    id: number
    eventId: number
    userId: number
    rating: number
    comment: number
    validated: number
    createdAt: number
    _all: number
  }


  export type ReviewSocialButterflyAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewSocialButterflySumAggregateInputType = {
    rating?: true
  }

  export type ReviewSocialButterflyMinAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
  }

  export type ReviewSocialButterflyMaxAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
  }

  export type ReviewSocialButterflyCountAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    rating?: true
    comment?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewSocialButterflyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewSocialButterfly to aggregate.
     */
    where?: ReviewSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewSocialButterflies to fetch.
     */
    orderBy?: ReviewSocialButterflyOrderByWithRelationInput | ReviewSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewSocialButterflies
    **/
    _count?: true | ReviewSocialButterflyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewSocialButterflyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSocialButterflySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewSocialButterflyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewSocialButterflyMaxAggregateInputType
  }

  export type GetReviewSocialButterflyAggregateType<T extends ReviewSocialButterflyAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewSocialButterfly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewSocialButterfly[P]>
      : GetScalarType<T[P], AggregateReviewSocialButterfly[P]>
  }




  export type ReviewSocialButterflyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewSocialButterflyWhereInput
    orderBy?: ReviewSocialButterflyOrderByWithAggregationInput | ReviewSocialButterflyOrderByWithAggregationInput[]
    by: ReviewSocialButterflyScalarFieldEnum[] | ReviewSocialButterflyScalarFieldEnum
    having?: ReviewSocialButterflyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewSocialButterflyCountAggregateInputType | true
    _avg?: ReviewSocialButterflyAvgAggregateInputType
    _sum?: ReviewSocialButterflySumAggregateInputType
    _min?: ReviewSocialButterflyMinAggregateInputType
    _max?: ReviewSocialButterflyMaxAggregateInputType
  }

  export type ReviewSocialButterflyGroupByOutputType = {
    id: string
    eventId: string
    userId: string
    rating: number
    comment: string
    validated: boolean
    createdAt: Date
    _count: ReviewSocialButterflyCountAggregateOutputType | null
    _avg: ReviewSocialButterflyAvgAggregateOutputType | null
    _sum: ReviewSocialButterflySumAggregateOutputType | null
    _min: ReviewSocialButterflyMinAggregateOutputType | null
    _max: ReviewSocialButterflyMaxAggregateOutputType | null
  }

  type GetReviewSocialButterflyGroupByPayload<T extends ReviewSocialButterflyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewSocialButterflyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewSocialButterflyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewSocialButterflyGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewSocialButterflyGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSocialButterflySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
    reports?: boolean | ReviewSocialButterfly$reportsArgs<ExtArgs>
    _count?: boolean | ReviewSocialButterflyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewSocialButterfly"]>

  export type ReviewSocialButterflySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewSocialButterfly"]>

  export type ReviewSocialButterflySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewSocialButterfly"]>

  export type ReviewSocialButterflySelectScalar = {
    id?: boolean
    eventId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type ReviewSocialButterflyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "userId" | "rating" | "comment" | "validated" | "createdAt", ExtArgs["result"]["reviewSocialButterfly"]>
  export type ReviewSocialButterflyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
    reports?: boolean | ReviewSocialButterfly$reportsArgs<ExtArgs>
    _count?: boolean | ReviewSocialButterflyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReviewSocialButterflyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }
  export type ReviewSocialButterflyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }

  export type $ReviewSocialButterflyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewSocialButterfly"
    objects: {
      user: Prisma.$UserSocialButterflyPayload<ExtArgs>
      event: Prisma.$EventSocialButterflyPayload<ExtArgs>
      reports: Prisma.$ReportSocialButterflyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      userId: string
      rating: number
      comment: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["reviewSocialButterfly"]>
    composites: {}
  }

  type ReviewSocialButterflyGetPayload<S extends boolean | null | undefined | ReviewSocialButterflyDefaultArgs> = $Result.GetResult<Prisma.$ReviewSocialButterflyPayload, S>

  type ReviewSocialButterflyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewSocialButterflyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewSocialButterflyCountAggregateInputType | true
    }

  export interface ReviewSocialButterflyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewSocialButterfly'], meta: { name: 'ReviewSocialButterfly' } }
    /**
     * Find zero or one ReviewSocialButterfly that matches the filter.
     * @param {ReviewSocialButterflyFindUniqueArgs} args - Arguments to find a ReviewSocialButterfly
     * @example
     * // Get one ReviewSocialButterfly
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewSocialButterflyFindUniqueArgs>(args: SelectSubset<T, ReviewSocialButterflyFindUniqueArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewSocialButterfly that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewSocialButterflyFindUniqueOrThrowArgs} args - Arguments to find a ReviewSocialButterfly
     * @example
     * // Get one ReviewSocialButterfly
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewSocialButterflyFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewSocialButterflyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewSocialButterfly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewSocialButterflyFindFirstArgs} args - Arguments to find a ReviewSocialButterfly
     * @example
     * // Get one ReviewSocialButterfly
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewSocialButterflyFindFirstArgs>(args?: SelectSubset<T, ReviewSocialButterflyFindFirstArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewSocialButterfly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewSocialButterflyFindFirstOrThrowArgs} args - Arguments to find a ReviewSocialButterfly
     * @example
     * // Get one ReviewSocialButterfly
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewSocialButterflyFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewSocialButterflyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewSocialButterflies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewSocialButterflyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewSocialButterflies
     * const reviewSocialButterflies = await prisma.reviewSocialButterfly.findMany()
     * 
     * // Get first 10 ReviewSocialButterflies
     * const reviewSocialButterflies = await prisma.reviewSocialButterfly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewSocialButterflyWithIdOnly = await prisma.reviewSocialButterfly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewSocialButterflyFindManyArgs>(args?: SelectSubset<T, ReviewSocialButterflyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewSocialButterfly.
     * @param {ReviewSocialButterflyCreateArgs} args - Arguments to create a ReviewSocialButterfly.
     * @example
     * // Create one ReviewSocialButterfly
     * const ReviewSocialButterfly = await prisma.reviewSocialButterfly.create({
     *   data: {
     *     // ... data to create a ReviewSocialButterfly
     *   }
     * })
     * 
     */
    create<T extends ReviewSocialButterflyCreateArgs>(args: SelectSubset<T, ReviewSocialButterflyCreateArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewSocialButterflies.
     * @param {ReviewSocialButterflyCreateManyArgs} args - Arguments to create many ReviewSocialButterflies.
     * @example
     * // Create many ReviewSocialButterflies
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewSocialButterflyCreateManyArgs>(args?: SelectSubset<T, ReviewSocialButterflyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewSocialButterflies and returns the data saved in the database.
     * @param {ReviewSocialButterflyCreateManyAndReturnArgs} args - Arguments to create many ReviewSocialButterflies.
     * @example
     * // Create many ReviewSocialButterflies
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewSocialButterflies and only return the `id`
     * const reviewSocialButterflyWithIdOnly = await prisma.reviewSocialButterfly.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewSocialButterflyCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewSocialButterflyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewSocialButterfly.
     * @param {ReviewSocialButterflyDeleteArgs} args - Arguments to delete one ReviewSocialButterfly.
     * @example
     * // Delete one ReviewSocialButterfly
     * const ReviewSocialButterfly = await prisma.reviewSocialButterfly.delete({
     *   where: {
     *     // ... filter to delete one ReviewSocialButterfly
     *   }
     * })
     * 
     */
    delete<T extends ReviewSocialButterflyDeleteArgs>(args: SelectSubset<T, ReviewSocialButterflyDeleteArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewSocialButterfly.
     * @param {ReviewSocialButterflyUpdateArgs} args - Arguments to update one ReviewSocialButterfly.
     * @example
     * // Update one ReviewSocialButterfly
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewSocialButterflyUpdateArgs>(args: SelectSubset<T, ReviewSocialButterflyUpdateArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewSocialButterflies.
     * @param {ReviewSocialButterflyDeleteManyArgs} args - Arguments to filter ReviewSocialButterflies to delete.
     * @example
     * // Delete a few ReviewSocialButterflies
     * const { count } = await prisma.reviewSocialButterfly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewSocialButterflyDeleteManyArgs>(args?: SelectSubset<T, ReviewSocialButterflyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewSocialButterflyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewSocialButterflies
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewSocialButterflyUpdateManyArgs>(args: SelectSubset<T, ReviewSocialButterflyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewSocialButterflies and returns the data updated in the database.
     * @param {ReviewSocialButterflyUpdateManyAndReturnArgs} args - Arguments to update many ReviewSocialButterflies.
     * @example
     * // Update many ReviewSocialButterflies
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewSocialButterflies and only return the `id`
     * const reviewSocialButterflyWithIdOnly = await prisma.reviewSocialButterfly.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewSocialButterflyUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewSocialButterflyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewSocialButterfly.
     * @param {ReviewSocialButterflyUpsertArgs} args - Arguments to update or create a ReviewSocialButterfly.
     * @example
     * // Update or create a ReviewSocialButterfly
     * const reviewSocialButterfly = await prisma.reviewSocialButterfly.upsert({
     *   create: {
     *     // ... data to create a ReviewSocialButterfly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewSocialButterfly we want to update
     *   }
     * })
     */
    upsert<T extends ReviewSocialButterflyUpsertArgs>(args: SelectSubset<T, ReviewSocialButterflyUpsertArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewSocialButterflyCountArgs} args - Arguments to filter ReviewSocialButterflies to count.
     * @example
     * // Count the number of ReviewSocialButterflies
     * const count = await prisma.reviewSocialButterfly.count({
     *   where: {
     *     // ... the filter for the ReviewSocialButterflies we want to count
     *   }
     * })
    **/
    count<T extends ReviewSocialButterflyCountArgs>(
      args?: Subset<T, ReviewSocialButterflyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewSocialButterflyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewSocialButterflyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewSocialButterflyAggregateArgs>(args: Subset<T, ReviewSocialButterflyAggregateArgs>): Prisma.PrismaPromise<GetReviewSocialButterflyAggregateType<T>>

    /**
     * Group by ReviewSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewSocialButterflyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewSocialButterflyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewSocialButterflyGroupByArgs['orderBy'] }
        : { orderBy?: ReviewSocialButterflyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewSocialButterflyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewSocialButterflyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewSocialButterfly model
   */
  readonly fields: ReviewSocialButterflyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewSocialButterfly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewSocialButterflyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterflyDefaultArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends EventSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventSocialButterflyDefaultArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reports<T extends ReviewSocialButterfly$reportsArgs<ExtArgs> = {}>(args?: Subset<T, ReviewSocialButterfly$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewSocialButterfly model
   */ 
  interface ReviewSocialButterflyFieldRefs {
    readonly id: FieldRef<"ReviewSocialButterfly", 'String'>
    readonly eventId: FieldRef<"ReviewSocialButterfly", 'String'>
    readonly userId: FieldRef<"ReviewSocialButterfly", 'String'>
    readonly rating: FieldRef<"ReviewSocialButterfly", 'Int'>
    readonly comment: FieldRef<"ReviewSocialButterfly", 'String'>
    readonly validated: FieldRef<"ReviewSocialButterfly", 'Boolean'>
    readonly createdAt: FieldRef<"ReviewSocialButterfly", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReviewSocialButterfly findUnique
   */
  export type ReviewSocialButterflyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReviewSocialButterfly to fetch.
     */
    where: ReviewSocialButterflyWhereUniqueInput
  }

  /**
   * ReviewSocialButterfly findUniqueOrThrow
   */
  export type ReviewSocialButterflyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReviewSocialButterfly to fetch.
     */
    where: ReviewSocialButterflyWhereUniqueInput
  }

  /**
   * ReviewSocialButterfly findFirst
   */
  export type ReviewSocialButterflyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReviewSocialButterfly to fetch.
     */
    where?: ReviewSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewSocialButterflies to fetch.
     */
    orderBy?: ReviewSocialButterflyOrderByWithRelationInput | ReviewSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewSocialButterflies.
     */
    cursor?: ReviewSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewSocialButterflies.
     */
    distinct?: ReviewSocialButterflyScalarFieldEnum | ReviewSocialButterflyScalarFieldEnum[]
  }

  /**
   * ReviewSocialButterfly findFirstOrThrow
   */
  export type ReviewSocialButterflyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReviewSocialButterfly to fetch.
     */
    where?: ReviewSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewSocialButterflies to fetch.
     */
    orderBy?: ReviewSocialButterflyOrderByWithRelationInput | ReviewSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewSocialButterflies.
     */
    cursor?: ReviewSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewSocialButterflies.
     */
    distinct?: ReviewSocialButterflyScalarFieldEnum | ReviewSocialButterflyScalarFieldEnum[]
  }

  /**
   * ReviewSocialButterfly findMany
   */
  export type ReviewSocialButterflyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReviewSocialButterflies to fetch.
     */
    where?: ReviewSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewSocialButterflies to fetch.
     */
    orderBy?: ReviewSocialButterflyOrderByWithRelationInput | ReviewSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewSocialButterflies.
     */
    cursor?: ReviewSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewSocialButterflies.
     */
    skip?: number
    distinct?: ReviewSocialButterflyScalarFieldEnum | ReviewSocialButterflyScalarFieldEnum[]
  }

  /**
   * ReviewSocialButterfly create
   */
  export type ReviewSocialButterflyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewSocialButterfly.
     */
    data: XOR<ReviewSocialButterflyCreateInput, ReviewSocialButterflyUncheckedCreateInput>
  }

  /**
   * ReviewSocialButterfly createMany
   */
  export type ReviewSocialButterflyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewSocialButterflies.
     */
    data: ReviewSocialButterflyCreateManyInput | ReviewSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewSocialButterfly createManyAndReturn
   */
  export type ReviewSocialButterflyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewSocialButterflies.
     */
    data: ReviewSocialButterflyCreateManyInput | ReviewSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewSocialButterfly update
   */
  export type ReviewSocialButterflyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewSocialButterfly.
     */
    data: XOR<ReviewSocialButterflyUpdateInput, ReviewSocialButterflyUncheckedUpdateInput>
    /**
     * Choose, which ReviewSocialButterfly to update.
     */
    where: ReviewSocialButterflyWhereUniqueInput
  }

  /**
   * ReviewSocialButterfly updateMany
   */
  export type ReviewSocialButterflyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewSocialButterflies.
     */
    data: XOR<ReviewSocialButterflyUpdateManyMutationInput, ReviewSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which ReviewSocialButterflies to update
     */
    where?: ReviewSocialButterflyWhereInput
    /**
     * Limit how many ReviewSocialButterflies to update.
     */
    limit?: number
  }

  /**
   * ReviewSocialButterfly updateManyAndReturn
   */
  export type ReviewSocialButterflyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to update ReviewSocialButterflies.
     */
    data: XOR<ReviewSocialButterflyUpdateManyMutationInput, ReviewSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which ReviewSocialButterflies to update
     */
    where?: ReviewSocialButterflyWhereInput
    /**
     * Limit how many ReviewSocialButterflies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewSocialButterfly upsert
   */
  export type ReviewSocialButterflyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewSocialButterfly to update in case it exists.
     */
    where: ReviewSocialButterflyWhereUniqueInput
    /**
     * In case the ReviewSocialButterfly found by the `where` argument doesn't exist, create a new ReviewSocialButterfly with this data.
     */
    create: XOR<ReviewSocialButterflyCreateInput, ReviewSocialButterflyUncheckedCreateInput>
    /**
     * In case the ReviewSocialButterfly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewSocialButterflyUpdateInput, ReviewSocialButterflyUncheckedUpdateInput>
  }

  /**
   * ReviewSocialButterfly delete
   */
  export type ReviewSocialButterflyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter which ReviewSocialButterfly to delete.
     */
    where: ReviewSocialButterflyWhereUniqueInput
  }

  /**
   * ReviewSocialButterfly deleteMany
   */
  export type ReviewSocialButterflyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewSocialButterflies to delete
     */
    where?: ReviewSocialButterflyWhereInput
    /**
     * Limit how many ReviewSocialButterflies to delete.
     */
    limit?: number
  }

  /**
   * ReviewSocialButterfly.reports
   */
  export type ReviewSocialButterfly$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    where?: ReportSocialButterflyWhereInput
    orderBy?: ReportSocialButterflyOrderByWithRelationInput | ReportSocialButterflyOrderByWithRelationInput[]
    cursor?: ReportSocialButterflyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportSocialButterflyScalarFieldEnum | ReportSocialButterflyScalarFieldEnum[]
  }

  /**
   * ReviewSocialButterfly without action
   */
  export type ReviewSocialButterflyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
  }


  /**
   * Model LikeSocialButterfly
   */

  export type AggregateLikeSocialButterfly = {
    _count: LikeSocialButterflyCountAggregateOutputType | null
    _min: LikeSocialButterflyMinAggregateOutputType | null
    _max: LikeSocialButterflyMaxAggregateOutputType | null
  }

  export type LikeSocialButterflyMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeSocialButterflyMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LikeSocialButterflyCountAggregateOutputType = {
    id: number
    eventId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LikeSocialButterflyMinAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeSocialButterflyMaxAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    createdAt?: true
  }

  export type LikeSocialButterflyCountAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LikeSocialButterflyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeSocialButterfly to aggregate.
     */
    where?: LikeSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeSocialButterflies to fetch.
     */
    orderBy?: LikeSocialButterflyOrderByWithRelationInput | LikeSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikeSocialButterflies
    **/
    _count?: true | LikeSocialButterflyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeSocialButterflyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeSocialButterflyMaxAggregateInputType
  }

  export type GetLikeSocialButterflyAggregateType<T extends LikeSocialButterflyAggregateArgs> = {
        [P in keyof T & keyof AggregateLikeSocialButterfly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikeSocialButterfly[P]>
      : GetScalarType<T[P], AggregateLikeSocialButterfly[P]>
  }




  export type LikeSocialButterflyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeSocialButterflyWhereInput
    orderBy?: LikeSocialButterflyOrderByWithAggregationInput | LikeSocialButterflyOrderByWithAggregationInput[]
    by: LikeSocialButterflyScalarFieldEnum[] | LikeSocialButterflyScalarFieldEnum
    having?: LikeSocialButterflyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeSocialButterflyCountAggregateInputType | true
    _min?: LikeSocialButterflyMinAggregateInputType
    _max?: LikeSocialButterflyMaxAggregateInputType
  }

  export type LikeSocialButterflyGroupByOutputType = {
    id: string
    eventId: string
    userId: string
    createdAt: Date
    _count: LikeSocialButterflyCountAggregateOutputType | null
    _min: LikeSocialButterflyMinAggregateOutputType | null
    _max: LikeSocialButterflyMaxAggregateOutputType | null
  }

  type GetLikeSocialButterflyGroupByPayload<T extends LikeSocialButterflyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeSocialButterflyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeSocialButterflyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeSocialButterflyGroupByOutputType[P]>
            : GetScalarType<T[P], LikeSocialButterflyGroupByOutputType[P]>
        }
      >
    >


  export type LikeSocialButterflySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeSocialButterfly"]>

  export type LikeSocialButterflySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeSocialButterfly"]>

  export type LikeSocialButterflySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likeSocialButterfly"]>

  export type LikeSocialButterflySelectScalar = {
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LikeSocialButterflyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "userId" | "createdAt", ExtArgs["result"]["likeSocialButterfly"]>
  export type LikeSocialButterflyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }
  export type LikeSocialButterflyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }
  export type LikeSocialButterflyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }

  export type $LikeSocialButterflyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LikeSocialButterfly"
    objects: {
      user: Prisma.$UserSocialButterflyPayload<ExtArgs>
      event: Prisma.$EventSocialButterflyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["likeSocialButterfly"]>
    composites: {}
  }

  type LikeSocialButterflyGetPayload<S extends boolean | null | undefined | LikeSocialButterflyDefaultArgs> = $Result.GetResult<Prisma.$LikeSocialButterflyPayload, S>

  type LikeSocialButterflyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LikeSocialButterflyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LikeSocialButterflyCountAggregateInputType | true
    }

  export interface LikeSocialButterflyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LikeSocialButterfly'], meta: { name: 'LikeSocialButterfly' } }
    /**
     * Find zero or one LikeSocialButterfly that matches the filter.
     * @param {LikeSocialButterflyFindUniqueArgs} args - Arguments to find a LikeSocialButterfly
     * @example
     * // Get one LikeSocialButterfly
     * const likeSocialButterfly = await prisma.likeSocialButterfly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeSocialButterflyFindUniqueArgs>(args: SelectSubset<T, LikeSocialButterflyFindUniqueArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LikeSocialButterfly that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LikeSocialButterflyFindUniqueOrThrowArgs} args - Arguments to find a LikeSocialButterfly
     * @example
     * // Get one LikeSocialButterfly
     * const likeSocialButterfly = await prisma.likeSocialButterfly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeSocialButterflyFindUniqueOrThrowArgs>(args: SelectSubset<T, LikeSocialButterflyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LikeSocialButterfly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeSocialButterflyFindFirstArgs} args - Arguments to find a LikeSocialButterfly
     * @example
     * // Get one LikeSocialButterfly
     * const likeSocialButterfly = await prisma.likeSocialButterfly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeSocialButterflyFindFirstArgs>(args?: SelectSubset<T, LikeSocialButterflyFindFirstArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LikeSocialButterfly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeSocialButterflyFindFirstOrThrowArgs} args - Arguments to find a LikeSocialButterfly
     * @example
     * // Get one LikeSocialButterfly
     * const likeSocialButterfly = await prisma.likeSocialButterfly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeSocialButterflyFindFirstOrThrowArgs>(args?: SelectSubset<T, LikeSocialButterflyFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LikeSocialButterflies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeSocialButterflyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikeSocialButterflies
     * const likeSocialButterflies = await prisma.likeSocialButterfly.findMany()
     * 
     * // Get first 10 LikeSocialButterflies
     * const likeSocialButterflies = await prisma.likeSocialButterfly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeSocialButterflyWithIdOnly = await prisma.likeSocialButterfly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikeSocialButterflyFindManyArgs>(args?: SelectSubset<T, LikeSocialButterflyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LikeSocialButterfly.
     * @param {LikeSocialButterflyCreateArgs} args - Arguments to create a LikeSocialButterfly.
     * @example
     * // Create one LikeSocialButterfly
     * const LikeSocialButterfly = await prisma.likeSocialButterfly.create({
     *   data: {
     *     // ... data to create a LikeSocialButterfly
     *   }
     * })
     * 
     */
    create<T extends LikeSocialButterflyCreateArgs>(args: SelectSubset<T, LikeSocialButterflyCreateArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LikeSocialButterflies.
     * @param {LikeSocialButterflyCreateManyArgs} args - Arguments to create many LikeSocialButterflies.
     * @example
     * // Create many LikeSocialButterflies
     * const likeSocialButterfly = await prisma.likeSocialButterfly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikeSocialButterflyCreateManyArgs>(args?: SelectSubset<T, LikeSocialButterflyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LikeSocialButterflies and returns the data saved in the database.
     * @param {LikeSocialButterflyCreateManyAndReturnArgs} args - Arguments to create many LikeSocialButterflies.
     * @example
     * // Create many LikeSocialButterflies
     * const likeSocialButterfly = await prisma.likeSocialButterfly.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LikeSocialButterflies and only return the `id`
     * const likeSocialButterflyWithIdOnly = await prisma.likeSocialButterfly.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikeSocialButterflyCreateManyAndReturnArgs>(args?: SelectSubset<T, LikeSocialButterflyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LikeSocialButterfly.
     * @param {LikeSocialButterflyDeleteArgs} args - Arguments to delete one LikeSocialButterfly.
     * @example
     * // Delete one LikeSocialButterfly
     * const LikeSocialButterfly = await prisma.likeSocialButterfly.delete({
     *   where: {
     *     // ... filter to delete one LikeSocialButterfly
     *   }
     * })
     * 
     */
    delete<T extends LikeSocialButterflyDeleteArgs>(args: SelectSubset<T, LikeSocialButterflyDeleteArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LikeSocialButterfly.
     * @param {LikeSocialButterflyUpdateArgs} args - Arguments to update one LikeSocialButterfly.
     * @example
     * // Update one LikeSocialButterfly
     * const likeSocialButterfly = await prisma.likeSocialButterfly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikeSocialButterflyUpdateArgs>(args: SelectSubset<T, LikeSocialButterflyUpdateArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LikeSocialButterflies.
     * @param {LikeSocialButterflyDeleteManyArgs} args - Arguments to filter LikeSocialButterflies to delete.
     * @example
     * // Delete a few LikeSocialButterflies
     * const { count } = await prisma.likeSocialButterfly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikeSocialButterflyDeleteManyArgs>(args?: SelectSubset<T, LikeSocialButterflyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeSocialButterflyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikeSocialButterflies
     * const likeSocialButterfly = await prisma.likeSocialButterfly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikeSocialButterflyUpdateManyArgs>(args: SelectSubset<T, LikeSocialButterflyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeSocialButterflies and returns the data updated in the database.
     * @param {LikeSocialButterflyUpdateManyAndReturnArgs} args - Arguments to update many LikeSocialButterflies.
     * @example
     * // Update many LikeSocialButterflies
     * const likeSocialButterfly = await prisma.likeSocialButterfly.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LikeSocialButterflies and only return the `id`
     * const likeSocialButterflyWithIdOnly = await prisma.likeSocialButterfly.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LikeSocialButterflyUpdateManyAndReturnArgs>(args: SelectSubset<T, LikeSocialButterflyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LikeSocialButterfly.
     * @param {LikeSocialButterflyUpsertArgs} args - Arguments to update or create a LikeSocialButterfly.
     * @example
     * // Update or create a LikeSocialButterfly
     * const likeSocialButterfly = await prisma.likeSocialButterfly.upsert({
     *   create: {
     *     // ... data to create a LikeSocialButterfly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikeSocialButterfly we want to update
     *   }
     * })
     */
    upsert<T extends LikeSocialButterflyUpsertArgs>(args: SelectSubset<T, LikeSocialButterflyUpsertArgs<ExtArgs>>): Prisma__LikeSocialButterflyClient<$Result.GetResult<Prisma.$LikeSocialButterflyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LikeSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeSocialButterflyCountArgs} args - Arguments to filter LikeSocialButterflies to count.
     * @example
     * // Count the number of LikeSocialButterflies
     * const count = await prisma.likeSocialButterfly.count({
     *   where: {
     *     // ... the filter for the LikeSocialButterflies we want to count
     *   }
     * })
    **/
    count<T extends LikeSocialButterflyCountArgs>(
      args?: Subset<T, LikeSocialButterflyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeSocialButterflyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikeSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeSocialButterflyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeSocialButterflyAggregateArgs>(args: Subset<T, LikeSocialButterflyAggregateArgs>): Prisma.PrismaPromise<GetLikeSocialButterflyAggregateType<T>>

    /**
     * Group by LikeSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeSocialButterflyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeSocialButterflyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeSocialButterflyGroupByArgs['orderBy'] }
        : { orderBy?: LikeSocialButterflyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeSocialButterflyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeSocialButterflyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LikeSocialButterfly model
   */
  readonly fields: LikeSocialButterflyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LikeSocialButterfly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeSocialButterflyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterflyDefaultArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends EventSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventSocialButterflyDefaultArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LikeSocialButterfly model
   */ 
  interface LikeSocialButterflyFieldRefs {
    readonly id: FieldRef<"LikeSocialButterfly", 'String'>
    readonly eventId: FieldRef<"LikeSocialButterfly", 'String'>
    readonly userId: FieldRef<"LikeSocialButterfly", 'String'>
    readonly createdAt: FieldRef<"LikeSocialButterfly", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LikeSocialButterfly findUnique
   */
  export type LikeSocialButterflyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which LikeSocialButterfly to fetch.
     */
    where: LikeSocialButterflyWhereUniqueInput
  }

  /**
   * LikeSocialButterfly findUniqueOrThrow
   */
  export type LikeSocialButterflyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which LikeSocialButterfly to fetch.
     */
    where: LikeSocialButterflyWhereUniqueInput
  }

  /**
   * LikeSocialButterfly findFirst
   */
  export type LikeSocialButterflyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which LikeSocialButterfly to fetch.
     */
    where?: LikeSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeSocialButterflies to fetch.
     */
    orderBy?: LikeSocialButterflyOrderByWithRelationInput | LikeSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeSocialButterflies.
     */
    cursor?: LikeSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeSocialButterflies.
     */
    distinct?: LikeSocialButterflyScalarFieldEnum | LikeSocialButterflyScalarFieldEnum[]
  }

  /**
   * LikeSocialButterfly findFirstOrThrow
   */
  export type LikeSocialButterflyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which LikeSocialButterfly to fetch.
     */
    where?: LikeSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeSocialButterflies to fetch.
     */
    orderBy?: LikeSocialButterflyOrderByWithRelationInput | LikeSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeSocialButterflies.
     */
    cursor?: LikeSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeSocialButterflies.
     */
    distinct?: LikeSocialButterflyScalarFieldEnum | LikeSocialButterflyScalarFieldEnum[]
  }

  /**
   * LikeSocialButterfly findMany
   */
  export type LikeSocialButterflyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which LikeSocialButterflies to fetch.
     */
    where?: LikeSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeSocialButterflies to fetch.
     */
    orderBy?: LikeSocialButterflyOrderByWithRelationInput | LikeSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikeSocialButterflies.
     */
    cursor?: LikeSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeSocialButterflies.
     */
    skip?: number
    distinct?: LikeSocialButterflyScalarFieldEnum | LikeSocialButterflyScalarFieldEnum[]
  }

  /**
   * LikeSocialButterfly create
   */
  export type LikeSocialButterflyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to create a LikeSocialButterfly.
     */
    data: XOR<LikeSocialButterflyCreateInput, LikeSocialButterflyUncheckedCreateInput>
  }

  /**
   * LikeSocialButterfly createMany
   */
  export type LikeSocialButterflyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LikeSocialButterflies.
     */
    data: LikeSocialButterflyCreateManyInput | LikeSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LikeSocialButterfly createManyAndReturn
   */
  export type LikeSocialButterflyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to create many LikeSocialButterflies.
     */
    data: LikeSocialButterflyCreateManyInput | LikeSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LikeSocialButterfly update
   */
  export type LikeSocialButterflyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to update a LikeSocialButterfly.
     */
    data: XOR<LikeSocialButterflyUpdateInput, LikeSocialButterflyUncheckedUpdateInput>
    /**
     * Choose, which LikeSocialButterfly to update.
     */
    where: LikeSocialButterflyWhereUniqueInput
  }

  /**
   * LikeSocialButterfly updateMany
   */
  export type LikeSocialButterflyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LikeSocialButterflies.
     */
    data: XOR<LikeSocialButterflyUpdateManyMutationInput, LikeSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which LikeSocialButterflies to update
     */
    where?: LikeSocialButterflyWhereInput
    /**
     * Limit how many LikeSocialButterflies to update.
     */
    limit?: number
  }

  /**
   * LikeSocialButterfly updateManyAndReturn
   */
  export type LikeSocialButterflyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to update LikeSocialButterflies.
     */
    data: XOR<LikeSocialButterflyUpdateManyMutationInput, LikeSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which LikeSocialButterflies to update
     */
    where?: LikeSocialButterflyWhereInput
    /**
     * Limit how many LikeSocialButterflies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LikeSocialButterfly upsert
   */
  export type LikeSocialButterflyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * The filter to search for the LikeSocialButterfly to update in case it exists.
     */
    where: LikeSocialButterflyWhereUniqueInput
    /**
     * In case the LikeSocialButterfly found by the `where` argument doesn't exist, create a new LikeSocialButterfly with this data.
     */
    create: XOR<LikeSocialButterflyCreateInput, LikeSocialButterflyUncheckedCreateInput>
    /**
     * In case the LikeSocialButterfly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeSocialButterflyUpdateInput, LikeSocialButterflyUncheckedUpdateInput>
  }

  /**
   * LikeSocialButterfly delete
   */
  export type LikeSocialButterflyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter which LikeSocialButterfly to delete.
     */
    where: LikeSocialButterflyWhereUniqueInput
  }

  /**
   * LikeSocialButterfly deleteMany
   */
  export type LikeSocialButterflyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LikeSocialButterflies to delete
     */
    where?: LikeSocialButterflyWhereInput
    /**
     * Limit how many LikeSocialButterflies to delete.
     */
    limit?: number
  }

  /**
   * LikeSocialButterfly without action
   */
  export type LikeSocialButterflyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LikeSocialButterfly
     */
    select?: LikeSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LikeSocialButterfly
     */
    omit?: LikeSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeSocialButterflyInclude<ExtArgs> | null
  }


  /**
   * Model BookmarkSocialButterfly
   */

  export type AggregateBookmarkSocialButterfly = {
    _count: BookmarkSocialButterflyCountAggregateOutputType | null
    _min: BookmarkSocialButterflyMinAggregateOutputType | null
    _max: BookmarkSocialButterflyMaxAggregateOutputType | null
  }

  export type BookmarkSocialButterflyMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BookmarkSocialButterflyMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type BookmarkSocialButterflyCountAggregateOutputType = {
    id: number
    eventId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type BookmarkSocialButterflyMinAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    createdAt?: true
  }

  export type BookmarkSocialButterflyMaxAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    createdAt?: true
  }

  export type BookmarkSocialButterflyCountAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type BookmarkSocialButterflyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmarkSocialButterfly to aggregate.
     */
    where?: BookmarkSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkSocialButterflies to fetch.
     */
    orderBy?: BookmarkSocialButterflyOrderByWithRelationInput | BookmarkSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmarkSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookmarkSocialButterflies
    **/
    _count?: true | BookmarkSocialButterflyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkSocialButterflyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkSocialButterflyMaxAggregateInputType
  }

  export type GetBookmarkSocialButterflyAggregateType<T extends BookmarkSocialButterflyAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmarkSocialButterfly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmarkSocialButterfly[P]>
      : GetScalarType<T[P], AggregateBookmarkSocialButterfly[P]>
  }




  export type BookmarkSocialButterflyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkSocialButterflyWhereInput
    orderBy?: BookmarkSocialButterflyOrderByWithAggregationInput | BookmarkSocialButterflyOrderByWithAggregationInput[]
    by: BookmarkSocialButterflyScalarFieldEnum[] | BookmarkSocialButterflyScalarFieldEnum
    having?: BookmarkSocialButterflyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkSocialButterflyCountAggregateInputType | true
    _min?: BookmarkSocialButterflyMinAggregateInputType
    _max?: BookmarkSocialButterflyMaxAggregateInputType
  }

  export type BookmarkSocialButterflyGroupByOutputType = {
    id: string
    eventId: string
    userId: string
    createdAt: Date
    _count: BookmarkSocialButterflyCountAggregateOutputType | null
    _min: BookmarkSocialButterflyMinAggregateOutputType | null
    _max: BookmarkSocialButterflyMaxAggregateOutputType | null
  }

  type GetBookmarkSocialButterflyGroupByPayload<T extends BookmarkSocialButterflyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkSocialButterflyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkSocialButterflyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkSocialButterflyGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkSocialButterflyGroupByOutputType[P]>
        }
      >
    >


  export type BookmarkSocialButterflySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkSocialButterfly"]>

  export type BookmarkSocialButterflySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkSocialButterfly"]>

  export type BookmarkSocialButterflySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmarkSocialButterfly"]>

  export type BookmarkSocialButterflySelectScalar = {
    id?: boolean
    eventId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type BookmarkSocialButterflyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "userId" | "createdAt", ExtArgs["result"]["bookmarkSocialButterfly"]>
  export type BookmarkSocialButterflyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }
  export type BookmarkSocialButterflyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }
  export type BookmarkSocialButterflyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | EventSocialButterflyDefaultArgs<ExtArgs>
  }

  export type $BookmarkSocialButterflyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookmarkSocialButterfly"
    objects: {
      user: Prisma.$UserSocialButterflyPayload<ExtArgs>
      event: Prisma.$EventSocialButterflyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["bookmarkSocialButterfly"]>
    composites: {}
  }

  type BookmarkSocialButterflyGetPayload<S extends boolean | null | undefined | BookmarkSocialButterflyDefaultArgs> = $Result.GetResult<Prisma.$BookmarkSocialButterflyPayload, S>

  type BookmarkSocialButterflyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookmarkSocialButterflyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookmarkSocialButterflyCountAggregateInputType | true
    }

  export interface BookmarkSocialButterflyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookmarkSocialButterfly'], meta: { name: 'BookmarkSocialButterfly' } }
    /**
     * Find zero or one BookmarkSocialButterfly that matches the filter.
     * @param {BookmarkSocialButterflyFindUniqueArgs} args - Arguments to find a BookmarkSocialButterfly
     * @example
     * // Get one BookmarkSocialButterfly
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookmarkSocialButterflyFindUniqueArgs>(args: SelectSubset<T, BookmarkSocialButterflyFindUniqueArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookmarkSocialButterfly that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookmarkSocialButterflyFindUniqueOrThrowArgs} args - Arguments to find a BookmarkSocialButterfly
     * @example
     * // Get one BookmarkSocialButterfly
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookmarkSocialButterflyFindUniqueOrThrowArgs>(args: SelectSubset<T, BookmarkSocialButterflyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmarkSocialButterfly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkSocialButterflyFindFirstArgs} args - Arguments to find a BookmarkSocialButterfly
     * @example
     * // Get one BookmarkSocialButterfly
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookmarkSocialButterflyFindFirstArgs>(args?: SelectSubset<T, BookmarkSocialButterflyFindFirstArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookmarkSocialButterfly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkSocialButterflyFindFirstOrThrowArgs} args - Arguments to find a BookmarkSocialButterfly
     * @example
     * // Get one BookmarkSocialButterfly
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookmarkSocialButterflyFindFirstOrThrowArgs>(args?: SelectSubset<T, BookmarkSocialButterflyFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookmarkSocialButterflies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkSocialButterflyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookmarkSocialButterflies
     * const bookmarkSocialButterflies = await prisma.bookmarkSocialButterfly.findMany()
     * 
     * // Get first 10 BookmarkSocialButterflies
     * const bookmarkSocialButterflies = await prisma.bookmarkSocialButterfly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmarkSocialButterflyWithIdOnly = await prisma.bookmarkSocialButterfly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookmarkSocialButterflyFindManyArgs>(args?: SelectSubset<T, BookmarkSocialButterflyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookmarkSocialButterfly.
     * @param {BookmarkSocialButterflyCreateArgs} args - Arguments to create a BookmarkSocialButterfly.
     * @example
     * // Create one BookmarkSocialButterfly
     * const BookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.create({
     *   data: {
     *     // ... data to create a BookmarkSocialButterfly
     *   }
     * })
     * 
     */
    create<T extends BookmarkSocialButterflyCreateArgs>(args: SelectSubset<T, BookmarkSocialButterflyCreateArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookmarkSocialButterflies.
     * @param {BookmarkSocialButterflyCreateManyArgs} args - Arguments to create many BookmarkSocialButterflies.
     * @example
     * // Create many BookmarkSocialButterflies
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookmarkSocialButterflyCreateManyArgs>(args?: SelectSubset<T, BookmarkSocialButterflyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookmarkSocialButterflies and returns the data saved in the database.
     * @param {BookmarkSocialButterflyCreateManyAndReturnArgs} args - Arguments to create many BookmarkSocialButterflies.
     * @example
     * // Create many BookmarkSocialButterflies
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookmarkSocialButterflies and only return the `id`
     * const bookmarkSocialButterflyWithIdOnly = await prisma.bookmarkSocialButterfly.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookmarkSocialButterflyCreateManyAndReturnArgs>(args?: SelectSubset<T, BookmarkSocialButterflyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookmarkSocialButterfly.
     * @param {BookmarkSocialButterflyDeleteArgs} args - Arguments to delete one BookmarkSocialButterfly.
     * @example
     * // Delete one BookmarkSocialButterfly
     * const BookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.delete({
     *   where: {
     *     // ... filter to delete one BookmarkSocialButterfly
     *   }
     * })
     * 
     */
    delete<T extends BookmarkSocialButterflyDeleteArgs>(args: SelectSubset<T, BookmarkSocialButterflyDeleteArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookmarkSocialButterfly.
     * @param {BookmarkSocialButterflyUpdateArgs} args - Arguments to update one BookmarkSocialButterfly.
     * @example
     * // Update one BookmarkSocialButterfly
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookmarkSocialButterflyUpdateArgs>(args: SelectSubset<T, BookmarkSocialButterflyUpdateArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookmarkSocialButterflies.
     * @param {BookmarkSocialButterflyDeleteManyArgs} args - Arguments to filter BookmarkSocialButterflies to delete.
     * @example
     * // Delete a few BookmarkSocialButterflies
     * const { count } = await prisma.bookmarkSocialButterfly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookmarkSocialButterflyDeleteManyArgs>(args?: SelectSubset<T, BookmarkSocialButterflyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmarkSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkSocialButterflyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookmarkSocialButterflies
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookmarkSocialButterflyUpdateManyArgs>(args: SelectSubset<T, BookmarkSocialButterflyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookmarkSocialButterflies and returns the data updated in the database.
     * @param {BookmarkSocialButterflyUpdateManyAndReturnArgs} args - Arguments to update many BookmarkSocialButterflies.
     * @example
     * // Update many BookmarkSocialButterflies
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookmarkSocialButterflies and only return the `id`
     * const bookmarkSocialButterflyWithIdOnly = await prisma.bookmarkSocialButterfly.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookmarkSocialButterflyUpdateManyAndReturnArgs>(args: SelectSubset<T, BookmarkSocialButterflyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookmarkSocialButterfly.
     * @param {BookmarkSocialButterflyUpsertArgs} args - Arguments to update or create a BookmarkSocialButterfly.
     * @example
     * // Update or create a BookmarkSocialButterfly
     * const bookmarkSocialButterfly = await prisma.bookmarkSocialButterfly.upsert({
     *   create: {
     *     // ... data to create a BookmarkSocialButterfly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookmarkSocialButterfly we want to update
     *   }
     * })
     */
    upsert<T extends BookmarkSocialButterflyUpsertArgs>(args: SelectSubset<T, BookmarkSocialButterflyUpsertArgs<ExtArgs>>): Prisma__BookmarkSocialButterflyClient<$Result.GetResult<Prisma.$BookmarkSocialButterflyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookmarkSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkSocialButterflyCountArgs} args - Arguments to filter BookmarkSocialButterflies to count.
     * @example
     * // Count the number of BookmarkSocialButterflies
     * const count = await prisma.bookmarkSocialButterfly.count({
     *   where: {
     *     // ... the filter for the BookmarkSocialButterflies we want to count
     *   }
     * })
    **/
    count<T extends BookmarkSocialButterflyCountArgs>(
      args?: Subset<T, BookmarkSocialButterflyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkSocialButterflyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookmarkSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkSocialButterflyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkSocialButterflyAggregateArgs>(args: Subset<T, BookmarkSocialButterflyAggregateArgs>): Prisma.PrismaPromise<GetBookmarkSocialButterflyAggregateType<T>>

    /**
     * Group by BookmarkSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkSocialButterflyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmarkSocialButterflyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmarkSocialButterflyGroupByArgs['orderBy'] }
        : { orderBy?: BookmarkSocialButterflyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmarkSocialButterflyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkSocialButterflyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookmarkSocialButterfly model
   */
  readonly fields: BookmarkSocialButterflyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookmarkSocialButterfly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmarkSocialButterflyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterflyDefaultArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends EventSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventSocialButterflyDefaultArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookmarkSocialButterfly model
   */ 
  interface BookmarkSocialButterflyFieldRefs {
    readonly id: FieldRef<"BookmarkSocialButterfly", 'String'>
    readonly eventId: FieldRef<"BookmarkSocialButterfly", 'String'>
    readonly userId: FieldRef<"BookmarkSocialButterfly", 'String'>
    readonly createdAt: FieldRef<"BookmarkSocialButterfly", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookmarkSocialButterfly findUnique
   */
  export type BookmarkSocialButterflyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkSocialButterfly to fetch.
     */
    where: BookmarkSocialButterflyWhereUniqueInput
  }

  /**
   * BookmarkSocialButterfly findUniqueOrThrow
   */
  export type BookmarkSocialButterflyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkSocialButterfly to fetch.
     */
    where: BookmarkSocialButterflyWhereUniqueInput
  }

  /**
   * BookmarkSocialButterfly findFirst
   */
  export type BookmarkSocialButterflyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkSocialButterfly to fetch.
     */
    where?: BookmarkSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkSocialButterflies to fetch.
     */
    orderBy?: BookmarkSocialButterflyOrderByWithRelationInput | BookmarkSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmarkSocialButterflies.
     */
    cursor?: BookmarkSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmarkSocialButterflies.
     */
    distinct?: BookmarkSocialButterflyScalarFieldEnum | BookmarkSocialButterflyScalarFieldEnum[]
  }

  /**
   * BookmarkSocialButterfly findFirstOrThrow
   */
  export type BookmarkSocialButterflyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkSocialButterfly to fetch.
     */
    where?: BookmarkSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkSocialButterflies to fetch.
     */
    orderBy?: BookmarkSocialButterflyOrderByWithRelationInput | BookmarkSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookmarkSocialButterflies.
     */
    cursor?: BookmarkSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookmarkSocialButterflies.
     */
    distinct?: BookmarkSocialButterflyScalarFieldEnum | BookmarkSocialButterflyScalarFieldEnum[]
  }

  /**
   * BookmarkSocialButterfly findMany
   */
  export type BookmarkSocialButterflyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which BookmarkSocialButterflies to fetch.
     */
    where?: BookmarkSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookmarkSocialButterflies to fetch.
     */
    orderBy?: BookmarkSocialButterflyOrderByWithRelationInput | BookmarkSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookmarkSocialButterflies.
     */
    cursor?: BookmarkSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookmarkSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookmarkSocialButterflies.
     */
    skip?: number
    distinct?: BookmarkSocialButterflyScalarFieldEnum | BookmarkSocialButterflyScalarFieldEnum[]
  }

  /**
   * BookmarkSocialButterfly create
   */
  export type BookmarkSocialButterflyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to create a BookmarkSocialButterfly.
     */
    data: XOR<BookmarkSocialButterflyCreateInput, BookmarkSocialButterflyUncheckedCreateInput>
  }

  /**
   * BookmarkSocialButterfly createMany
   */
  export type BookmarkSocialButterflyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookmarkSocialButterflies.
     */
    data: BookmarkSocialButterflyCreateManyInput | BookmarkSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookmarkSocialButterfly createManyAndReturn
   */
  export type BookmarkSocialButterflyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to create many BookmarkSocialButterflies.
     */
    data: BookmarkSocialButterflyCreateManyInput | BookmarkSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmarkSocialButterfly update
   */
  export type BookmarkSocialButterflyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to update a BookmarkSocialButterfly.
     */
    data: XOR<BookmarkSocialButterflyUpdateInput, BookmarkSocialButterflyUncheckedUpdateInput>
    /**
     * Choose, which BookmarkSocialButterfly to update.
     */
    where: BookmarkSocialButterflyWhereUniqueInput
  }

  /**
   * BookmarkSocialButterfly updateMany
   */
  export type BookmarkSocialButterflyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookmarkSocialButterflies.
     */
    data: XOR<BookmarkSocialButterflyUpdateManyMutationInput, BookmarkSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which BookmarkSocialButterflies to update
     */
    where?: BookmarkSocialButterflyWhereInput
    /**
     * Limit how many BookmarkSocialButterflies to update.
     */
    limit?: number
  }

  /**
   * BookmarkSocialButterfly updateManyAndReturn
   */
  export type BookmarkSocialButterflyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to update BookmarkSocialButterflies.
     */
    data: XOR<BookmarkSocialButterflyUpdateManyMutationInput, BookmarkSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which BookmarkSocialButterflies to update
     */
    where?: BookmarkSocialButterflyWhereInput
    /**
     * Limit how many BookmarkSocialButterflies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookmarkSocialButterfly upsert
   */
  export type BookmarkSocialButterflyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * The filter to search for the BookmarkSocialButterfly to update in case it exists.
     */
    where: BookmarkSocialButterflyWhereUniqueInput
    /**
     * In case the BookmarkSocialButterfly found by the `where` argument doesn't exist, create a new BookmarkSocialButterfly with this data.
     */
    create: XOR<BookmarkSocialButterflyCreateInput, BookmarkSocialButterflyUncheckedCreateInput>
    /**
     * In case the BookmarkSocialButterfly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmarkSocialButterflyUpdateInput, BookmarkSocialButterflyUncheckedUpdateInput>
  }

  /**
   * BookmarkSocialButterfly delete
   */
  export type BookmarkSocialButterflyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter which BookmarkSocialButterfly to delete.
     */
    where: BookmarkSocialButterflyWhereUniqueInput
  }

  /**
   * BookmarkSocialButterfly deleteMany
   */
  export type BookmarkSocialButterflyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookmarkSocialButterflies to delete
     */
    where?: BookmarkSocialButterflyWhereInput
    /**
     * Limit how many BookmarkSocialButterflies to delete.
     */
    limit?: number
  }

  /**
   * BookmarkSocialButterfly without action
   */
  export type BookmarkSocialButterflyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookmarkSocialButterfly
     */
    select?: BookmarkSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookmarkSocialButterfly
     */
    omit?: BookmarkSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkSocialButterflyInclude<ExtArgs> | null
  }


  /**
   * Model ReportSocialButterfly
   */

  export type AggregateReportSocialButterfly = {
    _count: ReportSocialButterflyCountAggregateOutputType | null
    _min: ReportSocialButterflyMinAggregateOutputType | null
    _max: ReportSocialButterflyMaxAggregateOutputType | null
  }

  export type ReportSocialButterflyMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    reviewId: string | null
    userId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportSocialButterflyMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    reviewId: string | null
    userId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportSocialButterflyCountAggregateOutputType = {
    id: number
    eventId: number
    reviewId: number
    userId: number
    reason: number
    createdAt: number
    _all: number
  }


  export type ReportSocialButterflyMinAggregateInputType = {
    id?: true
    eventId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportSocialButterflyMaxAggregateInputType = {
    id?: true
    eventId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportSocialButterflyCountAggregateInputType = {
    id?: true
    eventId?: true
    reviewId?: true
    userId?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type ReportSocialButterflyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportSocialButterfly to aggregate.
     */
    where?: ReportSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSocialButterflies to fetch.
     */
    orderBy?: ReportSocialButterflyOrderByWithRelationInput | ReportSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportSocialButterflies
    **/
    _count?: true | ReportSocialButterflyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportSocialButterflyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportSocialButterflyMaxAggregateInputType
  }

  export type GetReportSocialButterflyAggregateType<T extends ReportSocialButterflyAggregateArgs> = {
        [P in keyof T & keyof AggregateReportSocialButterfly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportSocialButterfly[P]>
      : GetScalarType<T[P], AggregateReportSocialButterfly[P]>
  }




  export type ReportSocialButterflyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSocialButterflyWhereInput
    orderBy?: ReportSocialButterflyOrderByWithAggregationInput | ReportSocialButterflyOrderByWithAggregationInput[]
    by: ReportSocialButterflyScalarFieldEnum[] | ReportSocialButterflyScalarFieldEnum
    having?: ReportSocialButterflyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportSocialButterflyCountAggregateInputType | true
    _min?: ReportSocialButterflyMinAggregateInputType
    _max?: ReportSocialButterflyMaxAggregateInputType
  }

  export type ReportSocialButterflyGroupByOutputType = {
    id: string
    eventId: string | null
    reviewId: string | null
    userId: string
    reason: string
    createdAt: Date
    _count: ReportSocialButterflyCountAggregateOutputType | null
    _min: ReportSocialButterflyMinAggregateOutputType | null
    _max: ReportSocialButterflyMaxAggregateOutputType | null
  }

  type GetReportSocialButterflyGroupByPayload<T extends ReportSocialButterflyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportSocialButterflyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportSocialButterflyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportSocialButterflyGroupByOutputType[P]>
            : GetScalarType<T[P], ReportSocialButterflyGroupByOutputType[P]>
        }
      >
    >


  export type ReportSocialButterflySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | ReportSocialButterfly$eventArgs<ExtArgs>
    review?: boolean | ReportSocialButterfly$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportSocialButterfly"]>

  export type ReportSocialButterflySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | ReportSocialButterfly$eventArgs<ExtArgs>
    review?: boolean | ReportSocialButterfly$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportSocialButterfly"]>

  export type ReportSocialButterflySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | ReportSocialButterfly$eventArgs<ExtArgs>
    review?: boolean | ReportSocialButterfly$reviewArgs<ExtArgs>
  }, ExtArgs["result"]["reportSocialButterfly"]>

  export type ReportSocialButterflySelectScalar = {
    id?: boolean
    eventId?: boolean
    reviewId?: boolean
    userId?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type ReportSocialButterflyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "reviewId" | "userId" | "reason" | "createdAt", ExtArgs["result"]["reportSocialButterfly"]>
  export type ReportSocialButterflyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | ReportSocialButterfly$eventArgs<ExtArgs>
    review?: boolean | ReportSocialButterfly$reviewArgs<ExtArgs>
  }
  export type ReportSocialButterflyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | ReportSocialButterfly$eventArgs<ExtArgs>
    review?: boolean | ReportSocialButterfly$reviewArgs<ExtArgs>
  }
  export type ReportSocialButterflyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserSocialButterflyDefaultArgs<ExtArgs>
    event?: boolean | ReportSocialButterfly$eventArgs<ExtArgs>
    review?: boolean | ReportSocialButterfly$reviewArgs<ExtArgs>
  }

  export type $ReportSocialButterflyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportSocialButterfly"
    objects: {
      user: Prisma.$UserSocialButterflyPayload<ExtArgs>
      event: Prisma.$EventSocialButterflyPayload<ExtArgs> | null
      review: Prisma.$ReviewSocialButterflyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string | null
      reviewId: string | null
      userId: string
      reason: string
      createdAt: Date
    }, ExtArgs["result"]["reportSocialButterfly"]>
    composites: {}
  }

  type ReportSocialButterflyGetPayload<S extends boolean | null | undefined | ReportSocialButterflyDefaultArgs> = $Result.GetResult<Prisma.$ReportSocialButterflyPayload, S>

  type ReportSocialButterflyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportSocialButterflyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportSocialButterflyCountAggregateInputType | true
    }

  export interface ReportSocialButterflyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportSocialButterfly'], meta: { name: 'ReportSocialButterfly' } }
    /**
     * Find zero or one ReportSocialButterfly that matches the filter.
     * @param {ReportSocialButterflyFindUniqueArgs} args - Arguments to find a ReportSocialButterfly
     * @example
     * // Get one ReportSocialButterfly
     * const reportSocialButterfly = await prisma.reportSocialButterfly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportSocialButterflyFindUniqueArgs>(args: SelectSubset<T, ReportSocialButterflyFindUniqueArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportSocialButterfly that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportSocialButterflyFindUniqueOrThrowArgs} args - Arguments to find a ReportSocialButterfly
     * @example
     * // Get one ReportSocialButterfly
     * const reportSocialButterfly = await prisma.reportSocialButterfly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportSocialButterflyFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportSocialButterflyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportSocialButterfly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSocialButterflyFindFirstArgs} args - Arguments to find a ReportSocialButterfly
     * @example
     * // Get one ReportSocialButterfly
     * const reportSocialButterfly = await prisma.reportSocialButterfly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportSocialButterflyFindFirstArgs>(args?: SelectSubset<T, ReportSocialButterflyFindFirstArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportSocialButterfly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSocialButterflyFindFirstOrThrowArgs} args - Arguments to find a ReportSocialButterfly
     * @example
     * // Get one ReportSocialButterfly
     * const reportSocialButterfly = await prisma.reportSocialButterfly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportSocialButterflyFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportSocialButterflyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportSocialButterflies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSocialButterflyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportSocialButterflies
     * const reportSocialButterflies = await prisma.reportSocialButterfly.findMany()
     * 
     * // Get first 10 ReportSocialButterflies
     * const reportSocialButterflies = await prisma.reportSocialButterfly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportSocialButterflyWithIdOnly = await prisma.reportSocialButterfly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportSocialButterflyFindManyArgs>(args?: SelectSubset<T, ReportSocialButterflyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportSocialButterfly.
     * @param {ReportSocialButterflyCreateArgs} args - Arguments to create a ReportSocialButterfly.
     * @example
     * // Create one ReportSocialButterfly
     * const ReportSocialButterfly = await prisma.reportSocialButterfly.create({
     *   data: {
     *     // ... data to create a ReportSocialButterfly
     *   }
     * })
     * 
     */
    create<T extends ReportSocialButterflyCreateArgs>(args: SelectSubset<T, ReportSocialButterflyCreateArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportSocialButterflies.
     * @param {ReportSocialButterflyCreateManyArgs} args - Arguments to create many ReportSocialButterflies.
     * @example
     * // Create many ReportSocialButterflies
     * const reportSocialButterfly = await prisma.reportSocialButterfly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportSocialButterflyCreateManyArgs>(args?: SelectSubset<T, ReportSocialButterflyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportSocialButterflies and returns the data saved in the database.
     * @param {ReportSocialButterflyCreateManyAndReturnArgs} args - Arguments to create many ReportSocialButterflies.
     * @example
     * // Create many ReportSocialButterflies
     * const reportSocialButterfly = await prisma.reportSocialButterfly.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportSocialButterflies and only return the `id`
     * const reportSocialButterflyWithIdOnly = await prisma.reportSocialButterfly.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportSocialButterflyCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportSocialButterflyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportSocialButterfly.
     * @param {ReportSocialButterflyDeleteArgs} args - Arguments to delete one ReportSocialButterfly.
     * @example
     * // Delete one ReportSocialButterfly
     * const ReportSocialButterfly = await prisma.reportSocialButterfly.delete({
     *   where: {
     *     // ... filter to delete one ReportSocialButterfly
     *   }
     * })
     * 
     */
    delete<T extends ReportSocialButterflyDeleteArgs>(args: SelectSubset<T, ReportSocialButterflyDeleteArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportSocialButterfly.
     * @param {ReportSocialButterflyUpdateArgs} args - Arguments to update one ReportSocialButterfly.
     * @example
     * // Update one ReportSocialButterfly
     * const reportSocialButterfly = await prisma.reportSocialButterfly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportSocialButterflyUpdateArgs>(args: SelectSubset<T, ReportSocialButterflyUpdateArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportSocialButterflies.
     * @param {ReportSocialButterflyDeleteManyArgs} args - Arguments to filter ReportSocialButterflies to delete.
     * @example
     * // Delete a few ReportSocialButterflies
     * const { count } = await prisma.reportSocialButterfly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportSocialButterflyDeleteManyArgs>(args?: SelectSubset<T, ReportSocialButterflyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSocialButterflyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportSocialButterflies
     * const reportSocialButterfly = await prisma.reportSocialButterfly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportSocialButterflyUpdateManyArgs>(args: SelectSubset<T, ReportSocialButterflyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportSocialButterflies and returns the data updated in the database.
     * @param {ReportSocialButterflyUpdateManyAndReturnArgs} args - Arguments to update many ReportSocialButterflies.
     * @example
     * // Update many ReportSocialButterflies
     * const reportSocialButterfly = await prisma.reportSocialButterfly.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportSocialButterflies and only return the `id`
     * const reportSocialButterflyWithIdOnly = await prisma.reportSocialButterfly.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportSocialButterflyUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportSocialButterflyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportSocialButterfly.
     * @param {ReportSocialButterflyUpsertArgs} args - Arguments to update or create a ReportSocialButterfly.
     * @example
     * // Update or create a ReportSocialButterfly
     * const reportSocialButterfly = await prisma.reportSocialButterfly.upsert({
     *   create: {
     *     // ... data to create a ReportSocialButterfly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportSocialButterfly we want to update
     *   }
     * })
     */
    upsert<T extends ReportSocialButterflyUpsertArgs>(args: SelectSubset<T, ReportSocialButterflyUpsertArgs<ExtArgs>>): Prisma__ReportSocialButterflyClient<$Result.GetResult<Prisma.$ReportSocialButterflyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportSocialButterflies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSocialButterflyCountArgs} args - Arguments to filter ReportSocialButterflies to count.
     * @example
     * // Count the number of ReportSocialButterflies
     * const count = await prisma.reportSocialButterfly.count({
     *   where: {
     *     // ... the filter for the ReportSocialButterflies we want to count
     *   }
     * })
    **/
    count<T extends ReportSocialButterflyCountArgs>(
      args?: Subset<T, ReportSocialButterflyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportSocialButterflyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSocialButterflyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportSocialButterflyAggregateArgs>(args: Subset<T, ReportSocialButterflyAggregateArgs>): Prisma.PrismaPromise<GetReportSocialButterflyAggregateType<T>>

    /**
     * Group by ReportSocialButterfly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSocialButterflyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportSocialButterflyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportSocialButterflyGroupByArgs['orderBy'] }
        : { orderBy?: ReportSocialButterflyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportSocialButterflyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportSocialButterflyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportSocialButterfly model
   */
  readonly fields: ReportSocialButterflyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportSocialButterfly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportSocialButterflyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserSocialButterflyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserSocialButterflyDefaultArgs<ExtArgs>>): Prisma__UserSocialButterflyClient<$Result.GetResult<Prisma.$UserSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends ReportSocialButterfly$eventArgs<ExtArgs> = {}>(args?: Subset<T, ReportSocialButterfly$eventArgs<ExtArgs>>): Prisma__EventSocialButterflyClient<$Result.GetResult<Prisma.$EventSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    review<T extends ReportSocialButterfly$reviewArgs<ExtArgs> = {}>(args?: Subset<T, ReportSocialButterfly$reviewArgs<ExtArgs>>): Prisma__ReviewSocialButterflyClient<$Result.GetResult<Prisma.$ReviewSocialButterflyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportSocialButterfly model
   */ 
  interface ReportSocialButterflyFieldRefs {
    readonly id: FieldRef<"ReportSocialButterfly", 'String'>
    readonly eventId: FieldRef<"ReportSocialButterfly", 'String'>
    readonly reviewId: FieldRef<"ReportSocialButterfly", 'String'>
    readonly userId: FieldRef<"ReportSocialButterfly", 'String'>
    readonly reason: FieldRef<"ReportSocialButterfly", 'String'>
    readonly createdAt: FieldRef<"ReportSocialButterfly", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportSocialButterfly findUnique
   */
  export type ReportSocialButterflyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReportSocialButterfly to fetch.
     */
    where: ReportSocialButterflyWhereUniqueInput
  }

  /**
   * ReportSocialButterfly findUniqueOrThrow
   */
  export type ReportSocialButterflyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReportSocialButterfly to fetch.
     */
    where: ReportSocialButterflyWhereUniqueInput
  }

  /**
   * ReportSocialButterfly findFirst
   */
  export type ReportSocialButterflyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReportSocialButterfly to fetch.
     */
    where?: ReportSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSocialButterflies to fetch.
     */
    orderBy?: ReportSocialButterflyOrderByWithRelationInput | ReportSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportSocialButterflies.
     */
    cursor?: ReportSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportSocialButterflies.
     */
    distinct?: ReportSocialButterflyScalarFieldEnum | ReportSocialButterflyScalarFieldEnum[]
  }

  /**
   * ReportSocialButterfly findFirstOrThrow
   */
  export type ReportSocialButterflyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReportSocialButterfly to fetch.
     */
    where?: ReportSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSocialButterflies to fetch.
     */
    orderBy?: ReportSocialButterflyOrderByWithRelationInput | ReportSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportSocialButterflies.
     */
    cursor?: ReportSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSocialButterflies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportSocialButterflies.
     */
    distinct?: ReportSocialButterflyScalarFieldEnum | ReportSocialButterflyScalarFieldEnum[]
  }

  /**
   * ReportSocialButterfly findMany
   */
  export type ReportSocialButterflyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter, which ReportSocialButterflies to fetch.
     */
    where?: ReportSocialButterflyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSocialButterflies to fetch.
     */
    orderBy?: ReportSocialButterflyOrderByWithRelationInput | ReportSocialButterflyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportSocialButterflies.
     */
    cursor?: ReportSocialButterflyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSocialButterflies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSocialButterflies.
     */
    skip?: number
    distinct?: ReportSocialButterflyScalarFieldEnum | ReportSocialButterflyScalarFieldEnum[]
  }

  /**
   * ReportSocialButterfly create
   */
  export type ReportSocialButterflyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportSocialButterfly.
     */
    data: XOR<ReportSocialButterflyCreateInput, ReportSocialButterflyUncheckedCreateInput>
  }

  /**
   * ReportSocialButterfly createMany
   */
  export type ReportSocialButterflyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportSocialButterflies.
     */
    data: ReportSocialButterflyCreateManyInput | ReportSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportSocialButterfly createManyAndReturn
   */
  export type ReportSocialButterflyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to create many ReportSocialButterflies.
     */
    data: ReportSocialButterflyCreateManyInput | ReportSocialButterflyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportSocialButterfly update
   */
  export type ReportSocialButterflyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportSocialButterfly.
     */
    data: XOR<ReportSocialButterflyUpdateInput, ReportSocialButterflyUncheckedUpdateInput>
    /**
     * Choose, which ReportSocialButterfly to update.
     */
    where: ReportSocialButterflyWhereUniqueInput
  }

  /**
   * ReportSocialButterfly updateMany
   */
  export type ReportSocialButterflyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportSocialButterflies.
     */
    data: XOR<ReportSocialButterflyUpdateManyMutationInput, ReportSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which ReportSocialButterflies to update
     */
    where?: ReportSocialButterflyWhereInput
    /**
     * Limit how many ReportSocialButterflies to update.
     */
    limit?: number
  }

  /**
   * ReportSocialButterfly updateManyAndReturn
   */
  export type ReportSocialButterflyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * The data used to update ReportSocialButterflies.
     */
    data: XOR<ReportSocialButterflyUpdateManyMutationInput, ReportSocialButterflyUncheckedUpdateManyInput>
    /**
     * Filter which ReportSocialButterflies to update
     */
    where?: ReportSocialButterflyWhereInput
    /**
     * Limit how many ReportSocialButterflies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportSocialButterfly upsert
   */
  export type ReportSocialButterflyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportSocialButterfly to update in case it exists.
     */
    where: ReportSocialButterflyWhereUniqueInput
    /**
     * In case the ReportSocialButterfly found by the `where` argument doesn't exist, create a new ReportSocialButterfly with this data.
     */
    create: XOR<ReportSocialButterflyCreateInput, ReportSocialButterflyUncheckedCreateInput>
    /**
     * In case the ReportSocialButterfly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportSocialButterflyUpdateInput, ReportSocialButterflyUncheckedUpdateInput>
  }

  /**
   * ReportSocialButterfly delete
   */
  export type ReportSocialButterflyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
    /**
     * Filter which ReportSocialButterfly to delete.
     */
    where: ReportSocialButterflyWhereUniqueInput
  }

  /**
   * ReportSocialButterfly deleteMany
   */
  export type ReportSocialButterflyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportSocialButterflies to delete
     */
    where?: ReportSocialButterflyWhereInput
    /**
     * Limit how many ReportSocialButterflies to delete.
     */
    limit?: number
  }

  /**
   * ReportSocialButterfly.event
   */
  export type ReportSocialButterfly$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSocialButterfly
     */
    select?: EventSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSocialButterfly
     */
    omit?: EventSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSocialButterflyInclude<ExtArgs> | null
    where?: EventSocialButterflyWhereInput
  }

  /**
   * ReportSocialButterfly.review
   */
  export type ReportSocialButterfly$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewSocialButterfly
     */
    select?: ReviewSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewSocialButterfly
     */
    omit?: ReviewSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewSocialButterflyInclude<ExtArgs> | null
    where?: ReviewSocialButterflyWhereInput
  }

  /**
   * ReportSocialButterfly without action
   */
  export type ReportSocialButterflyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSocialButterfly
     */
    select?: ReportSocialButterflySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSocialButterfly
     */
    omit?: ReportSocialButterflyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSocialButterflyInclude<ExtArgs> | null
  }


  /**
   * Model UserVolunteerOrg
   */

  export type AggregateUserVolunteerOrg = {
    _count: UserVolunteerOrgCountAggregateOutputType | null
    _min: UserVolunteerOrgMinAggregateOutputType | null
    _max: UserVolunteerOrgMaxAggregateOutputType | null
  }

  export type UserVolunteerOrgMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserVolunteerOrgMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserVolunteerOrgCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserVolunteerOrgMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserVolunteerOrgMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
  }

  export type UserVolunteerOrgCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserVolunteerOrgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserVolunteerOrg to aggregate.
     */
    where?: UserVolunteerOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVolunteerOrgs to fetch.
     */
    orderBy?: UserVolunteerOrgOrderByWithRelationInput | UserVolunteerOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserVolunteerOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVolunteerOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVolunteerOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserVolunteerOrgs
    **/
    _count?: true | UserVolunteerOrgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserVolunteerOrgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserVolunteerOrgMaxAggregateInputType
  }

  export type GetUserVolunteerOrgAggregateType<T extends UserVolunteerOrgAggregateArgs> = {
        [P in keyof T & keyof AggregateUserVolunteerOrg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserVolunteerOrg[P]>
      : GetScalarType<T[P], AggregateUserVolunteerOrg[P]>
  }




  export type UserVolunteerOrgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserVolunteerOrgWhereInput
    orderBy?: UserVolunteerOrgOrderByWithAggregationInput | UserVolunteerOrgOrderByWithAggregationInput[]
    by: UserVolunteerOrgScalarFieldEnum[] | UserVolunteerOrgScalarFieldEnum
    having?: UserVolunteerOrgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserVolunteerOrgCountAggregateInputType | true
    _min?: UserVolunteerOrgMinAggregateInputType
    _max?: UserVolunteerOrgMaxAggregateInputType
  }

  export type UserVolunteerOrgGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    createdAt: Date
    _count: UserVolunteerOrgCountAggregateOutputType | null
    _min: UserVolunteerOrgMinAggregateOutputType | null
    _max: UserVolunteerOrgMaxAggregateOutputType | null
  }

  type GetUserVolunteerOrgGroupByPayload<T extends UserVolunteerOrgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserVolunteerOrgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserVolunteerOrgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserVolunteerOrgGroupByOutputType[P]>
            : GetScalarType<T[P], UserVolunteerOrgGroupByOutputType[P]>
        }
      >
    >


  export type UserVolunteerOrgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    activities?: boolean | UserVolunteerOrg$activitiesArgs<ExtArgs>
    applications?: boolean | UserVolunteerOrg$applicationsArgs<ExtArgs>
    _count?: boolean | UserVolunteerOrgCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userVolunteerOrg"]>

  export type UserVolunteerOrgSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userVolunteerOrg"]>

  export type UserVolunteerOrgSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["userVolunteerOrg"]>

  export type UserVolunteerOrgSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UserVolunteerOrgOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "createdAt", ExtArgs["result"]["userVolunteerOrg"]>
  export type UserVolunteerOrgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | UserVolunteerOrg$activitiesArgs<ExtArgs>
    applications?: boolean | UserVolunteerOrg$applicationsArgs<ExtArgs>
    _count?: boolean | UserVolunteerOrgCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserVolunteerOrgIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserVolunteerOrgIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserVolunteerOrgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserVolunteerOrg"
    objects: {
      activities: Prisma.$VolunteerActivityPayload<ExtArgs>[]
      applications: Prisma.$VolunteerApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["userVolunteerOrg"]>
    composites: {}
  }

  type UserVolunteerOrgGetPayload<S extends boolean | null | undefined | UserVolunteerOrgDefaultArgs> = $Result.GetResult<Prisma.$UserVolunteerOrgPayload, S>

  type UserVolunteerOrgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserVolunteerOrgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserVolunteerOrgCountAggregateInputType | true
    }

  export interface UserVolunteerOrgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserVolunteerOrg'], meta: { name: 'UserVolunteerOrg' } }
    /**
     * Find zero or one UserVolunteerOrg that matches the filter.
     * @param {UserVolunteerOrgFindUniqueArgs} args - Arguments to find a UserVolunteerOrg
     * @example
     * // Get one UserVolunteerOrg
     * const userVolunteerOrg = await prisma.userVolunteerOrg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserVolunteerOrgFindUniqueArgs>(args: SelectSubset<T, UserVolunteerOrgFindUniqueArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserVolunteerOrg that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserVolunteerOrgFindUniqueOrThrowArgs} args - Arguments to find a UserVolunteerOrg
     * @example
     * // Get one UserVolunteerOrg
     * const userVolunteerOrg = await prisma.userVolunteerOrg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserVolunteerOrgFindUniqueOrThrowArgs>(args: SelectSubset<T, UserVolunteerOrgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserVolunteerOrg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVolunteerOrgFindFirstArgs} args - Arguments to find a UserVolunteerOrg
     * @example
     * // Get one UserVolunteerOrg
     * const userVolunteerOrg = await prisma.userVolunteerOrg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserVolunteerOrgFindFirstArgs>(args?: SelectSubset<T, UserVolunteerOrgFindFirstArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserVolunteerOrg that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVolunteerOrgFindFirstOrThrowArgs} args - Arguments to find a UserVolunteerOrg
     * @example
     * // Get one UserVolunteerOrg
     * const userVolunteerOrg = await prisma.userVolunteerOrg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserVolunteerOrgFindFirstOrThrowArgs>(args?: SelectSubset<T, UserVolunteerOrgFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserVolunteerOrgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVolunteerOrgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserVolunteerOrgs
     * const userVolunteerOrgs = await prisma.userVolunteerOrg.findMany()
     * 
     * // Get first 10 UserVolunteerOrgs
     * const userVolunteerOrgs = await prisma.userVolunteerOrg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userVolunteerOrgWithIdOnly = await prisma.userVolunteerOrg.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserVolunteerOrgFindManyArgs>(args?: SelectSubset<T, UserVolunteerOrgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserVolunteerOrg.
     * @param {UserVolunteerOrgCreateArgs} args - Arguments to create a UserVolunteerOrg.
     * @example
     * // Create one UserVolunteerOrg
     * const UserVolunteerOrg = await prisma.userVolunteerOrg.create({
     *   data: {
     *     // ... data to create a UserVolunteerOrg
     *   }
     * })
     * 
     */
    create<T extends UserVolunteerOrgCreateArgs>(args: SelectSubset<T, UserVolunteerOrgCreateArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserVolunteerOrgs.
     * @param {UserVolunteerOrgCreateManyArgs} args - Arguments to create many UserVolunteerOrgs.
     * @example
     * // Create many UserVolunteerOrgs
     * const userVolunteerOrg = await prisma.userVolunteerOrg.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserVolunteerOrgCreateManyArgs>(args?: SelectSubset<T, UserVolunteerOrgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserVolunteerOrgs and returns the data saved in the database.
     * @param {UserVolunteerOrgCreateManyAndReturnArgs} args - Arguments to create many UserVolunteerOrgs.
     * @example
     * // Create many UserVolunteerOrgs
     * const userVolunteerOrg = await prisma.userVolunteerOrg.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserVolunteerOrgs and only return the `id`
     * const userVolunteerOrgWithIdOnly = await prisma.userVolunteerOrg.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserVolunteerOrgCreateManyAndReturnArgs>(args?: SelectSubset<T, UserVolunteerOrgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserVolunteerOrg.
     * @param {UserVolunteerOrgDeleteArgs} args - Arguments to delete one UserVolunteerOrg.
     * @example
     * // Delete one UserVolunteerOrg
     * const UserVolunteerOrg = await prisma.userVolunteerOrg.delete({
     *   where: {
     *     // ... filter to delete one UserVolunteerOrg
     *   }
     * })
     * 
     */
    delete<T extends UserVolunteerOrgDeleteArgs>(args: SelectSubset<T, UserVolunteerOrgDeleteArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserVolunteerOrg.
     * @param {UserVolunteerOrgUpdateArgs} args - Arguments to update one UserVolunteerOrg.
     * @example
     * // Update one UserVolunteerOrg
     * const userVolunteerOrg = await prisma.userVolunteerOrg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserVolunteerOrgUpdateArgs>(args: SelectSubset<T, UserVolunteerOrgUpdateArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserVolunteerOrgs.
     * @param {UserVolunteerOrgDeleteManyArgs} args - Arguments to filter UserVolunteerOrgs to delete.
     * @example
     * // Delete a few UserVolunteerOrgs
     * const { count } = await prisma.userVolunteerOrg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserVolunteerOrgDeleteManyArgs>(args?: SelectSubset<T, UserVolunteerOrgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserVolunteerOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVolunteerOrgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserVolunteerOrgs
     * const userVolunteerOrg = await prisma.userVolunteerOrg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserVolunteerOrgUpdateManyArgs>(args: SelectSubset<T, UserVolunteerOrgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserVolunteerOrgs and returns the data updated in the database.
     * @param {UserVolunteerOrgUpdateManyAndReturnArgs} args - Arguments to update many UserVolunteerOrgs.
     * @example
     * // Update many UserVolunteerOrgs
     * const userVolunteerOrg = await prisma.userVolunteerOrg.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserVolunteerOrgs and only return the `id`
     * const userVolunteerOrgWithIdOnly = await prisma.userVolunteerOrg.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserVolunteerOrgUpdateManyAndReturnArgs>(args: SelectSubset<T, UserVolunteerOrgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserVolunteerOrg.
     * @param {UserVolunteerOrgUpsertArgs} args - Arguments to update or create a UserVolunteerOrg.
     * @example
     * // Update or create a UserVolunteerOrg
     * const userVolunteerOrg = await prisma.userVolunteerOrg.upsert({
     *   create: {
     *     // ... data to create a UserVolunteerOrg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserVolunteerOrg we want to update
     *   }
     * })
     */
    upsert<T extends UserVolunteerOrgUpsertArgs>(args: SelectSubset<T, UserVolunteerOrgUpsertArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserVolunteerOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVolunteerOrgCountArgs} args - Arguments to filter UserVolunteerOrgs to count.
     * @example
     * // Count the number of UserVolunteerOrgs
     * const count = await prisma.userVolunteerOrg.count({
     *   where: {
     *     // ... the filter for the UserVolunteerOrgs we want to count
     *   }
     * })
    **/
    count<T extends UserVolunteerOrgCountArgs>(
      args?: Subset<T, UserVolunteerOrgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserVolunteerOrgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserVolunteerOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVolunteerOrgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserVolunteerOrgAggregateArgs>(args: Subset<T, UserVolunteerOrgAggregateArgs>): Prisma.PrismaPromise<GetUserVolunteerOrgAggregateType<T>>

    /**
     * Group by UserVolunteerOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVolunteerOrgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserVolunteerOrgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserVolunteerOrgGroupByArgs['orderBy'] }
        : { orderBy?: UserVolunteerOrgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserVolunteerOrgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserVolunteerOrgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserVolunteerOrg model
   */
  readonly fields: UserVolunteerOrgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserVolunteerOrg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserVolunteerOrgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends UserVolunteerOrg$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, UserVolunteerOrg$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    applications<T extends UserVolunteerOrg$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, UserVolunteerOrg$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserVolunteerOrg model
   */ 
  interface UserVolunteerOrgFieldRefs {
    readonly id: FieldRef<"UserVolunteerOrg", 'String'>
    readonly email: FieldRef<"UserVolunteerOrg", 'String'>
    readonly name: FieldRef<"UserVolunteerOrg", 'String'>
    readonly password: FieldRef<"UserVolunteerOrg", 'String'>
    readonly createdAt: FieldRef<"UserVolunteerOrg", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserVolunteerOrg findUnique
   */
  export type UserVolunteerOrgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * Filter, which UserVolunteerOrg to fetch.
     */
    where: UserVolunteerOrgWhereUniqueInput
  }

  /**
   * UserVolunteerOrg findUniqueOrThrow
   */
  export type UserVolunteerOrgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * Filter, which UserVolunteerOrg to fetch.
     */
    where: UserVolunteerOrgWhereUniqueInput
  }

  /**
   * UserVolunteerOrg findFirst
   */
  export type UserVolunteerOrgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * Filter, which UserVolunteerOrg to fetch.
     */
    where?: UserVolunteerOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVolunteerOrgs to fetch.
     */
    orderBy?: UserVolunteerOrgOrderByWithRelationInput | UserVolunteerOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserVolunteerOrgs.
     */
    cursor?: UserVolunteerOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVolunteerOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVolunteerOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserVolunteerOrgs.
     */
    distinct?: UserVolunteerOrgScalarFieldEnum | UserVolunteerOrgScalarFieldEnum[]
  }

  /**
   * UserVolunteerOrg findFirstOrThrow
   */
  export type UserVolunteerOrgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * Filter, which UserVolunteerOrg to fetch.
     */
    where?: UserVolunteerOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVolunteerOrgs to fetch.
     */
    orderBy?: UserVolunteerOrgOrderByWithRelationInput | UserVolunteerOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserVolunteerOrgs.
     */
    cursor?: UserVolunteerOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVolunteerOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVolunteerOrgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserVolunteerOrgs.
     */
    distinct?: UserVolunteerOrgScalarFieldEnum | UserVolunteerOrgScalarFieldEnum[]
  }

  /**
   * UserVolunteerOrg findMany
   */
  export type UserVolunteerOrgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * Filter, which UserVolunteerOrgs to fetch.
     */
    where?: UserVolunteerOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVolunteerOrgs to fetch.
     */
    orderBy?: UserVolunteerOrgOrderByWithRelationInput | UserVolunteerOrgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserVolunteerOrgs.
     */
    cursor?: UserVolunteerOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVolunteerOrgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVolunteerOrgs.
     */
    skip?: number
    distinct?: UserVolunteerOrgScalarFieldEnum | UserVolunteerOrgScalarFieldEnum[]
  }

  /**
   * UserVolunteerOrg create
   */
  export type UserVolunteerOrgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * The data needed to create a UserVolunteerOrg.
     */
    data: XOR<UserVolunteerOrgCreateInput, UserVolunteerOrgUncheckedCreateInput>
  }

  /**
   * UserVolunteerOrg createMany
   */
  export type UserVolunteerOrgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserVolunteerOrgs.
     */
    data: UserVolunteerOrgCreateManyInput | UserVolunteerOrgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserVolunteerOrg createManyAndReturn
   */
  export type UserVolunteerOrgCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * The data used to create many UserVolunteerOrgs.
     */
    data: UserVolunteerOrgCreateManyInput | UserVolunteerOrgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserVolunteerOrg update
   */
  export type UserVolunteerOrgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * The data needed to update a UserVolunteerOrg.
     */
    data: XOR<UserVolunteerOrgUpdateInput, UserVolunteerOrgUncheckedUpdateInput>
    /**
     * Choose, which UserVolunteerOrg to update.
     */
    where: UserVolunteerOrgWhereUniqueInput
  }

  /**
   * UserVolunteerOrg updateMany
   */
  export type UserVolunteerOrgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserVolunteerOrgs.
     */
    data: XOR<UserVolunteerOrgUpdateManyMutationInput, UserVolunteerOrgUncheckedUpdateManyInput>
    /**
     * Filter which UserVolunteerOrgs to update
     */
    where?: UserVolunteerOrgWhereInput
    /**
     * Limit how many UserVolunteerOrgs to update.
     */
    limit?: number
  }

  /**
   * UserVolunteerOrg updateManyAndReturn
   */
  export type UserVolunteerOrgUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * The data used to update UserVolunteerOrgs.
     */
    data: XOR<UserVolunteerOrgUpdateManyMutationInput, UserVolunteerOrgUncheckedUpdateManyInput>
    /**
     * Filter which UserVolunteerOrgs to update
     */
    where?: UserVolunteerOrgWhereInput
    /**
     * Limit how many UserVolunteerOrgs to update.
     */
    limit?: number
  }

  /**
   * UserVolunteerOrg upsert
   */
  export type UserVolunteerOrgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * The filter to search for the UserVolunteerOrg to update in case it exists.
     */
    where: UserVolunteerOrgWhereUniqueInput
    /**
     * In case the UserVolunteerOrg found by the `where` argument doesn't exist, create a new UserVolunteerOrg with this data.
     */
    create: XOR<UserVolunteerOrgCreateInput, UserVolunteerOrgUncheckedCreateInput>
    /**
     * In case the UserVolunteerOrg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserVolunteerOrgUpdateInput, UserVolunteerOrgUncheckedUpdateInput>
  }

  /**
   * UserVolunteerOrg delete
   */
  export type UserVolunteerOrgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
    /**
     * Filter which UserVolunteerOrg to delete.
     */
    where: UserVolunteerOrgWhereUniqueInput
  }

  /**
   * UserVolunteerOrg deleteMany
   */
  export type UserVolunteerOrgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserVolunteerOrgs to delete
     */
    where?: UserVolunteerOrgWhereInput
    /**
     * Limit how many UserVolunteerOrgs to delete.
     */
    limit?: number
  }

  /**
   * UserVolunteerOrg.activities
   */
  export type UserVolunteerOrg$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    where?: VolunteerActivityWhereInput
    orderBy?: VolunteerActivityOrderByWithRelationInput | VolunteerActivityOrderByWithRelationInput[]
    cursor?: VolunteerActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VolunteerActivityScalarFieldEnum | VolunteerActivityScalarFieldEnum[]
  }

  /**
   * UserVolunteerOrg.applications
   */
  export type UserVolunteerOrg$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    where?: VolunteerApplicationWhereInput
    orderBy?: VolunteerApplicationOrderByWithRelationInput | VolunteerApplicationOrderByWithRelationInput[]
    cursor?: VolunteerApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VolunteerApplicationScalarFieldEnum | VolunteerApplicationScalarFieldEnum[]
  }

  /**
   * UserVolunteerOrg without action
   */
  export type UserVolunteerOrgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserVolunteerOrg
     */
    select?: UserVolunteerOrgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserVolunteerOrg
     */
    omit?: UserVolunteerOrgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserVolunteerOrgInclude<ExtArgs> | null
  }


  /**
   * Model VolunteerActivity
   */

  export type AggregateVolunteerActivity = {
    _count: VolunteerActivityCountAggregateOutputType | null
    _min: VolunteerActivityMinAggregateOutputType | null
    _max: VolunteerActivityMaxAggregateOutputType | null
  }

  export type VolunteerActivityMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    date: Date | null
    organizerId: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type VolunteerActivityMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    date: Date | null
    organizerId: string | null
    validated: boolean | null
    createdAt: Date | null
  }

  export type VolunteerActivityCountAggregateOutputType = {
    id: number
    title: number
    description: number
    location: number
    date: number
    organizerId: number
    validated: number
    createdAt: number
    _all: number
  }


  export type VolunteerActivityMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    date?: true
    organizerId?: true
    validated?: true
    createdAt?: true
  }

  export type VolunteerActivityMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    date?: true
    organizerId?: true
    validated?: true
    createdAt?: true
  }

  export type VolunteerActivityCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    date?: true
    organizerId?: true
    validated?: true
    createdAt?: true
    _all?: true
  }

  export type VolunteerActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VolunteerActivity to aggregate.
     */
    where?: VolunteerActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerActivities to fetch.
     */
    orderBy?: VolunteerActivityOrderByWithRelationInput | VolunteerActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VolunteerActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VolunteerActivities
    **/
    _count?: true | VolunteerActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VolunteerActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VolunteerActivityMaxAggregateInputType
  }

  export type GetVolunteerActivityAggregateType<T extends VolunteerActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateVolunteerActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVolunteerActivity[P]>
      : GetScalarType<T[P], AggregateVolunteerActivity[P]>
  }




  export type VolunteerActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerActivityWhereInput
    orderBy?: VolunteerActivityOrderByWithAggregationInput | VolunteerActivityOrderByWithAggregationInput[]
    by: VolunteerActivityScalarFieldEnum[] | VolunteerActivityScalarFieldEnum
    having?: VolunteerActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VolunteerActivityCountAggregateInputType | true
    _min?: VolunteerActivityMinAggregateInputType
    _max?: VolunteerActivityMaxAggregateInputType
  }

  export type VolunteerActivityGroupByOutputType = {
    id: string
    title: string
    description: string
    location: string
    date: Date
    organizerId: string
    validated: boolean
    createdAt: Date
    _count: VolunteerActivityCountAggregateOutputType | null
    _min: VolunteerActivityMinAggregateOutputType | null
    _max: VolunteerActivityMaxAggregateOutputType | null
  }

  type GetVolunteerActivityGroupByPayload<T extends VolunteerActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VolunteerActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VolunteerActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VolunteerActivityGroupByOutputType[P]>
            : GetScalarType<T[P], VolunteerActivityGroupByOutputType[P]>
        }
      >
    >


  export type VolunteerActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    date?: boolean
    organizerId?: boolean
    validated?: boolean
    createdAt?: boolean
    organizer?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    applications?: boolean | VolunteerActivity$applicationsArgs<ExtArgs>
    _count?: boolean | VolunteerActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerActivity"]>

  export type VolunteerActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    date?: boolean
    organizerId?: boolean
    validated?: boolean
    createdAt?: boolean
    organizer?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerActivity"]>

  export type VolunteerActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    date?: boolean
    organizerId?: boolean
    validated?: boolean
    createdAt?: boolean
    organizer?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerActivity"]>

  export type VolunteerActivitySelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    date?: boolean
    organizerId?: boolean
    validated?: boolean
    createdAt?: boolean
  }

  export type VolunteerActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "location" | "date" | "organizerId" | "validated" | "createdAt", ExtArgs["result"]["volunteerActivity"]>
  export type VolunteerActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    applications?: boolean | VolunteerActivity$applicationsArgs<ExtArgs>
    _count?: boolean | VolunteerActivityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VolunteerActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
  }
  export type VolunteerActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
  }

  export type $VolunteerActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VolunteerActivity"
    objects: {
      organizer: Prisma.$UserVolunteerOrgPayload<ExtArgs>
      applications: Prisma.$VolunteerApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      location: string
      date: Date
      organizerId: string
      validated: boolean
      createdAt: Date
    }, ExtArgs["result"]["volunteerActivity"]>
    composites: {}
  }

  type VolunteerActivityGetPayload<S extends boolean | null | undefined | VolunteerActivityDefaultArgs> = $Result.GetResult<Prisma.$VolunteerActivityPayload, S>

  type VolunteerActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VolunteerActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VolunteerActivityCountAggregateInputType | true
    }

  export interface VolunteerActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VolunteerActivity'], meta: { name: 'VolunteerActivity' } }
    /**
     * Find zero or one VolunteerActivity that matches the filter.
     * @param {VolunteerActivityFindUniqueArgs} args - Arguments to find a VolunteerActivity
     * @example
     * // Get one VolunteerActivity
     * const volunteerActivity = await prisma.volunteerActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VolunteerActivityFindUniqueArgs>(args: SelectSubset<T, VolunteerActivityFindUniqueArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VolunteerActivity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VolunteerActivityFindUniqueOrThrowArgs} args - Arguments to find a VolunteerActivity
     * @example
     * // Get one VolunteerActivity
     * const volunteerActivity = await prisma.volunteerActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VolunteerActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, VolunteerActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VolunteerActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerActivityFindFirstArgs} args - Arguments to find a VolunteerActivity
     * @example
     * // Get one VolunteerActivity
     * const volunteerActivity = await prisma.volunteerActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VolunteerActivityFindFirstArgs>(args?: SelectSubset<T, VolunteerActivityFindFirstArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VolunteerActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerActivityFindFirstOrThrowArgs} args - Arguments to find a VolunteerActivity
     * @example
     * // Get one VolunteerActivity
     * const volunteerActivity = await prisma.volunteerActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VolunteerActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, VolunteerActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VolunteerActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VolunteerActivities
     * const volunteerActivities = await prisma.volunteerActivity.findMany()
     * 
     * // Get first 10 VolunteerActivities
     * const volunteerActivities = await prisma.volunteerActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const volunteerActivityWithIdOnly = await prisma.volunteerActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VolunteerActivityFindManyArgs>(args?: SelectSubset<T, VolunteerActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VolunteerActivity.
     * @param {VolunteerActivityCreateArgs} args - Arguments to create a VolunteerActivity.
     * @example
     * // Create one VolunteerActivity
     * const VolunteerActivity = await prisma.volunteerActivity.create({
     *   data: {
     *     // ... data to create a VolunteerActivity
     *   }
     * })
     * 
     */
    create<T extends VolunteerActivityCreateArgs>(args: SelectSubset<T, VolunteerActivityCreateArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VolunteerActivities.
     * @param {VolunteerActivityCreateManyArgs} args - Arguments to create many VolunteerActivities.
     * @example
     * // Create many VolunteerActivities
     * const volunteerActivity = await prisma.volunteerActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VolunteerActivityCreateManyArgs>(args?: SelectSubset<T, VolunteerActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VolunteerActivities and returns the data saved in the database.
     * @param {VolunteerActivityCreateManyAndReturnArgs} args - Arguments to create many VolunteerActivities.
     * @example
     * // Create many VolunteerActivities
     * const volunteerActivity = await prisma.volunteerActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VolunteerActivities and only return the `id`
     * const volunteerActivityWithIdOnly = await prisma.volunteerActivity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VolunteerActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, VolunteerActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VolunteerActivity.
     * @param {VolunteerActivityDeleteArgs} args - Arguments to delete one VolunteerActivity.
     * @example
     * // Delete one VolunteerActivity
     * const VolunteerActivity = await prisma.volunteerActivity.delete({
     *   where: {
     *     // ... filter to delete one VolunteerActivity
     *   }
     * })
     * 
     */
    delete<T extends VolunteerActivityDeleteArgs>(args: SelectSubset<T, VolunteerActivityDeleteArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VolunteerActivity.
     * @param {VolunteerActivityUpdateArgs} args - Arguments to update one VolunteerActivity.
     * @example
     * // Update one VolunteerActivity
     * const volunteerActivity = await prisma.volunteerActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VolunteerActivityUpdateArgs>(args: SelectSubset<T, VolunteerActivityUpdateArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VolunteerActivities.
     * @param {VolunteerActivityDeleteManyArgs} args - Arguments to filter VolunteerActivities to delete.
     * @example
     * // Delete a few VolunteerActivities
     * const { count } = await prisma.volunteerActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VolunteerActivityDeleteManyArgs>(args?: SelectSubset<T, VolunteerActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VolunteerActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VolunteerActivities
     * const volunteerActivity = await prisma.volunteerActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VolunteerActivityUpdateManyArgs>(args: SelectSubset<T, VolunteerActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VolunteerActivities and returns the data updated in the database.
     * @param {VolunteerActivityUpdateManyAndReturnArgs} args - Arguments to update many VolunteerActivities.
     * @example
     * // Update many VolunteerActivities
     * const volunteerActivity = await prisma.volunteerActivity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VolunteerActivities and only return the `id`
     * const volunteerActivityWithIdOnly = await prisma.volunteerActivity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VolunteerActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, VolunteerActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VolunteerActivity.
     * @param {VolunteerActivityUpsertArgs} args - Arguments to update or create a VolunteerActivity.
     * @example
     * // Update or create a VolunteerActivity
     * const volunteerActivity = await prisma.volunteerActivity.upsert({
     *   create: {
     *     // ... data to create a VolunteerActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VolunteerActivity we want to update
     *   }
     * })
     */
    upsert<T extends VolunteerActivityUpsertArgs>(args: SelectSubset<T, VolunteerActivityUpsertArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VolunteerActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerActivityCountArgs} args - Arguments to filter VolunteerActivities to count.
     * @example
     * // Count the number of VolunteerActivities
     * const count = await prisma.volunteerActivity.count({
     *   where: {
     *     // ... the filter for the VolunteerActivities we want to count
     *   }
     * })
    **/
    count<T extends VolunteerActivityCountArgs>(
      args?: Subset<T, VolunteerActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VolunteerActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VolunteerActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VolunteerActivityAggregateArgs>(args: Subset<T, VolunteerActivityAggregateArgs>): Prisma.PrismaPromise<GetVolunteerActivityAggregateType<T>>

    /**
     * Group by VolunteerActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VolunteerActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VolunteerActivityGroupByArgs['orderBy'] }
        : { orderBy?: VolunteerActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VolunteerActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVolunteerActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VolunteerActivity model
   */
  readonly fields: VolunteerActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VolunteerActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VolunteerActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends UserVolunteerOrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserVolunteerOrgDefaultArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    applications<T extends VolunteerActivity$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, VolunteerActivity$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VolunteerActivity model
   */ 
  interface VolunteerActivityFieldRefs {
    readonly id: FieldRef<"VolunteerActivity", 'String'>
    readonly title: FieldRef<"VolunteerActivity", 'String'>
    readonly description: FieldRef<"VolunteerActivity", 'String'>
    readonly location: FieldRef<"VolunteerActivity", 'String'>
    readonly date: FieldRef<"VolunteerActivity", 'DateTime'>
    readonly organizerId: FieldRef<"VolunteerActivity", 'String'>
    readonly validated: FieldRef<"VolunteerActivity", 'Boolean'>
    readonly createdAt: FieldRef<"VolunteerActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VolunteerActivity findUnique
   */
  export type VolunteerActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerActivity to fetch.
     */
    where: VolunteerActivityWhereUniqueInput
  }

  /**
   * VolunteerActivity findUniqueOrThrow
   */
  export type VolunteerActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerActivity to fetch.
     */
    where: VolunteerActivityWhereUniqueInput
  }

  /**
   * VolunteerActivity findFirst
   */
  export type VolunteerActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerActivity to fetch.
     */
    where?: VolunteerActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerActivities to fetch.
     */
    orderBy?: VolunteerActivityOrderByWithRelationInput | VolunteerActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VolunteerActivities.
     */
    cursor?: VolunteerActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VolunteerActivities.
     */
    distinct?: VolunteerActivityScalarFieldEnum | VolunteerActivityScalarFieldEnum[]
  }

  /**
   * VolunteerActivity findFirstOrThrow
   */
  export type VolunteerActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerActivity to fetch.
     */
    where?: VolunteerActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerActivities to fetch.
     */
    orderBy?: VolunteerActivityOrderByWithRelationInput | VolunteerActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VolunteerActivities.
     */
    cursor?: VolunteerActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VolunteerActivities.
     */
    distinct?: VolunteerActivityScalarFieldEnum | VolunteerActivityScalarFieldEnum[]
  }

  /**
   * VolunteerActivity findMany
   */
  export type VolunteerActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerActivities to fetch.
     */
    where?: VolunteerActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerActivities to fetch.
     */
    orderBy?: VolunteerActivityOrderByWithRelationInput | VolunteerActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VolunteerActivities.
     */
    cursor?: VolunteerActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerActivities.
     */
    skip?: number
    distinct?: VolunteerActivityScalarFieldEnum | VolunteerActivityScalarFieldEnum[]
  }

  /**
   * VolunteerActivity create
   */
  export type VolunteerActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a VolunteerActivity.
     */
    data: XOR<VolunteerActivityCreateInput, VolunteerActivityUncheckedCreateInput>
  }

  /**
   * VolunteerActivity createMany
   */
  export type VolunteerActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VolunteerActivities.
     */
    data: VolunteerActivityCreateManyInput | VolunteerActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VolunteerActivity createManyAndReturn
   */
  export type VolunteerActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * The data used to create many VolunteerActivities.
     */
    data: VolunteerActivityCreateManyInput | VolunteerActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VolunteerActivity update
   */
  export type VolunteerActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a VolunteerActivity.
     */
    data: XOR<VolunteerActivityUpdateInput, VolunteerActivityUncheckedUpdateInput>
    /**
     * Choose, which VolunteerActivity to update.
     */
    where: VolunteerActivityWhereUniqueInput
  }

  /**
   * VolunteerActivity updateMany
   */
  export type VolunteerActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VolunteerActivities.
     */
    data: XOR<VolunteerActivityUpdateManyMutationInput, VolunteerActivityUncheckedUpdateManyInput>
    /**
     * Filter which VolunteerActivities to update
     */
    where?: VolunteerActivityWhereInput
    /**
     * Limit how many VolunteerActivities to update.
     */
    limit?: number
  }

  /**
   * VolunteerActivity updateManyAndReturn
   */
  export type VolunteerActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * The data used to update VolunteerActivities.
     */
    data: XOR<VolunteerActivityUpdateManyMutationInput, VolunteerActivityUncheckedUpdateManyInput>
    /**
     * Filter which VolunteerActivities to update
     */
    where?: VolunteerActivityWhereInput
    /**
     * Limit how many VolunteerActivities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VolunteerActivity upsert
   */
  export type VolunteerActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the VolunteerActivity to update in case it exists.
     */
    where: VolunteerActivityWhereUniqueInput
    /**
     * In case the VolunteerActivity found by the `where` argument doesn't exist, create a new VolunteerActivity with this data.
     */
    create: XOR<VolunteerActivityCreateInput, VolunteerActivityUncheckedCreateInput>
    /**
     * In case the VolunteerActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VolunteerActivityUpdateInput, VolunteerActivityUncheckedUpdateInput>
  }

  /**
   * VolunteerActivity delete
   */
  export type VolunteerActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
    /**
     * Filter which VolunteerActivity to delete.
     */
    where: VolunteerActivityWhereUniqueInput
  }

  /**
   * VolunteerActivity deleteMany
   */
  export type VolunteerActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VolunteerActivities to delete
     */
    where?: VolunteerActivityWhereInput
    /**
     * Limit how many VolunteerActivities to delete.
     */
    limit?: number
  }

  /**
   * VolunteerActivity.applications
   */
  export type VolunteerActivity$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    where?: VolunteerApplicationWhereInput
    orderBy?: VolunteerApplicationOrderByWithRelationInput | VolunteerApplicationOrderByWithRelationInput[]
    cursor?: VolunteerApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VolunteerApplicationScalarFieldEnum | VolunteerApplicationScalarFieldEnum[]
  }

  /**
   * VolunteerActivity without action
   */
  export type VolunteerActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerActivity
     */
    select?: VolunteerActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerActivity
     */
    omit?: VolunteerActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerActivityInclude<ExtArgs> | null
  }


  /**
   * Model VolunteerApplication
   */

  export type AggregateVolunteerApplication = {
    _count: VolunteerApplicationCountAggregateOutputType | null
    _min: VolunteerApplicationMinAggregateOutputType | null
    _max: VolunteerApplicationMaxAggregateOutputType | null
  }

  export type VolunteerApplicationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    activityId: string | null
    motivation: string | null
    status: string | null
    createdAt: Date | null
  }

  export type VolunteerApplicationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    activityId: string | null
    motivation: string | null
    status: string | null
    createdAt: Date | null
  }

  export type VolunteerApplicationCountAggregateOutputType = {
    id: number
    userId: number
    activityId: number
    motivation: number
    status: number
    createdAt: number
    _all: number
  }


  export type VolunteerApplicationMinAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    motivation?: true
    status?: true
    createdAt?: true
  }

  export type VolunteerApplicationMaxAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    motivation?: true
    status?: true
    createdAt?: true
  }

  export type VolunteerApplicationCountAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    motivation?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type VolunteerApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VolunteerApplication to aggregate.
     */
    where?: VolunteerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerApplications to fetch.
     */
    orderBy?: VolunteerApplicationOrderByWithRelationInput | VolunteerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VolunteerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VolunteerApplications
    **/
    _count?: true | VolunteerApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VolunteerApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VolunteerApplicationMaxAggregateInputType
  }

  export type GetVolunteerApplicationAggregateType<T extends VolunteerApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateVolunteerApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVolunteerApplication[P]>
      : GetScalarType<T[P], AggregateVolunteerApplication[P]>
  }




  export type VolunteerApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerApplicationWhereInput
    orderBy?: VolunteerApplicationOrderByWithAggregationInput | VolunteerApplicationOrderByWithAggregationInput[]
    by: VolunteerApplicationScalarFieldEnum[] | VolunteerApplicationScalarFieldEnum
    having?: VolunteerApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VolunteerApplicationCountAggregateInputType | true
    _min?: VolunteerApplicationMinAggregateInputType
    _max?: VolunteerApplicationMaxAggregateInputType
  }

  export type VolunteerApplicationGroupByOutputType = {
    id: string
    userId: string
    activityId: string
    motivation: string
    status: string
    createdAt: Date
    _count: VolunteerApplicationCountAggregateOutputType | null
    _min: VolunteerApplicationMinAggregateOutputType | null
    _max: VolunteerApplicationMaxAggregateOutputType | null
  }

  type GetVolunteerApplicationGroupByPayload<T extends VolunteerApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VolunteerApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VolunteerApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VolunteerApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], VolunteerApplicationGroupByOutputType[P]>
        }
      >
    >


  export type VolunteerApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    motivation?: boolean
    status?: boolean
    createdAt?: boolean
    user?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    activity?: boolean | VolunteerActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerApplication"]>

  export type VolunteerApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    motivation?: boolean
    status?: boolean
    createdAt?: boolean
    user?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    activity?: boolean | VolunteerActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerApplication"]>

  export type VolunteerApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    motivation?: boolean
    status?: boolean
    createdAt?: boolean
    user?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    activity?: boolean | VolunteerActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerApplication"]>

  export type VolunteerApplicationSelectScalar = {
    id?: boolean
    userId?: boolean
    activityId?: boolean
    motivation?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type VolunteerApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "activityId" | "motivation" | "status" | "createdAt", ExtArgs["result"]["volunteerApplication"]>
  export type VolunteerApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    activity?: boolean | VolunteerActivityDefaultArgs<ExtArgs>
  }
  export type VolunteerApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    activity?: boolean | VolunteerActivityDefaultArgs<ExtArgs>
  }
  export type VolunteerApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserVolunteerOrgDefaultArgs<ExtArgs>
    activity?: boolean | VolunteerActivityDefaultArgs<ExtArgs>
  }

  export type $VolunteerApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VolunteerApplication"
    objects: {
      user: Prisma.$UserVolunteerOrgPayload<ExtArgs>
      activity: Prisma.$VolunteerActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      activityId: string
      motivation: string
      status: string
      createdAt: Date
    }, ExtArgs["result"]["volunteerApplication"]>
    composites: {}
  }

  type VolunteerApplicationGetPayload<S extends boolean | null | undefined | VolunteerApplicationDefaultArgs> = $Result.GetResult<Prisma.$VolunteerApplicationPayload, S>

  type VolunteerApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VolunteerApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VolunteerApplicationCountAggregateInputType | true
    }

  export interface VolunteerApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VolunteerApplication'], meta: { name: 'VolunteerApplication' } }
    /**
     * Find zero or one VolunteerApplication that matches the filter.
     * @param {VolunteerApplicationFindUniqueArgs} args - Arguments to find a VolunteerApplication
     * @example
     * // Get one VolunteerApplication
     * const volunteerApplication = await prisma.volunteerApplication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VolunteerApplicationFindUniqueArgs>(args: SelectSubset<T, VolunteerApplicationFindUniqueArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VolunteerApplication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VolunteerApplicationFindUniqueOrThrowArgs} args - Arguments to find a VolunteerApplication
     * @example
     * // Get one VolunteerApplication
     * const volunteerApplication = await prisma.volunteerApplication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VolunteerApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, VolunteerApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VolunteerApplication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerApplicationFindFirstArgs} args - Arguments to find a VolunteerApplication
     * @example
     * // Get one VolunteerApplication
     * const volunteerApplication = await prisma.volunteerApplication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VolunteerApplicationFindFirstArgs>(args?: SelectSubset<T, VolunteerApplicationFindFirstArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VolunteerApplication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerApplicationFindFirstOrThrowArgs} args - Arguments to find a VolunteerApplication
     * @example
     * // Get one VolunteerApplication
     * const volunteerApplication = await prisma.volunteerApplication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VolunteerApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, VolunteerApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VolunteerApplications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VolunteerApplications
     * const volunteerApplications = await prisma.volunteerApplication.findMany()
     * 
     * // Get first 10 VolunteerApplications
     * const volunteerApplications = await prisma.volunteerApplication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const volunteerApplicationWithIdOnly = await prisma.volunteerApplication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VolunteerApplicationFindManyArgs>(args?: SelectSubset<T, VolunteerApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VolunteerApplication.
     * @param {VolunteerApplicationCreateArgs} args - Arguments to create a VolunteerApplication.
     * @example
     * // Create one VolunteerApplication
     * const VolunteerApplication = await prisma.volunteerApplication.create({
     *   data: {
     *     // ... data to create a VolunteerApplication
     *   }
     * })
     * 
     */
    create<T extends VolunteerApplicationCreateArgs>(args: SelectSubset<T, VolunteerApplicationCreateArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VolunteerApplications.
     * @param {VolunteerApplicationCreateManyArgs} args - Arguments to create many VolunteerApplications.
     * @example
     * // Create many VolunteerApplications
     * const volunteerApplication = await prisma.volunteerApplication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VolunteerApplicationCreateManyArgs>(args?: SelectSubset<T, VolunteerApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VolunteerApplications and returns the data saved in the database.
     * @param {VolunteerApplicationCreateManyAndReturnArgs} args - Arguments to create many VolunteerApplications.
     * @example
     * // Create many VolunteerApplications
     * const volunteerApplication = await prisma.volunteerApplication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VolunteerApplications and only return the `id`
     * const volunteerApplicationWithIdOnly = await prisma.volunteerApplication.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VolunteerApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, VolunteerApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VolunteerApplication.
     * @param {VolunteerApplicationDeleteArgs} args - Arguments to delete one VolunteerApplication.
     * @example
     * // Delete one VolunteerApplication
     * const VolunteerApplication = await prisma.volunteerApplication.delete({
     *   where: {
     *     // ... filter to delete one VolunteerApplication
     *   }
     * })
     * 
     */
    delete<T extends VolunteerApplicationDeleteArgs>(args: SelectSubset<T, VolunteerApplicationDeleteArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VolunteerApplication.
     * @param {VolunteerApplicationUpdateArgs} args - Arguments to update one VolunteerApplication.
     * @example
     * // Update one VolunteerApplication
     * const volunteerApplication = await prisma.volunteerApplication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VolunteerApplicationUpdateArgs>(args: SelectSubset<T, VolunteerApplicationUpdateArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VolunteerApplications.
     * @param {VolunteerApplicationDeleteManyArgs} args - Arguments to filter VolunteerApplications to delete.
     * @example
     * // Delete a few VolunteerApplications
     * const { count } = await prisma.volunteerApplication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VolunteerApplicationDeleteManyArgs>(args?: SelectSubset<T, VolunteerApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VolunteerApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VolunteerApplications
     * const volunteerApplication = await prisma.volunteerApplication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VolunteerApplicationUpdateManyArgs>(args: SelectSubset<T, VolunteerApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VolunteerApplications and returns the data updated in the database.
     * @param {VolunteerApplicationUpdateManyAndReturnArgs} args - Arguments to update many VolunteerApplications.
     * @example
     * // Update many VolunteerApplications
     * const volunteerApplication = await prisma.volunteerApplication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VolunteerApplications and only return the `id`
     * const volunteerApplicationWithIdOnly = await prisma.volunteerApplication.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VolunteerApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, VolunteerApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VolunteerApplication.
     * @param {VolunteerApplicationUpsertArgs} args - Arguments to update or create a VolunteerApplication.
     * @example
     * // Update or create a VolunteerApplication
     * const volunteerApplication = await prisma.volunteerApplication.upsert({
     *   create: {
     *     // ... data to create a VolunteerApplication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VolunteerApplication we want to update
     *   }
     * })
     */
    upsert<T extends VolunteerApplicationUpsertArgs>(args: SelectSubset<T, VolunteerApplicationUpsertArgs<ExtArgs>>): Prisma__VolunteerApplicationClient<$Result.GetResult<Prisma.$VolunteerApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VolunteerApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerApplicationCountArgs} args - Arguments to filter VolunteerApplications to count.
     * @example
     * // Count the number of VolunteerApplications
     * const count = await prisma.volunteerApplication.count({
     *   where: {
     *     // ... the filter for the VolunteerApplications we want to count
     *   }
     * })
    **/
    count<T extends VolunteerApplicationCountArgs>(
      args?: Subset<T, VolunteerApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VolunteerApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VolunteerApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VolunteerApplicationAggregateArgs>(args: Subset<T, VolunteerApplicationAggregateArgs>): Prisma.PrismaPromise<GetVolunteerApplicationAggregateType<T>>

    /**
     * Group by VolunteerApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VolunteerApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VolunteerApplicationGroupByArgs['orderBy'] }
        : { orderBy?: VolunteerApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VolunteerApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVolunteerApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VolunteerApplication model
   */
  readonly fields: VolunteerApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VolunteerApplication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VolunteerApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserVolunteerOrgDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserVolunteerOrgDefaultArgs<ExtArgs>>): Prisma__UserVolunteerOrgClient<$Result.GetResult<Prisma.$UserVolunteerOrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    activity<T extends VolunteerActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VolunteerActivityDefaultArgs<ExtArgs>>): Prisma__VolunteerActivityClient<$Result.GetResult<Prisma.$VolunteerActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VolunteerApplication model
   */ 
  interface VolunteerApplicationFieldRefs {
    readonly id: FieldRef<"VolunteerApplication", 'String'>
    readonly userId: FieldRef<"VolunteerApplication", 'String'>
    readonly activityId: FieldRef<"VolunteerApplication", 'String'>
    readonly motivation: FieldRef<"VolunteerApplication", 'String'>
    readonly status: FieldRef<"VolunteerApplication", 'String'>
    readonly createdAt: FieldRef<"VolunteerApplication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VolunteerApplication findUnique
   */
  export type VolunteerApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerApplication to fetch.
     */
    where: VolunteerApplicationWhereUniqueInput
  }

  /**
   * VolunteerApplication findUniqueOrThrow
   */
  export type VolunteerApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerApplication to fetch.
     */
    where: VolunteerApplicationWhereUniqueInput
  }

  /**
   * VolunteerApplication findFirst
   */
  export type VolunteerApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerApplication to fetch.
     */
    where?: VolunteerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerApplications to fetch.
     */
    orderBy?: VolunteerApplicationOrderByWithRelationInput | VolunteerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VolunteerApplications.
     */
    cursor?: VolunteerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VolunteerApplications.
     */
    distinct?: VolunteerApplicationScalarFieldEnum | VolunteerApplicationScalarFieldEnum[]
  }

  /**
   * VolunteerApplication findFirstOrThrow
   */
  export type VolunteerApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerApplication to fetch.
     */
    where?: VolunteerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerApplications to fetch.
     */
    orderBy?: VolunteerApplicationOrderByWithRelationInput | VolunteerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VolunteerApplications.
     */
    cursor?: VolunteerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VolunteerApplications.
     */
    distinct?: VolunteerApplicationScalarFieldEnum | VolunteerApplicationScalarFieldEnum[]
  }

  /**
   * VolunteerApplication findMany
   */
  export type VolunteerApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerApplications to fetch.
     */
    where?: VolunteerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerApplications to fetch.
     */
    orderBy?: VolunteerApplicationOrderByWithRelationInput | VolunteerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VolunteerApplications.
     */
    cursor?: VolunteerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerApplications.
     */
    skip?: number
    distinct?: VolunteerApplicationScalarFieldEnum | VolunteerApplicationScalarFieldEnum[]
  }

  /**
   * VolunteerApplication create
   */
  export type VolunteerApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a VolunteerApplication.
     */
    data: XOR<VolunteerApplicationCreateInput, VolunteerApplicationUncheckedCreateInput>
  }

  /**
   * VolunteerApplication createMany
   */
  export type VolunteerApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VolunteerApplications.
     */
    data: VolunteerApplicationCreateManyInput | VolunteerApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VolunteerApplication createManyAndReturn
   */
  export type VolunteerApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many VolunteerApplications.
     */
    data: VolunteerApplicationCreateManyInput | VolunteerApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VolunteerApplication update
   */
  export type VolunteerApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a VolunteerApplication.
     */
    data: XOR<VolunteerApplicationUpdateInput, VolunteerApplicationUncheckedUpdateInput>
    /**
     * Choose, which VolunteerApplication to update.
     */
    where: VolunteerApplicationWhereUniqueInput
  }

  /**
   * VolunteerApplication updateMany
   */
  export type VolunteerApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VolunteerApplications.
     */
    data: XOR<VolunteerApplicationUpdateManyMutationInput, VolunteerApplicationUncheckedUpdateManyInput>
    /**
     * Filter which VolunteerApplications to update
     */
    where?: VolunteerApplicationWhereInput
    /**
     * Limit how many VolunteerApplications to update.
     */
    limit?: number
  }

  /**
   * VolunteerApplication updateManyAndReturn
   */
  export type VolunteerApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * The data used to update VolunteerApplications.
     */
    data: XOR<VolunteerApplicationUpdateManyMutationInput, VolunteerApplicationUncheckedUpdateManyInput>
    /**
     * Filter which VolunteerApplications to update
     */
    where?: VolunteerApplicationWhereInput
    /**
     * Limit how many VolunteerApplications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VolunteerApplication upsert
   */
  export type VolunteerApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the VolunteerApplication to update in case it exists.
     */
    where: VolunteerApplicationWhereUniqueInput
    /**
     * In case the VolunteerApplication found by the `where` argument doesn't exist, create a new VolunteerApplication with this data.
     */
    create: XOR<VolunteerApplicationCreateInput, VolunteerApplicationUncheckedCreateInput>
    /**
     * In case the VolunteerApplication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VolunteerApplicationUpdateInput, VolunteerApplicationUncheckedUpdateInput>
  }

  /**
   * VolunteerApplication delete
   */
  export type VolunteerApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
    /**
     * Filter which VolunteerApplication to delete.
     */
    where: VolunteerApplicationWhereUniqueInput
  }

  /**
   * VolunteerApplication deleteMany
   */
  export type VolunteerApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VolunteerApplications to delete
     */
    where?: VolunteerApplicationWhereInput
    /**
     * Limit how many VolunteerApplications to delete.
     */
    limit?: number
  }

  /**
   * VolunteerApplication without action
   */
  export type VolunteerApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerApplication
     */
    select?: VolunteerApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VolunteerApplication
     */
    omit?: VolunteerApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerApplicationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EventOrganizerUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type EventOrganizerUserScalarFieldEnum = (typeof EventOrganizerUserScalarFieldEnum)[keyof typeof EventOrganizerUserScalarFieldEnum]


  export const EventOrganizerTaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    dueDate: 'dueDate',
    status: 'status',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type EventOrganizerTaskScalarFieldEnum = (typeof EventOrganizerTaskScalarFieldEnum)[keyof typeof EventOrganizerTaskScalarFieldEnum]


  export const EventOrganizerGuestScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    status: 'status',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type EventOrganizerGuestScalarFieldEnum = (typeof EventOrganizerGuestScalarFieldEnum)[keyof typeof EventOrganizerGuestScalarFieldEnum]


  export const EventOrganizerVenueScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    capacity: 'capacity',
    amenities: 'amenities',
    submittedBy: 'submittedBy',
    createdAt: 'createdAt'
  };

  export type EventOrganizerVenueScalarFieldEnum = (typeof EventOrganizerVenueScalarFieldEnum)[keyof typeof EventOrganizerVenueScalarFieldEnum]


  export const EventOrganizerServiceProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    serviceType: 'serviceType',
    contactInfo: 'contactInfo',
    submittedBy: 'submittedBy',
    createdAt: 'createdAt'
  };

  export type EventOrganizerServiceProviderScalarFieldEnum = (typeof EventOrganizerServiceProviderScalarFieldEnum)[keyof typeof EventOrganizerServiceProviderScalarFieldEnum]


  export const LanguageLearnerUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type LanguageLearnerUserScalarFieldEnum = (typeof LanguageLearnerUserScalarFieldEnum)[keyof typeof LanguageLearnerUserScalarFieldEnum]


  export const LanguageLearnerPlatformScalarFieldEnum: {
    id: 'id',
    name: 'name',
    website: 'website',
    languagesOffered: 'languagesOffered',
    description: 'description',
    ownerId: 'ownerId',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type LanguageLearnerPlatformScalarFieldEnum = (typeof LanguageLearnerPlatformScalarFieldEnum)[keyof typeof LanguageLearnerPlatformScalarFieldEnum]


  export const LanguageLearnerReviewScalarFieldEnum: {
    id: 'id',
    platformId: 'platformId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type LanguageLearnerReviewScalarFieldEnum = (typeof LanguageLearnerReviewScalarFieldEnum)[keyof typeof LanguageLearnerReviewScalarFieldEnum]


  export const LanguageLearnerReviewLikeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    reviewId: 'reviewId',
    createdAt: 'createdAt'
  };

  export type LanguageLearnerReviewLikeScalarFieldEnum = (typeof LanguageLearnerReviewLikeScalarFieldEnum)[keyof typeof LanguageLearnerReviewLikeScalarFieldEnum]


  export const LanguageLearnerUserVoteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    voterId: 'voterId',
    voteType: 'voteType',
    createdAt: 'createdAt'
  };

  export type LanguageLearnerUserVoteScalarFieldEnum = (typeof LanguageLearnerUserVoteScalarFieldEnum)[keyof typeof LanguageLearnerUserVoteScalarFieldEnum]


  export const GameHubUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type GameHubUserScalarFieldEnum = (typeof GameHubUserScalarFieldEnum)[keyof typeof GameHubUserScalarFieldEnum]


  export const GameHubPlayerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    rank: 'rank',
    mainGame: 'mainGame',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type GameHubPlayerScalarFieldEnum = (typeof GameHubPlayerScalarFieldEnum)[keyof typeof GameHubPlayerScalarFieldEnum]


  export const GameHubTournamentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    game: 'game',
    date: 'date',
    rules: 'rules',
    organizerId: 'organizerId',
    createdAt: 'createdAt'
  };

  export type GameHubTournamentScalarFieldEnum = (typeof GameHubTournamentScalarFieldEnum)[keyof typeof GameHubTournamentScalarFieldEnum]


  export const GameHubTournamentPlayerScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    playerId: 'playerId',
    joinedAt: 'joinedAt'
  };

  export type GameHubTournamentPlayerScalarFieldEnum = (typeof GameHubTournamentPlayerScalarFieldEnum)[keyof typeof GameHubTournamentPlayerScalarFieldEnum]


  export const UserHealthTrackerScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserHealthTrackerScalarFieldEnum = (typeof UserHealthTrackerScalarFieldEnum)[keyof typeof UserHealthTrackerScalarFieldEnum]


  export const ScheduleHealthTrackerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    dateTime: 'dateTime',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type ScheduleHealthTrackerScalarFieldEnum = (typeof ScheduleHealthTrackerScalarFieldEnum)[keyof typeof ScheduleHealthTrackerScalarFieldEnum]


  export const RecordHealthTrackerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    description: 'description',
    date: 'date',
    createdAt: 'createdAt'
  };

  export type RecordHealthTrackerScalarFieldEnum = (typeof RecordHealthTrackerScalarFieldEnum)[keyof typeof RecordHealthTrackerScalarFieldEnum]


  export const ClinicHealthTrackerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    availableSlots: 'availableSlots',
    contact: 'contact',
    createdAt: 'createdAt'
  };

  export type ClinicHealthTrackerScalarFieldEnum = (typeof ClinicHealthTrackerScalarFieldEnum)[keyof typeof ClinicHealthTrackerScalarFieldEnum]


  export const UserMusicLoverScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserMusicLoverScalarFieldEnum = (typeof UserMusicLoverScalarFieldEnum)[keyof typeof UserMusicLoverScalarFieldEnum]


  export const ConcertMusicLoverScalarFieldEnum: {
    id: 'id',
    title: 'title',
    date: 'date',
    venue: 'venue',
    genre: 'genre',
    submittedBy: 'submittedBy',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type ConcertMusicLoverScalarFieldEnum = (typeof ConcertMusicLoverScalarFieldEnum)[keyof typeof ConcertMusicLoverScalarFieldEnum]


  export const ReviewMusicLoverScalarFieldEnum: {
    id: 'id',
    concertId: 'concertId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type ReviewMusicLoverScalarFieldEnum = (typeof ReviewMusicLoverScalarFieldEnum)[keyof typeof ReviewMusicLoverScalarFieldEnum]


  export const UserSocialButterflyScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserSocialButterflyScalarFieldEnum = (typeof UserSocialButterflyScalarFieldEnum)[keyof typeof UserSocialButterflyScalarFieldEnum]


  export const EventSocialButterflyScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    date: 'date',
    location: 'location',
    category: 'category',
    submittedBy: 'submittedBy',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type EventSocialButterflyScalarFieldEnum = (typeof EventSocialButterflyScalarFieldEnum)[keyof typeof EventSocialButterflyScalarFieldEnum]


  export const ReviewSocialButterflyScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type ReviewSocialButterflyScalarFieldEnum = (typeof ReviewSocialButterflyScalarFieldEnum)[keyof typeof ReviewSocialButterflyScalarFieldEnum]


  export const LikeSocialButterflyScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LikeSocialButterflyScalarFieldEnum = (typeof LikeSocialButterflyScalarFieldEnum)[keyof typeof LikeSocialButterflyScalarFieldEnum]


  export const BookmarkSocialButterflyScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type BookmarkSocialButterflyScalarFieldEnum = (typeof BookmarkSocialButterflyScalarFieldEnum)[keyof typeof BookmarkSocialButterflyScalarFieldEnum]


  export const ReportSocialButterflyScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    reviewId: 'reviewId',
    userId: 'userId',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type ReportSocialButterflyScalarFieldEnum = (typeof ReportSocialButterflyScalarFieldEnum)[keyof typeof ReportSocialButterflyScalarFieldEnum]


  export const UserVolunteerOrgScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserVolunteerOrgScalarFieldEnum = (typeof UserVolunteerOrgScalarFieldEnum)[keyof typeof UserVolunteerOrgScalarFieldEnum]


  export const VolunteerActivityScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    location: 'location',
    date: 'date',
    organizerId: 'organizerId',
    validated: 'validated',
    createdAt: 'createdAt'
  };

  export type VolunteerActivityScalarFieldEnum = (typeof VolunteerActivityScalarFieldEnum)[keyof typeof VolunteerActivityScalarFieldEnum]


  export const VolunteerApplicationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    activityId: 'activityId',
    motivation: 'motivation',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type VolunteerApplicationScalarFieldEnum = (typeof VolunteerApplicationScalarFieldEnum)[keyof typeof VolunteerApplicationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EventOrganizerUserWhereInput = {
    AND?: EventOrganizerUserWhereInput | EventOrganizerUserWhereInput[]
    OR?: EventOrganizerUserWhereInput[]
    NOT?: EventOrganizerUserWhereInput | EventOrganizerUserWhereInput[]
    id?: StringFilter<"EventOrganizerUser"> | string
    email?: StringFilter<"EventOrganizerUser"> | string
    name?: StringFilter<"EventOrganizerUser"> | string
    password?: StringFilter<"EventOrganizerUser"> | string
    createdAt?: DateTimeFilter<"EventOrganizerUser"> | Date | string
    tasks?: EventOrganizerTaskListRelationFilter
    guests?: EventOrganizerGuestListRelationFilter
    venues?: EventOrganizerVenueListRelationFilter
    serviceProviders?: EventOrganizerServiceProviderListRelationFilter
  }

  export type EventOrganizerUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    tasks?: EventOrganizerTaskOrderByRelationAggregateInput
    guests?: EventOrganizerGuestOrderByRelationAggregateInput
    venues?: EventOrganizerVenueOrderByRelationAggregateInput
    serviceProviders?: EventOrganizerServiceProviderOrderByRelationAggregateInput
  }

  export type EventOrganizerUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: EventOrganizerUserWhereInput | EventOrganizerUserWhereInput[]
    OR?: EventOrganizerUserWhereInput[]
    NOT?: EventOrganizerUserWhereInput | EventOrganizerUserWhereInput[]
    name?: StringFilter<"EventOrganizerUser"> | string
    password?: StringFilter<"EventOrganizerUser"> | string
    createdAt?: DateTimeFilter<"EventOrganizerUser"> | Date | string
    tasks?: EventOrganizerTaskListRelationFilter
    guests?: EventOrganizerGuestListRelationFilter
    venues?: EventOrganizerVenueListRelationFilter
    serviceProviders?: EventOrganizerServiceProviderListRelationFilter
  }, "id" | "email">

  export type EventOrganizerUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: EventOrganizerUserCountOrderByAggregateInput
    _max?: EventOrganizerUserMaxOrderByAggregateInput
    _min?: EventOrganizerUserMinOrderByAggregateInput
  }

  export type EventOrganizerUserScalarWhereWithAggregatesInput = {
    AND?: EventOrganizerUserScalarWhereWithAggregatesInput | EventOrganizerUserScalarWhereWithAggregatesInput[]
    OR?: EventOrganizerUserScalarWhereWithAggregatesInput[]
    NOT?: EventOrganizerUserScalarWhereWithAggregatesInput | EventOrganizerUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventOrganizerUser"> | string
    email?: StringWithAggregatesFilter<"EventOrganizerUser"> | string
    name?: StringWithAggregatesFilter<"EventOrganizerUser"> | string
    password?: StringWithAggregatesFilter<"EventOrganizerUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EventOrganizerUser"> | Date | string
  }

  export type EventOrganizerTaskWhereInput = {
    AND?: EventOrganizerTaskWhereInput | EventOrganizerTaskWhereInput[]
    OR?: EventOrganizerTaskWhereInput[]
    NOT?: EventOrganizerTaskWhereInput | EventOrganizerTaskWhereInput[]
    id?: StringFilter<"EventOrganizerTask"> | string
    title?: StringFilter<"EventOrganizerTask"> | string
    description?: StringFilter<"EventOrganizerTask"> | string
    dueDate?: DateTimeFilter<"EventOrganizerTask"> | Date | string
    status?: StringFilter<"EventOrganizerTask"> | string
    userId?: StringFilter<"EventOrganizerTask"> | string
    createdAt?: DateTimeFilter<"EventOrganizerTask"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }

  export type EventOrganizerTaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: EventOrganizerUserOrderByWithRelationInput
  }

  export type EventOrganizerTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventOrganizerTaskWhereInput | EventOrganizerTaskWhereInput[]
    OR?: EventOrganizerTaskWhereInput[]
    NOT?: EventOrganizerTaskWhereInput | EventOrganizerTaskWhereInput[]
    title?: StringFilter<"EventOrganizerTask"> | string
    description?: StringFilter<"EventOrganizerTask"> | string
    dueDate?: DateTimeFilter<"EventOrganizerTask"> | Date | string
    status?: StringFilter<"EventOrganizerTask"> | string
    userId?: StringFilter<"EventOrganizerTask"> | string
    createdAt?: DateTimeFilter<"EventOrganizerTask"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }, "id">

  export type EventOrganizerTaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: EventOrganizerTaskCountOrderByAggregateInput
    _max?: EventOrganizerTaskMaxOrderByAggregateInput
    _min?: EventOrganizerTaskMinOrderByAggregateInput
  }

  export type EventOrganizerTaskScalarWhereWithAggregatesInput = {
    AND?: EventOrganizerTaskScalarWhereWithAggregatesInput | EventOrganizerTaskScalarWhereWithAggregatesInput[]
    OR?: EventOrganizerTaskScalarWhereWithAggregatesInput[]
    NOT?: EventOrganizerTaskScalarWhereWithAggregatesInput | EventOrganizerTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventOrganizerTask"> | string
    title?: StringWithAggregatesFilter<"EventOrganizerTask"> | string
    description?: StringWithAggregatesFilter<"EventOrganizerTask"> | string
    dueDate?: DateTimeWithAggregatesFilter<"EventOrganizerTask"> | Date | string
    status?: StringWithAggregatesFilter<"EventOrganizerTask"> | string
    userId?: StringWithAggregatesFilter<"EventOrganizerTask"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EventOrganizerTask"> | Date | string
  }

  export type EventOrganizerGuestWhereInput = {
    AND?: EventOrganizerGuestWhereInput | EventOrganizerGuestWhereInput[]
    OR?: EventOrganizerGuestWhereInput[]
    NOT?: EventOrganizerGuestWhereInput | EventOrganizerGuestWhereInput[]
    id?: StringFilter<"EventOrganizerGuest"> | string
    eventId?: StringFilter<"EventOrganizerGuest"> | string
    name?: StringFilter<"EventOrganizerGuest"> | string
    email?: StringFilter<"EventOrganizerGuest"> | string
    phone?: StringFilter<"EventOrganizerGuest"> | string
    status?: StringFilter<"EventOrganizerGuest"> | string
    userId?: StringFilter<"EventOrganizerGuest"> | string
    createdAt?: DateTimeFilter<"EventOrganizerGuest"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }

  export type EventOrganizerGuestOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: EventOrganizerUserOrderByWithRelationInput
  }

  export type EventOrganizerGuestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventOrganizerGuestWhereInput | EventOrganizerGuestWhereInput[]
    OR?: EventOrganizerGuestWhereInput[]
    NOT?: EventOrganizerGuestWhereInput | EventOrganizerGuestWhereInput[]
    eventId?: StringFilter<"EventOrganizerGuest"> | string
    name?: StringFilter<"EventOrganizerGuest"> | string
    email?: StringFilter<"EventOrganizerGuest"> | string
    phone?: StringFilter<"EventOrganizerGuest"> | string
    status?: StringFilter<"EventOrganizerGuest"> | string
    userId?: StringFilter<"EventOrganizerGuest"> | string
    createdAt?: DateTimeFilter<"EventOrganizerGuest"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }, "id">

  export type EventOrganizerGuestOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: EventOrganizerGuestCountOrderByAggregateInput
    _max?: EventOrganizerGuestMaxOrderByAggregateInput
    _min?: EventOrganizerGuestMinOrderByAggregateInput
  }

  export type EventOrganizerGuestScalarWhereWithAggregatesInput = {
    AND?: EventOrganizerGuestScalarWhereWithAggregatesInput | EventOrganizerGuestScalarWhereWithAggregatesInput[]
    OR?: EventOrganizerGuestScalarWhereWithAggregatesInput[]
    NOT?: EventOrganizerGuestScalarWhereWithAggregatesInput | EventOrganizerGuestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventOrganizerGuest"> | string
    eventId?: StringWithAggregatesFilter<"EventOrganizerGuest"> | string
    name?: StringWithAggregatesFilter<"EventOrganizerGuest"> | string
    email?: StringWithAggregatesFilter<"EventOrganizerGuest"> | string
    phone?: StringWithAggregatesFilter<"EventOrganizerGuest"> | string
    status?: StringWithAggregatesFilter<"EventOrganizerGuest"> | string
    userId?: StringWithAggregatesFilter<"EventOrganizerGuest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EventOrganizerGuest"> | Date | string
  }

  export type EventOrganizerVenueWhereInput = {
    AND?: EventOrganizerVenueWhereInput | EventOrganizerVenueWhereInput[]
    OR?: EventOrganizerVenueWhereInput[]
    NOT?: EventOrganizerVenueWhereInput | EventOrganizerVenueWhereInput[]
    id?: StringFilter<"EventOrganizerVenue"> | string
    name?: StringFilter<"EventOrganizerVenue"> | string
    location?: StringFilter<"EventOrganizerVenue"> | string
    capacity?: IntFilter<"EventOrganizerVenue"> | number
    amenities?: StringFilter<"EventOrganizerVenue"> | string
    submittedBy?: StringFilter<"EventOrganizerVenue"> | string
    createdAt?: DateTimeFilter<"EventOrganizerVenue"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }

  export type EventOrganizerVenueOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    amenities?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
    user?: EventOrganizerUserOrderByWithRelationInput
  }

  export type EventOrganizerVenueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventOrganizerVenueWhereInput | EventOrganizerVenueWhereInput[]
    OR?: EventOrganizerVenueWhereInput[]
    NOT?: EventOrganizerVenueWhereInput | EventOrganizerVenueWhereInput[]
    name?: StringFilter<"EventOrganizerVenue"> | string
    location?: StringFilter<"EventOrganizerVenue"> | string
    capacity?: IntFilter<"EventOrganizerVenue"> | number
    amenities?: StringFilter<"EventOrganizerVenue"> | string
    submittedBy?: StringFilter<"EventOrganizerVenue"> | string
    createdAt?: DateTimeFilter<"EventOrganizerVenue"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }, "id">

  export type EventOrganizerVenueOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    amenities?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
    _count?: EventOrganizerVenueCountOrderByAggregateInput
    _avg?: EventOrganizerVenueAvgOrderByAggregateInput
    _max?: EventOrganizerVenueMaxOrderByAggregateInput
    _min?: EventOrganizerVenueMinOrderByAggregateInput
    _sum?: EventOrganizerVenueSumOrderByAggregateInput
  }

  export type EventOrganizerVenueScalarWhereWithAggregatesInput = {
    AND?: EventOrganizerVenueScalarWhereWithAggregatesInput | EventOrganizerVenueScalarWhereWithAggregatesInput[]
    OR?: EventOrganizerVenueScalarWhereWithAggregatesInput[]
    NOT?: EventOrganizerVenueScalarWhereWithAggregatesInput | EventOrganizerVenueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventOrganizerVenue"> | string
    name?: StringWithAggregatesFilter<"EventOrganizerVenue"> | string
    location?: StringWithAggregatesFilter<"EventOrganizerVenue"> | string
    capacity?: IntWithAggregatesFilter<"EventOrganizerVenue"> | number
    amenities?: StringWithAggregatesFilter<"EventOrganizerVenue"> | string
    submittedBy?: StringWithAggregatesFilter<"EventOrganizerVenue"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EventOrganizerVenue"> | Date | string
  }

  export type EventOrganizerServiceProviderWhereInput = {
    AND?: EventOrganizerServiceProviderWhereInput | EventOrganizerServiceProviderWhereInput[]
    OR?: EventOrganizerServiceProviderWhereInput[]
    NOT?: EventOrganizerServiceProviderWhereInput | EventOrganizerServiceProviderWhereInput[]
    id?: StringFilter<"EventOrganizerServiceProvider"> | string
    name?: StringFilter<"EventOrganizerServiceProvider"> | string
    serviceType?: StringFilter<"EventOrganizerServiceProvider"> | string
    contactInfo?: StringFilter<"EventOrganizerServiceProvider"> | string
    submittedBy?: StringFilter<"EventOrganizerServiceProvider"> | string
    createdAt?: DateTimeFilter<"EventOrganizerServiceProvider"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }

  export type EventOrganizerServiceProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    serviceType?: SortOrder
    contactInfo?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
    user?: EventOrganizerUserOrderByWithRelationInput
  }

  export type EventOrganizerServiceProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventOrganizerServiceProviderWhereInput | EventOrganizerServiceProviderWhereInput[]
    OR?: EventOrganizerServiceProviderWhereInput[]
    NOT?: EventOrganizerServiceProviderWhereInput | EventOrganizerServiceProviderWhereInput[]
    name?: StringFilter<"EventOrganizerServiceProvider"> | string
    serviceType?: StringFilter<"EventOrganizerServiceProvider"> | string
    contactInfo?: StringFilter<"EventOrganizerServiceProvider"> | string
    submittedBy?: StringFilter<"EventOrganizerServiceProvider"> | string
    createdAt?: DateTimeFilter<"EventOrganizerServiceProvider"> | Date | string
    user?: XOR<EventOrganizerUserScalarRelationFilter, EventOrganizerUserWhereInput>
  }, "id">

  export type EventOrganizerServiceProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    serviceType?: SortOrder
    contactInfo?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
    _count?: EventOrganizerServiceProviderCountOrderByAggregateInput
    _max?: EventOrganizerServiceProviderMaxOrderByAggregateInput
    _min?: EventOrganizerServiceProviderMinOrderByAggregateInput
  }

  export type EventOrganizerServiceProviderScalarWhereWithAggregatesInput = {
    AND?: EventOrganizerServiceProviderScalarWhereWithAggregatesInput | EventOrganizerServiceProviderScalarWhereWithAggregatesInput[]
    OR?: EventOrganizerServiceProviderScalarWhereWithAggregatesInput[]
    NOT?: EventOrganizerServiceProviderScalarWhereWithAggregatesInput | EventOrganizerServiceProviderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventOrganizerServiceProvider"> | string
    name?: StringWithAggregatesFilter<"EventOrganizerServiceProvider"> | string
    serviceType?: StringWithAggregatesFilter<"EventOrganizerServiceProvider"> | string
    contactInfo?: StringWithAggregatesFilter<"EventOrganizerServiceProvider"> | string
    submittedBy?: StringWithAggregatesFilter<"EventOrganizerServiceProvider"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EventOrganizerServiceProvider"> | Date | string
  }

  export type LanguageLearnerUserWhereInput = {
    AND?: LanguageLearnerUserWhereInput | LanguageLearnerUserWhereInput[]
    OR?: LanguageLearnerUserWhereInput[]
    NOT?: LanguageLearnerUserWhereInput | LanguageLearnerUserWhereInput[]
    id?: StringFilter<"LanguageLearnerUser"> | string
    email?: StringFilter<"LanguageLearnerUser"> | string
    name?: StringFilter<"LanguageLearnerUser"> | string
    password?: StringFilter<"LanguageLearnerUser"> | string
    role?: StringFilter<"LanguageLearnerUser"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerUser"> | Date | string
    ownedPlatforms?: LanguageLearnerPlatformListRelationFilter
    reviews?: LanguageLearnerReviewListRelationFilter
    votesGiven?: LanguageLearnerUserVoteListRelationFilter
    votesReceived?: LanguageLearnerUserVoteListRelationFilter
    likes?: LanguageLearnerReviewLikeListRelationFilter
  }

  export type LanguageLearnerUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    ownedPlatforms?: LanguageLearnerPlatformOrderByRelationAggregateInput
    reviews?: LanguageLearnerReviewOrderByRelationAggregateInput
    votesGiven?: LanguageLearnerUserVoteOrderByRelationAggregateInput
    votesReceived?: LanguageLearnerUserVoteOrderByRelationAggregateInput
    likes?: LanguageLearnerReviewLikeOrderByRelationAggregateInput
  }

  export type LanguageLearnerUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: LanguageLearnerUserWhereInput | LanguageLearnerUserWhereInput[]
    OR?: LanguageLearnerUserWhereInput[]
    NOT?: LanguageLearnerUserWhereInput | LanguageLearnerUserWhereInput[]
    name?: StringFilter<"LanguageLearnerUser"> | string
    password?: StringFilter<"LanguageLearnerUser"> | string
    role?: StringFilter<"LanguageLearnerUser"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerUser"> | Date | string
    ownedPlatforms?: LanguageLearnerPlatformListRelationFilter
    reviews?: LanguageLearnerReviewListRelationFilter
    votesGiven?: LanguageLearnerUserVoteListRelationFilter
    votesReceived?: LanguageLearnerUserVoteListRelationFilter
    likes?: LanguageLearnerReviewLikeListRelationFilter
  }, "id" | "email">

  export type LanguageLearnerUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: LanguageLearnerUserCountOrderByAggregateInput
    _max?: LanguageLearnerUserMaxOrderByAggregateInput
    _min?: LanguageLearnerUserMinOrderByAggregateInput
  }

  export type LanguageLearnerUserScalarWhereWithAggregatesInput = {
    AND?: LanguageLearnerUserScalarWhereWithAggregatesInput | LanguageLearnerUserScalarWhereWithAggregatesInput[]
    OR?: LanguageLearnerUserScalarWhereWithAggregatesInput[]
    NOT?: LanguageLearnerUserScalarWhereWithAggregatesInput | LanguageLearnerUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LanguageLearnerUser"> | string
    email?: StringWithAggregatesFilter<"LanguageLearnerUser"> | string
    name?: StringWithAggregatesFilter<"LanguageLearnerUser"> | string
    password?: StringWithAggregatesFilter<"LanguageLearnerUser"> | string
    role?: StringWithAggregatesFilter<"LanguageLearnerUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LanguageLearnerUser"> | Date | string
  }

  export type LanguageLearnerPlatformWhereInput = {
    AND?: LanguageLearnerPlatformWhereInput | LanguageLearnerPlatformWhereInput[]
    OR?: LanguageLearnerPlatformWhereInput[]
    NOT?: LanguageLearnerPlatformWhereInput | LanguageLearnerPlatformWhereInput[]
    id?: StringFilter<"LanguageLearnerPlatform"> | string
    name?: StringFilter<"LanguageLearnerPlatform"> | string
    website?: StringFilter<"LanguageLearnerPlatform"> | string
    languagesOffered?: StringFilter<"LanguageLearnerPlatform"> | string
    description?: StringFilter<"LanguageLearnerPlatform"> | string
    ownerId?: StringFilter<"LanguageLearnerPlatform"> | string
    status?: StringFilter<"LanguageLearnerPlatform"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerPlatform"> | Date | string
    owner?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    reviews?: LanguageLearnerReviewListRelationFilter
  }

  export type LanguageLearnerPlatformOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    languagesOffered?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    owner?: LanguageLearnerUserOrderByWithRelationInput
    reviews?: LanguageLearnerReviewOrderByRelationAggregateInput
  }

  export type LanguageLearnerPlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LanguageLearnerPlatformWhereInput | LanguageLearnerPlatformWhereInput[]
    OR?: LanguageLearnerPlatformWhereInput[]
    NOT?: LanguageLearnerPlatformWhereInput | LanguageLearnerPlatformWhereInput[]
    name?: StringFilter<"LanguageLearnerPlatform"> | string
    website?: StringFilter<"LanguageLearnerPlatform"> | string
    languagesOffered?: StringFilter<"LanguageLearnerPlatform"> | string
    description?: StringFilter<"LanguageLearnerPlatform"> | string
    ownerId?: StringFilter<"LanguageLearnerPlatform"> | string
    status?: StringFilter<"LanguageLearnerPlatform"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerPlatform"> | Date | string
    owner?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    reviews?: LanguageLearnerReviewListRelationFilter
  }, "id">

  export type LanguageLearnerPlatformOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    languagesOffered?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: LanguageLearnerPlatformCountOrderByAggregateInput
    _max?: LanguageLearnerPlatformMaxOrderByAggregateInput
    _min?: LanguageLearnerPlatformMinOrderByAggregateInput
  }

  export type LanguageLearnerPlatformScalarWhereWithAggregatesInput = {
    AND?: LanguageLearnerPlatformScalarWhereWithAggregatesInput | LanguageLearnerPlatformScalarWhereWithAggregatesInput[]
    OR?: LanguageLearnerPlatformScalarWhereWithAggregatesInput[]
    NOT?: LanguageLearnerPlatformScalarWhereWithAggregatesInput | LanguageLearnerPlatformScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LanguageLearnerPlatform"> | string
    name?: StringWithAggregatesFilter<"LanguageLearnerPlatform"> | string
    website?: StringWithAggregatesFilter<"LanguageLearnerPlatform"> | string
    languagesOffered?: StringWithAggregatesFilter<"LanguageLearnerPlatform"> | string
    description?: StringWithAggregatesFilter<"LanguageLearnerPlatform"> | string
    ownerId?: StringWithAggregatesFilter<"LanguageLearnerPlatform"> | string
    status?: StringWithAggregatesFilter<"LanguageLearnerPlatform"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LanguageLearnerPlatform"> | Date | string
  }

  export type LanguageLearnerReviewWhereInput = {
    AND?: LanguageLearnerReviewWhereInput | LanguageLearnerReviewWhereInput[]
    OR?: LanguageLearnerReviewWhereInput[]
    NOT?: LanguageLearnerReviewWhereInput | LanguageLearnerReviewWhereInput[]
    id?: StringFilter<"LanguageLearnerReview"> | string
    platformId?: StringFilter<"LanguageLearnerReview"> | string
    userId?: StringFilter<"LanguageLearnerReview"> | string
    rating?: IntFilter<"LanguageLearnerReview"> | number
    comment?: StringFilter<"LanguageLearnerReview"> | string
    status?: StringFilter<"LanguageLearnerReview"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerReview"> | Date | string
    platform?: XOR<LanguageLearnerPlatformScalarRelationFilter, LanguageLearnerPlatformWhereInput>
    user?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    likes?: LanguageLearnerReviewLikeListRelationFilter
  }

  export type LanguageLearnerReviewOrderByWithRelationInput = {
    id?: SortOrder
    platformId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    platform?: LanguageLearnerPlatformOrderByWithRelationInput
    user?: LanguageLearnerUserOrderByWithRelationInput
    likes?: LanguageLearnerReviewLikeOrderByRelationAggregateInput
  }

  export type LanguageLearnerReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LanguageLearnerReviewWhereInput | LanguageLearnerReviewWhereInput[]
    OR?: LanguageLearnerReviewWhereInput[]
    NOT?: LanguageLearnerReviewWhereInput | LanguageLearnerReviewWhereInput[]
    platformId?: StringFilter<"LanguageLearnerReview"> | string
    userId?: StringFilter<"LanguageLearnerReview"> | string
    rating?: IntFilter<"LanguageLearnerReview"> | number
    comment?: StringFilter<"LanguageLearnerReview"> | string
    status?: StringFilter<"LanguageLearnerReview"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerReview"> | Date | string
    platform?: XOR<LanguageLearnerPlatformScalarRelationFilter, LanguageLearnerPlatformWhereInput>
    user?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    likes?: LanguageLearnerReviewLikeListRelationFilter
  }, "id">

  export type LanguageLearnerReviewOrderByWithAggregationInput = {
    id?: SortOrder
    platformId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: LanguageLearnerReviewCountOrderByAggregateInput
    _avg?: LanguageLearnerReviewAvgOrderByAggregateInput
    _max?: LanguageLearnerReviewMaxOrderByAggregateInput
    _min?: LanguageLearnerReviewMinOrderByAggregateInput
    _sum?: LanguageLearnerReviewSumOrderByAggregateInput
  }

  export type LanguageLearnerReviewScalarWhereWithAggregatesInput = {
    AND?: LanguageLearnerReviewScalarWhereWithAggregatesInput | LanguageLearnerReviewScalarWhereWithAggregatesInput[]
    OR?: LanguageLearnerReviewScalarWhereWithAggregatesInput[]
    NOT?: LanguageLearnerReviewScalarWhereWithAggregatesInput | LanguageLearnerReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LanguageLearnerReview"> | string
    platformId?: StringWithAggregatesFilter<"LanguageLearnerReview"> | string
    userId?: StringWithAggregatesFilter<"LanguageLearnerReview"> | string
    rating?: IntWithAggregatesFilter<"LanguageLearnerReview"> | number
    comment?: StringWithAggregatesFilter<"LanguageLearnerReview"> | string
    status?: StringWithAggregatesFilter<"LanguageLearnerReview"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LanguageLearnerReview"> | Date | string
  }

  export type LanguageLearnerReviewLikeWhereInput = {
    AND?: LanguageLearnerReviewLikeWhereInput | LanguageLearnerReviewLikeWhereInput[]
    OR?: LanguageLearnerReviewLikeWhereInput[]
    NOT?: LanguageLearnerReviewLikeWhereInput | LanguageLearnerReviewLikeWhereInput[]
    id?: StringFilter<"LanguageLearnerReviewLike"> | string
    userId?: StringFilter<"LanguageLearnerReviewLike"> | string
    reviewId?: StringFilter<"LanguageLearnerReviewLike"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerReviewLike"> | Date | string
    user?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    review?: XOR<LanguageLearnerReviewScalarRelationFilter, LanguageLearnerReviewWhereInput>
  }

  export type LanguageLearnerReviewLikeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewId?: SortOrder
    createdAt?: SortOrder
    user?: LanguageLearnerUserOrderByWithRelationInput
    review?: LanguageLearnerReviewOrderByWithRelationInput
  }

  export type LanguageLearnerReviewLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_reviewId?: LanguageLearnerReviewLikeUserIdReviewIdCompoundUniqueInput
    AND?: LanguageLearnerReviewLikeWhereInput | LanguageLearnerReviewLikeWhereInput[]
    OR?: LanguageLearnerReviewLikeWhereInput[]
    NOT?: LanguageLearnerReviewLikeWhereInput | LanguageLearnerReviewLikeWhereInput[]
    userId?: StringFilter<"LanguageLearnerReviewLike"> | string
    reviewId?: StringFilter<"LanguageLearnerReviewLike"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerReviewLike"> | Date | string
    user?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    review?: XOR<LanguageLearnerReviewScalarRelationFilter, LanguageLearnerReviewWhereInput>
  }, "id" | "userId_reviewId">

  export type LanguageLearnerReviewLikeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewId?: SortOrder
    createdAt?: SortOrder
    _count?: LanguageLearnerReviewLikeCountOrderByAggregateInput
    _max?: LanguageLearnerReviewLikeMaxOrderByAggregateInput
    _min?: LanguageLearnerReviewLikeMinOrderByAggregateInput
  }

  export type LanguageLearnerReviewLikeScalarWhereWithAggregatesInput = {
    AND?: LanguageLearnerReviewLikeScalarWhereWithAggregatesInput | LanguageLearnerReviewLikeScalarWhereWithAggregatesInput[]
    OR?: LanguageLearnerReviewLikeScalarWhereWithAggregatesInput[]
    NOT?: LanguageLearnerReviewLikeScalarWhereWithAggregatesInput | LanguageLearnerReviewLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LanguageLearnerReviewLike"> | string
    userId?: StringWithAggregatesFilter<"LanguageLearnerReviewLike"> | string
    reviewId?: StringWithAggregatesFilter<"LanguageLearnerReviewLike"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LanguageLearnerReviewLike"> | Date | string
  }

  export type LanguageLearnerUserVoteWhereInput = {
    AND?: LanguageLearnerUserVoteWhereInput | LanguageLearnerUserVoteWhereInput[]
    OR?: LanguageLearnerUserVoteWhereInput[]
    NOT?: LanguageLearnerUserVoteWhereInput | LanguageLearnerUserVoteWhereInput[]
    id?: StringFilter<"LanguageLearnerUserVote"> | string
    userId?: StringFilter<"LanguageLearnerUserVote"> | string
    voterId?: StringFilter<"LanguageLearnerUserVote"> | string
    voteType?: StringFilter<"LanguageLearnerUserVote"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerUserVote"> | Date | string
    user?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    voter?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
  }

  export type LanguageLearnerUserVoteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    voterId?: SortOrder
    voteType?: SortOrder
    createdAt?: SortOrder
    user?: LanguageLearnerUserOrderByWithRelationInput
    voter?: LanguageLearnerUserOrderByWithRelationInput
  }

  export type LanguageLearnerUserVoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_voterId?: LanguageLearnerUserVoteUserIdVoterIdCompoundUniqueInput
    AND?: LanguageLearnerUserVoteWhereInput | LanguageLearnerUserVoteWhereInput[]
    OR?: LanguageLearnerUserVoteWhereInput[]
    NOT?: LanguageLearnerUserVoteWhereInput | LanguageLearnerUserVoteWhereInput[]
    userId?: StringFilter<"LanguageLearnerUserVote"> | string
    voterId?: StringFilter<"LanguageLearnerUserVote"> | string
    voteType?: StringFilter<"LanguageLearnerUserVote"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerUserVote"> | Date | string
    user?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
    voter?: XOR<LanguageLearnerUserScalarRelationFilter, LanguageLearnerUserWhereInput>
  }, "id" | "userId_voterId">

  export type LanguageLearnerUserVoteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    voterId?: SortOrder
    voteType?: SortOrder
    createdAt?: SortOrder
    _count?: LanguageLearnerUserVoteCountOrderByAggregateInput
    _max?: LanguageLearnerUserVoteMaxOrderByAggregateInput
    _min?: LanguageLearnerUserVoteMinOrderByAggregateInput
  }

  export type LanguageLearnerUserVoteScalarWhereWithAggregatesInput = {
    AND?: LanguageLearnerUserVoteScalarWhereWithAggregatesInput | LanguageLearnerUserVoteScalarWhereWithAggregatesInput[]
    OR?: LanguageLearnerUserVoteScalarWhereWithAggregatesInput[]
    NOT?: LanguageLearnerUserVoteScalarWhereWithAggregatesInput | LanguageLearnerUserVoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LanguageLearnerUserVote"> | string
    userId?: StringWithAggregatesFilter<"LanguageLearnerUserVote"> | string
    voterId?: StringWithAggregatesFilter<"LanguageLearnerUserVote"> | string
    voteType?: StringWithAggregatesFilter<"LanguageLearnerUserVote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LanguageLearnerUserVote"> | Date | string
  }

  export type GameHubUserWhereInput = {
    AND?: GameHubUserWhereInput | GameHubUserWhereInput[]
    OR?: GameHubUserWhereInput[]
    NOT?: GameHubUserWhereInput | GameHubUserWhereInput[]
    id?: StringFilter<"GameHubUser"> | string
    email?: StringFilter<"GameHubUser"> | string
    name?: StringFilter<"GameHubUser"> | string
    password?: StringFilter<"GameHubUser"> | string
    role?: StringFilter<"GameHubUser"> | string
    validated?: BoolFilter<"GameHubUser"> | boolean
    createdAt?: DateTimeFilter<"GameHubUser"> | Date | string
    players?: GameHubPlayerListRelationFilter
    tournaments?: GameHubTournamentListRelationFilter
  }

  export type GameHubUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    players?: GameHubPlayerOrderByRelationAggregateInput
    tournaments?: GameHubTournamentOrderByRelationAggregateInput
  }

  export type GameHubUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: GameHubUserWhereInput | GameHubUserWhereInput[]
    OR?: GameHubUserWhereInput[]
    NOT?: GameHubUserWhereInput | GameHubUserWhereInput[]
    name?: StringFilter<"GameHubUser"> | string
    password?: StringFilter<"GameHubUser"> | string
    role?: StringFilter<"GameHubUser"> | string
    validated?: BoolFilter<"GameHubUser"> | boolean
    createdAt?: DateTimeFilter<"GameHubUser"> | Date | string
    players?: GameHubPlayerListRelationFilter
    tournaments?: GameHubTournamentListRelationFilter
  }, "id" | "email">

  export type GameHubUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: GameHubUserCountOrderByAggregateInput
    _max?: GameHubUserMaxOrderByAggregateInput
    _min?: GameHubUserMinOrderByAggregateInput
  }

  export type GameHubUserScalarWhereWithAggregatesInput = {
    AND?: GameHubUserScalarWhereWithAggregatesInput | GameHubUserScalarWhereWithAggregatesInput[]
    OR?: GameHubUserScalarWhereWithAggregatesInput[]
    NOT?: GameHubUserScalarWhereWithAggregatesInput | GameHubUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameHubUser"> | string
    email?: StringWithAggregatesFilter<"GameHubUser"> | string
    name?: StringWithAggregatesFilter<"GameHubUser"> | string
    password?: StringWithAggregatesFilter<"GameHubUser"> | string
    role?: StringWithAggregatesFilter<"GameHubUser"> | string
    validated?: BoolWithAggregatesFilter<"GameHubUser"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"GameHubUser"> | Date | string
  }

  export type GameHubPlayerWhereInput = {
    AND?: GameHubPlayerWhereInput | GameHubPlayerWhereInput[]
    OR?: GameHubPlayerWhereInput[]
    NOT?: GameHubPlayerWhereInput | GameHubPlayerWhereInput[]
    id?: StringFilter<"GameHubPlayer"> | string
    name?: StringFilter<"GameHubPlayer"> | string
    userId?: StringFilter<"GameHubPlayer"> | string
    rank?: StringFilter<"GameHubPlayer"> | string
    mainGame?: StringFilter<"GameHubPlayer"> | string
    validated?: BoolFilter<"GameHubPlayer"> | boolean
    createdAt?: DateTimeFilter<"GameHubPlayer"> | Date | string
    user?: XOR<GameHubUserScalarRelationFilter, GameHubUserWhereInput>
    tournaments?: GameHubTournamentPlayerListRelationFilter
  }

  export type GameHubPlayerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    rank?: SortOrder
    mainGame?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    user?: GameHubUserOrderByWithRelationInput
    tournaments?: GameHubTournamentPlayerOrderByRelationAggregateInput
  }

  export type GameHubPlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameHubPlayerWhereInput | GameHubPlayerWhereInput[]
    OR?: GameHubPlayerWhereInput[]
    NOT?: GameHubPlayerWhereInput | GameHubPlayerWhereInput[]
    name?: StringFilter<"GameHubPlayer"> | string
    userId?: StringFilter<"GameHubPlayer"> | string
    rank?: StringFilter<"GameHubPlayer"> | string
    mainGame?: StringFilter<"GameHubPlayer"> | string
    validated?: BoolFilter<"GameHubPlayer"> | boolean
    createdAt?: DateTimeFilter<"GameHubPlayer"> | Date | string
    user?: XOR<GameHubUserScalarRelationFilter, GameHubUserWhereInput>
    tournaments?: GameHubTournamentPlayerListRelationFilter
  }, "id">

  export type GameHubPlayerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    rank?: SortOrder
    mainGame?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: GameHubPlayerCountOrderByAggregateInput
    _max?: GameHubPlayerMaxOrderByAggregateInput
    _min?: GameHubPlayerMinOrderByAggregateInput
  }

  export type GameHubPlayerScalarWhereWithAggregatesInput = {
    AND?: GameHubPlayerScalarWhereWithAggregatesInput | GameHubPlayerScalarWhereWithAggregatesInput[]
    OR?: GameHubPlayerScalarWhereWithAggregatesInput[]
    NOT?: GameHubPlayerScalarWhereWithAggregatesInput | GameHubPlayerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameHubPlayer"> | string
    name?: StringWithAggregatesFilter<"GameHubPlayer"> | string
    userId?: StringWithAggregatesFilter<"GameHubPlayer"> | string
    rank?: StringWithAggregatesFilter<"GameHubPlayer"> | string
    mainGame?: StringWithAggregatesFilter<"GameHubPlayer"> | string
    validated?: BoolWithAggregatesFilter<"GameHubPlayer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"GameHubPlayer"> | Date | string
  }

  export type GameHubTournamentWhereInput = {
    AND?: GameHubTournamentWhereInput | GameHubTournamentWhereInput[]
    OR?: GameHubTournamentWhereInput[]
    NOT?: GameHubTournamentWhereInput | GameHubTournamentWhereInput[]
    id?: StringFilter<"GameHubTournament"> | string
    title?: StringFilter<"GameHubTournament"> | string
    game?: StringFilter<"GameHubTournament"> | string
    date?: DateTimeFilter<"GameHubTournament"> | Date | string
    rules?: StringFilter<"GameHubTournament"> | string
    organizerId?: StringFilter<"GameHubTournament"> | string
    createdAt?: DateTimeFilter<"GameHubTournament"> | Date | string
    organizer?: XOR<GameHubUserScalarRelationFilter, GameHubUserWhereInput>
    players?: GameHubTournamentPlayerListRelationFilter
  }

  export type GameHubTournamentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    game?: SortOrder
    date?: SortOrder
    rules?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
    organizer?: GameHubUserOrderByWithRelationInput
    players?: GameHubTournamentPlayerOrderByRelationAggregateInput
  }

  export type GameHubTournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameHubTournamentWhereInput | GameHubTournamentWhereInput[]
    OR?: GameHubTournamentWhereInput[]
    NOT?: GameHubTournamentWhereInput | GameHubTournamentWhereInput[]
    title?: StringFilter<"GameHubTournament"> | string
    game?: StringFilter<"GameHubTournament"> | string
    date?: DateTimeFilter<"GameHubTournament"> | Date | string
    rules?: StringFilter<"GameHubTournament"> | string
    organizerId?: StringFilter<"GameHubTournament"> | string
    createdAt?: DateTimeFilter<"GameHubTournament"> | Date | string
    organizer?: XOR<GameHubUserScalarRelationFilter, GameHubUserWhereInput>
    players?: GameHubTournamentPlayerListRelationFilter
  }, "id">

  export type GameHubTournamentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    game?: SortOrder
    date?: SortOrder
    rules?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
    _count?: GameHubTournamentCountOrderByAggregateInput
    _max?: GameHubTournamentMaxOrderByAggregateInput
    _min?: GameHubTournamentMinOrderByAggregateInput
  }

  export type GameHubTournamentScalarWhereWithAggregatesInput = {
    AND?: GameHubTournamentScalarWhereWithAggregatesInput | GameHubTournamentScalarWhereWithAggregatesInput[]
    OR?: GameHubTournamentScalarWhereWithAggregatesInput[]
    NOT?: GameHubTournamentScalarWhereWithAggregatesInput | GameHubTournamentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameHubTournament"> | string
    title?: StringWithAggregatesFilter<"GameHubTournament"> | string
    game?: StringWithAggregatesFilter<"GameHubTournament"> | string
    date?: DateTimeWithAggregatesFilter<"GameHubTournament"> | Date | string
    rules?: StringWithAggregatesFilter<"GameHubTournament"> | string
    organizerId?: StringWithAggregatesFilter<"GameHubTournament"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GameHubTournament"> | Date | string
  }

  export type GameHubTournamentPlayerWhereInput = {
    AND?: GameHubTournamentPlayerWhereInput | GameHubTournamentPlayerWhereInput[]
    OR?: GameHubTournamentPlayerWhereInput[]
    NOT?: GameHubTournamentPlayerWhereInput | GameHubTournamentPlayerWhereInput[]
    id?: StringFilter<"GameHubTournamentPlayer"> | string
    tournamentId?: StringFilter<"GameHubTournamentPlayer"> | string
    playerId?: StringFilter<"GameHubTournamentPlayer"> | string
    joinedAt?: DateTimeFilter<"GameHubTournamentPlayer"> | Date | string
    tournament?: XOR<GameHubTournamentScalarRelationFilter, GameHubTournamentWhereInput>
    player?: XOR<GameHubPlayerScalarRelationFilter, GameHubPlayerWhereInput>
  }

  export type GameHubTournamentPlayerOrderByWithRelationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    playerId?: SortOrder
    joinedAt?: SortOrder
    tournament?: GameHubTournamentOrderByWithRelationInput
    player?: GameHubPlayerOrderByWithRelationInput
  }

  export type GameHubTournamentPlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tournamentId_playerId?: GameHubTournamentPlayerTournamentIdPlayerIdCompoundUniqueInput
    AND?: GameHubTournamentPlayerWhereInput | GameHubTournamentPlayerWhereInput[]
    OR?: GameHubTournamentPlayerWhereInput[]
    NOT?: GameHubTournamentPlayerWhereInput | GameHubTournamentPlayerWhereInput[]
    tournamentId?: StringFilter<"GameHubTournamentPlayer"> | string
    playerId?: StringFilter<"GameHubTournamentPlayer"> | string
    joinedAt?: DateTimeFilter<"GameHubTournamentPlayer"> | Date | string
    tournament?: XOR<GameHubTournamentScalarRelationFilter, GameHubTournamentWhereInput>
    player?: XOR<GameHubPlayerScalarRelationFilter, GameHubPlayerWhereInput>
  }, "id" | "tournamentId_playerId">

  export type GameHubTournamentPlayerOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    playerId?: SortOrder
    joinedAt?: SortOrder
    _count?: GameHubTournamentPlayerCountOrderByAggregateInput
    _max?: GameHubTournamentPlayerMaxOrderByAggregateInput
    _min?: GameHubTournamentPlayerMinOrderByAggregateInput
  }

  export type GameHubTournamentPlayerScalarWhereWithAggregatesInput = {
    AND?: GameHubTournamentPlayerScalarWhereWithAggregatesInput | GameHubTournamentPlayerScalarWhereWithAggregatesInput[]
    OR?: GameHubTournamentPlayerScalarWhereWithAggregatesInput[]
    NOT?: GameHubTournamentPlayerScalarWhereWithAggregatesInput | GameHubTournamentPlayerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameHubTournamentPlayer"> | string
    tournamentId?: StringWithAggregatesFilter<"GameHubTournamentPlayer"> | string
    playerId?: StringWithAggregatesFilter<"GameHubTournamentPlayer"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"GameHubTournamentPlayer"> | Date | string
  }

  export type UserHealthTrackerWhereInput = {
    AND?: UserHealthTrackerWhereInput | UserHealthTrackerWhereInput[]
    OR?: UserHealthTrackerWhereInput[]
    NOT?: UserHealthTrackerWhereInput | UserHealthTrackerWhereInput[]
    id?: StringFilter<"UserHealthTracker"> | string
    email?: StringFilter<"UserHealthTracker"> | string
    name?: StringFilter<"UserHealthTracker"> | string
    password?: StringFilter<"UserHealthTracker"> | string
    createdAt?: DateTimeFilter<"UserHealthTracker"> | Date | string
    schedules?: ScheduleHealthTrackerListRelationFilter
    records?: RecordHealthTrackerListRelationFilter
  }

  export type UserHealthTrackerOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    schedules?: ScheduleHealthTrackerOrderByRelationAggregateInput
    records?: RecordHealthTrackerOrderByRelationAggregateInput
  }

  export type UserHealthTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserHealthTrackerWhereInput | UserHealthTrackerWhereInput[]
    OR?: UserHealthTrackerWhereInput[]
    NOT?: UserHealthTrackerWhereInput | UserHealthTrackerWhereInput[]
    name?: StringFilter<"UserHealthTracker"> | string
    password?: StringFilter<"UserHealthTracker"> | string
    createdAt?: DateTimeFilter<"UserHealthTracker"> | Date | string
    schedules?: ScheduleHealthTrackerListRelationFilter
    records?: RecordHealthTrackerListRelationFilter
  }, "id" | "email">

  export type UserHealthTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserHealthTrackerCountOrderByAggregateInput
    _max?: UserHealthTrackerMaxOrderByAggregateInput
    _min?: UserHealthTrackerMinOrderByAggregateInput
  }

  export type UserHealthTrackerScalarWhereWithAggregatesInput = {
    AND?: UserHealthTrackerScalarWhereWithAggregatesInput | UserHealthTrackerScalarWhereWithAggregatesInput[]
    OR?: UserHealthTrackerScalarWhereWithAggregatesInput[]
    NOT?: UserHealthTrackerScalarWhereWithAggregatesInput | UserHealthTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserHealthTracker"> | string
    email?: StringWithAggregatesFilter<"UserHealthTracker"> | string
    name?: StringWithAggregatesFilter<"UserHealthTracker"> | string
    password?: StringWithAggregatesFilter<"UserHealthTracker"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserHealthTracker"> | Date | string
  }

  export type ScheduleHealthTrackerWhereInput = {
    AND?: ScheduleHealthTrackerWhereInput | ScheduleHealthTrackerWhereInput[]
    OR?: ScheduleHealthTrackerWhereInput[]
    NOT?: ScheduleHealthTrackerWhereInput | ScheduleHealthTrackerWhereInput[]
    id?: StringFilter<"ScheduleHealthTracker"> | string
    userId?: StringFilter<"ScheduleHealthTracker"> | string
    type?: StringFilter<"ScheduleHealthTracker"> | string
    title?: StringFilter<"ScheduleHealthTracker"> | string
    dateTime?: DateTimeFilter<"ScheduleHealthTracker"> | Date | string
    notes?: StringNullableFilter<"ScheduleHealthTracker"> | string | null
    createdAt?: DateTimeFilter<"ScheduleHealthTracker"> | Date | string
    user?: XOR<UserHealthTrackerScalarRelationFilter, UserHealthTrackerWhereInput>
  }

  export type ScheduleHealthTrackerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    dateTime?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserHealthTrackerOrderByWithRelationInput
  }

  export type ScheduleHealthTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduleHealthTrackerWhereInput | ScheduleHealthTrackerWhereInput[]
    OR?: ScheduleHealthTrackerWhereInput[]
    NOT?: ScheduleHealthTrackerWhereInput | ScheduleHealthTrackerWhereInput[]
    userId?: StringFilter<"ScheduleHealthTracker"> | string
    type?: StringFilter<"ScheduleHealthTracker"> | string
    title?: StringFilter<"ScheduleHealthTracker"> | string
    dateTime?: DateTimeFilter<"ScheduleHealthTracker"> | Date | string
    notes?: StringNullableFilter<"ScheduleHealthTracker"> | string | null
    createdAt?: DateTimeFilter<"ScheduleHealthTracker"> | Date | string
    user?: XOR<UserHealthTrackerScalarRelationFilter, UserHealthTrackerWhereInput>
  }, "id">

  export type ScheduleHealthTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    dateTime?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ScheduleHealthTrackerCountOrderByAggregateInput
    _max?: ScheduleHealthTrackerMaxOrderByAggregateInput
    _min?: ScheduleHealthTrackerMinOrderByAggregateInput
  }

  export type ScheduleHealthTrackerScalarWhereWithAggregatesInput = {
    AND?: ScheduleHealthTrackerScalarWhereWithAggregatesInput | ScheduleHealthTrackerScalarWhereWithAggregatesInput[]
    OR?: ScheduleHealthTrackerScalarWhereWithAggregatesInput[]
    NOT?: ScheduleHealthTrackerScalarWhereWithAggregatesInput | ScheduleHealthTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScheduleHealthTracker"> | string
    userId?: StringWithAggregatesFilter<"ScheduleHealthTracker"> | string
    type?: StringWithAggregatesFilter<"ScheduleHealthTracker"> | string
    title?: StringWithAggregatesFilter<"ScheduleHealthTracker"> | string
    dateTime?: DateTimeWithAggregatesFilter<"ScheduleHealthTracker"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"ScheduleHealthTracker"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ScheduleHealthTracker"> | Date | string
  }

  export type RecordHealthTrackerWhereInput = {
    AND?: RecordHealthTrackerWhereInput | RecordHealthTrackerWhereInput[]
    OR?: RecordHealthTrackerWhereInput[]
    NOT?: RecordHealthTrackerWhereInput | RecordHealthTrackerWhereInput[]
    id?: StringFilter<"RecordHealthTracker"> | string
    userId?: StringFilter<"RecordHealthTracker"> | string
    type?: StringFilter<"RecordHealthTracker"> | string
    description?: StringFilter<"RecordHealthTracker"> | string
    date?: DateTimeFilter<"RecordHealthTracker"> | Date | string
    createdAt?: DateTimeFilter<"RecordHealthTracker"> | Date | string
    user?: XOR<UserHealthTrackerScalarRelationFilter, UserHealthTrackerWhereInput>
  }

  export type RecordHealthTrackerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    user?: UserHealthTrackerOrderByWithRelationInput
  }

  export type RecordHealthTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecordHealthTrackerWhereInput | RecordHealthTrackerWhereInput[]
    OR?: RecordHealthTrackerWhereInput[]
    NOT?: RecordHealthTrackerWhereInput | RecordHealthTrackerWhereInput[]
    userId?: StringFilter<"RecordHealthTracker"> | string
    type?: StringFilter<"RecordHealthTracker"> | string
    description?: StringFilter<"RecordHealthTracker"> | string
    date?: DateTimeFilter<"RecordHealthTracker"> | Date | string
    createdAt?: DateTimeFilter<"RecordHealthTracker"> | Date | string
    user?: XOR<UserHealthTrackerScalarRelationFilter, UserHealthTrackerWhereInput>
  }, "id">

  export type RecordHealthTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    _count?: RecordHealthTrackerCountOrderByAggregateInput
    _max?: RecordHealthTrackerMaxOrderByAggregateInput
    _min?: RecordHealthTrackerMinOrderByAggregateInput
  }

  export type RecordHealthTrackerScalarWhereWithAggregatesInput = {
    AND?: RecordHealthTrackerScalarWhereWithAggregatesInput | RecordHealthTrackerScalarWhereWithAggregatesInput[]
    OR?: RecordHealthTrackerScalarWhereWithAggregatesInput[]
    NOT?: RecordHealthTrackerScalarWhereWithAggregatesInput | RecordHealthTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecordHealthTracker"> | string
    userId?: StringWithAggregatesFilter<"RecordHealthTracker"> | string
    type?: StringWithAggregatesFilter<"RecordHealthTracker"> | string
    description?: StringWithAggregatesFilter<"RecordHealthTracker"> | string
    date?: DateTimeWithAggregatesFilter<"RecordHealthTracker"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RecordHealthTracker"> | Date | string
  }

  export type ClinicHealthTrackerWhereInput = {
    AND?: ClinicHealthTrackerWhereInput | ClinicHealthTrackerWhereInput[]
    OR?: ClinicHealthTrackerWhereInput[]
    NOT?: ClinicHealthTrackerWhereInput | ClinicHealthTrackerWhereInput[]
    id?: StringFilter<"ClinicHealthTracker"> | string
    name?: StringFilter<"ClinicHealthTracker"> | string
    location?: StringFilter<"ClinicHealthTracker"> | string
    availableSlots?: StringNullableListFilter<"ClinicHealthTracker">
    contact?: StringFilter<"ClinicHealthTracker"> | string
    createdAt?: DateTimeFilter<"ClinicHealthTracker"> | Date | string
  }

  export type ClinicHealthTrackerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
  }

  export type ClinicHealthTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClinicHealthTrackerWhereInput | ClinicHealthTrackerWhereInput[]
    OR?: ClinicHealthTrackerWhereInput[]
    NOT?: ClinicHealthTrackerWhereInput | ClinicHealthTrackerWhereInput[]
    name?: StringFilter<"ClinicHealthTracker"> | string
    location?: StringFilter<"ClinicHealthTracker"> | string
    availableSlots?: StringNullableListFilter<"ClinicHealthTracker">
    contact?: StringFilter<"ClinicHealthTracker"> | string
    createdAt?: DateTimeFilter<"ClinicHealthTracker"> | Date | string
  }, "id">

  export type ClinicHealthTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    _count?: ClinicHealthTrackerCountOrderByAggregateInput
    _max?: ClinicHealthTrackerMaxOrderByAggregateInput
    _min?: ClinicHealthTrackerMinOrderByAggregateInput
  }

  export type ClinicHealthTrackerScalarWhereWithAggregatesInput = {
    AND?: ClinicHealthTrackerScalarWhereWithAggregatesInput | ClinicHealthTrackerScalarWhereWithAggregatesInput[]
    OR?: ClinicHealthTrackerScalarWhereWithAggregatesInput[]
    NOT?: ClinicHealthTrackerScalarWhereWithAggregatesInput | ClinicHealthTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClinicHealthTracker"> | string
    name?: StringWithAggregatesFilter<"ClinicHealthTracker"> | string
    location?: StringWithAggregatesFilter<"ClinicHealthTracker"> | string
    availableSlots?: StringNullableListFilter<"ClinicHealthTracker">
    contact?: StringWithAggregatesFilter<"ClinicHealthTracker"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ClinicHealthTracker"> | Date | string
  }

  export type UserMusicLoverWhereInput = {
    AND?: UserMusicLoverWhereInput | UserMusicLoverWhereInput[]
    OR?: UserMusicLoverWhereInput[]
    NOT?: UserMusicLoverWhereInput | UserMusicLoverWhereInput[]
    id?: StringFilter<"UserMusicLover"> | string
    email?: StringFilter<"UserMusicLover"> | string
    name?: StringFilter<"UserMusicLover"> | string
    password?: StringFilter<"UserMusicLover"> | string
    createdAt?: DateTimeFilter<"UserMusicLover"> | Date | string
    concerts?: ConcertMusicLoverListRelationFilter
    reviews?: ReviewMusicLoverListRelationFilter
  }

  export type UserMusicLoverOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    concerts?: ConcertMusicLoverOrderByRelationAggregateInput
    reviews?: ReviewMusicLoverOrderByRelationAggregateInput
  }

  export type UserMusicLoverWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserMusicLoverWhereInput | UserMusicLoverWhereInput[]
    OR?: UserMusicLoverWhereInput[]
    NOT?: UserMusicLoverWhereInput | UserMusicLoverWhereInput[]
    name?: StringFilter<"UserMusicLover"> | string
    password?: StringFilter<"UserMusicLover"> | string
    createdAt?: DateTimeFilter<"UserMusicLover"> | Date | string
    concerts?: ConcertMusicLoverListRelationFilter
    reviews?: ReviewMusicLoverListRelationFilter
  }, "id" | "email">

  export type UserMusicLoverOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserMusicLoverCountOrderByAggregateInput
    _max?: UserMusicLoverMaxOrderByAggregateInput
    _min?: UserMusicLoverMinOrderByAggregateInput
  }

  export type UserMusicLoverScalarWhereWithAggregatesInput = {
    AND?: UserMusicLoverScalarWhereWithAggregatesInput | UserMusicLoverScalarWhereWithAggregatesInput[]
    OR?: UserMusicLoverScalarWhereWithAggregatesInput[]
    NOT?: UserMusicLoverScalarWhereWithAggregatesInput | UserMusicLoverScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserMusicLover"> | string
    email?: StringWithAggregatesFilter<"UserMusicLover"> | string
    name?: StringWithAggregatesFilter<"UserMusicLover"> | string
    password?: StringWithAggregatesFilter<"UserMusicLover"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserMusicLover"> | Date | string
  }

  export type ConcertMusicLoverWhereInput = {
    AND?: ConcertMusicLoverWhereInput | ConcertMusicLoverWhereInput[]
    OR?: ConcertMusicLoverWhereInput[]
    NOT?: ConcertMusicLoverWhereInput | ConcertMusicLoverWhereInput[]
    id?: StringFilter<"ConcertMusicLover"> | string
    title?: StringFilter<"ConcertMusicLover"> | string
    date?: DateTimeFilter<"ConcertMusicLover"> | Date | string
    venue?: StringFilter<"ConcertMusicLover"> | string
    genre?: StringFilter<"ConcertMusicLover"> | string
    submittedBy?: StringFilter<"ConcertMusicLover"> | string
    validated?: BoolFilter<"ConcertMusicLover"> | boolean
    createdAt?: DateTimeFilter<"ConcertMusicLover"> | Date | string
    user?: XOR<UserMusicLoverScalarRelationFilter, UserMusicLoverWhereInput>
    reviews?: ReviewMusicLoverListRelationFilter
  }

  export type ConcertMusicLoverOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    genre?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    user?: UserMusicLoverOrderByWithRelationInput
    reviews?: ReviewMusicLoverOrderByRelationAggregateInput
  }

  export type ConcertMusicLoverWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConcertMusicLoverWhereInput | ConcertMusicLoverWhereInput[]
    OR?: ConcertMusicLoverWhereInput[]
    NOT?: ConcertMusicLoverWhereInput | ConcertMusicLoverWhereInput[]
    title?: StringFilter<"ConcertMusicLover"> | string
    date?: DateTimeFilter<"ConcertMusicLover"> | Date | string
    venue?: StringFilter<"ConcertMusicLover"> | string
    genre?: StringFilter<"ConcertMusicLover"> | string
    submittedBy?: StringFilter<"ConcertMusicLover"> | string
    validated?: BoolFilter<"ConcertMusicLover"> | boolean
    createdAt?: DateTimeFilter<"ConcertMusicLover"> | Date | string
    user?: XOR<UserMusicLoverScalarRelationFilter, UserMusicLoverWhereInput>
    reviews?: ReviewMusicLoverListRelationFilter
  }, "id">

  export type ConcertMusicLoverOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    genre?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: ConcertMusicLoverCountOrderByAggregateInput
    _max?: ConcertMusicLoverMaxOrderByAggregateInput
    _min?: ConcertMusicLoverMinOrderByAggregateInput
  }

  export type ConcertMusicLoverScalarWhereWithAggregatesInput = {
    AND?: ConcertMusicLoverScalarWhereWithAggregatesInput | ConcertMusicLoverScalarWhereWithAggregatesInput[]
    OR?: ConcertMusicLoverScalarWhereWithAggregatesInput[]
    NOT?: ConcertMusicLoverScalarWhereWithAggregatesInput | ConcertMusicLoverScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConcertMusicLover"> | string
    title?: StringWithAggregatesFilter<"ConcertMusicLover"> | string
    date?: DateTimeWithAggregatesFilter<"ConcertMusicLover"> | Date | string
    venue?: StringWithAggregatesFilter<"ConcertMusicLover"> | string
    genre?: StringWithAggregatesFilter<"ConcertMusicLover"> | string
    submittedBy?: StringWithAggregatesFilter<"ConcertMusicLover"> | string
    validated?: BoolWithAggregatesFilter<"ConcertMusicLover"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ConcertMusicLover"> | Date | string
  }

  export type ReviewMusicLoverWhereInput = {
    AND?: ReviewMusicLoverWhereInput | ReviewMusicLoverWhereInput[]
    OR?: ReviewMusicLoverWhereInput[]
    NOT?: ReviewMusicLoverWhereInput | ReviewMusicLoverWhereInput[]
    id?: StringFilter<"ReviewMusicLover"> | string
    concertId?: StringFilter<"ReviewMusicLover"> | string
    userId?: StringFilter<"ReviewMusicLover"> | string
    rating?: IntFilter<"ReviewMusicLover"> | number
    comment?: StringFilter<"ReviewMusicLover"> | string
    validated?: BoolFilter<"ReviewMusicLover"> | boolean
    createdAt?: DateTimeFilter<"ReviewMusicLover"> | Date | string
    user?: XOR<UserMusicLoverScalarRelationFilter, UserMusicLoverWhereInput>
    concert?: XOR<ConcertMusicLoverScalarRelationFilter, ConcertMusicLoverWhereInput>
  }

  export type ReviewMusicLoverOrderByWithRelationInput = {
    id?: SortOrder
    concertId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    user?: UserMusicLoverOrderByWithRelationInput
    concert?: ConcertMusicLoverOrderByWithRelationInput
  }

  export type ReviewMusicLoverWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewMusicLoverWhereInput | ReviewMusicLoverWhereInput[]
    OR?: ReviewMusicLoverWhereInput[]
    NOT?: ReviewMusicLoverWhereInput | ReviewMusicLoverWhereInput[]
    concertId?: StringFilter<"ReviewMusicLover"> | string
    userId?: StringFilter<"ReviewMusicLover"> | string
    rating?: IntFilter<"ReviewMusicLover"> | number
    comment?: StringFilter<"ReviewMusicLover"> | string
    validated?: BoolFilter<"ReviewMusicLover"> | boolean
    createdAt?: DateTimeFilter<"ReviewMusicLover"> | Date | string
    user?: XOR<UserMusicLoverScalarRelationFilter, UserMusicLoverWhereInput>
    concert?: XOR<ConcertMusicLoverScalarRelationFilter, ConcertMusicLoverWhereInput>
  }, "id">

  export type ReviewMusicLoverOrderByWithAggregationInput = {
    id?: SortOrder
    concertId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: ReviewMusicLoverCountOrderByAggregateInput
    _avg?: ReviewMusicLoverAvgOrderByAggregateInput
    _max?: ReviewMusicLoverMaxOrderByAggregateInput
    _min?: ReviewMusicLoverMinOrderByAggregateInput
    _sum?: ReviewMusicLoverSumOrderByAggregateInput
  }

  export type ReviewMusicLoverScalarWhereWithAggregatesInput = {
    AND?: ReviewMusicLoverScalarWhereWithAggregatesInput | ReviewMusicLoverScalarWhereWithAggregatesInput[]
    OR?: ReviewMusicLoverScalarWhereWithAggregatesInput[]
    NOT?: ReviewMusicLoverScalarWhereWithAggregatesInput | ReviewMusicLoverScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReviewMusicLover"> | string
    concertId?: StringWithAggregatesFilter<"ReviewMusicLover"> | string
    userId?: StringWithAggregatesFilter<"ReviewMusicLover"> | string
    rating?: IntWithAggregatesFilter<"ReviewMusicLover"> | number
    comment?: StringWithAggregatesFilter<"ReviewMusicLover"> | string
    validated?: BoolWithAggregatesFilter<"ReviewMusicLover"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ReviewMusicLover"> | Date | string
  }

  export type UserSocialButterflyWhereInput = {
    AND?: UserSocialButterflyWhereInput | UserSocialButterflyWhereInput[]
    OR?: UserSocialButterflyWhereInput[]
    NOT?: UserSocialButterflyWhereInput | UserSocialButterflyWhereInput[]
    id?: StringFilter<"UserSocialButterfly"> | string
    email?: StringFilter<"UserSocialButterfly"> | string
    name?: StringFilter<"UserSocialButterfly"> | string
    password?: StringFilter<"UserSocialButterfly"> | string
    createdAt?: DateTimeFilter<"UserSocialButterfly"> | Date | string
    events?: EventSocialButterflyListRelationFilter
    reviews?: ReviewSocialButterflyListRelationFilter
    likes?: LikeSocialButterflyListRelationFilter
    bookmarks?: BookmarkSocialButterflyListRelationFilter
    reports?: ReportSocialButterflyListRelationFilter
  }

  export type UserSocialButterflyOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    events?: EventSocialButterflyOrderByRelationAggregateInput
    reviews?: ReviewSocialButterflyOrderByRelationAggregateInput
    likes?: LikeSocialButterflyOrderByRelationAggregateInput
    bookmarks?: BookmarkSocialButterflyOrderByRelationAggregateInput
    reports?: ReportSocialButterflyOrderByRelationAggregateInput
  }

  export type UserSocialButterflyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserSocialButterflyWhereInput | UserSocialButterflyWhereInput[]
    OR?: UserSocialButterflyWhereInput[]
    NOT?: UserSocialButterflyWhereInput | UserSocialButterflyWhereInput[]
    name?: StringFilter<"UserSocialButterfly"> | string
    password?: StringFilter<"UserSocialButterfly"> | string
    createdAt?: DateTimeFilter<"UserSocialButterfly"> | Date | string
    events?: EventSocialButterflyListRelationFilter
    reviews?: ReviewSocialButterflyListRelationFilter
    likes?: LikeSocialButterflyListRelationFilter
    bookmarks?: BookmarkSocialButterflyListRelationFilter
    reports?: ReportSocialButterflyListRelationFilter
  }, "id" | "email">

  export type UserSocialButterflyOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserSocialButterflyCountOrderByAggregateInput
    _max?: UserSocialButterflyMaxOrderByAggregateInput
    _min?: UserSocialButterflyMinOrderByAggregateInput
  }

  export type UserSocialButterflyScalarWhereWithAggregatesInput = {
    AND?: UserSocialButterflyScalarWhereWithAggregatesInput | UserSocialButterflyScalarWhereWithAggregatesInput[]
    OR?: UserSocialButterflyScalarWhereWithAggregatesInput[]
    NOT?: UserSocialButterflyScalarWhereWithAggregatesInput | UserSocialButterflyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSocialButterfly"> | string
    email?: StringWithAggregatesFilter<"UserSocialButterfly"> | string
    name?: StringWithAggregatesFilter<"UserSocialButterfly"> | string
    password?: StringWithAggregatesFilter<"UserSocialButterfly"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSocialButterfly"> | Date | string
  }

  export type EventSocialButterflyWhereInput = {
    AND?: EventSocialButterflyWhereInput | EventSocialButterflyWhereInput[]
    OR?: EventSocialButterflyWhereInput[]
    NOT?: EventSocialButterflyWhereInput | EventSocialButterflyWhereInput[]
    id?: StringFilter<"EventSocialButterfly"> | string
    title?: StringFilter<"EventSocialButterfly"> | string
    description?: StringFilter<"EventSocialButterfly"> | string
    date?: DateTimeFilter<"EventSocialButterfly"> | Date | string
    location?: StringFilter<"EventSocialButterfly"> | string
    category?: StringFilter<"EventSocialButterfly"> | string
    submittedBy?: StringFilter<"EventSocialButterfly"> | string
    validated?: BoolFilter<"EventSocialButterfly"> | boolean
    createdAt?: DateTimeFilter<"EventSocialButterfly"> | Date | string
    owner?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    reviews?: ReviewSocialButterflyListRelationFilter
    bookmarks?: BookmarkSocialButterflyListRelationFilter
    likes?: LikeSocialButterflyListRelationFilter
    reports?: ReportSocialButterflyListRelationFilter
  }

  export type EventSocialButterflyOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    category?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    owner?: UserSocialButterflyOrderByWithRelationInput
    reviews?: ReviewSocialButterflyOrderByRelationAggregateInput
    bookmarks?: BookmarkSocialButterflyOrderByRelationAggregateInput
    likes?: LikeSocialButterflyOrderByRelationAggregateInput
    reports?: ReportSocialButterflyOrderByRelationAggregateInput
  }

  export type EventSocialButterflyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventSocialButterflyWhereInput | EventSocialButterflyWhereInput[]
    OR?: EventSocialButterflyWhereInput[]
    NOT?: EventSocialButterflyWhereInput | EventSocialButterflyWhereInput[]
    title?: StringFilter<"EventSocialButterfly"> | string
    description?: StringFilter<"EventSocialButterfly"> | string
    date?: DateTimeFilter<"EventSocialButterfly"> | Date | string
    location?: StringFilter<"EventSocialButterfly"> | string
    category?: StringFilter<"EventSocialButterfly"> | string
    submittedBy?: StringFilter<"EventSocialButterfly"> | string
    validated?: BoolFilter<"EventSocialButterfly"> | boolean
    createdAt?: DateTimeFilter<"EventSocialButterfly"> | Date | string
    owner?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    reviews?: ReviewSocialButterflyListRelationFilter
    bookmarks?: BookmarkSocialButterflyListRelationFilter
    likes?: LikeSocialButterflyListRelationFilter
    reports?: ReportSocialButterflyListRelationFilter
  }, "id">

  export type EventSocialButterflyOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    category?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: EventSocialButterflyCountOrderByAggregateInput
    _max?: EventSocialButterflyMaxOrderByAggregateInput
    _min?: EventSocialButterflyMinOrderByAggregateInput
  }

  export type EventSocialButterflyScalarWhereWithAggregatesInput = {
    AND?: EventSocialButterflyScalarWhereWithAggregatesInput | EventSocialButterflyScalarWhereWithAggregatesInput[]
    OR?: EventSocialButterflyScalarWhereWithAggregatesInput[]
    NOT?: EventSocialButterflyScalarWhereWithAggregatesInput | EventSocialButterflyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventSocialButterfly"> | string
    title?: StringWithAggregatesFilter<"EventSocialButterfly"> | string
    description?: StringWithAggregatesFilter<"EventSocialButterfly"> | string
    date?: DateTimeWithAggregatesFilter<"EventSocialButterfly"> | Date | string
    location?: StringWithAggregatesFilter<"EventSocialButterfly"> | string
    category?: StringWithAggregatesFilter<"EventSocialButterfly"> | string
    submittedBy?: StringWithAggregatesFilter<"EventSocialButterfly"> | string
    validated?: BoolWithAggregatesFilter<"EventSocialButterfly"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EventSocialButterfly"> | Date | string
  }

  export type ReviewSocialButterflyWhereInput = {
    AND?: ReviewSocialButterflyWhereInput | ReviewSocialButterflyWhereInput[]
    OR?: ReviewSocialButterflyWhereInput[]
    NOT?: ReviewSocialButterflyWhereInput | ReviewSocialButterflyWhereInput[]
    id?: StringFilter<"ReviewSocialButterfly"> | string
    eventId?: StringFilter<"ReviewSocialButterfly"> | string
    userId?: StringFilter<"ReviewSocialButterfly"> | string
    rating?: IntFilter<"ReviewSocialButterfly"> | number
    comment?: StringFilter<"ReviewSocialButterfly"> | string
    validated?: BoolFilter<"ReviewSocialButterfly"> | boolean
    createdAt?: DateTimeFilter<"ReviewSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyScalarRelationFilter, EventSocialButterflyWhereInput>
    reports?: ReportSocialButterflyListRelationFilter
  }

  export type ReviewSocialButterflyOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    user?: UserSocialButterflyOrderByWithRelationInput
    event?: EventSocialButterflyOrderByWithRelationInput
    reports?: ReportSocialButterflyOrderByRelationAggregateInput
  }

  export type ReviewSocialButterflyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewSocialButterflyWhereInput | ReviewSocialButterflyWhereInput[]
    OR?: ReviewSocialButterflyWhereInput[]
    NOT?: ReviewSocialButterflyWhereInput | ReviewSocialButterflyWhereInput[]
    eventId?: StringFilter<"ReviewSocialButterfly"> | string
    userId?: StringFilter<"ReviewSocialButterfly"> | string
    rating?: IntFilter<"ReviewSocialButterfly"> | number
    comment?: StringFilter<"ReviewSocialButterfly"> | string
    validated?: BoolFilter<"ReviewSocialButterfly"> | boolean
    createdAt?: DateTimeFilter<"ReviewSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyScalarRelationFilter, EventSocialButterflyWhereInput>
    reports?: ReportSocialButterflyListRelationFilter
  }, "id">

  export type ReviewSocialButterflyOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: ReviewSocialButterflyCountOrderByAggregateInput
    _avg?: ReviewSocialButterflyAvgOrderByAggregateInput
    _max?: ReviewSocialButterflyMaxOrderByAggregateInput
    _min?: ReviewSocialButterflyMinOrderByAggregateInput
    _sum?: ReviewSocialButterflySumOrderByAggregateInput
  }

  export type ReviewSocialButterflyScalarWhereWithAggregatesInput = {
    AND?: ReviewSocialButterflyScalarWhereWithAggregatesInput | ReviewSocialButterflyScalarWhereWithAggregatesInput[]
    OR?: ReviewSocialButterflyScalarWhereWithAggregatesInput[]
    NOT?: ReviewSocialButterflyScalarWhereWithAggregatesInput | ReviewSocialButterflyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReviewSocialButterfly"> | string
    eventId?: StringWithAggregatesFilter<"ReviewSocialButterfly"> | string
    userId?: StringWithAggregatesFilter<"ReviewSocialButterfly"> | string
    rating?: IntWithAggregatesFilter<"ReviewSocialButterfly"> | number
    comment?: StringWithAggregatesFilter<"ReviewSocialButterfly"> | string
    validated?: BoolWithAggregatesFilter<"ReviewSocialButterfly"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ReviewSocialButterfly"> | Date | string
  }

  export type LikeSocialButterflyWhereInput = {
    AND?: LikeSocialButterflyWhereInput | LikeSocialButterflyWhereInput[]
    OR?: LikeSocialButterflyWhereInput[]
    NOT?: LikeSocialButterflyWhereInput | LikeSocialButterflyWhereInput[]
    id?: StringFilter<"LikeSocialButterfly"> | string
    eventId?: StringFilter<"LikeSocialButterfly"> | string
    userId?: StringFilter<"LikeSocialButterfly"> | string
    createdAt?: DateTimeFilter<"LikeSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyScalarRelationFilter, EventSocialButterflyWhereInput>
  }

  export type LikeSocialButterflyOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserSocialButterflyOrderByWithRelationInput
    event?: EventSocialButterflyOrderByWithRelationInput
  }

  export type LikeSocialButterflyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_userId?: LikeSocialButterflyEventIdUserIdCompoundUniqueInput
    AND?: LikeSocialButterflyWhereInput | LikeSocialButterflyWhereInput[]
    OR?: LikeSocialButterflyWhereInput[]
    NOT?: LikeSocialButterflyWhereInput | LikeSocialButterflyWhereInput[]
    eventId?: StringFilter<"LikeSocialButterfly"> | string
    userId?: StringFilter<"LikeSocialButterfly"> | string
    createdAt?: DateTimeFilter<"LikeSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyScalarRelationFilter, EventSocialButterflyWhereInput>
  }, "id" | "eventId_userId">

  export type LikeSocialButterflyOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LikeSocialButterflyCountOrderByAggregateInput
    _max?: LikeSocialButterflyMaxOrderByAggregateInput
    _min?: LikeSocialButterflyMinOrderByAggregateInput
  }

  export type LikeSocialButterflyScalarWhereWithAggregatesInput = {
    AND?: LikeSocialButterflyScalarWhereWithAggregatesInput | LikeSocialButterflyScalarWhereWithAggregatesInput[]
    OR?: LikeSocialButterflyScalarWhereWithAggregatesInput[]
    NOT?: LikeSocialButterflyScalarWhereWithAggregatesInput | LikeSocialButterflyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LikeSocialButterfly"> | string
    eventId?: StringWithAggregatesFilter<"LikeSocialButterfly"> | string
    userId?: StringWithAggregatesFilter<"LikeSocialButterfly"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LikeSocialButterfly"> | Date | string
  }

  export type BookmarkSocialButterflyWhereInput = {
    AND?: BookmarkSocialButterflyWhereInput | BookmarkSocialButterflyWhereInput[]
    OR?: BookmarkSocialButterflyWhereInput[]
    NOT?: BookmarkSocialButterflyWhereInput | BookmarkSocialButterflyWhereInput[]
    id?: StringFilter<"BookmarkSocialButterfly"> | string
    eventId?: StringFilter<"BookmarkSocialButterfly"> | string
    userId?: StringFilter<"BookmarkSocialButterfly"> | string
    createdAt?: DateTimeFilter<"BookmarkSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyScalarRelationFilter, EventSocialButterflyWhereInput>
  }

  export type BookmarkSocialButterflyOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserSocialButterflyOrderByWithRelationInput
    event?: EventSocialButterflyOrderByWithRelationInput
  }

  export type BookmarkSocialButterflyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_userId?: BookmarkSocialButterflyEventIdUserIdCompoundUniqueInput
    AND?: BookmarkSocialButterflyWhereInput | BookmarkSocialButterflyWhereInput[]
    OR?: BookmarkSocialButterflyWhereInput[]
    NOT?: BookmarkSocialButterflyWhereInput | BookmarkSocialButterflyWhereInput[]
    eventId?: StringFilter<"BookmarkSocialButterfly"> | string
    userId?: StringFilter<"BookmarkSocialButterfly"> | string
    createdAt?: DateTimeFilter<"BookmarkSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyScalarRelationFilter, EventSocialButterflyWhereInput>
  }, "id" | "eventId_userId">

  export type BookmarkSocialButterflyOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: BookmarkSocialButterflyCountOrderByAggregateInput
    _max?: BookmarkSocialButterflyMaxOrderByAggregateInput
    _min?: BookmarkSocialButterflyMinOrderByAggregateInput
  }

  export type BookmarkSocialButterflyScalarWhereWithAggregatesInput = {
    AND?: BookmarkSocialButterflyScalarWhereWithAggregatesInput | BookmarkSocialButterflyScalarWhereWithAggregatesInput[]
    OR?: BookmarkSocialButterflyScalarWhereWithAggregatesInput[]
    NOT?: BookmarkSocialButterflyScalarWhereWithAggregatesInput | BookmarkSocialButterflyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BookmarkSocialButterfly"> | string
    eventId?: StringWithAggregatesFilter<"BookmarkSocialButterfly"> | string
    userId?: StringWithAggregatesFilter<"BookmarkSocialButterfly"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BookmarkSocialButterfly"> | Date | string
  }

  export type ReportSocialButterflyWhereInput = {
    AND?: ReportSocialButterflyWhereInput | ReportSocialButterflyWhereInput[]
    OR?: ReportSocialButterflyWhereInput[]
    NOT?: ReportSocialButterflyWhereInput | ReportSocialButterflyWhereInput[]
    id?: StringFilter<"ReportSocialButterfly"> | string
    eventId?: StringNullableFilter<"ReportSocialButterfly"> | string | null
    reviewId?: StringNullableFilter<"ReportSocialButterfly"> | string | null
    userId?: StringFilter<"ReportSocialButterfly"> | string
    reason?: StringFilter<"ReportSocialButterfly"> | string
    createdAt?: DateTimeFilter<"ReportSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyNullableScalarRelationFilter, EventSocialButterflyWhereInput> | null
    review?: XOR<ReviewSocialButterflyNullableScalarRelationFilter, ReviewSocialButterflyWhereInput> | null
  }

  export type ReportSocialButterflyOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrderInput | SortOrder
    reviewId?: SortOrderInput | SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    user?: UserSocialButterflyOrderByWithRelationInput
    event?: EventSocialButterflyOrderByWithRelationInput
    review?: ReviewSocialButterflyOrderByWithRelationInput
  }

  export type ReportSocialButterflyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportSocialButterflyWhereInput | ReportSocialButterflyWhereInput[]
    OR?: ReportSocialButterflyWhereInput[]
    NOT?: ReportSocialButterflyWhereInput | ReportSocialButterflyWhereInput[]
    eventId?: StringNullableFilter<"ReportSocialButterfly"> | string | null
    reviewId?: StringNullableFilter<"ReportSocialButterfly"> | string | null
    userId?: StringFilter<"ReportSocialButterfly"> | string
    reason?: StringFilter<"ReportSocialButterfly"> | string
    createdAt?: DateTimeFilter<"ReportSocialButterfly"> | Date | string
    user?: XOR<UserSocialButterflyScalarRelationFilter, UserSocialButterflyWhereInput>
    event?: XOR<EventSocialButterflyNullableScalarRelationFilter, EventSocialButterflyWhereInput> | null
    review?: XOR<ReviewSocialButterflyNullableScalarRelationFilter, ReviewSocialButterflyWhereInput> | null
  }, "id">

  export type ReportSocialButterflyOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrderInput | SortOrder
    reviewId?: SortOrderInput | SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: ReportSocialButterflyCountOrderByAggregateInput
    _max?: ReportSocialButterflyMaxOrderByAggregateInput
    _min?: ReportSocialButterflyMinOrderByAggregateInput
  }

  export type ReportSocialButterflyScalarWhereWithAggregatesInput = {
    AND?: ReportSocialButterflyScalarWhereWithAggregatesInput | ReportSocialButterflyScalarWhereWithAggregatesInput[]
    OR?: ReportSocialButterflyScalarWhereWithAggregatesInput[]
    NOT?: ReportSocialButterflyScalarWhereWithAggregatesInput | ReportSocialButterflyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportSocialButterfly"> | string
    eventId?: StringNullableWithAggregatesFilter<"ReportSocialButterfly"> | string | null
    reviewId?: StringNullableWithAggregatesFilter<"ReportSocialButterfly"> | string | null
    userId?: StringWithAggregatesFilter<"ReportSocialButterfly"> | string
    reason?: StringWithAggregatesFilter<"ReportSocialButterfly"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportSocialButterfly"> | Date | string
  }

  export type UserVolunteerOrgWhereInput = {
    AND?: UserVolunteerOrgWhereInput | UserVolunteerOrgWhereInput[]
    OR?: UserVolunteerOrgWhereInput[]
    NOT?: UserVolunteerOrgWhereInput | UserVolunteerOrgWhereInput[]
    id?: StringFilter<"UserVolunteerOrg"> | string
    email?: StringFilter<"UserVolunteerOrg"> | string
    name?: StringFilter<"UserVolunteerOrg"> | string
    password?: StringFilter<"UserVolunteerOrg"> | string
    createdAt?: DateTimeFilter<"UserVolunteerOrg"> | Date | string
    activities?: VolunteerActivityListRelationFilter
    applications?: VolunteerApplicationListRelationFilter
  }

  export type UserVolunteerOrgOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    activities?: VolunteerActivityOrderByRelationAggregateInput
    applications?: VolunteerApplicationOrderByRelationAggregateInput
  }

  export type UserVolunteerOrgWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserVolunteerOrgWhereInput | UserVolunteerOrgWhereInput[]
    OR?: UserVolunteerOrgWhereInput[]
    NOT?: UserVolunteerOrgWhereInput | UserVolunteerOrgWhereInput[]
    name?: StringFilter<"UserVolunteerOrg"> | string
    password?: StringFilter<"UserVolunteerOrg"> | string
    createdAt?: DateTimeFilter<"UserVolunteerOrg"> | Date | string
    activities?: VolunteerActivityListRelationFilter
    applications?: VolunteerApplicationListRelationFilter
  }, "id" | "email">

  export type UserVolunteerOrgOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserVolunteerOrgCountOrderByAggregateInput
    _max?: UserVolunteerOrgMaxOrderByAggregateInput
    _min?: UserVolunteerOrgMinOrderByAggregateInput
  }

  export type UserVolunteerOrgScalarWhereWithAggregatesInput = {
    AND?: UserVolunteerOrgScalarWhereWithAggregatesInput | UserVolunteerOrgScalarWhereWithAggregatesInput[]
    OR?: UserVolunteerOrgScalarWhereWithAggregatesInput[]
    NOT?: UserVolunteerOrgScalarWhereWithAggregatesInput | UserVolunteerOrgScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserVolunteerOrg"> | string
    email?: StringWithAggregatesFilter<"UserVolunteerOrg"> | string
    name?: StringWithAggregatesFilter<"UserVolunteerOrg"> | string
    password?: StringWithAggregatesFilter<"UserVolunteerOrg"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserVolunteerOrg"> | Date | string
  }

  export type VolunteerActivityWhereInput = {
    AND?: VolunteerActivityWhereInput | VolunteerActivityWhereInput[]
    OR?: VolunteerActivityWhereInput[]
    NOT?: VolunteerActivityWhereInput | VolunteerActivityWhereInput[]
    id?: StringFilter<"VolunteerActivity"> | string
    title?: StringFilter<"VolunteerActivity"> | string
    description?: StringFilter<"VolunteerActivity"> | string
    location?: StringFilter<"VolunteerActivity"> | string
    date?: DateTimeFilter<"VolunteerActivity"> | Date | string
    organizerId?: StringFilter<"VolunteerActivity"> | string
    validated?: BoolFilter<"VolunteerActivity"> | boolean
    createdAt?: DateTimeFilter<"VolunteerActivity"> | Date | string
    organizer?: XOR<UserVolunteerOrgScalarRelationFilter, UserVolunteerOrgWhereInput>
    applications?: VolunteerApplicationListRelationFilter
  }

  export type VolunteerActivityOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    date?: SortOrder
    organizerId?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    organizer?: UserVolunteerOrgOrderByWithRelationInput
    applications?: VolunteerApplicationOrderByRelationAggregateInput
  }

  export type VolunteerActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VolunteerActivityWhereInput | VolunteerActivityWhereInput[]
    OR?: VolunteerActivityWhereInput[]
    NOT?: VolunteerActivityWhereInput | VolunteerActivityWhereInput[]
    title?: StringFilter<"VolunteerActivity"> | string
    description?: StringFilter<"VolunteerActivity"> | string
    location?: StringFilter<"VolunteerActivity"> | string
    date?: DateTimeFilter<"VolunteerActivity"> | Date | string
    organizerId?: StringFilter<"VolunteerActivity"> | string
    validated?: BoolFilter<"VolunteerActivity"> | boolean
    createdAt?: DateTimeFilter<"VolunteerActivity"> | Date | string
    organizer?: XOR<UserVolunteerOrgScalarRelationFilter, UserVolunteerOrgWhereInput>
    applications?: VolunteerApplicationListRelationFilter
  }, "id">

  export type VolunteerActivityOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    date?: SortOrder
    organizerId?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
    _count?: VolunteerActivityCountOrderByAggregateInput
    _max?: VolunteerActivityMaxOrderByAggregateInput
    _min?: VolunteerActivityMinOrderByAggregateInput
  }

  export type VolunteerActivityScalarWhereWithAggregatesInput = {
    AND?: VolunteerActivityScalarWhereWithAggregatesInput | VolunteerActivityScalarWhereWithAggregatesInput[]
    OR?: VolunteerActivityScalarWhereWithAggregatesInput[]
    NOT?: VolunteerActivityScalarWhereWithAggregatesInput | VolunteerActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VolunteerActivity"> | string
    title?: StringWithAggregatesFilter<"VolunteerActivity"> | string
    description?: StringWithAggregatesFilter<"VolunteerActivity"> | string
    location?: StringWithAggregatesFilter<"VolunteerActivity"> | string
    date?: DateTimeWithAggregatesFilter<"VolunteerActivity"> | Date | string
    organizerId?: StringWithAggregatesFilter<"VolunteerActivity"> | string
    validated?: BoolWithAggregatesFilter<"VolunteerActivity"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"VolunteerActivity"> | Date | string
  }

  export type VolunteerApplicationWhereInput = {
    AND?: VolunteerApplicationWhereInput | VolunteerApplicationWhereInput[]
    OR?: VolunteerApplicationWhereInput[]
    NOT?: VolunteerApplicationWhereInput | VolunteerApplicationWhereInput[]
    id?: StringFilter<"VolunteerApplication"> | string
    userId?: StringFilter<"VolunteerApplication"> | string
    activityId?: StringFilter<"VolunteerApplication"> | string
    motivation?: StringFilter<"VolunteerApplication"> | string
    status?: StringFilter<"VolunteerApplication"> | string
    createdAt?: DateTimeFilter<"VolunteerApplication"> | Date | string
    user?: XOR<UserVolunteerOrgScalarRelationFilter, UserVolunteerOrgWhereInput>
    activity?: XOR<VolunteerActivityScalarRelationFilter, VolunteerActivityWhereInput>
  }

  export type VolunteerApplicationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    motivation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    user?: UserVolunteerOrgOrderByWithRelationInput
    activity?: VolunteerActivityOrderByWithRelationInput
  }

  export type VolunteerApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VolunteerApplicationWhereInput | VolunteerApplicationWhereInput[]
    OR?: VolunteerApplicationWhereInput[]
    NOT?: VolunteerApplicationWhereInput | VolunteerApplicationWhereInput[]
    userId?: StringFilter<"VolunteerApplication"> | string
    activityId?: StringFilter<"VolunteerApplication"> | string
    motivation?: StringFilter<"VolunteerApplication"> | string
    status?: StringFilter<"VolunteerApplication"> | string
    createdAt?: DateTimeFilter<"VolunteerApplication"> | Date | string
    user?: XOR<UserVolunteerOrgScalarRelationFilter, UserVolunteerOrgWhereInput>
    activity?: XOR<VolunteerActivityScalarRelationFilter, VolunteerActivityWhereInput>
  }, "id">

  export type VolunteerApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    motivation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: VolunteerApplicationCountOrderByAggregateInput
    _max?: VolunteerApplicationMaxOrderByAggregateInput
    _min?: VolunteerApplicationMinOrderByAggregateInput
  }

  export type VolunteerApplicationScalarWhereWithAggregatesInput = {
    AND?: VolunteerApplicationScalarWhereWithAggregatesInput | VolunteerApplicationScalarWhereWithAggregatesInput[]
    OR?: VolunteerApplicationScalarWhereWithAggregatesInput[]
    NOT?: VolunteerApplicationScalarWhereWithAggregatesInput | VolunteerApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VolunteerApplication"> | string
    userId?: StringWithAggregatesFilter<"VolunteerApplication"> | string
    activityId?: StringWithAggregatesFilter<"VolunteerApplication"> | string
    motivation?: StringWithAggregatesFilter<"VolunteerApplication"> | string
    status?: StringWithAggregatesFilter<"VolunteerApplication"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VolunteerApplication"> | Date | string
  }

  export type EventOrganizerUserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskCreateNestedManyWithoutUserInput
    guests?: EventOrganizerGuestCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskUncheckedCreateNestedManyWithoutUserInput
    guests?: EventOrganizerGuestUncheckedCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueUncheckedCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUpdateManyWithoutUserNestedInput
    guests?: EventOrganizerGuestUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUncheckedUpdateManyWithoutUserNestedInput
    guests?: EventOrganizerGuestUncheckedUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUncheckedUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
  }

  export type EventOrganizerUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerTaskCreateInput = {
    id?: string
    title: string
    description: string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    user: EventOrganizerUserCreateNestedOneWithoutTasksInput
  }

  export type EventOrganizerTaskUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    dueDate: Date | string
    status: string
    userId: string
    createdAt?: Date | string
  }

  export type EventOrganizerTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: EventOrganizerUserUpdateOneRequiredWithoutTasksNestedInput
  }

  export type EventOrganizerTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerTaskCreateManyInput = {
    id?: string
    title: string
    description: string
    dueDate: Date | string
    status: string
    userId: string
    createdAt?: Date | string
  }

  export type EventOrganizerTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerGuestCreateInput = {
    id?: string
    eventId: string
    name: string
    email: string
    phone: string
    status: string
    createdAt?: Date | string
    user: EventOrganizerUserCreateNestedOneWithoutGuestsInput
  }

  export type EventOrganizerGuestUncheckedCreateInput = {
    id?: string
    eventId: string
    name: string
    email: string
    phone: string
    status: string
    userId: string
    createdAt?: Date | string
  }

  export type EventOrganizerGuestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: EventOrganizerUserUpdateOneRequiredWithoutGuestsNestedInput
  }

  export type EventOrganizerGuestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerGuestCreateManyInput = {
    id?: string
    eventId: string
    name: string
    email: string
    phone: string
    status: string
    userId: string
    createdAt?: Date | string
  }

  export type EventOrganizerGuestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerGuestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerVenueCreateInput = {
    id?: string
    name: string
    location: string
    capacity: number
    amenities: string
    createdAt?: Date | string
    user: EventOrganizerUserCreateNestedOneWithoutVenuesInput
  }

  export type EventOrganizerVenueUncheckedCreateInput = {
    id?: string
    name: string
    location: string
    capacity: number
    amenities: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type EventOrganizerVenueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    amenities?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: EventOrganizerUserUpdateOneRequiredWithoutVenuesNestedInput
  }

  export type EventOrganizerVenueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    amenities?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerVenueCreateManyInput = {
    id?: string
    name: string
    location: string
    capacity: number
    amenities: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type EventOrganizerVenueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    amenities?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerVenueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    amenities?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerServiceProviderCreateInput = {
    id?: string
    name: string
    serviceType: string
    contactInfo: string
    createdAt?: Date | string
    user: EventOrganizerUserCreateNestedOneWithoutServiceProvidersInput
  }

  export type EventOrganizerServiceProviderUncheckedCreateInput = {
    id?: string
    name: string
    serviceType: string
    contactInfo: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type EventOrganizerServiceProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    serviceType?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: EventOrganizerUserUpdateOneRequiredWithoutServiceProvidersNestedInput
  }

  export type EventOrganizerServiceProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    serviceType?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerServiceProviderCreateManyInput = {
    id?: string
    name: string
    serviceType: string
    contactInfo: string
    submittedBy: string
    createdAt?: Date | string
  }

  export type EventOrganizerServiceProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    serviceType?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerServiceProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    serviceType?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewUncheckedCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUncheckedUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerPlatformCreateInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    status?: string
    createdAt?: Date | string
    owner: LanguageLearnerUserCreateNestedOneWithoutOwnedPlatformsInput
    reviews?: LanguageLearnerReviewCreateNestedManyWithoutPlatformInput
  }

  export type LanguageLearnerPlatformUncheckedCreateInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    ownerId: string
    status?: string
    createdAt?: Date | string
    reviews?: LanguageLearnerReviewUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type LanguageLearnerPlatformUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: LanguageLearnerUserUpdateOneRequiredWithoutOwnedPlatformsNestedInput
    reviews?: LanguageLearnerReviewUpdateManyWithoutPlatformNestedInput
  }

  export type LanguageLearnerPlatformUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: LanguageLearnerReviewUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type LanguageLearnerPlatformCreateManyInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    ownerId: string
    status?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerPlatformUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerPlatformUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewCreateInput = {
    id?: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
    platform: LanguageLearnerPlatformCreateNestedOneWithoutReviewsInput
    user: LanguageLearnerUserCreateNestedOneWithoutReviewsInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutReviewInput
  }

  export type LanguageLearnerReviewUncheckedCreateInput = {
    id?: string
    platformId: string
    userId: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type LanguageLearnerReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: LanguageLearnerPlatformUpdateOneRequiredWithoutReviewsNestedInput
    user?: LanguageLearnerUserUpdateOneRequiredWithoutReviewsNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutReviewNestedInput
  }

  export type LanguageLearnerReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type LanguageLearnerReviewCreateManyInput = {
    id?: string
    platformId: string
    userId: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewLikeCreateInput = {
    id?: string
    createdAt?: Date | string
    user: LanguageLearnerUserCreateNestedOneWithoutLikesInput
    review: LanguageLearnerReviewCreateNestedOneWithoutLikesInput
  }

  export type LanguageLearnerReviewLikeUncheckedCreateInput = {
    id?: string
    userId: string
    reviewId: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: LanguageLearnerUserUpdateOneRequiredWithoutLikesNestedInput
    review?: LanguageLearnerReviewUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewLikeCreateManyInput = {
    id?: string
    userId: string
    reviewId: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserVoteCreateInput = {
    id?: string
    voteType: string
    createdAt?: Date | string
    user: LanguageLearnerUserCreateNestedOneWithoutVotesReceivedInput
    voter: LanguageLearnerUserCreateNestedOneWithoutVotesGivenInput
  }

  export type LanguageLearnerUserVoteUncheckedCreateInput = {
    id?: string
    userId: string
    voterId: string
    voteType: string
    createdAt?: Date | string
  }

  export type LanguageLearnerUserVoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: LanguageLearnerUserUpdateOneRequiredWithoutVotesReceivedNestedInput
    voter?: LanguageLearnerUserUpdateOneRequiredWithoutVotesGivenNestedInput
  }

  export type LanguageLearnerUserVoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    voterId?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserVoteCreateManyInput = {
    id?: string
    userId: string
    voterId: string
    voteType: string
    createdAt?: Date | string
  }

  export type LanguageLearnerUserVoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserVoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    voterId?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubUserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    validated?: boolean
    createdAt?: Date | string
    players?: GameHubPlayerCreateNestedManyWithoutUserInput
    tournaments?: GameHubTournamentCreateNestedManyWithoutOrganizerInput
  }

  export type GameHubUserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    validated?: boolean
    createdAt?: Date | string
    players?: GameHubPlayerUncheckedCreateNestedManyWithoutUserInput
    tournaments?: GameHubTournamentUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type GameHubUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: GameHubPlayerUpdateManyWithoutUserNestedInput
    tournaments?: GameHubTournamentUpdateManyWithoutOrganizerNestedInput
  }

  export type GameHubUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: GameHubPlayerUncheckedUpdateManyWithoutUserNestedInput
    tournaments?: GameHubTournamentUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type GameHubUserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type GameHubUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubPlayerCreateInput = {
    id?: string
    name: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
    user: GameHubUserCreateNestedOneWithoutPlayersInput
    tournaments?: GameHubTournamentPlayerCreateNestedManyWithoutPlayerInput
  }

  export type GameHubPlayerUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
    tournaments?: GameHubTournamentPlayerUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type GameHubPlayerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: GameHubUserUpdateOneRequiredWithoutPlayersNestedInput
    tournaments?: GameHubTournamentPlayerUpdateManyWithoutPlayerNestedInput
  }

  export type GameHubPlayerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournaments?: GameHubTournamentPlayerUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type GameHubPlayerCreateManyInput = {
    id?: string
    name: string
    userId: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type GameHubPlayerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubPlayerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentCreateInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    createdAt?: Date | string
    organizer: GameHubUserCreateNestedOneWithoutTournamentsInput
    players?: GameHubTournamentPlayerCreateNestedManyWithoutTournamentInput
  }

  export type GameHubTournamentUncheckedCreateInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    organizerId: string
    createdAt?: Date | string
    players?: GameHubTournamentPlayerUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type GameHubTournamentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: GameHubUserUpdateOneRequiredWithoutTournamentsNestedInput
    players?: GameHubTournamentPlayerUpdateManyWithoutTournamentNestedInput
  }

  export type GameHubTournamentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: GameHubTournamentPlayerUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type GameHubTournamentCreateManyInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    organizerId: string
    createdAt?: Date | string
  }

  export type GameHubTournamentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentPlayerCreateInput = {
    id?: string
    joinedAt?: Date | string
    tournament: GameHubTournamentCreateNestedOneWithoutPlayersInput
    player: GameHubPlayerCreateNestedOneWithoutTournamentsInput
  }

  export type GameHubTournamentPlayerUncheckedCreateInput = {
    id?: string
    tournamentId: string
    playerId: string
    joinedAt?: Date | string
  }

  export type GameHubTournamentPlayerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: GameHubTournamentUpdateOneRequiredWithoutPlayersNestedInput
    player?: GameHubPlayerUpdateOneRequiredWithoutTournamentsNestedInput
  }

  export type GameHubTournamentPlayerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentPlayerCreateManyInput = {
    id?: string
    tournamentId: string
    playerId: string
    joinedAt?: Date | string
  }

  export type GameHubTournamentPlayerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentPlayerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserHealthTrackerCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    schedules?: ScheduleHealthTrackerCreateNestedManyWithoutUserInput
    records?: RecordHealthTrackerCreateNestedManyWithoutUserInput
  }

  export type UserHealthTrackerUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    schedules?: ScheduleHealthTrackerUncheckedCreateNestedManyWithoutUserInput
    records?: RecordHealthTrackerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserHealthTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ScheduleHealthTrackerUpdateManyWithoutUserNestedInput
    records?: RecordHealthTrackerUpdateManyWithoutUserNestedInput
  }

  export type UserHealthTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ScheduleHealthTrackerUncheckedUpdateManyWithoutUserNestedInput
    records?: RecordHealthTrackerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserHealthTrackerCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
  }

  export type UserHealthTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserHealthTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleHealthTrackerCreateInput = {
    id?: string
    type: string
    title: string
    dateTime: Date | string
    notes?: string | null
    createdAt?: Date | string
    user: UserHealthTrackerCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleHealthTrackerUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    title: string
    dateTime: Date | string
    notes?: string | null
    createdAt?: Date | string
  }

  export type ScheduleHealthTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserHealthTrackerUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ScheduleHealthTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleHealthTrackerCreateManyInput = {
    id?: string
    userId: string
    type: string
    title: string
    dateTime: Date | string
    notes?: string | null
    createdAt?: Date | string
  }

  export type ScheduleHealthTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleHealthTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecordHealthTrackerCreateInput = {
    id?: string
    type: string
    description: string
    date: Date | string
    createdAt?: Date | string
    user: UserHealthTrackerCreateNestedOneWithoutRecordsInput
  }

  export type RecordHealthTrackerUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    description: string
    date: Date | string
    createdAt?: Date | string
  }

  export type RecordHealthTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserHealthTrackerUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type RecordHealthTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecordHealthTrackerCreateManyInput = {
    id?: string
    userId: string
    type: string
    description: string
    date: Date | string
    createdAt?: Date | string
  }

  export type RecordHealthTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecordHealthTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicHealthTrackerCreateInput = {
    id?: string
    name: string
    location: string
    availableSlots?: ClinicHealthTrackerCreateavailableSlotsInput | string[]
    contact: string
    createdAt?: Date | string
  }

  export type ClinicHealthTrackerUncheckedCreateInput = {
    id?: string
    name: string
    location: string
    availableSlots?: ClinicHealthTrackerCreateavailableSlotsInput | string[]
    contact: string
    createdAt?: Date | string
  }

  export type ClinicHealthTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    availableSlots?: ClinicHealthTrackerUpdateavailableSlotsInput | string[]
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicHealthTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    availableSlots?: ClinicHealthTrackerUpdateavailableSlotsInput | string[]
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicHealthTrackerCreateManyInput = {
    id?: string
    name: string
    location: string
    availableSlots?: ClinicHealthTrackerCreateavailableSlotsInput | string[]
    contact: string
    createdAt?: Date | string
  }

  export type ClinicHealthTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    availableSlots?: ClinicHealthTrackerUpdateavailableSlotsInput | string[]
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicHealthTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    availableSlots?: ClinicHealthTrackerUpdateavailableSlotsInput | string[]
    contact?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMusicLoverCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    concerts?: ConcertMusicLoverCreateNestedManyWithoutUserInput
    reviews?: ReviewMusicLoverCreateNestedManyWithoutUserInput
  }

  export type UserMusicLoverUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    concerts?: ConcertMusicLoverUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewMusicLoverUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserMusicLoverUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    concerts?: ConcertMusicLoverUpdateManyWithoutUserNestedInput
    reviews?: ReviewMusicLoverUpdateManyWithoutUserNestedInput
  }

  export type UserMusicLoverUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    concerts?: ConcertMusicLoverUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewMusicLoverUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserMusicLoverCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
  }

  export type UserMusicLoverUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMusicLoverUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcertMusicLoverCreateInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    validated?: boolean
    createdAt?: Date | string
    user: UserMusicLoverCreateNestedOneWithoutConcertsInput
    reviews?: ReviewMusicLoverCreateNestedManyWithoutConcertInput
  }

  export type ConcertMusicLoverUncheckedCreateInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewMusicLoverUncheckedCreateNestedManyWithoutConcertInput
  }

  export type ConcertMusicLoverUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserMusicLoverUpdateOneRequiredWithoutConcertsNestedInput
    reviews?: ReviewMusicLoverUpdateManyWithoutConcertNestedInput
  }

  export type ConcertMusicLoverUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewMusicLoverUncheckedUpdateManyWithoutConcertNestedInput
  }

  export type ConcertMusicLoverCreateManyInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ConcertMusicLoverUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcertMusicLoverUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewMusicLoverCreateInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    user: UserMusicLoverCreateNestedOneWithoutReviewsInput
    concert: ConcertMusicLoverCreateNestedOneWithoutReviewsInput
  }

  export type ReviewMusicLoverUncheckedCreateInput = {
    id?: string
    concertId: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewMusicLoverUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserMusicLoverUpdateOneRequiredWithoutReviewsNestedInput
    concert?: ConcertMusicLoverUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewMusicLoverUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    concertId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewMusicLoverCreateManyInput = {
    id?: string
    concertId: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewMusicLoverUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewMusicLoverUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    concertId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSocialButterflyCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutUserNestedInput
  }

  export type UserSocialButterflyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserSocialButterflyCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
  }

  export type UserSocialButterflyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSocialButterflyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSocialButterflyCreateInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
    owner: UserSocialButterflyCreateNestedOneWithoutEventsInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserSocialButterflyUpdateOneRequiredWithoutEventsNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyCreateManyInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type EventSocialButterflyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSocialButterflyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewSocialButterflyCreateInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutReviewsInput
    event: EventSocialButterflyCreateNestedOneWithoutReviewsInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutReviewInput
  }

  export type ReviewSocialButterflyUncheckedCreateInput = {
    id?: string
    eventId: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewSocialButterflyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput
    event?: EventSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutReviewNestedInput
  }

  export type ReviewSocialButterflyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewSocialButterflyCreateManyInput = {
    id?: string
    eventId: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewSocialButterflyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewSocialButterflyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeSocialButterflyCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutLikesInput
    event: EventSocialButterflyCreateNestedOneWithoutLikesInput
  }

  export type LikeSocialButterflyUncheckedCreateInput = {
    id?: string
    eventId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeSocialButterflyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutLikesNestedInput
    event?: EventSocialButterflyUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeSocialButterflyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeSocialButterflyCreateManyInput = {
    id?: string
    eventId: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeSocialButterflyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeSocialButterflyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkSocialButterflyCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutBookmarksInput
    event: EventSocialButterflyCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkSocialButterflyUncheckedCreateInput = {
    id?: string
    eventId: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkSocialButterflyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutBookmarksNestedInput
    event?: EventSocialButterflyUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkSocialButterflyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkSocialButterflyCreateManyInput = {
    id?: string
    eventId: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkSocialButterflyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkSocialButterflyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyCreateInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutReportsInput
    event?: EventSocialButterflyCreateNestedOneWithoutReportsInput
    review?: ReviewSocialButterflyCreateNestedOneWithoutReportsInput
  }

  export type ReportSocialButterflyUncheckedCreateInput = {
    id?: string
    eventId?: string | null
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutReportsNestedInput
    event?: EventSocialButterflyUpdateOneWithoutReportsNestedInput
    review?: ReviewSocialButterflyUpdateOneWithoutReportsNestedInput
  }

  export type ReportSocialButterflyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyCreateManyInput = {
    id?: string
    eventId?: string | null
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVolunteerOrgCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    activities?: VolunteerActivityCreateNestedManyWithoutOrganizerInput
    applications?: VolunteerApplicationCreateNestedManyWithoutUserInput
  }

  export type UserVolunteerOrgUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    activities?: VolunteerActivityUncheckedCreateNestedManyWithoutOrganizerInput
    applications?: VolunteerApplicationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserVolunteerOrgUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: VolunteerActivityUpdateManyWithoutOrganizerNestedInput
    applications?: VolunteerApplicationUpdateManyWithoutUserNestedInput
  }

  export type UserVolunteerOrgUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: VolunteerActivityUncheckedUpdateManyWithoutOrganizerNestedInput
    applications?: VolunteerApplicationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserVolunteerOrgCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
  }

  export type UserVolunteerOrgUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserVolunteerOrgUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerActivityCreateInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    validated?: boolean
    createdAt?: Date | string
    organizer: UserVolunteerOrgCreateNestedOneWithoutActivitiesInput
    applications?: VolunteerApplicationCreateNestedManyWithoutActivityInput
  }

  export type VolunteerActivityUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    organizerId: string
    validated?: boolean
    createdAt?: Date | string
    applications?: VolunteerApplicationUncheckedCreateNestedManyWithoutActivityInput
  }

  export type VolunteerActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserVolunteerOrgUpdateOneRequiredWithoutActivitiesNestedInput
    applications?: VolunteerApplicationUpdateManyWithoutActivityNestedInput
  }

  export type VolunteerActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    organizerId?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: VolunteerApplicationUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type VolunteerActivityCreateManyInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    organizerId: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type VolunteerActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    organizerId?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerApplicationCreateInput = {
    id?: string
    motivation: string
    status?: string
    createdAt?: Date | string
    user: UserVolunteerOrgCreateNestedOneWithoutApplicationsInput
    activity: VolunteerActivityCreateNestedOneWithoutApplicationsInput
  }

  export type VolunteerApplicationUncheckedCreateInput = {
    id?: string
    userId: string
    activityId: string
    motivation: string
    status?: string
    createdAt?: Date | string
  }

  export type VolunteerApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserVolunteerOrgUpdateOneRequiredWithoutApplicationsNestedInput
    activity?: VolunteerActivityUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type VolunteerApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerApplicationCreateManyInput = {
    id?: string
    userId: string
    activityId: string
    motivation: string
    status?: string
    createdAt?: Date | string
  }

  export type VolunteerApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EventOrganizerTaskListRelationFilter = {
    every?: EventOrganizerTaskWhereInput
    some?: EventOrganizerTaskWhereInput
    none?: EventOrganizerTaskWhereInput
  }

  export type EventOrganizerGuestListRelationFilter = {
    every?: EventOrganizerGuestWhereInput
    some?: EventOrganizerGuestWhereInput
    none?: EventOrganizerGuestWhereInput
  }

  export type EventOrganizerVenueListRelationFilter = {
    every?: EventOrganizerVenueWhereInput
    some?: EventOrganizerVenueWhereInput
    none?: EventOrganizerVenueWhereInput
  }

  export type EventOrganizerServiceProviderListRelationFilter = {
    every?: EventOrganizerServiceProviderWhereInput
    some?: EventOrganizerServiceProviderWhereInput
    none?: EventOrganizerServiceProviderWhereInput
  }

  export type EventOrganizerTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrganizerGuestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrganizerVenueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrganizerServiceProviderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrganizerUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EventOrganizerUserScalarRelationFilter = {
    is?: EventOrganizerUserWhereInput
    isNot?: EventOrganizerUserWhereInput
  }

  export type EventOrganizerTaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerTaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerGuestCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerGuestMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerGuestMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EventOrganizerVenueCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    amenities?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerVenueAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type EventOrganizerVenueMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    amenities?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerVenueMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    amenities?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerVenueSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EventOrganizerServiceProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    serviceType?: SortOrder
    contactInfo?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerServiceProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    serviceType?: SortOrder
    contactInfo?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerServiceProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    serviceType?: SortOrder
    contactInfo?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerPlatformListRelationFilter = {
    every?: LanguageLearnerPlatformWhereInput
    some?: LanguageLearnerPlatformWhereInput
    none?: LanguageLearnerPlatformWhereInput
  }

  export type LanguageLearnerReviewListRelationFilter = {
    every?: LanguageLearnerReviewWhereInput
    some?: LanguageLearnerReviewWhereInput
    none?: LanguageLearnerReviewWhereInput
  }

  export type LanguageLearnerUserVoteListRelationFilter = {
    every?: LanguageLearnerUserVoteWhereInput
    some?: LanguageLearnerUserVoteWhereInput
    none?: LanguageLearnerUserVoteWhereInput
  }

  export type LanguageLearnerReviewLikeListRelationFilter = {
    every?: LanguageLearnerReviewLikeWhereInput
    some?: LanguageLearnerReviewLikeWhereInput
    none?: LanguageLearnerReviewLikeWhereInput
  }

  export type LanguageLearnerPlatformOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguageLearnerReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguageLearnerUserVoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguageLearnerReviewLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguageLearnerUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerUserScalarRelationFilter = {
    is?: LanguageLearnerUserWhereInput
    isNot?: LanguageLearnerUserWhereInput
  }

  export type LanguageLearnerPlatformCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    languagesOffered?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerPlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    languagesOffered?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerPlatformMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    languagesOffered?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerPlatformScalarRelationFilter = {
    is?: LanguageLearnerPlatformWhereInput
    isNot?: LanguageLearnerPlatformWhereInput
  }

  export type LanguageLearnerReviewCountOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type LanguageLearnerReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerReviewMinOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type LanguageLearnerReviewScalarRelationFilter = {
    is?: LanguageLearnerReviewWhereInput
    isNot?: LanguageLearnerReviewWhereInput
  }

  export type LanguageLearnerReviewLikeUserIdReviewIdCompoundUniqueInput = {
    userId: string
    reviewId: string
  }

  export type LanguageLearnerReviewLikeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewId?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerReviewLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewId?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerReviewLikeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reviewId?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerUserVoteUserIdVoterIdCompoundUniqueInput = {
    userId: string
    voterId: string
  }

  export type LanguageLearnerUserVoteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    voterId?: SortOrder
    voteType?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerUserVoteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    voterId?: SortOrder
    voteType?: SortOrder
    createdAt?: SortOrder
  }

  export type LanguageLearnerUserVoteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    voterId?: SortOrder
    voteType?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type GameHubPlayerListRelationFilter = {
    every?: GameHubPlayerWhereInput
    some?: GameHubPlayerWhereInput
    none?: GameHubPlayerWhereInput
  }

  export type GameHubTournamentListRelationFilter = {
    every?: GameHubTournamentWhereInput
    some?: GameHubTournamentWhereInput
    none?: GameHubTournamentWhereInput
  }

  export type GameHubPlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameHubTournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameHubUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type GameHubUserScalarRelationFilter = {
    is?: GameHubUserWhereInput
    isNot?: GameHubUserWhereInput
  }

  export type GameHubTournamentPlayerListRelationFilter = {
    every?: GameHubTournamentPlayerWhereInput
    some?: GameHubTournamentPlayerWhereInput
    none?: GameHubTournamentPlayerWhereInput
  }

  export type GameHubTournamentPlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameHubPlayerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    rank?: SortOrder
    mainGame?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubPlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    rank?: SortOrder
    mainGame?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubPlayerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    rank?: SortOrder
    mainGame?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubTournamentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    game?: SortOrder
    date?: SortOrder
    rules?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubTournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    game?: SortOrder
    date?: SortOrder
    rules?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubTournamentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    game?: SortOrder
    date?: SortOrder
    rules?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
  }

  export type GameHubTournamentScalarRelationFilter = {
    is?: GameHubTournamentWhereInput
    isNot?: GameHubTournamentWhereInput
  }

  export type GameHubPlayerScalarRelationFilter = {
    is?: GameHubPlayerWhereInput
    isNot?: GameHubPlayerWhereInput
  }

  export type GameHubTournamentPlayerTournamentIdPlayerIdCompoundUniqueInput = {
    tournamentId: string
    playerId: string
  }

  export type GameHubTournamentPlayerCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    playerId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GameHubTournamentPlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    playerId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GameHubTournamentPlayerMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    playerId?: SortOrder
    joinedAt?: SortOrder
  }

  export type ScheduleHealthTrackerListRelationFilter = {
    every?: ScheduleHealthTrackerWhereInput
    some?: ScheduleHealthTrackerWhereInput
    none?: ScheduleHealthTrackerWhereInput
  }

  export type RecordHealthTrackerListRelationFilter = {
    every?: RecordHealthTrackerWhereInput
    some?: RecordHealthTrackerWhereInput
    none?: RecordHealthTrackerWhereInput
  }

  export type ScheduleHealthTrackerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecordHealthTrackerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserHealthTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserHealthTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserHealthTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserHealthTrackerScalarRelationFilter = {
    is?: UserHealthTrackerWhereInput
    isNot?: UserHealthTrackerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ScheduleHealthTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    dateTime?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type ScheduleHealthTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    dateTime?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type ScheduleHealthTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    dateTime?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RecordHealthTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type RecordHealthTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type RecordHealthTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ClinicHealthTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
  }

  export type ClinicHealthTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
  }

  export type ClinicHealthTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
  }

  export type ConcertMusicLoverListRelationFilter = {
    every?: ConcertMusicLoverWhereInput
    some?: ConcertMusicLoverWhereInput
    none?: ConcertMusicLoverWhereInput
  }

  export type ReviewMusicLoverListRelationFilter = {
    every?: ReviewMusicLoverWhereInput
    some?: ReviewMusicLoverWhereInput
    none?: ReviewMusicLoverWhereInput
  }

  export type ConcertMusicLoverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewMusicLoverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserMusicLoverCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMusicLoverMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMusicLoverMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMusicLoverScalarRelationFilter = {
    is?: UserMusicLoverWhereInput
    isNot?: UserMusicLoverWhereInput
  }

  export type ConcertMusicLoverCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    genre?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ConcertMusicLoverMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    genre?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ConcertMusicLoverMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    genre?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ConcertMusicLoverScalarRelationFilter = {
    is?: ConcertMusicLoverWhereInput
    isNot?: ConcertMusicLoverWhereInput
  }

  export type ReviewMusicLoverCountOrderByAggregateInput = {
    id?: SortOrder
    concertId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMusicLoverAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewMusicLoverMaxOrderByAggregateInput = {
    id?: SortOrder
    concertId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMusicLoverMinOrderByAggregateInput = {
    id?: SortOrder
    concertId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMusicLoverSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EventSocialButterflyListRelationFilter = {
    every?: EventSocialButterflyWhereInput
    some?: EventSocialButterflyWhereInput
    none?: EventSocialButterflyWhereInput
  }

  export type ReviewSocialButterflyListRelationFilter = {
    every?: ReviewSocialButterflyWhereInput
    some?: ReviewSocialButterflyWhereInput
    none?: ReviewSocialButterflyWhereInput
  }

  export type LikeSocialButterflyListRelationFilter = {
    every?: LikeSocialButterflyWhereInput
    some?: LikeSocialButterflyWhereInput
    none?: LikeSocialButterflyWhereInput
  }

  export type BookmarkSocialButterflyListRelationFilter = {
    every?: BookmarkSocialButterflyWhereInput
    some?: BookmarkSocialButterflyWhereInput
    none?: BookmarkSocialButterflyWhereInput
  }

  export type ReportSocialButterflyListRelationFilter = {
    every?: ReportSocialButterflyWhereInput
    some?: ReportSocialButterflyWhereInput
    none?: ReportSocialButterflyWhereInput
  }

  export type EventSocialButterflyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewSocialButterflyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeSocialButterflyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmarkSocialButterflyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportSocialButterflyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSocialButterflyCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSocialButterflyMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSocialButterflyMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSocialButterflyScalarRelationFilter = {
    is?: UserSocialButterflyWhereInput
    isNot?: UserSocialButterflyWhereInput
  }

  export type EventSocialButterflyCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    category?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type EventSocialButterflyMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    category?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type EventSocialButterflyMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    category?: SortOrder
    submittedBy?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type EventSocialButterflyScalarRelationFilter = {
    is?: EventSocialButterflyWhereInput
    isNot?: EventSocialButterflyWhereInput
  }

  export type ReviewSocialButterflyCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSocialButterflyAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewSocialButterflyMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSocialButterflyMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSocialButterflySumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type LikeSocialButterflyEventIdUserIdCompoundUniqueInput = {
    eventId: string
    userId: string
  }

  export type LikeSocialButterflyCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeSocialButterflyMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LikeSocialButterflyMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkSocialButterflyEventIdUserIdCompoundUniqueInput = {
    eventId: string
    userId: string
  }

  export type BookmarkSocialButterflyCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkSocialButterflyMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkSocialButterflyMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type EventSocialButterflyNullableScalarRelationFilter = {
    is?: EventSocialButterflyWhereInput | null
    isNot?: EventSocialButterflyWhereInput | null
  }

  export type ReviewSocialButterflyNullableScalarRelationFilter = {
    is?: ReviewSocialButterflyWhereInput | null
    isNot?: ReviewSocialButterflyWhereInput | null
  }

  export type ReportSocialButterflyCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportSocialButterflyMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportSocialButterflyMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    reviewId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerActivityListRelationFilter = {
    every?: VolunteerActivityWhereInput
    some?: VolunteerActivityWhereInput
    none?: VolunteerActivityWhereInput
  }

  export type VolunteerApplicationListRelationFilter = {
    every?: VolunteerApplicationWhereInput
    some?: VolunteerApplicationWhereInput
    none?: VolunteerApplicationWhereInput
  }

  export type VolunteerActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VolunteerApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserVolunteerOrgCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserVolunteerOrgMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserVolunteerOrgMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserVolunteerOrgScalarRelationFilter = {
    is?: UserVolunteerOrgWhereInput
    isNot?: UserVolunteerOrgWhereInput
  }

  export type VolunteerActivityCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    date?: SortOrder
    organizerId?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    date?: SortOrder
    organizerId?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerActivityMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    date?: SortOrder
    organizerId?: SortOrder
    validated?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerActivityScalarRelationFilter = {
    is?: VolunteerActivityWhereInput
    isNot?: VolunteerActivityWhereInput
  }

  export type VolunteerApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    motivation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    motivation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    motivation?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EventOrganizerTaskCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerTaskCreateWithoutUserInput, EventOrganizerTaskUncheckedCreateWithoutUserInput> | EventOrganizerTaskCreateWithoutUserInput[] | EventOrganizerTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerTaskCreateOrConnectWithoutUserInput | EventOrganizerTaskCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerTaskCreateManyUserInputEnvelope
    connect?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
  }

  export type EventOrganizerGuestCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerGuestCreateWithoutUserInput, EventOrganizerGuestUncheckedCreateWithoutUserInput> | EventOrganizerGuestCreateWithoutUserInput[] | EventOrganizerGuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerGuestCreateOrConnectWithoutUserInput | EventOrganizerGuestCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerGuestCreateManyUserInputEnvelope
    connect?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
  }

  export type EventOrganizerVenueCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerVenueCreateWithoutUserInput, EventOrganizerVenueUncheckedCreateWithoutUserInput> | EventOrganizerVenueCreateWithoutUserInput[] | EventOrganizerVenueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerVenueCreateOrConnectWithoutUserInput | EventOrganizerVenueCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerVenueCreateManyUserInputEnvelope
    connect?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
  }

  export type EventOrganizerServiceProviderCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerServiceProviderCreateWithoutUserInput, EventOrganizerServiceProviderUncheckedCreateWithoutUserInput> | EventOrganizerServiceProviderCreateWithoutUserInput[] | EventOrganizerServiceProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerServiceProviderCreateOrConnectWithoutUserInput | EventOrganizerServiceProviderCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerServiceProviderCreateManyUserInputEnvelope
    connect?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
  }

  export type EventOrganizerTaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerTaskCreateWithoutUserInput, EventOrganizerTaskUncheckedCreateWithoutUserInput> | EventOrganizerTaskCreateWithoutUserInput[] | EventOrganizerTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerTaskCreateOrConnectWithoutUserInput | EventOrganizerTaskCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerTaskCreateManyUserInputEnvelope
    connect?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
  }

  export type EventOrganizerGuestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerGuestCreateWithoutUserInput, EventOrganizerGuestUncheckedCreateWithoutUserInput> | EventOrganizerGuestCreateWithoutUserInput[] | EventOrganizerGuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerGuestCreateOrConnectWithoutUserInput | EventOrganizerGuestCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerGuestCreateManyUserInputEnvelope
    connect?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
  }

  export type EventOrganizerVenueUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerVenueCreateWithoutUserInput, EventOrganizerVenueUncheckedCreateWithoutUserInput> | EventOrganizerVenueCreateWithoutUserInput[] | EventOrganizerVenueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerVenueCreateOrConnectWithoutUserInput | EventOrganizerVenueCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerVenueCreateManyUserInputEnvelope
    connect?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
  }

  export type EventOrganizerServiceProviderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventOrganizerServiceProviderCreateWithoutUserInput, EventOrganizerServiceProviderUncheckedCreateWithoutUserInput> | EventOrganizerServiceProviderCreateWithoutUserInput[] | EventOrganizerServiceProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerServiceProviderCreateOrConnectWithoutUserInput | EventOrganizerServiceProviderCreateOrConnectWithoutUserInput[]
    createMany?: EventOrganizerServiceProviderCreateManyUserInputEnvelope
    connect?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EventOrganizerTaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerTaskCreateWithoutUserInput, EventOrganizerTaskUncheckedCreateWithoutUserInput> | EventOrganizerTaskCreateWithoutUserInput[] | EventOrganizerTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerTaskCreateOrConnectWithoutUserInput | EventOrganizerTaskCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerTaskUpsertWithWhereUniqueWithoutUserInput | EventOrganizerTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerTaskCreateManyUserInputEnvelope
    set?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    disconnect?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    delete?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    connect?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    update?: EventOrganizerTaskUpdateWithWhereUniqueWithoutUserInput | EventOrganizerTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerTaskUpdateManyWithWhereWithoutUserInput | EventOrganizerTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerTaskScalarWhereInput | EventOrganizerTaskScalarWhereInput[]
  }

  export type EventOrganizerGuestUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerGuestCreateWithoutUserInput, EventOrganizerGuestUncheckedCreateWithoutUserInput> | EventOrganizerGuestCreateWithoutUserInput[] | EventOrganizerGuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerGuestCreateOrConnectWithoutUserInput | EventOrganizerGuestCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerGuestUpsertWithWhereUniqueWithoutUserInput | EventOrganizerGuestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerGuestCreateManyUserInputEnvelope
    set?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    disconnect?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    delete?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    connect?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    update?: EventOrganizerGuestUpdateWithWhereUniqueWithoutUserInput | EventOrganizerGuestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerGuestUpdateManyWithWhereWithoutUserInput | EventOrganizerGuestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerGuestScalarWhereInput | EventOrganizerGuestScalarWhereInput[]
  }

  export type EventOrganizerVenueUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerVenueCreateWithoutUserInput, EventOrganizerVenueUncheckedCreateWithoutUserInput> | EventOrganizerVenueCreateWithoutUserInput[] | EventOrganizerVenueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerVenueCreateOrConnectWithoutUserInput | EventOrganizerVenueCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerVenueUpsertWithWhereUniqueWithoutUserInput | EventOrganizerVenueUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerVenueCreateManyUserInputEnvelope
    set?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    disconnect?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    delete?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    connect?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    update?: EventOrganizerVenueUpdateWithWhereUniqueWithoutUserInput | EventOrganizerVenueUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerVenueUpdateManyWithWhereWithoutUserInput | EventOrganizerVenueUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerVenueScalarWhereInput | EventOrganizerVenueScalarWhereInput[]
  }

  export type EventOrganizerServiceProviderUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerServiceProviderCreateWithoutUserInput, EventOrganizerServiceProviderUncheckedCreateWithoutUserInput> | EventOrganizerServiceProviderCreateWithoutUserInput[] | EventOrganizerServiceProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerServiceProviderCreateOrConnectWithoutUserInput | EventOrganizerServiceProviderCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerServiceProviderUpsertWithWhereUniqueWithoutUserInput | EventOrganizerServiceProviderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerServiceProviderCreateManyUserInputEnvelope
    set?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    disconnect?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    delete?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    connect?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    update?: EventOrganizerServiceProviderUpdateWithWhereUniqueWithoutUserInput | EventOrganizerServiceProviderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerServiceProviderUpdateManyWithWhereWithoutUserInput | EventOrganizerServiceProviderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerServiceProviderScalarWhereInput | EventOrganizerServiceProviderScalarWhereInput[]
  }

  export type EventOrganizerTaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerTaskCreateWithoutUserInput, EventOrganizerTaskUncheckedCreateWithoutUserInput> | EventOrganizerTaskCreateWithoutUserInput[] | EventOrganizerTaskUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerTaskCreateOrConnectWithoutUserInput | EventOrganizerTaskCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerTaskUpsertWithWhereUniqueWithoutUserInput | EventOrganizerTaskUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerTaskCreateManyUserInputEnvelope
    set?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    disconnect?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    delete?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    connect?: EventOrganizerTaskWhereUniqueInput | EventOrganizerTaskWhereUniqueInput[]
    update?: EventOrganizerTaskUpdateWithWhereUniqueWithoutUserInput | EventOrganizerTaskUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerTaskUpdateManyWithWhereWithoutUserInput | EventOrganizerTaskUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerTaskScalarWhereInput | EventOrganizerTaskScalarWhereInput[]
  }

  export type EventOrganizerGuestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerGuestCreateWithoutUserInput, EventOrganizerGuestUncheckedCreateWithoutUserInput> | EventOrganizerGuestCreateWithoutUserInput[] | EventOrganizerGuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerGuestCreateOrConnectWithoutUserInput | EventOrganizerGuestCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerGuestUpsertWithWhereUniqueWithoutUserInput | EventOrganizerGuestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerGuestCreateManyUserInputEnvelope
    set?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    disconnect?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    delete?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    connect?: EventOrganizerGuestWhereUniqueInput | EventOrganizerGuestWhereUniqueInput[]
    update?: EventOrganizerGuestUpdateWithWhereUniqueWithoutUserInput | EventOrganizerGuestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerGuestUpdateManyWithWhereWithoutUserInput | EventOrganizerGuestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerGuestScalarWhereInput | EventOrganizerGuestScalarWhereInput[]
  }

  export type EventOrganizerVenueUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerVenueCreateWithoutUserInput, EventOrganizerVenueUncheckedCreateWithoutUserInput> | EventOrganizerVenueCreateWithoutUserInput[] | EventOrganizerVenueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerVenueCreateOrConnectWithoutUserInput | EventOrganizerVenueCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerVenueUpsertWithWhereUniqueWithoutUserInput | EventOrganizerVenueUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerVenueCreateManyUserInputEnvelope
    set?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    disconnect?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    delete?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    connect?: EventOrganizerVenueWhereUniqueInput | EventOrganizerVenueWhereUniqueInput[]
    update?: EventOrganizerVenueUpdateWithWhereUniqueWithoutUserInput | EventOrganizerVenueUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerVenueUpdateManyWithWhereWithoutUserInput | EventOrganizerVenueUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerVenueScalarWhereInput | EventOrganizerVenueScalarWhereInput[]
  }

  export type EventOrganizerServiceProviderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventOrganizerServiceProviderCreateWithoutUserInput, EventOrganizerServiceProviderUncheckedCreateWithoutUserInput> | EventOrganizerServiceProviderCreateWithoutUserInput[] | EventOrganizerServiceProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventOrganizerServiceProviderCreateOrConnectWithoutUserInput | EventOrganizerServiceProviderCreateOrConnectWithoutUserInput[]
    upsert?: EventOrganizerServiceProviderUpsertWithWhereUniqueWithoutUserInput | EventOrganizerServiceProviderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventOrganizerServiceProviderCreateManyUserInputEnvelope
    set?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    disconnect?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    delete?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    connect?: EventOrganizerServiceProviderWhereUniqueInput | EventOrganizerServiceProviderWhereUniqueInput[]
    update?: EventOrganizerServiceProviderUpdateWithWhereUniqueWithoutUserInput | EventOrganizerServiceProviderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventOrganizerServiceProviderUpdateManyWithWhereWithoutUserInput | EventOrganizerServiceProviderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventOrganizerServiceProviderScalarWhereInput | EventOrganizerServiceProviderScalarWhereInput[]
  }

  export type EventOrganizerUserCreateNestedOneWithoutTasksInput = {
    create?: XOR<EventOrganizerUserCreateWithoutTasksInput, EventOrganizerUserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutTasksInput
    connect?: EventOrganizerUserWhereUniqueInput
  }

  export type EventOrganizerUserUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<EventOrganizerUserCreateWithoutTasksInput, EventOrganizerUserUncheckedCreateWithoutTasksInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutTasksInput
    upsert?: EventOrganizerUserUpsertWithoutTasksInput
    connect?: EventOrganizerUserWhereUniqueInput
    update?: XOR<XOR<EventOrganizerUserUpdateToOneWithWhereWithoutTasksInput, EventOrganizerUserUpdateWithoutTasksInput>, EventOrganizerUserUncheckedUpdateWithoutTasksInput>
  }

  export type EventOrganizerUserCreateNestedOneWithoutGuestsInput = {
    create?: XOR<EventOrganizerUserCreateWithoutGuestsInput, EventOrganizerUserUncheckedCreateWithoutGuestsInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutGuestsInput
    connect?: EventOrganizerUserWhereUniqueInput
  }

  export type EventOrganizerUserUpdateOneRequiredWithoutGuestsNestedInput = {
    create?: XOR<EventOrganizerUserCreateWithoutGuestsInput, EventOrganizerUserUncheckedCreateWithoutGuestsInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutGuestsInput
    upsert?: EventOrganizerUserUpsertWithoutGuestsInput
    connect?: EventOrganizerUserWhereUniqueInput
    update?: XOR<XOR<EventOrganizerUserUpdateToOneWithWhereWithoutGuestsInput, EventOrganizerUserUpdateWithoutGuestsInput>, EventOrganizerUserUncheckedUpdateWithoutGuestsInput>
  }

  export type EventOrganizerUserCreateNestedOneWithoutVenuesInput = {
    create?: XOR<EventOrganizerUserCreateWithoutVenuesInput, EventOrganizerUserUncheckedCreateWithoutVenuesInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutVenuesInput
    connect?: EventOrganizerUserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventOrganizerUserUpdateOneRequiredWithoutVenuesNestedInput = {
    create?: XOR<EventOrganizerUserCreateWithoutVenuesInput, EventOrganizerUserUncheckedCreateWithoutVenuesInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutVenuesInput
    upsert?: EventOrganizerUserUpsertWithoutVenuesInput
    connect?: EventOrganizerUserWhereUniqueInput
    update?: XOR<XOR<EventOrganizerUserUpdateToOneWithWhereWithoutVenuesInput, EventOrganizerUserUpdateWithoutVenuesInput>, EventOrganizerUserUncheckedUpdateWithoutVenuesInput>
  }

  export type EventOrganizerUserCreateNestedOneWithoutServiceProvidersInput = {
    create?: XOR<EventOrganizerUserCreateWithoutServiceProvidersInput, EventOrganizerUserUncheckedCreateWithoutServiceProvidersInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutServiceProvidersInput
    connect?: EventOrganizerUserWhereUniqueInput
  }

  export type EventOrganizerUserUpdateOneRequiredWithoutServiceProvidersNestedInput = {
    create?: XOR<EventOrganizerUserCreateWithoutServiceProvidersInput, EventOrganizerUserUncheckedCreateWithoutServiceProvidersInput>
    connectOrCreate?: EventOrganizerUserCreateOrConnectWithoutServiceProvidersInput
    upsert?: EventOrganizerUserUpsertWithoutServiceProvidersInput
    connect?: EventOrganizerUserWhereUniqueInput
    update?: XOR<XOR<EventOrganizerUserUpdateToOneWithWhereWithoutServiceProvidersInput, EventOrganizerUserUpdateWithoutServiceProvidersInput>, EventOrganizerUserUncheckedUpdateWithoutServiceProvidersInput>
  }

  export type LanguageLearnerPlatformCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LanguageLearnerPlatformCreateWithoutOwnerInput, LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput> | LanguageLearnerPlatformCreateWithoutOwnerInput[] | LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput | LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput[]
    createMany?: LanguageLearnerPlatformCreateManyOwnerInputEnvelope
    connect?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
  }

  export type LanguageLearnerReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutUserInput, LanguageLearnerReviewUncheckedCreateWithoutUserInput> | LanguageLearnerReviewCreateWithoutUserInput[] | LanguageLearnerReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutUserInput | LanguageLearnerReviewCreateOrConnectWithoutUserInput[]
    createMany?: LanguageLearnerReviewCreateManyUserInputEnvelope
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
  }

  export type LanguageLearnerUserVoteCreateNestedManyWithoutVoterInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutVoterInput, LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput> | LanguageLearnerUserVoteCreateWithoutVoterInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput | LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput[]
    createMany?: LanguageLearnerUserVoteCreateManyVoterInputEnvelope
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
  }

  export type LanguageLearnerUserVoteCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutUserInput, LanguageLearnerUserVoteUncheckedCreateWithoutUserInput> | LanguageLearnerUserVoteCreateWithoutUserInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutUserInput | LanguageLearnerUserVoteCreateOrConnectWithoutUserInput[]
    createMany?: LanguageLearnerUserVoteCreateManyUserInputEnvelope
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
  }

  export type LanguageLearnerReviewLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutUserInput, LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput> | LanguageLearnerReviewLikeCreateWithoutUserInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput | LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyUserInputEnvelope
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
  }

  export type LanguageLearnerPlatformUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LanguageLearnerPlatformCreateWithoutOwnerInput, LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput> | LanguageLearnerPlatformCreateWithoutOwnerInput[] | LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput | LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput[]
    createMany?: LanguageLearnerPlatformCreateManyOwnerInputEnvelope
    connect?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
  }

  export type LanguageLearnerReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutUserInput, LanguageLearnerReviewUncheckedCreateWithoutUserInput> | LanguageLearnerReviewCreateWithoutUserInput[] | LanguageLearnerReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutUserInput | LanguageLearnerReviewCreateOrConnectWithoutUserInput[]
    createMany?: LanguageLearnerReviewCreateManyUserInputEnvelope
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
  }

  export type LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutVoterInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutVoterInput, LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput> | LanguageLearnerUserVoteCreateWithoutVoterInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput | LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput[]
    createMany?: LanguageLearnerUserVoteCreateManyVoterInputEnvelope
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
  }

  export type LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutUserInput, LanguageLearnerUserVoteUncheckedCreateWithoutUserInput> | LanguageLearnerUserVoteCreateWithoutUserInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutUserInput | LanguageLearnerUserVoteCreateOrConnectWithoutUserInput[]
    createMany?: LanguageLearnerUserVoteCreateManyUserInputEnvelope
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
  }

  export type LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutUserInput, LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput> | LanguageLearnerReviewLikeCreateWithoutUserInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput | LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyUserInputEnvelope
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
  }

  export type LanguageLearnerPlatformUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LanguageLearnerPlatformCreateWithoutOwnerInput, LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput> | LanguageLearnerPlatformCreateWithoutOwnerInput[] | LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput | LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput[]
    upsert?: LanguageLearnerPlatformUpsertWithWhereUniqueWithoutOwnerInput | LanguageLearnerPlatformUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LanguageLearnerPlatformCreateManyOwnerInputEnvelope
    set?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    disconnect?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    delete?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    connect?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    update?: LanguageLearnerPlatformUpdateWithWhereUniqueWithoutOwnerInput | LanguageLearnerPlatformUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LanguageLearnerPlatformUpdateManyWithWhereWithoutOwnerInput | LanguageLearnerPlatformUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LanguageLearnerPlatformScalarWhereInput | LanguageLearnerPlatformScalarWhereInput[]
  }

  export type LanguageLearnerReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutUserInput, LanguageLearnerReviewUncheckedCreateWithoutUserInput> | LanguageLearnerReviewCreateWithoutUserInput[] | LanguageLearnerReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutUserInput | LanguageLearnerReviewCreateOrConnectWithoutUserInput[]
    upsert?: LanguageLearnerReviewUpsertWithWhereUniqueWithoutUserInput | LanguageLearnerReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguageLearnerReviewCreateManyUserInputEnvelope
    set?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    delete?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    update?: LanguageLearnerReviewUpdateWithWhereUniqueWithoutUserInput | LanguageLearnerReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguageLearnerReviewUpdateManyWithWhereWithoutUserInput | LanguageLearnerReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguageLearnerReviewScalarWhereInput | LanguageLearnerReviewScalarWhereInput[]
  }

  export type LanguageLearnerUserVoteUpdateManyWithoutVoterNestedInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutVoterInput, LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput> | LanguageLearnerUserVoteCreateWithoutVoterInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput | LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput[]
    upsert?: LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutVoterInput | LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutVoterInput[]
    createMany?: LanguageLearnerUserVoteCreateManyVoterInputEnvelope
    set?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    disconnect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    delete?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    update?: LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutVoterInput | LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutVoterInput[]
    updateMany?: LanguageLearnerUserVoteUpdateManyWithWhereWithoutVoterInput | LanguageLearnerUserVoteUpdateManyWithWhereWithoutVoterInput[]
    deleteMany?: LanguageLearnerUserVoteScalarWhereInput | LanguageLearnerUserVoteScalarWhereInput[]
  }

  export type LanguageLearnerUserVoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutUserInput, LanguageLearnerUserVoteUncheckedCreateWithoutUserInput> | LanguageLearnerUserVoteCreateWithoutUserInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutUserInput | LanguageLearnerUserVoteCreateOrConnectWithoutUserInput[]
    upsert?: LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutUserInput | LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguageLearnerUserVoteCreateManyUserInputEnvelope
    set?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    disconnect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    delete?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    update?: LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutUserInput | LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguageLearnerUserVoteUpdateManyWithWhereWithoutUserInput | LanguageLearnerUserVoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguageLearnerUserVoteScalarWhereInput | LanguageLearnerUserVoteScalarWhereInput[]
  }

  export type LanguageLearnerReviewLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutUserInput, LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput> | LanguageLearnerReviewLikeCreateWithoutUserInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput | LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput[]
    upsert?: LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutUserInput | LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyUserInputEnvelope
    set?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    delete?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    update?: LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutUserInput | LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguageLearnerReviewLikeUpdateManyWithWhereWithoutUserInput | LanguageLearnerReviewLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguageLearnerReviewLikeScalarWhereInput | LanguageLearnerReviewLikeScalarWhereInput[]
  }

  export type LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LanguageLearnerPlatformCreateWithoutOwnerInput, LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput> | LanguageLearnerPlatformCreateWithoutOwnerInput[] | LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput | LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput[]
    upsert?: LanguageLearnerPlatformUpsertWithWhereUniqueWithoutOwnerInput | LanguageLearnerPlatformUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LanguageLearnerPlatformCreateManyOwnerInputEnvelope
    set?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    disconnect?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    delete?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    connect?: LanguageLearnerPlatformWhereUniqueInput | LanguageLearnerPlatformWhereUniqueInput[]
    update?: LanguageLearnerPlatformUpdateWithWhereUniqueWithoutOwnerInput | LanguageLearnerPlatformUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LanguageLearnerPlatformUpdateManyWithWhereWithoutOwnerInput | LanguageLearnerPlatformUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LanguageLearnerPlatformScalarWhereInput | LanguageLearnerPlatformScalarWhereInput[]
  }

  export type LanguageLearnerReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutUserInput, LanguageLearnerReviewUncheckedCreateWithoutUserInput> | LanguageLearnerReviewCreateWithoutUserInput[] | LanguageLearnerReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutUserInput | LanguageLearnerReviewCreateOrConnectWithoutUserInput[]
    upsert?: LanguageLearnerReviewUpsertWithWhereUniqueWithoutUserInput | LanguageLearnerReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguageLearnerReviewCreateManyUserInputEnvelope
    set?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    delete?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    update?: LanguageLearnerReviewUpdateWithWhereUniqueWithoutUserInput | LanguageLearnerReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguageLearnerReviewUpdateManyWithWhereWithoutUserInput | LanguageLearnerReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguageLearnerReviewScalarWhereInput | LanguageLearnerReviewScalarWhereInput[]
  }

  export type LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterNestedInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutVoterInput, LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput> | LanguageLearnerUserVoteCreateWithoutVoterInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput | LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput[]
    upsert?: LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutVoterInput | LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutVoterInput[]
    createMany?: LanguageLearnerUserVoteCreateManyVoterInputEnvelope
    set?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    disconnect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    delete?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    update?: LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutVoterInput | LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutVoterInput[]
    updateMany?: LanguageLearnerUserVoteUpdateManyWithWhereWithoutVoterInput | LanguageLearnerUserVoteUpdateManyWithWhereWithoutVoterInput[]
    deleteMany?: LanguageLearnerUserVoteScalarWhereInput | LanguageLearnerUserVoteScalarWhereInput[]
  }

  export type LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguageLearnerUserVoteCreateWithoutUserInput, LanguageLearnerUserVoteUncheckedCreateWithoutUserInput> | LanguageLearnerUserVoteCreateWithoutUserInput[] | LanguageLearnerUserVoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerUserVoteCreateOrConnectWithoutUserInput | LanguageLearnerUserVoteCreateOrConnectWithoutUserInput[]
    upsert?: LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutUserInput | LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguageLearnerUserVoteCreateManyUserInputEnvelope
    set?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    disconnect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    delete?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    connect?: LanguageLearnerUserVoteWhereUniqueInput | LanguageLearnerUserVoteWhereUniqueInput[]
    update?: LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutUserInput | LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguageLearnerUserVoteUpdateManyWithWhereWithoutUserInput | LanguageLearnerUserVoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguageLearnerUserVoteScalarWhereInput | LanguageLearnerUserVoteScalarWhereInput[]
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutUserInput, LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput> | LanguageLearnerReviewLikeCreateWithoutUserInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput | LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput[]
    upsert?: LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutUserInput | LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyUserInputEnvelope
    set?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    delete?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    update?: LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutUserInput | LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguageLearnerReviewLikeUpdateManyWithWhereWithoutUserInput | LanguageLearnerReviewLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguageLearnerReviewLikeScalarWhereInput | LanguageLearnerReviewLikeScalarWhereInput[]
  }

  export type LanguageLearnerUserCreateNestedOneWithoutOwnedPlatformsInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutOwnedPlatformsInput, LanguageLearnerUserUncheckedCreateWithoutOwnedPlatformsInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutOwnedPlatformsInput
    connect?: LanguageLearnerUserWhereUniqueInput
  }

  export type LanguageLearnerReviewCreateNestedManyWithoutPlatformInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutPlatformInput, LanguageLearnerReviewUncheckedCreateWithoutPlatformInput> | LanguageLearnerReviewCreateWithoutPlatformInput[] | LanguageLearnerReviewUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutPlatformInput | LanguageLearnerReviewCreateOrConnectWithoutPlatformInput[]
    createMany?: LanguageLearnerReviewCreateManyPlatformInputEnvelope
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
  }

  export type LanguageLearnerReviewUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutPlatformInput, LanguageLearnerReviewUncheckedCreateWithoutPlatformInput> | LanguageLearnerReviewCreateWithoutPlatformInput[] | LanguageLearnerReviewUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutPlatformInput | LanguageLearnerReviewCreateOrConnectWithoutPlatformInput[]
    createMany?: LanguageLearnerReviewCreateManyPlatformInputEnvelope
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
  }

  export type LanguageLearnerUserUpdateOneRequiredWithoutOwnedPlatformsNestedInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutOwnedPlatformsInput, LanguageLearnerUserUncheckedCreateWithoutOwnedPlatformsInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutOwnedPlatformsInput
    upsert?: LanguageLearnerUserUpsertWithoutOwnedPlatformsInput
    connect?: LanguageLearnerUserWhereUniqueInput
    update?: XOR<XOR<LanguageLearnerUserUpdateToOneWithWhereWithoutOwnedPlatformsInput, LanguageLearnerUserUpdateWithoutOwnedPlatformsInput>, LanguageLearnerUserUncheckedUpdateWithoutOwnedPlatformsInput>
  }

  export type LanguageLearnerReviewUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutPlatformInput, LanguageLearnerReviewUncheckedCreateWithoutPlatformInput> | LanguageLearnerReviewCreateWithoutPlatformInput[] | LanguageLearnerReviewUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutPlatformInput | LanguageLearnerReviewCreateOrConnectWithoutPlatformInput[]
    upsert?: LanguageLearnerReviewUpsertWithWhereUniqueWithoutPlatformInput | LanguageLearnerReviewUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: LanguageLearnerReviewCreateManyPlatformInputEnvelope
    set?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    delete?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    update?: LanguageLearnerReviewUpdateWithWhereUniqueWithoutPlatformInput | LanguageLearnerReviewUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: LanguageLearnerReviewUpdateManyWithWhereWithoutPlatformInput | LanguageLearnerReviewUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: LanguageLearnerReviewScalarWhereInput | LanguageLearnerReviewScalarWhereInput[]
  }

  export type LanguageLearnerReviewUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutPlatformInput, LanguageLearnerReviewUncheckedCreateWithoutPlatformInput> | LanguageLearnerReviewCreateWithoutPlatformInput[] | LanguageLearnerReviewUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutPlatformInput | LanguageLearnerReviewCreateOrConnectWithoutPlatformInput[]
    upsert?: LanguageLearnerReviewUpsertWithWhereUniqueWithoutPlatformInput | LanguageLearnerReviewUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: LanguageLearnerReviewCreateManyPlatformInputEnvelope
    set?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    delete?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    connect?: LanguageLearnerReviewWhereUniqueInput | LanguageLearnerReviewWhereUniqueInput[]
    update?: LanguageLearnerReviewUpdateWithWhereUniqueWithoutPlatformInput | LanguageLearnerReviewUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: LanguageLearnerReviewUpdateManyWithWhereWithoutPlatformInput | LanguageLearnerReviewUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: LanguageLearnerReviewScalarWhereInput | LanguageLearnerReviewScalarWhereInput[]
  }

  export type LanguageLearnerPlatformCreateNestedOneWithoutReviewsInput = {
    create?: XOR<LanguageLearnerPlatformCreateWithoutReviewsInput, LanguageLearnerPlatformUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: LanguageLearnerPlatformCreateOrConnectWithoutReviewsInput
    connect?: LanguageLearnerPlatformWhereUniqueInput
  }

  export type LanguageLearnerUserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutReviewsInput, LanguageLearnerUserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutReviewsInput
    connect?: LanguageLearnerUserWhereUniqueInput
  }

  export type LanguageLearnerReviewLikeCreateNestedManyWithoutReviewInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput> | LanguageLearnerReviewLikeCreateWithoutReviewInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput | LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyReviewInputEnvelope
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
  }

  export type LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput> | LanguageLearnerReviewLikeCreateWithoutReviewInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput | LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyReviewInputEnvelope
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
  }

  export type LanguageLearnerPlatformUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<LanguageLearnerPlatformCreateWithoutReviewsInput, LanguageLearnerPlatformUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: LanguageLearnerPlatformCreateOrConnectWithoutReviewsInput
    upsert?: LanguageLearnerPlatformUpsertWithoutReviewsInput
    connect?: LanguageLearnerPlatformWhereUniqueInput
    update?: XOR<XOR<LanguageLearnerPlatformUpdateToOneWithWhereWithoutReviewsInput, LanguageLearnerPlatformUpdateWithoutReviewsInput>, LanguageLearnerPlatformUncheckedUpdateWithoutReviewsInput>
  }

  export type LanguageLearnerUserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutReviewsInput, LanguageLearnerUserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutReviewsInput
    upsert?: LanguageLearnerUserUpsertWithoutReviewsInput
    connect?: LanguageLearnerUserWhereUniqueInput
    update?: XOR<XOR<LanguageLearnerUserUpdateToOneWithWhereWithoutReviewsInput, LanguageLearnerUserUpdateWithoutReviewsInput>, LanguageLearnerUserUncheckedUpdateWithoutReviewsInput>
  }

  export type LanguageLearnerReviewLikeUpdateManyWithoutReviewNestedInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput> | LanguageLearnerReviewLikeCreateWithoutReviewInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput | LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput[]
    upsert?: LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutReviewInput | LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyReviewInputEnvelope
    set?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    delete?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    update?: LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutReviewInput | LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: LanguageLearnerReviewLikeUpdateManyWithWhereWithoutReviewInput | LanguageLearnerReviewLikeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: LanguageLearnerReviewLikeScalarWhereInput | LanguageLearnerReviewLikeScalarWhereInput[]
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<LanguageLearnerReviewLikeCreateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput> | LanguageLearnerReviewLikeCreateWithoutReviewInput[] | LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput | LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput[]
    upsert?: LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutReviewInput | LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: LanguageLearnerReviewLikeCreateManyReviewInputEnvelope
    set?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    disconnect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    delete?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    connect?: LanguageLearnerReviewLikeWhereUniqueInput | LanguageLearnerReviewLikeWhereUniqueInput[]
    update?: LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutReviewInput | LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: LanguageLearnerReviewLikeUpdateManyWithWhereWithoutReviewInput | LanguageLearnerReviewLikeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: LanguageLearnerReviewLikeScalarWhereInput | LanguageLearnerReviewLikeScalarWhereInput[]
  }

  export type LanguageLearnerUserCreateNestedOneWithoutLikesInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutLikesInput, LanguageLearnerUserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutLikesInput
    connect?: LanguageLearnerUserWhereUniqueInput
  }

  export type LanguageLearnerReviewCreateNestedOneWithoutLikesInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutLikesInput, LanguageLearnerReviewUncheckedCreateWithoutLikesInput>
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutLikesInput
    connect?: LanguageLearnerReviewWhereUniqueInput
  }

  export type LanguageLearnerUserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutLikesInput, LanguageLearnerUserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutLikesInput
    upsert?: LanguageLearnerUserUpsertWithoutLikesInput
    connect?: LanguageLearnerUserWhereUniqueInput
    update?: XOR<XOR<LanguageLearnerUserUpdateToOneWithWhereWithoutLikesInput, LanguageLearnerUserUpdateWithoutLikesInput>, LanguageLearnerUserUncheckedUpdateWithoutLikesInput>
  }

  export type LanguageLearnerReviewUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<LanguageLearnerReviewCreateWithoutLikesInput, LanguageLearnerReviewUncheckedCreateWithoutLikesInput>
    connectOrCreate?: LanguageLearnerReviewCreateOrConnectWithoutLikesInput
    upsert?: LanguageLearnerReviewUpsertWithoutLikesInput
    connect?: LanguageLearnerReviewWhereUniqueInput
    update?: XOR<XOR<LanguageLearnerReviewUpdateToOneWithWhereWithoutLikesInput, LanguageLearnerReviewUpdateWithoutLikesInput>, LanguageLearnerReviewUncheckedUpdateWithoutLikesInput>
  }

  export type LanguageLearnerUserCreateNestedOneWithoutVotesReceivedInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutVotesReceivedInput, LanguageLearnerUserUncheckedCreateWithoutVotesReceivedInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutVotesReceivedInput
    connect?: LanguageLearnerUserWhereUniqueInput
  }

  export type LanguageLearnerUserCreateNestedOneWithoutVotesGivenInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutVotesGivenInput, LanguageLearnerUserUncheckedCreateWithoutVotesGivenInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutVotesGivenInput
    connect?: LanguageLearnerUserWhereUniqueInput
  }

  export type LanguageLearnerUserUpdateOneRequiredWithoutVotesReceivedNestedInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutVotesReceivedInput, LanguageLearnerUserUncheckedCreateWithoutVotesReceivedInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutVotesReceivedInput
    upsert?: LanguageLearnerUserUpsertWithoutVotesReceivedInput
    connect?: LanguageLearnerUserWhereUniqueInput
    update?: XOR<XOR<LanguageLearnerUserUpdateToOneWithWhereWithoutVotesReceivedInput, LanguageLearnerUserUpdateWithoutVotesReceivedInput>, LanguageLearnerUserUncheckedUpdateWithoutVotesReceivedInput>
  }

  export type LanguageLearnerUserUpdateOneRequiredWithoutVotesGivenNestedInput = {
    create?: XOR<LanguageLearnerUserCreateWithoutVotesGivenInput, LanguageLearnerUserUncheckedCreateWithoutVotesGivenInput>
    connectOrCreate?: LanguageLearnerUserCreateOrConnectWithoutVotesGivenInput
    upsert?: LanguageLearnerUserUpsertWithoutVotesGivenInput
    connect?: LanguageLearnerUserWhereUniqueInput
    update?: XOR<XOR<LanguageLearnerUserUpdateToOneWithWhereWithoutVotesGivenInput, LanguageLearnerUserUpdateWithoutVotesGivenInput>, LanguageLearnerUserUncheckedUpdateWithoutVotesGivenInput>
  }

  export type GameHubPlayerCreateNestedManyWithoutUserInput = {
    create?: XOR<GameHubPlayerCreateWithoutUserInput, GameHubPlayerUncheckedCreateWithoutUserInput> | GameHubPlayerCreateWithoutUserInput[] | GameHubPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameHubPlayerCreateOrConnectWithoutUserInput | GameHubPlayerCreateOrConnectWithoutUserInput[]
    createMany?: GameHubPlayerCreateManyUserInputEnvelope
    connect?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
  }

  export type GameHubTournamentCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<GameHubTournamentCreateWithoutOrganizerInput, GameHubTournamentUncheckedCreateWithoutOrganizerInput> | GameHubTournamentCreateWithoutOrganizerInput[] | GameHubTournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GameHubTournamentCreateOrConnectWithoutOrganizerInput | GameHubTournamentCreateOrConnectWithoutOrganizerInput[]
    createMany?: GameHubTournamentCreateManyOrganizerInputEnvelope
    connect?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
  }

  export type GameHubPlayerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GameHubPlayerCreateWithoutUserInput, GameHubPlayerUncheckedCreateWithoutUserInput> | GameHubPlayerCreateWithoutUserInput[] | GameHubPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameHubPlayerCreateOrConnectWithoutUserInput | GameHubPlayerCreateOrConnectWithoutUserInput[]
    createMany?: GameHubPlayerCreateManyUserInputEnvelope
    connect?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
  }

  export type GameHubTournamentUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<GameHubTournamentCreateWithoutOrganizerInput, GameHubTournamentUncheckedCreateWithoutOrganizerInput> | GameHubTournamentCreateWithoutOrganizerInput[] | GameHubTournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GameHubTournamentCreateOrConnectWithoutOrganizerInput | GameHubTournamentCreateOrConnectWithoutOrganizerInput[]
    createMany?: GameHubTournamentCreateManyOrganizerInputEnvelope
    connect?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type GameHubPlayerUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameHubPlayerCreateWithoutUserInput, GameHubPlayerUncheckedCreateWithoutUserInput> | GameHubPlayerCreateWithoutUserInput[] | GameHubPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameHubPlayerCreateOrConnectWithoutUserInput | GameHubPlayerCreateOrConnectWithoutUserInput[]
    upsert?: GameHubPlayerUpsertWithWhereUniqueWithoutUserInput | GameHubPlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameHubPlayerCreateManyUserInputEnvelope
    set?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    disconnect?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    delete?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    connect?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    update?: GameHubPlayerUpdateWithWhereUniqueWithoutUserInput | GameHubPlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameHubPlayerUpdateManyWithWhereWithoutUserInput | GameHubPlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameHubPlayerScalarWhereInput | GameHubPlayerScalarWhereInput[]
  }

  export type GameHubTournamentUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<GameHubTournamentCreateWithoutOrganizerInput, GameHubTournamentUncheckedCreateWithoutOrganizerInput> | GameHubTournamentCreateWithoutOrganizerInput[] | GameHubTournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GameHubTournamentCreateOrConnectWithoutOrganizerInput | GameHubTournamentCreateOrConnectWithoutOrganizerInput[]
    upsert?: GameHubTournamentUpsertWithWhereUniqueWithoutOrganizerInput | GameHubTournamentUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: GameHubTournamentCreateManyOrganizerInputEnvelope
    set?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    disconnect?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    delete?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    connect?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    update?: GameHubTournamentUpdateWithWhereUniqueWithoutOrganizerInput | GameHubTournamentUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: GameHubTournamentUpdateManyWithWhereWithoutOrganizerInput | GameHubTournamentUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: GameHubTournamentScalarWhereInput | GameHubTournamentScalarWhereInput[]
  }

  export type GameHubPlayerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameHubPlayerCreateWithoutUserInput, GameHubPlayerUncheckedCreateWithoutUserInput> | GameHubPlayerCreateWithoutUserInput[] | GameHubPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameHubPlayerCreateOrConnectWithoutUserInput | GameHubPlayerCreateOrConnectWithoutUserInput[]
    upsert?: GameHubPlayerUpsertWithWhereUniqueWithoutUserInput | GameHubPlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameHubPlayerCreateManyUserInputEnvelope
    set?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    disconnect?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    delete?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    connect?: GameHubPlayerWhereUniqueInput | GameHubPlayerWhereUniqueInput[]
    update?: GameHubPlayerUpdateWithWhereUniqueWithoutUserInput | GameHubPlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameHubPlayerUpdateManyWithWhereWithoutUserInput | GameHubPlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameHubPlayerScalarWhereInput | GameHubPlayerScalarWhereInput[]
  }

  export type GameHubTournamentUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<GameHubTournamentCreateWithoutOrganizerInput, GameHubTournamentUncheckedCreateWithoutOrganizerInput> | GameHubTournamentCreateWithoutOrganizerInput[] | GameHubTournamentUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GameHubTournamentCreateOrConnectWithoutOrganizerInput | GameHubTournamentCreateOrConnectWithoutOrganizerInput[]
    upsert?: GameHubTournamentUpsertWithWhereUniqueWithoutOrganizerInput | GameHubTournamentUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: GameHubTournamentCreateManyOrganizerInputEnvelope
    set?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    disconnect?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    delete?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    connect?: GameHubTournamentWhereUniqueInput | GameHubTournamentWhereUniqueInput[]
    update?: GameHubTournamentUpdateWithWhereUniqueWithoutOrganizerInput | GameHubTournamentUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: GameHubTournamentUpdateManyWithWhereWithoutOrganizerInput | GameHubTournamentUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: GameHubTournamentScalarWhereInput | GameHubTournamentScalarWhereInput[]
  }

  export type GameHubUserCreateNestedOneWithoutPlayersInput = {
    create?: XOR<GameHubUserCreateWithoutPlayersInput, GameHubUserUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: GameHubUserCreateOrConnectWithoutPlayersInput
    connect?: GameHubUserWhereUniqueInput
  }

  export type GameHubTournamentPlayerCreateNestedManyWithoutPlayerInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutPlayerInput, GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput> | GameHubTournamentPlayerCreateWithoutPlayerInput[] | GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput | GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput[]
    createMany?: GameHubTournamentPlayerCreateManyPlayerInputEnvelope
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
  }

  export type GameHubTournamentPlayerUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutPlayerInput, GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput> | GameHubTournamentPlayerCreateWithoutPlayerInput[] | GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput | GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput[]
    createMany?: GameHubTournamentPlayerCreateManyPlayerInputEnvelope
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
  }

  export type GameHubUserUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<GameHubUserCreateWithoutPlayersInput, GameHubUserUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: GameHubUserCreateOrConnectWithoutPlayersInput
    upsert?: GameHubUserUpsertWithoutPlayersInput
    connect?: GameHubUserWhereUniqueInput
    update?: XOR<XOR<GameHubUserUpdateToOneWithWhereWithoutPlayersInput, GameHubUserUpdateWithoutPlayersInput>, GameHubUserUncheckedUpdateWithoutPlayersInput>
  }

  export type GameHubTournamentPlayerUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutPlayerInput, GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput> | GameHubTournamentPlayerCreateWithoutPlayerInput[] | GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput | GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput[]
    upsert?: GameHubTournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput | GameHubTournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: GameHubTournamentPlayerCreateManyPlayerInputEnvelope
    set?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    disconnect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    delete?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    update?: GameHubTournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput | GameHubTournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: GameHubTournamentPlayerUpdateManyWithWhereWithoutPlayerInput | GameHubTournamentPlayerUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: GameHubTournamentPlayerScalarWhereInput | GameHubTournamentPlayerScalarWhereInput[]
  }

  export type GameHubTournamentPlayerUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutPlayerInput, GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput> | GameHubTournamentPlayerCreateWithoutPlayerInput[] | GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput | GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput[]
    upsert?: GameHubTournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput | GameHubTournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: GameHubTournamentPlayerCreateManyPlayerInputEnvelope
    set?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    disconnect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    delete?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    update?: GameHubTournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput | GameHubTournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: GameHubTournamentPlayerUpdateManyWithWhereWithoutPlayerInput | GameHubTournamentPlayerUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: GameHubTournamentPlayerScalarWhereInput | GameHubTournamentPlayerScalarWhereInput[]
  }

  export type GameHubUserCreateNestedOneWithoutTournamentsInput = {
    create?: XOR<GameHubUserCreateWithoutTournamentsInput, GameHubUserUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: GameHubUserCreateOrConnectWithoutTournamentsInput
    connect?: GameHubUserWhereUniqueInput
  }

  export type GameHubTournamentPlayerCreateNestedManyWithoutTournamentInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutTournamentInput, GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput> | GameHubTournamentPlayerCreateWithoutTournamentInput[] | GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput | GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput[]
    createMany?: GameHubTournamentPlayerCreateManyTournamentInputEnvelope
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
  }

  export type GameHubTournamentPlayerUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutTournamentInput, GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput> | GameHubTournamentPlayerCreateWithoutTournamentInput[] | GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput | GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput[]
    createMany?: GameHubTournamentPlayerCreateManyTournamentInputEnvelope
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
  }

  export type GameHubUserUpdateOneRequiredWithoutTournamentsNestedInput = {
    create?: XOR<GameHubUserCreateWithoutTournamentsInput, GameHubUserUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: GameHubUserCreateOrConnectWithoutTournamentsInput
    upsert?: GameHubUserUpsertWithoutTournamentsInput
    connect?: GameHubUserWhereUniqueInput
    update?: XOR<XOR<GameHubUserUpdateToOneWithWhereWithoutTournamentsInput, GameHubUserUpdateWithoutTournamentsInput>, GameHubUserUncheckedUpdateWithoutTournamentsInput>
  }

  export type GameHubTournamentPlayerUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutTournamentInput, GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput> | GameHubTournamentPlayerCreateWithoutTournamentInput[] | GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput | GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput[]
    upsert?: GameHubTournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput | GameHubTournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: GameHubTournamentPlayerCreateManyTournamentInputEnvelope
    set?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    disconnect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    delete?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    update?: GameHubTournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput | GameHubTournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: GameHubTournamentPlayerUpdateManyWithWhereWithoutTournamentInput | GameHubTournamentPlayerUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: GameHubTournamentPlayerScalarWhereInput | GameHubTournamentPlayerScalarWhereInput[]
  }

  export type GameHubTournamentPlayerUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<GameHubTournamentPlayerCreateWithoutTournamentInput, GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput> | GameHubTournamentPlayerCreateWithoutTournamentInput[] | GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput | GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput[]
    upsert?: GameHubTournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput | GameHubTournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: GameHubTournamentPlayerCreateManyTournamentInputEnvelope
    set?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    disconnect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    delete?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    connect?: GameHubTournamentPlayerWhereUniqueInput | GameHubTournamentPlayerWhereUniqueInput[]
    update?: GameHubTournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput | GameHubTournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: GameHubTournamentPlayerUpdateManyWithWhereWithoutTournamentInput | GameHubTournamentPlayerUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: GameHubTournamentPlayerScalarWhereInput | GameHubTournamentPlayerScalarWhereInput[]
  }

  export type GameHubTournamentCreateNestedOneWithoutPlayersInput = {
    create?: XOR<GameHubTournamentCreateWithoutPlayersInput, GameHubTournamentUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: GameHubTournamentCreateOrConnectWithoutPlayersInput
    connect?: GameHubTournamentWhereUniqueInput
  }

  export type GameHubPlayerCreateNestedOneWithoutTournamentsInput = {
    create?: XOR<GameHubPlayerCreateWithoutTournamentsInput, GameHubPlayerUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: GameHubPlayerCreateOrConnectWithoutTournamentsInput
    connect?: GameHubPlayerWhereUniqueInput
  }

  export type GameHubTournamentUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<GameHubTournamentCreateWithoutPlayersInput, GameHubTournamentUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: GameHubTournamentCreateOrConnectWithoutPlayersInput
    upsert?: GameHubTournamentUpsertWithoutPlayersInput
    connect?: GameHubTournamentWhereUniqueInput
    update?: XOR<XOR<GameHubTournamentUpdateToOneWithWhereWithoutPlayersInput, GameHubTournamentUpdateWithoutPlayersInput>, GameHubTournamentUncheckedUpdateWithoutPlayersInput>
  }

  export type GameHubPlayerUpdateOneRequiredWithoutTournamentsNestedInput = {
    create?: XOR<GameHubPlayerCreateWithoutTournamentsInput, GameHubPlayerUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: GameHubPlayerCreateOrConnectWithoutTournamentsInput
    upsert?: GameHubPlayerUpsertWithoutTournamentsInput
    connect?: GameHubPlayerWhereUniqueInput
    update?: XOR<XOR<GameHubPlayerUpdateToOneWithWhereWithoutTournamentsInput, GameHubPlayerUpdateWithoutTournamentsInput>, GameHubPlayerUncheckedUpdateWithoutTournamentsInput>
  }

  export type ScheduleHealthTrackerCreateNestedManyWithoutUserInput = {
    create?: XOR<ScheduleHealthTrackerCreateWithoutUserInput, ScheduleHealthTrackerUncheckedCreateWithoutUserInput> | ScheduleHealthTrackerCreateWithoutUserInput[] | ScheduleHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleHealthTrackerCreateOrConnectWithoutUserInput | ScheduleHealthTrackerCreateOrConnectWithoutUserInput[]
    createMany?: ScheduleHealthTrackerCreateManyUserInputEnvelope
    connect?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
  }

  export type RecordHealthTrackerCreateNestedManyWithoutUserInput = {
    create?: XOR<RecordHealthTrackerCreateWithoutUserInput, RecordHealthTrackerUncheckedCreateWithoutUserInput> | RecordHealthTrackerCreateWithoutUserInput[] | RecordHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecordHealthTrackerCreateOrConnectWithoutUserInput | RecordHealthTrackerCreateOrConnectWithoutUserInput[]
    createMany?: RecordHealthTrackerCreateManyUserInputEnvelope
    connect?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
  }

  export type ScheduleHealthTrackerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScheduleHealthTrackerCreateWithoutUserInput, ScheduleHealthTrackerUncheckedCreateWithoutUserInput> | ScheduleHealthTrackerCreateWithoutUserInput[] | ScheduleHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleHealthTrackerCreateOrConnectWithoutUserInput | ScheduleHealthTrackerCreateOrConnectWithoutUserInput[]
    createMany?: ScheduleHealthTrackerCreateManyUserInputEnvelope
    connect?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
  }

  export type RecordHealthTrackerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecordHealthTrackerCreateWithoutUserInput, RecordHealthTrackerUncheckedCreateWithoutUserInput> | RecordHealthTrackerCreateWithoutUserInput[] | RecordHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecordHealthTrackerCreateOrConnectWithoutUserInput | RecordHealthTrackerCreateOrConnectWithoutUserInput[]
    createMany?: RecordHealthTrackerCreateManyUserInputEnvelope
    connect?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
  }

  export type ScheduleHealthTrackerUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScheduleHealthTrackerCreateWithoutUserInput, ScheduleHealthTrackerUncheckedCreateWithoutUserInput> | ScheduleHealthTrackerCreateWithoutUserInput[] | ScheduleHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleHealthTrackerCreateOrConnectWithoutUserInput | ScheduleHealthTrackerCreateOrConnectWithoutUserInput[]
    upsert?: ScheduleHealthTrackerUpsertWithWhereUniqueWithoutUserInput | ScheduleHealthTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScheduleHealthTrackerCreateManyUserInputEnvelope
    set?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    disconnect?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    delete?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    connect?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    update?: ScheduleHealthTrackerUpdateWithWhereUniqueWithoutUserInput | ScheduleHealthTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScheduleHealthTrackerUpdateManyWithWhereWithoutUserInput | ScheduleHealthTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScheduleHealthTrackerScalarWhereInput | ScheduleHealthTrackerScalarWhereInput[]
  }

  export type RecordHealthTrackerUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecordHealthTrackerCreateWithoutUserInput, RecordHealthTrackerUncheckedCreateWithoutUserInput> | RecordHealthTrackerCreateWithoutUserInput[] | RecordHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecordHealthTrackerCreateOrConnectWithoutUserInput | RecordHealthTrackerCreateOrConnectWithoutUserInput[]
    upsert?: RecordHealthTrackerUpsertWithWhereUniqueWithoutUserInput | RecordHealthTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecordHealthTrackerCreateManyUserInputEnvelope
    set?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    disconnect?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    delete?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    connect?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    update?: RecordHealthTrackerUpdateWithWhereUniqueWithoutUserInput | RecordHealthTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecordHealthTrackerUpdateManyWithWhereWithoutUserInput | RecordHealthTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecordHealthTrackerScalarWhereInput | RecordHealthTrackerScalarWhereInput[]
  }

  export type ScheduleHealthTrackerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScheduleHealthTrackerCreateWithoutUserInput, ScheduleHealthTrackerUncheckedCreateWithoutUserInput> | ScheduleHealthTrackerCreateWithoutUserInput[] | ScheduleHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduleHealthTrackerCreateOrConnectWithoutUserInput | ScheduleHealthTrackerCreateOrConnectWithoutUserInput[]
    upsert?: ScheduleHealthTrackerUpsertWithWhereUniqueWithoutUserInput | ScheduleHealthTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScheduleHealthTrackerCreateManyUserInputEnvelope
    set?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    disconnect?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    delete?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    connect?: ScheduleHealthTrackerWhereUniqueInput | ScheduleHealthTrackerWhereUniqueInput[]
    update?: ScheduleHealthTrackerUpdateWithWhereUniqueWithoutUserInput | ScheduleHealthTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScheduleHealthTrackerUpdateManyWithWhereWithoutUserInput | ScheduleHealthTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScheduleHealthTrackerScalarWhereInput | ScheduleHealthTrackerScalarWhereInput[]
  }

  export type RecordHealthTrackerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecordHealthTrackerCreateWithoutUserInput, RecordHealthTrackerUncheckedCreateWithoutUserInput> | RecordHealthTrackerCreateWithoutUserInput[] | RecordHealthTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecordHealthTrackerCreateOrConnectWithoutUserInput | RecordHealthTrackerCreateOrConnectWithoutUserInput[]
    upsert?: RecordHealthTrackerUpsertWithWhereUniqueWithoutUserInput | RecordHealthTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecordHealthTrackerCreateManyUserInputEnvelope
    set?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    disconnect?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    delete?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    connect?: RecordHealthTrackerWhereUniqueInput | RecordHealthTrackerWhereUniqueInput[]
    update?: RecordHealthTrackerUpdateWithWhereUniqueWithoutUserInput | RecordHealthTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecordHealthTrackerUpdateManyWithWhereWithoutUserInput | RecordHealthTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecordHealthTrackerScalarWhereInput | RecordHealthTrackerScalarWhereInput[]
  }

  export type UserHealthTrackerCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<UserHealthTrackerCreateWithoutSchedulesInput, UserHealthTrackerUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserHealthTrackerCreateOrConnectWithoutSchedulesInput
    connect?: UserHealthTrackerWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserHealthTrackerUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<UserHealthTrackerCreateWithoutSchedulesInput, UserHealthTrackerUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserHealthTrackerCreateOrConnectWithoutSchedulesInput
    upsert?: UserHealthTrackerUpsertWithoutSchedulesInput
    connect?: UserHealthTrackerWhereUniqueInput
    update?: XOR<XOR<UserHealthTrackerUpdateToOneWithWhereWithoutSchedulesInput, UserHealthTrackerUpdateWithoutSchedulesInput>, UserHealthTrackerUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserHealthTrackerCreateNestedOneWithoutRecordsInput = {
    create?: XOR<UserHealthTrackerCreateWithoutRecordsInput, UserHealthTrackerUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: UserHealthTrackerCreateOrConnectWithoutRecordsInput
    connect?: UserHealthTrackerWhereUniqueInput
  }

  export type UserHealthTrackerUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<UserHealthTrackerCreateWithoutRecordsInput, UserHealthTrackerUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: UserHealthTrackerCreateOrConnectWithoutRecordsInput
    upsert?: UserHealthTrackerUpsertWithoutRecordsInput
    connect?: UserHealthTrackerWhereUniqueInput
    update?: XOR<XOR<UserHealthTrackerUpdateToOneWithWhereWithoutRecordsInput, UserHealthTrackerUpdateWithoutRecordsInput>, UserHealthTrackerUncheckedUpdateWithoutRecordsInput>
  }

  export type ClinicHealthTrackerCreateavailableSlotsInput = {
    set: string[]
  }

  export type ClinicHealthTrackerUpdateavailableSlotsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ConcertMusicLoverCreateNestedManyWithoutUserInput = {
    create?: XOR<ConcertMusicLoverCreateWithoutUserInput, ConcertMusicLoverUncheckedCreateWithoutUserInput> | ConcertMusicLoverCreateWithoutUserInput[] | ConcertMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConcertMusicLoverCreateOrConnectWithoutUserInput | ConcertMusicLoverCreateOrConnectWithoutUserInput[]
    createMany?: ConcertMusicLoverCreateManyUserInputEnvelope
    connect?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
  }

  export type ReviewMusicLoverCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutUserInput, ReviewMusicLoverUncheckedCreateWithoutUserInput> | ReviewMusicLoverCreateWithoutUserInput[] | ReviewMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutUserInput | ReviewMusicLoverCreateOrConnectWithoutUserInput[]
    createMany?: ReviewMusicLoverCreateManyUserInputEnvelope
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
  }

  export type ConcertMusicLoverUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConcertMusicLoverCreateWithoutUserInput, ConcertMusicLoverUncheckedCreateWithoutUserInput> | ConcertMusicLoverCreateWithoutUserInput[] | ConcertMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConcertMusicLoverCreateOrConnectWithoutUserInput | ConcertMusicLoverCreateOrConnectWithoutUserInput[]
    createMany?: ConcertMusicLoverCreateManyUserInputEnvelope
    connect?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
  }

  export type ReviewMusicLoverUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutUserInput, ReviewMusicLoverUncheckedCreateWithoutUserInput> | ReviewMusicLoverCreateWithoutUserInput[] | ReviewMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutUserInput | ReviewMusicLoverCreateOrConnectWithoutUserInput[]
    createMany?: ReviewMusicLoverCreateManyUserInputEnvelope
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
  }

  export type ConcertMusicLoverUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConcertMusicLoverCreateWithoutUserInput, ConcertMusicLoverUncheckedCreateWithoutUserInput> | ConcertMusicLoverCreateWithoutUserInput[] | ConcertMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConcertMusicLoverCreateOrConnectWithoutUserInput | ConcertMusicLoverCreateOrConnectWithoutUserInput[]
    upsert?: ConcertMusicLoverUpsertWithWhereUniqueWithoutUserInput | ConcertMusicLoverUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConcertMusicLoverCreateManyUserInputEnvelope
    set?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    disconnect?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    delete?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    connect?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    update?: ConcertMusicLoverUpdateWithWhereUniqueWithoutUserInput | ConcertMusicLoverUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConcertMusicLoverUpdateManyWithWhereWithoutUserInput | ConcertMusicLoverUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConcertMusicLoverScalarWhereInput | ConcertMusicLoverScalarWhereInput[]
  }

  export type ReviewMusicLoverUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutUserInput, ReviewMusicLoverUncheckedCreateWithoutUserInput> | ReviewMusicLoverCreateWithoutUserInput[] | ReviewMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutUserInput | ReviewMusicLoverCreateOrConnectWithoutUserInput[]
    upsert?: ReviewMusicLoverUpsertWithWhereUniqueWithoutUserInput | ReviewMusicLoverUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewMusicLoverCreateManyUserInputEnvelope
    set?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    disconnect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    delete?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    update?: ReviewMusicLoverUpdateWithWhereUniqueWithoutUserInput | ReviewMusicLoverUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewMusicLoverUpdateManyWithWhereWithoutUserInput | ReviewMusicLoverUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewMusicLoverScalarWhereInput | ReviewMusicLoverScalarWhereInput[]
  }

  export type ConcertMusicLoverUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConcertMusicLoverCreateWithoutUserInput, ConcertMusicLoverUncheckedCreateWithoutUserInput> | ConcertMusicLoverCreateWithoutUserInput[] | ConcertMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConcertMusicLoverCreateOrConnectWithoutUserInput | ConcertMusicLoverCreateOrConnectWithoutUserInput[]
    upsert?: ConcertMusicLoverUpsertWithWhereUniqueWithoutUserInput | ConcertMusicLoverUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConcertMusicLoverCreateManyUserInputEnvelope
    set?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    disconnect?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    delete?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    connect?: ConcertMusicLoverWhereUniqueInput | ConcertMusicLoverWhereUniqueInput[]
    update?: ConcertMusicLoverUpdateWithWhereUniqueWithoutUserInput | ConcertMusicLoverUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConcertMusicLoverUpdateManyWithWhereWithoutUserInput | ConcertMusicLoverUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConcertMusicLoverScalarWhereInput | ConcertMusicLoverScalarWhereInput[]
  }

  export type ReviewMusicLoverUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutUserInput, ReviewMusicLoverUncheckedCreateWithoutUserInput> | ReviewMusicLoverCreateWithoutUserInput[] | ReviewMusicLoverUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutUserInput | ReviewMusicLoverCreateOrConnectWithoutUserInput[]
    upsert?: ReviewMusicLoverUpsertWithWhereUniqueWithoutUserInput | ReviewMusicLoverUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewMusicLoverCreateManyUserInputEnvelope
    set?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    disconnect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    delete?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    update?: ReviewMusicLoverUpdateWithWhereUniqueWithoutUserInput | ReviewMusicLoverUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewMusicLoverUpdateManyWithWhereWithoutUserInput | ReviewMusicLoverUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewMusicLoverScalarWhereInput | ReviewMusicLoverScalarWhereInput[]
  }

  export type UserMusicLoverCreateNestedOneWithoutConcertsInput = {
    create?: XOR<UserMusicLoverCreateWithoutConcertsInput, UserMusicLoverUncheckedCreateWithoutConcertsInput>
    connectOrCreate?: UserMusicLoverCreateOrConnectWithoutConcertsInput
    connect?: UserMusicLoverWhereUniqueInput
  }

  export type ReviewMusicLoverCreateNestedManyWithoutConcertInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutConcertInput, ReviewMusicLoverUncheckedCreateWithoutConcertInput> | ReviewMusicLoverCreateWithoutConcertInput[] | ReviewMusicLoverUncheckedCreateWithoutConcertInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutConcertInput | ReviewMusicLoverCreateOrConnectWithoutConcertInput[]
    createMany?: ReviewMusicLoverCreateManyConcertInputEnvelope
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
  }

  export type ReviewMusicLoverUncheckedCreateNestedManyWithoutConcertInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutConcertInput, ReviewMusicLoverUncheckedCreateWithoutConcertInput> | ReviewMusicLoverCreateWithoutConcertInput[] | ReviewMusicLoverUncheckedCreateWithoutConcertInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutConcertInput | ReviewMusicLoverCreateOrConnectWithoutConcertInput[]
    createMany?: ReviewMusicLoverCreateManyConcertInputEnvelope
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
  }

  export type UserMusicLoverUpdateOneRequiredWithoutConcertsNestedInput = {
    create?: XOR<UserMusicLoverCreateWithoutConcertsInput, UserMusicLoverUncheckedCreateWithoutConcertsInput>
    connectOrCreate?: UserMusicLoverCreateOrConnectWithoutConcertsInput
    upsert?: UserMusicLoverUpsertWithoutConcertsInput
    connect?: UserMusicLoverWhereUniqueInput
    update?: XOR<XOR<UserMusicLoverUpdateToOneWithWhereWithoutConcertsInput, UserMusicLoverUpdateWithoutConcertsInput>, UserMusicLoverUncheckedUpdateWithoutConcertsInput>
  }

  export type ReviewMusicLoverUpdateManyWithoutConcertNestedInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutConcertInput, ReviewMusicLoverUncheckedCreateWithoutConcertInput> | ReviewMusicLoverCreateWithoutConcertInput[] | ReviewMusicLoverUncheckedCreateWithoutConcertInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutConcertInput | ReviewMusicLoverCreateOrConnectWithoutConcertInput[]
    upsert?: ReviewMusicLoverUpsertWithWhereUniqueWithoutConcertInput | ReviewMusicLoverUpsertWithWhereUniqueWithoutConcertInput[]
    createMany?: ReviewMusicLoverCreateManyConcertInputEnvelope
    set?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    disconnect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    delete?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    update?: ReviewMusicLoverUpdateWithWhereUniqueWithoutConcertInput | ReviewMusicLoverUpdateWithWhereUniqueWithoutConcertInput[]
    updateMany?: ReviewMusicLoverUpdateManyWithWhereWithoutConcertInput | ReviewMusicLoverUpdateManyWithWhereWithoutConcertInput[]
    deleteMany?: ReviewMusicLoverScalarWhereInput | ReviewMusicLoverScalarWhereInput[]
  }

  export type ReviewMusicLoverUncheckedUpdateManyWithoutConcertNestedInput = {
    create?: XOR<ReviewMusicLoverCreateWithoutConcertInput, ReviewMusicLoverUncheckedCreateWithoutConcertInput> | ReviewMusicLoverCreateWithoutConcertInput[] | ReviewMusicLoverUncheckedCreateWithoutConcertInput[]
    connectOrCreate?: ReviewMusicLoverCreateOrConnectWithoutConcertInput | ReviewMusicLoverCreateOrConnectWithoutConcertInput[]
    upsert?: ReviewMusicLoverUpsertWithWhereUniqueWithoutConcertInput | ReviewMusicLoverUpsertWithWhereUniqueWithoutConcertInput[]
    createMany?: ReviewMusicLoverCreateManyConcertInputEnvelope
    set?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    disconnect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    delete?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    connect?: ReviewMusicLoverWhereUniqueInput | ReviewMusicLoverWhereUniqueInput[]
    update?: ReviewMusicLoverUpdateWithWhereUniqueWithoutConcertInput | ReviewMusicLoverUpdateWithWhereUniqueWithoutConcertInput[]
    updateMany?: ReviewMusicLoverUpdateManyWithWhereWithoutConcertInput | ReviewMusicLoverUpdateManyWithWhereWithoutConcertInput[]
    deleteMany?: ReviewMusicLoverScalarWhereInput | ReviewMusicLoverScalarWhereInput[]
  }

  export type UserMusicLoverCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserMusicLoverCreateWithoutReviewsInput, UserMusicLoverUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserMusicLoverCreateOrConnectWithoutReviewsInput
    connect?: UserMusicLoverWhereUniqueInput
  }

  export type ConcertMusicLoverCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ConcertMusicLoverCreateWithoutReviewsInput, ConcertMusicLoverUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ConcertMusicLoverCreateOrConnectWithoutReviewsInput
    connect?: ConcertMusicLoverWhereUniqueInput
  }

  export type UserMusicLoverUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserMusicLoverCreateWithoutReviewsInput, UserMusicLoverUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserMusicLoverCreateOrConnectWithoutReviewsInput
    upsert?: UserMusicLoverUpsertWithoutReviewsInput
    connect?: UserMusicLoverWhereUniqueInput
    update?: XOR<XOR<UserMusicLoverUpdateToOneWithWhereWithoutReviewsInput, UserMusicLoverUpdateWithoutReviewsInput>, UserMusicLoverUncheckedUpdateWithoutReviewsInput>
  }

  export type ConcertMusicLoverUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ConcertMusicLoverCreateWithoutReviewsInput, ConcertMusicLoverUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ConcertMusicLoverCreateOrConnectWithoutReviewsInput
    upsert?: ConcertMusicLoverUpsertWithoutReviewsInput
    connect?: ConcertMusicLoverWhereUniqueInput
    update?: XOR<XOR<ConcertMusicLoverUpdateToOneWithWhereWithoutReviewsInput, ConcertMusicLoverUpdateWithoutReviewsInput>, ConcertMusicLoverUncheckedUpdateWithoutReviewsInput>
  }

  export type EventSocialButterflyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<EventSocialButterflyCreateWithoutOwnerInput, EventSocialButterflyUncheckedCreateWithoutOwnerInput> | EventSocialButterflyCreateWithoutOwnerInput[] | EventSocialButterflyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutOwnerInput | EventSocialButterflyCreateOrConnectWithoutOwnerInput[]
    createMany?: EventSocialButterflyCreateManyOwnerInputEnvelope
    connect?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
  }

  export type ReviewSocialButterflyCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutUserInput, ReviewSocialButterflyUncheckedCreateWithoutUserInput> | ReviewSocialButterflyCreateWithoutUserInput[] | ReviewSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutUserInput | ReviewSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: ReviewSocialButterflyCreateManyUserInputEnvelope
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
  }

  export type LikeSocialButterflyCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutUserInput, LikeSocialButterflyUncheckedCreateWithoutUserInput> | LikeSocialButterflyCreateWithoutUserInput[] | LikeSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutUserInput | LikeSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: LikeSocialButterflyCreateManyUserInputEnvelope
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
  }

  export type BookmarkSocialButterflyCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutUserInput, BookmarkSocialButterflyUncheckedCreateWithoutUserInput> | BookmarkSocialButterflyCreateWithoutUserInput[] | BookmarkSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutUserInput | BookmarkSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkSocialButterflyCreateManyUserInputEnvelope
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
  }

  export type ReportSocialButterflyCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutUserInput, ReportSocialButterflyUncheckedCreateWithoutUserInput> | ReportSocialButterflyCreateWithoutUserInput[] | ReportSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutUserInput | ReportSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: ReportSocialButterflyCreateManyUserInputEnvelope
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
  }

  export type EventSocialButterflyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<EventSocialButterflyCreateWithoutOwnerInput, EventSocialButterflyUncheckedCreateWithoutOwnerInput> | EventSocialButterflyCreateWithoutOwnerInput[] | EventSocialButterflyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutOwnerInput | EventSocialButterflyCreateOrConnectWithoutOwnerInput[]
    createMany?: EventSocialButterflyCreateManyOwnerInputEnvelope
    connect?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
  }

  export type ReviewSocialButterflyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutUserInput, ReviewSocialButterflyUncheckedCreateWithoutUserInput> | ReviewSocialButterflyCreateWithoutUserInput[] | ReviewSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutUserInput | ReviewSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: ReviewSocialButterflyCreateManyUserInputEnvelope
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
  }

  export type LikeSocialButterflyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutUserInput, LikeSocialButterflyUncheckedCreateWithoutUserInput> | LikeSocialButterflyCreateWithoutUserInput[] | LikeSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutUserInput | LikeSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: LikeSocialButterflyCreateManyUserInputEnvelope
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
  }

  export type BookmarkSocialButterflyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutUserInput, BookmarkSocialButterflyUncheckedCreateWithoutUserInput> | BookmarkSocialButterflyCreateWithoutUserInput[] | BookmarkSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutUserInput | BookmarkSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkSocialButterflyCreateManyUserInputEnvelope
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
  }

  export type ReportSocialButterflyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutUserInput, ReportSocialButterflyUncheckedCreateWithoutUserInput> | ReportSocialButterflyCreateWithoutUserInput[] | ReportSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutUserInput | ReportSocialButterflyCreateOrConnectWithoutUserInput[]
    createMany?: ReportSocialButterflyCreateManyUserInputEnvelope
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
  }

  export type EventSocialButterflyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<EventSocialButterflyCreateWithoutOwnerInput, EventSocialButterflyUncheckedCreateWithoutOwnerInput> | EventSocialButterflyCreateWithoutOwnerInput[] | EventSocialButterflyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutOwnerInput | EventSocialButterflyCreateOrConnectWithoutOwnerInput[]
    upsert?: EventSocialButterflyUpsertWithWhereUniqueWithoutOwnerInput | EventSocialButterflyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: EventSocialButterflyCreateManyOwnerInputEnvelope
    set?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    disconnect?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    delete?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    connect?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    update?: EventSocialButterflyUpdateWithWhereUniqueWithoutOwnerInput | EventSocialButterflyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: EventSocialButterflyUpdateManyWithWhereWithoutOwnerInput | EventSocialButterflyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: EventSocialButterflyScalarWhereInput | EventSocialButterflyScalarWhereInput[]
  }

  export type ReviewSocialButterflyUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutUserInput, ReviewSocialButterflyUncheckedCreateWithoutUserInput> | ReviewSocialButterflyCreateWithoutUserInput[] | ReviewSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutUserInput | ReviewSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: ReviewSocialButterflyUpsertWithWhereUniqueWithoutUserInput | ReviewSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewSocialButterflyCreateManyUserInputEnvelope
    set?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    disconnect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    delete?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    update?: ReviewSocialButterflyUpdateWithWhereUniqueWithoutUserInput | ReviewSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewSocialButterflyUpdateManyWithWhereWithoutUserInput | ReviewSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewSocialButterflyScalarWhereInput | ReviewSocialButterflyScalarWhereInput[]
  }

  export type LikeSocialButterflyUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutUserInput, LikeSocialButterflyUncheckedCreateWithoutUserInput> | LikeSocialButterflyCreateWithoutUserInput[] | LikeSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutUserInput | LikeSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: LikeSocialButterflyUpsertWithWhereUniqueWithoutUserInput | LikeSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeSocialButterflyCreateManyUserInputEnvelope
    set?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    disconnect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    delete?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    update?: LikeSocialButterflyUpdateWithWhereUniqueWithoutUserInput | LikeSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeSocialButterflyUpdateManyWithWhereWithoutUserInput | LikeSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeSocialButterflyScalarWhereInput | LikeSocialButterflyScalarWhereInput[]
  }

  export type BookmarkSocialButterflyUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutUserInput, BookmarkSocialButterflyUncheckedCreateWithoutUserInput> | BookmarkSocialButterflyCreateWithoutUserInput[] | BookmarkSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutUserInput | BookmarkSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkSocialButterflyUpsertWithWhereUniqueWithoutUserInput | BookmarkSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkSocialButterflyCreateManyUserInputEnvelope
    set?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    disconnect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    delete?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    update?: BookmarkSocialButterflyUpdateWithWhereUniqueWithoutUserInput | BookmarkSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkSocialButterflyUpdateManyWithWhereWithoutUserInput | BookmarkSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkSocialButterflyScalarWhereInput | BookmarkSocialButterflyScalarWhereInput[]
  }

  export type ReportSocialButterflyUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutUserInput, ReportSocialButterflyUncheckedCreateWithoutUserInput> | ReportSocialButterflyCreateWithoutUserInput[] | ReportSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutUserInput | ReportSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: ReportSocialButterflyUpsertWithWhereUniqueWithoutUserInput | ReportSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportSocialButterflyCreateManyUserInputEnvelope
    set?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    disconnect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    delete?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    update?: ReportSocialButterflyUpdateWithWhereUniqueWithoutUserInput | ReportSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportSocialButterflyUpdateManyWithWhereWithoutUserInput | ReportSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
  }

  export type EventSocialButterflyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<EventSocialButterflyCreateWithoutOwnerInput, EventSocialButterflyUncheckedCreateWithoutOwnerInput> | EventSocialButterflyCreateWithoutOwnerInput[] | EventSocialButterflyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutOwnerInput | EventSocialButterflyCreateOrConnectWithoutOwnerInput[]
    upsert?: EventSocialButterflyUpsertWithWhereUniqueWithoutOwnerInput | EventSocialButterflyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: EventSocialButterflyCreateManyOwnerInputEnvelope
    set?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    disconnect?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    delete?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    connect?: EventSocialButterflyWhereUniqueInput | EventSocialButterflyWhereUniqueInput[]
    update?: EventSocialButterflyUpdateWithWhereUniqueWithoutOwnerInput | EventSocialButterflyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: EventSocialButterflyUpdateManyWithWhereWithoutOwnerInput | EventSocialButterflyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: EventSocialButterflyScalarWhereInput | EventSocialButterflyScalarWhereInput[]
  }

  export type ReviewSocialButterflyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutUserInput, ReviewSocialButterflyUncheckedCreateWithoutUserInput> | ReviewSocialButterflyCreateWithoutUserInput[] | ReviewSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutUserInput | ReviewSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: ReviewSocialButterflyUpsertWithWhereUniqueWithoutUserInput | ReviewSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewSocialButterflyCreateManyUserInputEnvelope
    set?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    disconnect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    delete?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    update?: ReviewSocialButterflyUpdateWithWhereUniqueWithoutUserInput | ReviewSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewSocialButterflyUpdateManyWithWhereWithoutUserInput | ReviewSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewSocialButterflyScalarWhereInput | ReviewSocialButterflyScalarWhereInput[]
  }

  export type LikeSocialButterflyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutUserInput, LikeSocialButterflyUncheckedCreateWithoutUserInput> | LikeSocialButterflyCreateWithoutUserInput[] | LikeSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutUserInput | LikeSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: LikeSocialButterflyUpsertWithWhereUniqueWithoutUserInput | LikeSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeSocialButterflyCreateManyUserInputEnvelope
    set?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    disconnect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    delete?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    update?: LikeSocialButterflyUpdateWithWhereUniqueWithoutUserInput | LikeSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeSocialButterflyUpdateManyWithWhereWithoutUserInput | LikeSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeSocialButterflyScalarWhereInput | LikeSocialButterflyScalarWhereInput[]
  }

  export type BookmarkSocialButterflyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutUserInput, BookmarkSocialButterflyUncheckedCreateWithoutUserInput> | BookmarkSocialButterflyCreateWithoutUserInput[] | BookmarkSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutUserInput | BookmarkSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkSocialButterflyUpsertWithWhereUniqueWithoutUserInput | BookmarkSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkSocialButterflyCreateManyUserInputEnvelope
    set?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    disconnect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    delete?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    update?: BookmarkSocialButterflyUpdateWithWhereUniqueWithoutUserInput | BookmarkSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkSocialButterflyUpdateManyWithWhereWithoutUserInput | BookmarkSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkSocialButterflyScalarWhereInput | BookmarkSocialButterflyScalarWhereInput[]
  }

  export type ReportSocialButterflyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutUserInput, ReportSocialButterflyUncheckedCreateWithoutUserInput> | ReportSocialButterflyCreateWithoutUserInput[] | ReportSocialButterflyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutUserInput | ReportSocialButterflyCreateOrConnectWithoutUserInput[]
    upsert?: ReportSocialButterflyUpsertWithWhereUniqueWithoutUserInput | ReportSocialButterflyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportSocialButterflyCreateManyUserInputEnvelope
    set?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    disconnect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    delete?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    update?: ReportSocialButterflyUpdateWithWhereUniqueWithoutUserInput | ReportSocialButterflyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportSocialButterflyUpdateManyWithWhereWithoutUserInput | ReportSocialButterflyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
  }

  export type UserSocialButterflyCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserSocialButterflyCreateWithoutEventsInput, UserSocialButterflyUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutEventsInput
    connect?: UserSocialButterflyWhereUniqueInput
  }

  export type ReviewSocialButterflyCreateNestedManyWithoutEventInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutEventInput, ReviewSocialButterflyUncheckedCreateWithoutEventInput> | ReviewSocialButterflyCreateWithoutEventInput[] | ReviewSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutEventInput | ReviewSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: ReviewSocialButterflyCreateManyEventInputEnvelope
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
  }

  export type BookmarkSocialButterflyCreateNestedManyWithoutEventInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutEventInput, BookmarkSocialButterflyUncheckedCreateWithoutEventInput> | BookmarkSocialButterflyCreateWithoutEventInput[] | BookmarkSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutEventInput | BookmarkSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: BookmarkSocialButterflyCreateManyEventInputEnvelope
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
  }

  export type LikeSocialButterflyCreateNestedManyWithoutEventInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutEventInput, LikeSocialButterflyUncheckedCreateWithoutEventInput> | LikeSocialButterflyCreateWithoutEventInput[] | LikeSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutEventInput | LikeSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: LikeSocialButterflyCreateManyEventInputEnvelope
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
  }

  export type ReportSocialButterflyCreateNestedManyWithoutEventInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutEventInput, ReportSocialButterflyUncheckedCreateWithoutEventInput> | ReportSocialButterflyCreateWithoutEventInput[] | ReportSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutEventInput | ReportSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: ReportSocialButterflyCreateManyEventInputEnvelope
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
  }

  export type ReviewSocialButterflyUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutEventInput, ReviewSocialButterflyUncheckedCreateWithoutEventInput> | ReviewSocialButterflyCreateWithoutEventInput[] | ReviewSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutEventInput | ReviewSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: ReviewSocialButterflyCreateManyEventInputEnvelope
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
  }

  export type BookmarkSocialButterflyUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutEventInput, BookmarkSocialButterflyUncheckedCreateWithoutEventInput> | BookmarkSocialButterflyCreateWithoutEventInput[] | BookmarkSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutEventInput | BookmarkSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: BookmarkSocialButterflyCreateManyEventInputEnvelope
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
  }

  export type LikeSocialButterflyUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutEventInput, LikeSocialButterflyUncheckedCreateWithoutEventInput> | LikeSocialButterflyCreateWithoutEventInput[] | LikeSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutEventInput | LikeSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: LikeSocialButterflyCreateManyEventInputEnvelope
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
  }

  export type ReportSocialButterflyUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutEventInput, ReportSocialButterflyUncheckedCreateWithoutEventInput> | ReportSocialButterflyCreateWithoutEventInput[] | ReportSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutEventInput | ReportSocialButterflyCreateOrConnectWithoutEventInput[]
    createMany?: ReportSocialButterflyCreateManyEventInputEnvelope
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
  }

  export type UserSocialButterflyUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<UserSocialButterflyCreateWithoutEventsInput, UserSocialButterflyUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutEventsInput
    upsert?: UserSocialButterflyUpsertWithoutEventsInput
    connect?: UserSocialButterflyWhereUniqueInput
    update?: XOR<XOR<UserSocialButterflyUpdateToOneWithWhereWithoutEventsInput, UserSocialButterflyUpdateWithoutEventsInput>, UserSocialButterflyUncheckedUpdateWithoutEventsInput>
  }

  export type ReviewSocialButterflyUpdateManyWithoutEventNestedInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutEventInput, ReviewSocialButterflyUncheckedCreateWithoutEventInput> | ReviewSocialButterflyCreateWithoutEventInput[] | ReviewSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutEventInput | ReviewSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: ReviewSocialButterflyUpsertWithWhereUniqueWithoutEventInput | ReviewSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ReviewSocialButterflyCreateManyEventInputEnvelope
    set?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    disconnect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    delete?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    update?: ReviewSocialButterflyUpdateWithWhereUniqueWithoutEventInput | ReviewSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ReviewSocialButterflyUpdateManyWithWhereWithoutEventInput | ReviewSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ReviewSocialButterflyScalarWhereInput | ReviewSocialButterflyScalarWhereInput[]
  }

  export type BookmarkSocialButterflyUpdateManyWithoutEventNestedInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutEventInput, BookmarkSocialButterflyUncheckedCreateWithoutEventInput> | BookmarkSocialButterflyCreateWithoutEventInput[] | BookmarkSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutEventInput | BookmarkSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: BookmarkSocialButterflyUpsertWithWhereUniqueWithoutEventInput | BookmarkSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BookmarkSocialButterflyCreateManyEventInputEnvelope
    set?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    disconnect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    delete?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    update?: BookmarkSocialButterflyUpdateWithWhereUniqueWithoutEventInput | BookmarkSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BookmarkSocialButterflyUpdateManyWithWhereWithoutEventInput | BookmarkSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BookmarkSocialButterflyScalarWhereInput | BookmarkSocialButterflyScalarWhereInput[]
  }

  export type LikeSocialButterflyUpdateManyWithoutEventNestedInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutEventInput, LikeSocialButterflyUncheckedCreateWithoutEventInput> | LikeSocialButterflyCreateWithoutEventInput[] | LikeSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutEventInput | LikeSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: LikeSocialButterflyUpsertWithWhereUniqueWithoutEventInput | LikeSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: LikeSocialButterflyCreateManyEventInputEnvelope
    set?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    disconnect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    delete?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    update?: LikeSocialButterflyUpdateWithWhereUniqueWithoutEventInput | LikeSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: LikeSocialButterflyUpdateManyWithWhereWithoutEventInput | LikeSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: LikeSocialButterflyScalarWhereInput | LikeSocialButterflyScalarWhereInput[]
  }

  export type ReportSocialButterflyUpdateManyWithoutEventNestedInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutEventInput, ReportSocialButterflyUncheckedCreateWithoutEventInput> | ReportSocialButterflyCreateWithoutEventInput[] | ReportSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutEventInput | ReportSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: ReportSocialButterflyUpsertWithWhereUniqueWithoutEventInput | ReportSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ReportSocialButterflyCreateManyEventInputEnvelope
    set?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    disconnect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    delete?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    update?: ReportSocialButterflyUpdateWithWhereUniqueWithoutEventInput | ReportSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ReportSocialButterflyUpdateManyWithWhereWithoutEventInput | ReportSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
  }

  export type ReviewSocialButterflyUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutEventInput, ReviewSocialButterflyUncheckedCreateWithoutEventInput> | ReviewSocialButterflyCreateWithoutEventInput[] | ReviewSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutEventInput | ReviewSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: ReviewSocialButterflyUpsertWithWhereUniqueWithoutEventInput | ReviewSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ReviewSocialButterflyCreateManyEventInputEnvelope
    set?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    disconnect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    delete?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    connect?: ReviewSocialButterflyWhereUniqueInput | ReviewSocialButterflyWhereUniqueInput[]
    update?: ReviewSocialButterflyUpdateWithWhereUniqueWithoutEventInput | ReviewSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ReviewSocialButterflyUpdateManyWithWhereWithoutEventInput | ReviewSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ReviewSocialButterflyScalarWhereInput | ReviewSocialButterflyScalarWhereInput[]
  }

  export type BookmarkSocialButterflyUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<BookmarkSocialButterflyCreateWithoutEventInput, BookmarkSocialButterflyUncheckedCreateWithoutEventInput> | BookmarkSocialButterflyCreateWithoutEventInput[] | BookmarkSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookmarkSocialButterflyCreateOrConnectWithoutEventInput | BookmarkSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: BookmarkSocialButterflyUpsertWithWhereUniqueWithoutEventInput | BookmarkSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BookmarkSocialButterflyCreateManyEventInputEnvelope
    set?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    disconnect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    delete?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    connect?: BookmarkSocialButterflyWhereUniqueInput | BookmarkSocialButterflyWhereUniqueInput[]
    update?: BookmarkSocialButterflyUpdateWithWhereUniqueWithoutEventInput | BookmarkSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BookmarkSocialButterflyUpdateManyWithWhereWithoutEventInput | BookmarkSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BookmarkSocialButterflyScalarWhereInput | BookmarkSocialButterflyScalarWhereInput[]
  }

  export type LikeSocialButterflyUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<LikeSocialButterflyCreateWithoutEventInput, LikeSocialButterflyUncheckedCreateWithoutEventInput> | LikeSocialButterflyCreateWithoutEventInput[] | LikeSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: LikeSocialButterflyCreateOrConnectWithoutEventInput | LikeSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: LikeSocialButterflyUpsertWithWhereUniqueWithoutEventInput | LikeSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: LikeSocialButterflyCreateManyEventInputEnvelope
    set?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    disconnect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    delete?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    connect?: LikeSocialButterflyWhereUniqueInput | LikeSocialButterflyWhereUniqueInput[]
    update?: LikeSocialButterflyUpdateWithWhereUniqueWithoutEventInput | LikeSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: LikeSocialButterflyUpdateManyWithWhereWithoutEventInput | LikeSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: LikeSocialButterflyScalarWhereInput | LikeSocialButterflyScalarWhereInput[]
  }

  export type ReportSocialButterflyUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutEventInput, ReportSocialButterflyUncheckedCreateWithoutEventInput> | ReportSocialButterflyCreateWithoutEventInput[] | ReportSocialButterflyUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutEventInput | ReportSocialButterflyCreateOrConnectWithoutEventInput[]
    upsert?: ReportSocialButterflyUpsertWithWhereUniqueWithoutEventInput | ReportSocialButterflyUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ReportSocialButterflyCreateManyEventInputEnvelope
    set?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    disconnect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    delete?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    update?: ReportSocialButterflyUpdateWithWhereUniqueWithoutEventInput | ReportSocialButterflyUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ReportSocialButterflyUpdateManyWithWhereWithoutEventInput | ReportSocialButterflyUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
  }

  export type UserSocialButterflyCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserSocialButterflyCreateWithoutReviewsInput, UserSocialButterflyUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutReviewsInput
    connect?: UserSocialButterflyWhereUniqueInput
  }

  export type EventSocialButterflyCreateNestedOneWithoutReviewsInput = {
    create?: XOR<EventSocialButterflyCreateWithoutReviewsInput, EventSocialButterflyUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutReviewsInput
    connect?: EventSocialButterflyWhereUniqueInput
  }

  export type ReportSocialButterflyCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutReviewInput, ReportSocialButterflyUncheckedCreateWithoutReviewInput> | ReportSocialButterflyCreateWithoutReviewInput[] | ReportSocialButterflyUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutReviewInput | ReportSocialButterflyCreateOrConnectWithoutReviewInput[]
    createMany?: ReportSocialButterflyCreateManyReviewInputEnvelope
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
  }

  export type ReportSocialButterflyUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutReviewInput, ReportSocialButterflyUncheckedCreateWithoutReviewInput> | ReportSocialButterflyCreateWithoutReviewInput[] | ReportSocialButterflyUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutReviewInput | ReportSocialButterflyCreateOrConnectWithoutReviewInput[]
    createMany?: ReportSocialButterflyCreateManyReviewInputEnvelope
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
  }

  export type UserSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserSocialButterflyCreateWithoutReviewsInput, UserSocialButterflyUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutReviewsInput
    upsert?: UserSocialButterflyUpsertWithoutReviewsInput
    connect?: UserSocialButterflyWhereUniqueInput
    update?: XOR<XOR<UserSocialButterflyUpdateToOneWithWhereWithoutReviewsInput, UserSocialButterflyUpdateWithoutReviewsInput>, UserSocialButterflyUncheckedUpdateWithoutReviewsInput>
  }

  export type EventSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<EventSocialButterflyCreateWithoutReviewsInput, EventSocialButterflyUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutReviewsInput
    upsert?: EventSocialButterflyUpsertWithoutReviewsInput
    connect?: EventSocialButterflyWhereUniqueInput
    update?: XOR<XOR<EventSocialButterflyUpdateToOneWithWhereWithoutReviewsInput, EventSocialButterflyUpdateWithoutReviewsInput>, EventSocialButterflyUncheckedUpdateWithoutReviewsInput>
  }

  export type ReportSocialButterflyUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutReviewInput, ReportSocialButterflyUncheckedCreateWithoutReviewInput> | ReportSocialButterflyCreateWithoutReviewInput[] | ReportSocialButterflyUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutReviewInput | ReportSocialButterflyCreateOrConnectWithoutReviewInput[]
    upsert?: ReportSocialButterflyUpsertWithWhereUniqueWithoutReviewInput | ReportSocialButterflyUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReportSocialButterflyCreateManyReviewInputEnvelope
    set?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    disconnect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    delete?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    update?: ReportSocialButterflyUpdateWithWhereUniqueWithoutReviewInput | ReportSocialButterflyUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReportSocialButterflyUpdateManyWithWhereWithoutReviewInput | ReportSocialButterflyUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
  }

  export type ReportSocialButterflyUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReportSocialButterflyCreateWithoutReviewInput, ReportSocialButterflyUncheckedCreateWithoutReviewInput> | ReportSocialButterflyCreateWithoutReviewInput[] | ReportSocialButterflyUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReportSocialButterflyCreateOrConnectWithoutReviewInput | ReportSocialButterflyCreateOrConnectWithoutReviewInput[]
    upsert?: ReportSocialButterflyUpsertWithWhereUniqueWithoutReviewInput | ReportSocialButterflyUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReportSocialButterflyCreateManyReviewInputEnvelope
    set?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    disconnect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    delete?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    connect?: ReportSocialButterflyWhereUniqueInput | ReportSocialButterflyWhereUniqueInput[]
    update?: ReportSocialButterflyUpdateWithWhereUniqueWithoutReviewInput | ReportSocialButterflyUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReportSocialButterflyUpdateManyWithWhereWithoutReviewInput | ReportSocialButterflyUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
  }

  export type UserSocialButterflyCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserSocialButterflyCreateWithoutLikesInput, UserSocialButterflyUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutLikesInput
    connect?: UserSocialButterflyWhereUniqueInput
  }

  export type EventSocialButterflyCreateNestedOneWithoutLikesInput = {
    create?: XOR<EventSocialButterflyCreateWithoutLikesInput, EventSocialButterflyUncheckedCreateWithoutLikesInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutLikesInput
    connect?: EventSocialButterflyWhereUniqueInput
  }

  export type UserSocialButterflyUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserSocialButterflyCreateWithoutLikesInput, UserSocialButterflyUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutLikesInput
    upsert?: UserSocialButterflyUpsertWithoutLikesInput
    connect?: UserSocialButterflyWhereUniqueInput
    update?: XOR<XOR<UserSocialButterflyUpdateToOneWithWhereWithoutLikesInput, UserSocialButterflyUpdateWithoutLikesInput>, UserSocialButterflyUncheckedUpdateWithoutLikesInput>
  }

  export type EventSocialButterflyUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<EventSocialButterflyCreateWithoutLikesInput, EventSocialButterflyUncheckedCreateWithoutLikesInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutLikesInput
    upsert?: EventSocialButterflyUpsertWithoutLikesInput
    connect?: EventSocialButterflyWhereUniqueInput
    update?: XOR<XOR<EventSocialButterflyUpdateToOneWithWhereWithoutLikesInput, EventSocialButterflyUpdateWithoutLikesInput>, EventSocialButterflyUncheckedUpdateWithoutLikesInput>
  }

  export type UserSocialButterflyCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<UserSocialButterflyCreateWithoutBookmarksInput, UserSocialButterflyUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutBookmarksInput
    connect?: UserSocialButterflyWhereUniqueInput
  }

  export type EventSocialButterflyCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<EventSocialButterflyCreateWithoutBookmarksInput, EventSocialButterflyUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutBookmarksInput
    connect?: EventSocialButterflyWhereUniqueInput
  }

  export type UserSocialButterflyUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<UserSocialButterflyCreateWithoutBookmarksInput, UserSocialButterflyUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutBookmarksInput
    upsert?: UserSocialButterflyUpsertWithoutBookmarksInput
    connect?: UserSocialButterflyWhereUniqueInput
    update?: XOR<XOR<UserSocialButterflyUpdateToOneWithWhereWithoutBookmarksInput, UserSocialButterflyUpdateWithoutBookmarksInput>, UserSocialButterflyUncheckedUpdateWithoutBookmarksInput>
  }

  export type EventSocialButterflyUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<EventSocialButterflyCreateWithoutBookmarksInput, EventSocialButterflyUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutBookmarksInput
    upsert?: EventSocialButterflyUpsertWithoutBookmarksInput
    connect?: EventSocialButterflyWhereUniqueInput
    update?: XOR<XOR<EventSocialButterflyUpdateToOneWithWhereWithoutBookmarksInput, EventSocialButterflyUpdateWithoutBookmarksInput>, EventSocialButterflyUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserSocialButterflyCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserSocialButterflyCreateWithoutReportsInput, UserSocialButterflyUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutReportsInput
    connect?: UserSocialButterflyWhereUniqueInput
  }

  export type EventSocialButterflyCreateNestedOneWithoutReportsInput = {
    create?: XOR<EventSocialButterflyCreateWithoutReportsInput, EventSocialButterflyUncheckedCreateWithoutReportsInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutReportsInput
    connect?: EventSocialButterflyWhereUniqueInput
  }

  export type ReviewSocialButterflyCreateNestedOneWithoutReportsInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutReportsInput, ReviewSocialButterflyUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutReportsInput
    connect?: ReviewSocialButterflyWhereUniqueInput
  }

  export type UserSocialButterflyUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserSocialButterflyCreateWithoutReportsInput, UserSocialButterflyUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserSocialButterflyCreateOrConnectWithoutReportsInput
    upsert?: UserSocialButterflyUpsertWithoutReportsInput
    connect?: UserSocialButterflyWhereUniqueInput
    update?: XOR<XOR<UserSocialButterflyUpdateToOneWithWhereWithoutReportsInput, UserSocialButterflyUpdateWithoutReportsInput>, UserSocialButterflyUncheckedUpdateWithoutReportsInput>
  }

  export type EventSocialButterflyUpdateOneWithoutReportsNestedInput = {
    create?: XOR<EventSocialButterflyCreateWithoutReportsInput, EventSocialButterflyUncheckedCreateWithoutReportsInput>
    connectOrCreate?: EventSocialButterflyCreateOrConnectWithoutReportsInput
    upsert?: EventSocialButterflyUpsertWithoutReportsInput
    disconnect?: EventSocialButterflyWhereInput | boolean
    delete?: EventSocialButterflyWhereInput | boolean
    connect?: EventSocialButterflyWhereUniqueInput
    update?: XOR<XOR<EventSocialButterflyUpdateToOneWithWhereWithoutReportsInput, EventSocialButterflyUpdateWithoutReportsInput>, EventSocialButterflyUncheckedUpdateWithoutReportsInput>
  }

  export type ReviewSocialButterflyUpdateOneWithoutReportsNestedInput = {
    create?: XOR<ReviewSocialButterflyCreateWithoutReportsInput, ReviewSocialButterflyUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ReviewSocialButterflyCreateOrConnectWithoutReportsInput
    upsert?: ReviewSocialButterflyUpsertWithoutReportsInput
    disconnect?: ReviewSocialButterflyWhereInput | boolean
    delete?: ReviewSocialButterflyWhereInput | boolean
    connect?: ReviewSocialButterflyWhereUniqueInput
    update?: XOR<XOR<ReviewSocialButterflyUpdateToOneWithWhereWithoutReportsInput, ReviewSocialButterflyUpdateWithoutReportsInput>, ReviewSocialButterflyUncheckedUpdateWithoutReportsInput>
  }

  export type VolunteerActivityCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<VolunteerActivityCreateWithoutOrganizerInput, VolunteerActivityUncheckedCreateWithoutOrganizerInput> | VolunteerActivityCreateWithoutOrganizerInput[] | VolunteerActivityUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: VolunteerActivityCreateOrConnectWithoutOrganizerInput | VolunteerActivityCreateOrConnectWithoutOrganizerInput[]
    createMany?: VolunteerActivityCreateManyOrganizerInputEnvelope
    connect?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
  }

  export type VolunteerApplicationCreateNestedManyWithoutUserInput = {
    create?: XOR<VolunteerApplicationCreateWithoutUserInput, VolunteerApplicationUncheckedCreateWithoutUserInput> | VolunteerApplicationCreateWithoutUserInput[] | VolunteerApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutUserInput | VolunteerApplicationCreateOrConnectWithoutUserInput[]
    createMany?: VolunteerApplicationCreateManyUserInputEnvelope
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
  }

  export type VolunteerActivityUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<VolunteerActivityCreateWithoutOrganizerInput, VolunteerActivityUncheckedCreateWithoutOrganizerInput> | VolunteerActivityCreateWithoutOrganizerInput[] | VolunteerActivityUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: VolunteerActivityCreateOrConnectWithoutOrganizerInput | VolunteerActivityCreateOrConnectWithoutOrganizerInput[]
    createMany?: VolunteerActivityCreateManyOrganizerInputEnvelope
    connect?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
  }

  export type VolunteerApplicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VolunteerApplicationCreateWithoutUserInput, VolunteerApplicationUncheckedCreateWithoutUserInput> | VolunteerApplicationCreateWithoutUserInput[] | VolunteerApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutUserInput | VolunteerApplicationCreateOrConnectWithoutUserInput[]
    createMany?: VolunteerApplicationCreateManyUserInputEnvelope
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
  }

  export type VolunteerActivityUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<VolunteerActivityCreateWithoutOrganizerInput, VolunteerActivityUncheckedCreateWithoutOrganizerInput> | VolunteerActivityCreateWithoutOrganizerInput[] | VolunteerActivityUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: VolunteerActivityCreateOrConnectWithoutOrganizerInput | VolunteerActivityCreateOrConnectWithoutOrganizerInput[]
    upsert?: VolunteerActivityUpsertWithWhereUniqueWithoutOrganizerInput | VolunteerActivityUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: VolunteerActivityCreateManyOrganizerInputEnvelope
    set?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    disconnect?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    delete?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    connect?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    update?: VolunteerActivityUpdateWithWhereUniqueWithoutOrganizerInput | VolunteerActivityUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: VolunteerActivityUpdateManyWithWhereWithoutOrganizerInput | VolunteerActivityUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: VolunteerActivityScalarWhereInput | VolunteerActivityScalarWhereInput[]
  }

  export type VolunteerApplicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<VolunteerApplicationCreateWithoutUserInput, VolunteerApplicationUncheckedCreateWithoutUserInput> | VolunteerApplicationCreateWithoutUserInput[] | VolunteerApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutUserInput | VolunteerApplicationCreateOrConnectWithoutUserInput[]
    upsert?: VolunteerApplicationUpsertWithWhereUniqueWithoutUserInput | VolunteerApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VolunteerApplicationCreateManyUserInputEnvelope
    set?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    disconnect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    delete?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    update?: VolunteerApplicationUpdateWithWhereUniqueWithoutUserInput | VolunteerApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VolunteerApplicationUpdateManyWithWhereWithoutUserInput | VolunteerApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VolunteerApplicationScalarWhereInput | VolunteerApplicationScalarWhereInput[]
  }

  export type VolunteerActivityUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<VolunteerActivityCreateWithoutOrganizerInput, VolunteerActivityUncheckedCreateWithoutOrganizerInput> | VolunteerActivityCreateWithoutOrganizerInput[] | VolunteerActivityUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: VolunteerActivityCreateOrConnectWithoutOrganizerInput | VolunteerActivityCreateOrConnectWithoutOrganizerInput[]
    upsert?: VolunteerActivityUpsertWithWhereUniqueWithoutOrganizerInput | VolunteerActivityUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: VolunteerActivityCreateManyOrganizerInputEnvelope
    set?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    disconnect?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    delete?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    connect?: VolunteerActivityWhereUniqueInput | VolunteerActivityWhereUniqueInput[]
    update?: VolunteerActivityUpdateWithWhereUniqueWithoutOrganizerInput | VolunteerActivityUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: VolunteerActivityUpdateManyWithWhereWithoutOrganizerInput | VolunteerActivityUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: VolunteerActivityScalarWhereInput | VolunteerActivityScalarWhereInput[]
  }

  export type VolunteerApplicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VolunteerApplicationCreateWithoutUserInput, VolunteerApplicationUncheckedCreateWithoutUserInput> | VolunteerApplicationCreateWithoutUserInput[] | VolunteerApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutUserInput | VolunteerApplicationCreateOrConnectWithoutUserInput[]
    upsert?: VolunteerApplicationUpsertWithWhereUniqueWithoutUserInput | VolunteerApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VolunteerApplicationCreateManyUserInputEnvelope
    set?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    disconnect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    delete?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    update?: VolunteerApplicationUpdateWithWhereUniqueWithoutUserInput | VolunteerApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VolunteerApplicationUpdateManyWithWhereWithoutUserInput | VolunteerApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VolunteerApplicationScalarWhereInput | VolunteerApplicationScalarWhereInput[]
  }

  export type UserVolunteerOrgCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserVolunteerOrgCreateWithoutActivitiesInput, UserVolunteerOrgUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserVolunteerOrgCreateOrConnectWithoutActivitiesInput
    connect?: UserVolunteerOrgWhereUniqueInput
  }

  export type VolunteerApplicationCreateNestedManyWithoutActivityInput = {
    create?: XOR<VolunteerApplicationCreateWithoutActivityInput, VolunteerApplicationUncheckedCreateWithoutActivityInput> | VolunteerApplicationCreateWithoutActivityInput[] | VolunteerApplicationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutActivityInput | VolunteerApplicationCreateOrConnectWithoutActivityInput[]
    createMany?: VolunteerApplicationCreateManyActivityInputEnvelope
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
  }

  export type VolunteerApplicationUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<VolunteerApplicationCreateWithoutActivityInput, VolunteerApplicationUncheckedCreateWithoutActivityInput> | VolunteerApplicationCreateWithoutActivityInput[] | VolunteerApplicationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutActivityInput | VolunteerApplicationCreateOrConnectWithoutActivityInput[]
    createMany?: VolunteerApplicationCreateManyActivityInputEnvelope
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
  }

  export type UserVolunteerOrgUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserVolunteerOrgCreateWithoutActivitiesInput, UserVolunteerOrgUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserVolunteerOrgCreateOrConnectWithoutActivitiesInput
    upsert?: UserVolunteerOrgUpsertWithoutActivitiesInput
    connect?: UserVolunteerOrgWhereUniqueInput
    update?: XOR<XOR<UserVolunteerOrgUpdateToOneWithWhereWithoutActivitiesInput, UserVolunteerOrgUpdateWithoutActivitiesInput>, UserVolunteerOrgUncheckedUpdateWithoutActivitiesInput>
  }

  export type VolunteerApplicationUpdateManyWithoutActivityNestedInput = {
    create?: XOR<VolunteerApplicationCreateWithoutActivityInput, VolunteerApplicationUncheckedCreateWithoutActivityInput> | VolunteerApplicationCreateWithoutActivityInput[] | VolunteerApplicationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutActivityInput | VolunteerApplicationCreateOrConnectWithoutActivityInput[]
    upsert?: VolunteerApplicationUpsertWithWhereUniqueWithoutActivityInput | VolunteerApplicationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: VolunteerApplicationCreateManyActivityInputEnvelope
    set?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    disconnect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    delete?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    update?: VolunteerApplicationUpdateWithWhereUniqueWithoutActivityInput | VolunteerApplicationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: VolunteerApplicationUpdateManyWithWhereWithoutActivityInput | VolunteerApplicationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: VolunteerApplicationScalarWhereInput | VolunteerApplicationScalarWhereInput[]
  }

  export type VolunteerApplicationUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<VolunteerApplicationCreateWithoutActivityInput, VolunteerApplicationUncheckedCreateWithoutActivityInput> | VolunteerApplicationCreateWithoutActivityInput[] | VolunteerApplicationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: VolunteerApplicationCreateOrConnectWithoutActivityInput | VolunteerApplicationCreateOrConnectWithoutActivityInput[]
    upsert?: VolunteerApplicationUpsertWithWhereUniqueWithoutActivityInput | VolunteerApplicationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: VolunteerApplicationCreateManyActivityInputEnvelope
    set?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    disconnect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    delete?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    connect?: VolunteerApplicationWhereUniqueInput | VolunteerApplicationWhereUniqueInput[]
    update?: VolunteerApplicationUpdateWithWhereUniqueWithoutActivityInput | VolunteerApplicationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: VolunteerApplicationUpdateManyWithWhereWithoutActivityInput | VolunteerApplicationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: VolunteerApplicationScalarWhereInput | VolunteerApplicationScalarWhereInput[]
  }

  export type UserVolunteerOrgCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<UserVolunteerOrgCreateWithoutApplicationsInput, UserVolunteerOrgUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserVolunteerOrgCreateOrConnectWithoutApplicationsInput
    connect?: UserVolunteerOrgWhereUniqueInput
  }

  export type VolunteerActivityCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<VolunteerActivityCreateWithoutApplicationsInput, VolunteerActivityUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: VolunteerActivityCreateOrConnectWithoutApplicationsInput
    connect?: VolunteerActivityWhereUniqueInput
  }

  export type UserVolunteerOrgUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<UserVolunteerOrgCreateWithoutApplicationsInput, UserVolunteerOrgUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserVolunteerOrgCreateOrConnectWithoutApplicationsInput
    upsert?: UserVolunteerOrgUpsertWithoutApplicationsInput
    connect?: UserVolunteerOrgWhereUniqueInput
    update?: XOR<XOR<UserVolunteerOrgUpdateToOneWithWhereWithoutApplicationsInput, UserVolunteerOrgUpdateWithoutApplicationsInput>, UserVolunteerOrgUncheckedUpdateWithoutApplicationsInput>
  }

  export type VolunteerActivityUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<VolunteerActivityCreateWithoutApplicationsInput, VolunteerActivityUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: VolunteerActivityCreateOrConnectWithoutApplicationsInput
    upsert?: VolunteerActivityUpsertWithoutApplicationsInput
    connect?: VolunteerActivityWhereUniqueInput
    update?: XOR<XOR<VolunteerActivityUpdateToOneWithWhereWithoutApplicationsInput, VolunteerActivityUpdateWithoutApplicationsInput>, VolunteerActivityUncheckedUpdateWithoutApplicationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EventOrganizerTaskCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
  }

  export type EventOrganizerTaskUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
  }

  export type EventOrganizerTaskCreateOrConnectWithoutUserInput = {
    where: EventOrganizerTaskWhereUniqueInput
    create: XOR<EventOrganizerTaskCreateWithoutUserInput, EventOrganizerTaskUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerTaskCreateManyUserInputEnvelope = {
    data: EventOrganizerTaskCreateManyUserInput | EventOrganizerTaskCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventOrganizerGuestCreateWithoutUserInput = {
    id?: string
    eventId: string
    name: string
    email: string
    phone: string
    status: string
    createdAt?: Date | string
  }

  export type EventOrganizerGuestUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    name: string
    email: string
    phone: string
    status: string
    createdAt?: Date | string
  }

  export type EventOrganizerGuestCreateOrConnectWithoutUserInput = {
    where: EventOrganizerGuestWhereUniqueInput
    create: XOR<EventOrganizerGuestCreateWithoutUserInput, EventOrganizerGuestUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerGuestCreateManyUserInputEnvelope = {
    data: EventOrganizerGuestCreateManyUserInput | EventOrganizerGuestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventOrganizerVenueCreateWithoutUserInput = {
    id?: string
    name: string
    location: string
    capacity: number
    amenities: string
    createdAt?: Date | string
  }

  export type EventOrganizerVenueUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    location: string
    capacity: number
    amenities: string
    createdAt?: Date | string
  }

  export type EventOrganizerVenueCreateOrConnectWithoutUserInput = {
    where: EventOrganizerVenueWhereUniqueInput
    create: XOR<EventOrganizerVenueCreateWithoutUserInput, EventOrganizerVenueUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerVenueCreateManyUserInputEnvelope = {
    data: EventOrganizerVenueCreateManyUserInput | EventOrganizerVenueCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventOrganizerServiceProviderCreateWithoutUserInput = {
    id?: string
    name: string
    serviceType: string
    contactInfo: string
    createdAt?: Date | string
  }

  export type EventOrganizerServiceProviderUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    serviceType: string
    contactInfo: string
    createdAt?: Date | string
  }

  export type EventOrganizerServiceProviderCreateOrConnectWithoutUserInput = {
    where: EventOrganizerServiceProviderWhereUniqueInput
    create: XOR<EventOrganizerServiceProviderCreateWithoutUserInput, EventOrganizerServiceProviderUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerServiceProviderCreateManyUserInputEnvelope = {
    data: EventOrganizerServiceProviderCreateManyUserInput | EventOrganizerServiceProviderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventOrganizerTaskUpsertWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerTaskWhereUniqueInput
    update: XOR<EventOrganizerTaskUpdateWithoutUserInput, EventOrganizerTaskUncheckedUpdateWithoutUserInput>
    create: XOR<EventOrganizerTaskCreateWithoutUserInput, EventOrganizerTaskUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerTaskUpdateWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerTaskWhereUniqueInput
    data: XOR<EventOrganizerTaskUpdateWithoutUserInput, EventOrganizerTaskUncheckedUpdateWithoutUserInput>
  }

  export type EventOrganizerTaskUpdateManyWithWhereWithoutUserInput = {
    where: EventOrganizerTaskScalarWhereInput
    data: XOR<EventOrganizerTaskUpdateManyMutationInput, EventOrganizerTaskUncheckedUpdateManyWithoutUserInput>
  }

  export type EventOrganizerTaskScalarWhereInput = {
    AND?: EventOrganizerTaskScalarWhereInput | EventOrganizerTaskScalarWhereInput[]
    OR?: EventOrganizerTaskScalarWhereInput[]
    NOT?: EventOrganizerTaskScalarWhereInput | EventOrganizerTaskScalarWhereInput[]
    id?: StringFilter<"EventOrganizerTask"> | string
    title?: StringFilter<"EventOrganizerTask"> | string
    description?: StringFilter<"EventOrganizerTask"> | string
    dueDate?: DateTimeFilter<"EventOrganizerTask"> | Date | string
    status?: StringFilter<"EventOrganizerTask"> | string
    userId?: StringFilter<"EventOrganizerTask"> | string
    createdAt?: DateTimeFilter<"EventOrganizerTask"> | Date | string
  }

  export type EventOrganizerGuestUpsertWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerGuestWhereUniqueInput
    update: XOR<EventOrganizerGuestUpdateWithoutUserInput, EventOrganizerGuestUncheckedUpdateWithoutUserInput>
    create: XOR<EventOrganizerGuestCreateWithoutUserInput, EventOrganizerGuestUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerGuestUpdateWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerGuestWhereUniqueInput
    data: XOR<EventOrganizerGuestUpdateWithoutUserInput, EventOrganizerGuestUncheckedUpdateWithoutUserInput>
  }

  export type EventOrganizerGuestUpdateManyWithWhereWithoutUserInput = {
    where: EventOrganizerGuestScalarWhereInput
    data: XOR<EventOrganizerGuestUpdateManyMutationInput, EventOrganizerGuestUncheckedUpdateManyWithoutUserInput>
  }

  export type EventOrganizerGuestScalarWhereInput = {
    AND?: EventOrganizerGuestScalarWhereInput | EventOrganizerGuestScalarWhereInput[]
    OR?: EventOrganizerGuestScalarWhereInput[]
    NOT?: EventOrganizerGuestScalarWhereInput | EventOrganizerGuestScalarWhereInput[]
    id?: StringFilter<"EventOrganizerGuest"> | string
    eventId?: StringFilter<"EventOrganizerGuest"> | string
    name?: StringFilter<"EventOrganizerGuest"> | string
    email?: StringFilter<"EventOrganizerGuest"> | string
    phone?: StringFilter<"EventOrganizerGuest"> | string
    status?: StringFilter<"EventOrganizerGuest"> | string
    userId?: StringFilter<"EventOrganizerGuest"> | string
    createdAt?: DateTimeFilter<"EventOrganizerGuest"> | Date | string
  }

  export type EventOrganizerVenueUpsertWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerVenueWhereUniqueInput
    update: XOR<EventOrganizerVenueUpdateWithoutUserInput, EventOrganizerVenueUncheckedUpdateWithoutUserInput>
    create: XOR<EventOrganizerVenueCreateWithoutUserInput, EventOrganizerVenueUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerVenueUpdateWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerVenueWhereUniqueInput
    data: XOR<EventOrganizerVenueUpdateWithoutUserInput, EventOrganizerVenueUncheckedUpdateWithoutUserInput>
  }

  export type EventOrganizerVenueUpdateManyWithWhereWithoutUserInput = {
    where: EventOrganizerVenueScalarWhereInput
    data: XOR<EventOrganizerVenueUpdateManyMutationInput, EventOrganizerVenueUncheckedUpdateManyWithoutUserInput>
  }

  export type EventOrganizerVenueScalarWhereInput = {
    AND?: EventOrganizerVenueScalarWhereInput | EventOrganizerVenueScalarWhereInput[]
    OR?: EventOrganizerVenueScalarWhereInput[]
    NOT?: EventOrganizerVenueScalarWhereInput | EventOrganizerVenueScalarWhereInput[]
    id?: StringFilter<"EventOrganizerVenue"> | string
    name?: StringFilter<"EventOrganizerVenue"> | string
    location?: StringFilter<"EventOrganizerVenue"> | string
    capacity?: IntFilter<"EventOrganizerVenue"> | number
    amenities?: StringFilter<"EventOrganizerVenue"> | string
    submittedBy?: StringFilter<"EventOrganizerVenue"> | string
    createdAt?: DateTimeFilter<"EventOrganizerVenue"> | Date | string
  }

  export type EventOrganizerServiceProviderUpsertWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerServiceProviderWhereUniqueInput
    update: XOR<EventOrganizerServiceProviderUpdateWithoutUserInput, EventOrganizerServiceProviderUncheckedUpdateWithoutUserInput>
    create: XOR<EventOrganizerServiceProviderCreateWithoutUserInput, EventOrganizerServiceProviderUncheckedCreateWithoutUserInput>
  }

  export type EventOrganizerServiceProviderUpdateWithWhereUniqueWithoutUserInput = {
    where: EventOrganizerServiceProviderWhereUniqueInput
    data: XOR<EventOrganizerServiceProviderUpdateWithoutUserInput, EventOrganizerServiceProviderUncheckedUpdateWithoutUserInput>
  }

  export type EventOrganizerServiceProviderUpdateManyWithWhereWithoutUserInput = {
    where: EventOrganizerServiceProviderScalarWhereInput
    data: XOR<EventOrganizerServiceProviderUpdateManyMutationInput, EventOrganizerServiceProviderUncheckedUpdateManyWithoutUserInput>
  }

  export type EventOrganizerServiceProviderScalarWhereInput = {
    AND?: EventOrganizerServiceProviderScalarWhereInput | EventOrganizerServiceProviderScalarWhereInput[]
    OR?: EventOrganizerServiceProviderScalarWhereInput[]
    NOT?: EventOrganizerServiceProviderScalarWhereInput | EventOrganizerServiceProviderScalarWhereInput[]
    id?: StringFilter<"EventOrganizerServiceProvider"> | string
    name?: StringFilter<"EventOrganizerServiceProvider"> | string
    serviceType?: StringFilter<"EventOrganizerServiceProvider"> | string
    contactInfo?: StringFilter<"EventOrganizerServiceProvider"> | string
    submittedBy?: StringFilter<"EventOrganizerServiceProvider"> | string
    createdAt?: DateTimeFilter<"EventOrganizerServiceProvider"> | Date | string
  }

  export type EventOrganizerUserCreateWithoutTasksInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    guests?: EventOrganizerGuestCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserUncheckedCreateWithoutTasksInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    guests?: EventOrganizerGuestUncheckedCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueUncheckedCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserCreateOrConnectWithoutTasksInput = {
    where: EventOrganizerUserWhereUniqueInput
    create: XOR<EventOrganizerUserCreateWithoutTasksInput, EventOrganizerUserUncheckedCreateWithoutTasksInput>
  }

  export type EventOrganizerUserUpsertWithoutTasksInput = {
    update: XOR<EventOrganizerUserUpdateWithoutTasksInput, EventOrganizerUserUncheckedUpdateWithoutTasksInput>
    create: XOR<EventOrganizerUserCreateWithoutTasksInput, EventOrganizerUserUncheckedCreateWithoutTasksInput>
    where?: EventOrganizerUserWhereInput
  }

  export type EventOrganizerUserUpdateToOneWithWhereWithoutTasksInput = {
    where?: EventOrganizerUserWhereInput
    data: XOR<EventOrganizerUserUpdateWithoutTasksInput, EventOrganizerUserUncheckedUpdateWithoutTasksInput>
  }

  export type EventOrganizerUserUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: EventOrganizerGuestUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: EventOrganizerGuestUncheckedUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUncheckedUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserCreateWithoutGuestsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserUncheckedCreateWithoutGuestsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskUncheckedCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueUncheckedCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserCreateOrConnectWithoutGuestsInput = {
    where: EventOrganizerUserWhereUniqueInput
    create: XOR<EventOrganizerUserCreateWithoutGuestsInput, EventOrganizerUserUncheckedCreateWithoutGuestsInput>
  }

  export type EventOrganizerUserUpsertWithoutGuestsInput = {
    update: XOR<EventOrganizerUserUpdateWithoutGuestsInput, EventOrganizerUserUncheckedUpdateWithoutGuestsInput>
    create: XOR<EventOrganizerUserCreateWithoutGuestsInput, EventOrganizerUserUncheckedCreateWithoutGuestsInput>
    where?: EventOrganizerUserWhereInput
  }

  export type EventOrganizerUserUpdateToOneWithWhereWithoutGuestsInput = {
    where?: EventOrganizerUserWhereInput
    data: XOR<EventOrganizerUserUpdateWithoutGuestsInput, EventOrganizerUserUncheckedUpdateWithoutGuestsInput>
  }

  export type EventOrganizerUserUpdateWithoutGuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserUncheckedUpdateWithoutGuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUncheckedUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUncheckedUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserCreateWithoutVenuesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskCreateNestedManyWithoutUserInput
    guests?: EventOrganizerGuestCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserUncheckedCreateWithoutVenuesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskUncheckedCreateNestedManyWithoutUserInput
    guests?: EventOrganizerGuestUncheckedCreateNestedManyWithoutUserInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserCreateOrConnectWithoutVenuesInput = {
    where: EventOrganizerUserWhereUniqueInput
    create: XOR<EventOrganizerUserCreateWithoutVenuesInput, EventOrganizerUserUncheckedCreateWithoutVenuesInput>
  }

  export type EventOrganizerUserUpsertWithoutVenuesInput = {
    update: XOR<EventOrganizerUserUpdateWithoutVenuesInput, EventOrganizerUserUncheckedUpdateWithoutVenuesInput>
    create: XOR<EventOrganizerUserCreateWithoutVenuesInput, EventOrganizerUserUncheckedCreateWithoutVenuesInput>
    where?: EventOrganizerUserWhereInput
  }

  export type EventOrganizerUserUpdateToOneWithWhereWithoutVenuesInput = {
    where?: EventOrganizerUserWhereInput
    data: XOR<EventOrganizerUserUpdateWithoutVenuesInput, EventOrganizerUserUncheckedUpdateWithoutVenuesInput>
  }

  export type EventOrganizerUserUpdateWithoutVenuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUpdateManyWithoutUserNestedInput
    guests?: EventOrganizerGuestUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserUncheckedUpdateWithoutVenuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUncheckedUpdateManyWithoutUserNestedInput
    guests?: EventOrganizerGuestUncheckedUpdateManyWithoutUserNestedInput
    serviceProviders?: EventOrganizerServiceProviderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserCreateWithoutServiceProvidersInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskCreateNestedManyWithoutUserInput
    guests?: EventOrganizerGuestCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserUncheckedCreateWithoutServiceProvidersInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    tasks?: EventOrganizerTaskUncheckedCreateNestedManyWithoutUserInput
    guests?: EventOrganizerGuestUncheckedCreateNestedManyWithoutUserInput
    venues?: EventOrganizerVenueUncheckedCreateNestedManyWithoutUserInput
  }

  export type EventOrganizerUserCreateOrConnectWithoutServiceProvidersInput = {
    where: EventOrganizerUserWhereUniqueInput
    create: XOR<EventOrganizerUserCreateWithoutServiceProvidersInput, EventOrganizerUserUncheckedCreateWithoutServiceProvidersInput>
  }

  export type EventOrganizerUserUpsertWithoutServiceProvidersInput = {
    update: XOR<EventOrganizerUserUpdateWithoutServiceProvidersInput, EventOrganizerUserUncheckedUpdateWithoutServiceProvidersInput>
    create: XOR<EventOrganizerUserCreateWithoutServiceProvidersInput, EventOrganizerUserUncheckedCreateWithoutServiceProvidersInput>
    where?: EventOrganizerUserWhereInput
  }

  export type EventOrganizerUserUpdateToOneWithWhereWithoutServiceProvidersInput = {
    where?: EventOrganizerUserWhereInput
    data: XOR<EventOrganizerUserUpdateWithoutServiceProvidersInput, EventOrganizerUserUncheckedUpdateWithoutServiceProvidersInput>
  }

  export type EventOrganizerUserUpdateWithoutServiceProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUpdateManyWithoutUserNestedInput
    guests?: EventOrganizerGuestUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUpdateManyWithoutUserNestedInput
  }

  export type EventOrganizerUserUncheckedUpdateWithoutServiceProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: EventOrganizerTaskUncheckedUpdateManyWithoutUserNestedInput
    guests?: EventOrganizerGuestUncheckedUpdateManyWithoutUserNestedInput
    venues?: EventOrganizerVenueUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerPlatformCreateWithoutOwnerInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    status?: string
    createdAt?: Date | string
    reviews?: LanguageLearnerReviewCreateNestedManyWithoutPlatformInput
  }

  export type LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    status?: string
    createdAt?: Date | string
    reviews?: LanguageLearnerReviewUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type LanguageLearnerPlatformCreateOrConnectWithoutOwnerInput = {
    where: LanguageLearnerPlatformWhereUniqueInput
    create: XOR<LanguageLearnerPlatformCreateWithoutOwnerInput, LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput>
  }

  export type LanguageLearnerPlatformCreateManyOwnerInputEnvelope = {
    data: LanguageLearnerPlatformCreateManyOwnerInput | LanguageLearnerPlatformCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type LanguageLearnerReviewCreateWithoutUserInput = {
    id?: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
    platform: LanguageLearnerPlatformCreateNestedOneWithoutReviewsInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutReviewInput
  }

  export type LanguageLearnerReviewUncheckedCreateWithoutUserInput = {
    id?: string
    platformId: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type LanguageLearnerReviewCreateOrConnectWithoutUserInput = {
    where: LanguageLearnerReviewWhereUniqueInput
    create: XOR<LanguageLearnerReviewCreateWithoutUserInput, LanguageLearnerReviewUncheckedCreateWithoutUserInput>
  }

  export type LanguageLearnerReviewCreateManyUserInputEnvelope = {
    data: LanguageLearnerReviewCreateManyUserInput | LanguageLearnerReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LanguageLearnerUserVoteCreateWithoutVoterInput = {
    id?: string
    voteType: string
    createdAt?: Date | string
    user: LanguageLearnerUserCreateNestedOneWithoutVotesReceivedInput
  }

  export type LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput = {
    id?: string
    userId: string
    voteType: string
    createdAt?: Date | string
  }

  export type LanguageLearnerUserVoteCreateOrConnectWithoutVoterInput = {
    where: LanguageLearnerUserVoteWhereUniqueInput
    create: XOR<LanguageLearnerUserVoteCreateWithoutVoterInput, LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput>
  }

  export type LanguageLearnerUserVoteCreateManyVoterInputEnvelope = {
    data: LanguageLearnerUserVoteCreateManyVoterInput | LanguageLearnerUserVoteCreateManyVoterInput[]
    skipDuplicates?: boolean
  }

  export type LanguageLearnerUserVoteCreateWithoutUserInput = {
    id?: string
    voteType: string
    createdAt?: Date | string
    voter: LanguageLearnerUserCreateNestedOneWithoutVotesGivenInput
  }

  export type LanguageLearnerUserVoteUncheckedCreateWithoutUserInput = {
    id?: string
    voterId: string
    voteType: string
    createdAt?: Date | string
  }

  export type LanguageLearnerUserVoteCreateOrConnectWithoutUserInput = {
    where: LanguageLearnerUserVoteWhereUniqueInput
    create: XOR<LanguageLearnerUserVoteCreateWithoutUserInput, LanguageLearnerUserVoteUncheckedCreateWithoutUserInput>
  }

  export type LanguageLearnerUserVoteCreateManyUserInputEnvelope = {
    data: LanguageLearnerUserVoteCreateManyUserInput | LanguageLearnerUserVoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LanguageLearnerReviewLikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    review: LanguageLearnerReviewCreateNestedOneWithoutLikesInput
  }

  export type LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput = {
    id?: string
    reviewId: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewLikeCreateOrConnectWithoutUserInput = {
    where: LanguageLearnerReviewLikeWhereUniqueInput
    create: XOR<LanguageLearnerReviewLikeCreateWithoutUserInput, LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput>
  }

  export type LanguageLearnerReviewLikeCreateManyUserInputEnvelope = {
    data: LanguageLearnerReviewLikeCreateManyUserInput | LanguageLearnerReviewLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LanguageLearnerPlatformUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LanguageLearnerPlatformWhereUniqueInput
    update: XOR<LanguageLearnerPlatformUpdateWithoutOwnerInput, LanguageLearnerPlatformUncheckedUpdateWithoutOwnerInput>
    create: XOR<LanguageLearnerPlatformCreateWithoutOwnerInput, LanguageLearnerPlatformUncheckedCreateWithoutOwnerInput>
  }

  export type LanguageLearnerPlatformUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LanguageLearnerPlatformWhereUniqueInput
    data: XOR<LanguageLearnerPlatformUpdateWithoutOwnerInput, LanguageLearnerPlatformUncheckedUpdateWithoutOwnerInput>
  }

  export type LanguageLearnerPlatformUpdateManyWithWhereWithoutOwnerInput = {
    where: LanguageLearnerPlatformScalarWhereInput
    data: XOR<LanguageLearnerPlatformUpdateManyMutationInput, LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerInput>
  }

  export type LanguageLearnerPlatformScalarWhereInput = {
    AND?: LanguageLearnerPlatformScalarWhereInput | LanguageLearnerPlatformScalarWhereInput[]
    OR?: LanguageLearnerPlatformScalarWhereInput[]
    NOT?: LanguageLearnerPlatformScalarWhereInput | LanguageLearnerPlatformScalarWhereInput[]
    id?: StringFilter<"LanguageLearnerPlatform"> | string
    name?: StringFilter<"LanguageLearnerPlatform"> | string
    website?: StringFilter<"LanguageLearnerPlatform"> | string
    languagesOffered?: StringFilter<"LanguageLearnerPlatform"> | string
    description?: StringFilter<"LanguageLearnerPlatform"> | string
    ownerId?: StringFilter<"LanguageLearnerPlatform"> | string
    status?: StringFilter<"LanguageLearnerPlatform"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerPlatform"> | Date | string
  }

  export type LanguageLearnerReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: LanguageLearnerReviewWhereUniqueInput
    update: XOR<LanguageLearnerReviewUpdateWithoutUserInput, LanguageLearnerReviewUncheckedUpdateWithoutUserInput>
    create: XOR<LanguageLearnerReviewCreateWithoutUserInput, LanguageLearnerReviewUncheckedCreateWithoutUserInput>
  }

  export type LanguageLearnerReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: LanguageLearnerReviewWhereUniqueInput
    data: XOR<LanguageLearnerReviewUpdateWithoutUserInput, LanguageLearnerReviewUncheckedUpdateWithoutUserInput>
  }

  export type LanguageLearnerReviewUpdateManyWithWhereWithoutUserInput = {
    where: LanguageLearnerReviewScalarWhereInput
    data: XOR<LanguageLearnerReviewUpdateManyMutationInput, LanguageLearnerReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type LanguageLearnerReviewScalarWhereInput = {
    AND?: LanguageLearnerReviewScalarWhereInput | LanguageLearnerReviewScalarWhereInput[]
    OR?: LanguageLearnerReviewScalarWhereInput[]
    NOT?: LanguageLearnerReviewScalarWhereInput | LanguageLearnerReviewScalarWhereInput[]
    id?: StringFilter<"LanguageLearnerReview"> | string
    platformId?: StringFilter<"LanguageLearnerReview"> | string
    userId?: StringFilter<"LanguageLearnerReview"> | string
    rating?: IntFilter<"LanguageLearnerReview"> | number
    comment?: StringFilter<"LanguageLearnerReview"> | string
    status?: StringFilter<"LanguageLearnerReview"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerReview"> | Date | string
  }

  export type LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutVoterInput = {
    where: LanguageLearnerUserVoteWhereUniqueInput
    update: XOR<LanguageLearnerUserVoteUpdateWithoutVoterInput, LanguageLearnerUserVoteUncheckedUpdateWithoutVoterInput>
    create: XOR<LanguageLearnerUserVoteCreateWithoutVoterInput, LanguageLearnerUserVoteUncheckedCreateWithoutVoterInput>
  }

  export type LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutVoterInput = {
    where: LanguageLearnerUserVoteWhereUniqueInput
    data: XOR<LanguageLearnerUserVoteUpdateWithoutVoterInput, LanguageLearnerUserVoteUncheckedUpdateWithoutVoterInput>
  }

  export type LanguageLearnerUserVoteUpdateManyWithWhereWithoutVoterInput = {
    where: LanguageLearnerUserVoteScalarWhereInput
    data: XOR<LanguageLearnerUserVoteUpdateManyMutationInput, LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterInput>
  }

  export type LanguageLearnerUserVoteScalarWhereInput = {
    AND?: LanguageLearnerUserVoteScalarWhereInput | LanguageLearnerUserVoteScalarWhereInput[]
    OR?: LanguageLearnerUserVoteScalarWhereInput[]
    NOT?: LanguageLearnerUserVoteScalarWhereInput | LanguageLearnerUserVoteScalarWhereInput[]
    id?: StringFilter<"LanguageLearnerUserVote"> | string
    userId?: StringFilter<"LanguageLearnerUserVote"> | string
    voterId?: StringFilter<"LanguageLearnerUserVote"> | string
    voteType?: StringFilter<"LanguageLearnerUserVote"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerUserVote"> | Date | string
  }

  export type LanguageLearnerUserVoteUpsertWithWhereUniqueWithoutUserInput = {
    where: LanguageLearnerUserVoteWhereUniqueInput
    update: XOR<LanguageLearnerUserVoteUpdateWithoutUserInput, LanguageLearnerUserVoteUncheckedUpdateWithoutUserInput>
    create: XOR<LanguageLearnerUserVoteCreateWithoutUserInput, LanguageLearnerUserVoteUncheckedCreateWithoutUserInput>
  }

  export type LanguageLearnerUserVoteUpdateWithWhereUniqueWithoutUserInput = {
    where: LanguageLearnerUserVoteWhereUniqueInput
    data: XOR<LanguageLearnerUserVoteUpdateWithoutUserInput, LanguageLearnerUserVoteUncheckedUpdateWithoutUserInput>
  }

  export type LanguageLearnerUserVoteUpdateManyWithWhereWithoutUserInput = {
    where: LanguageLearnerUserVoteScalarWhereInput
    data: XOR<LanguageLearnerUserVoteUpdateManyMutationInput, LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserInput>
  }

  export type LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LanguageLearnerReviewLikeWhereUniqueInput
    update: XOR<LanguageLearnerReviewLikeUpdateWithoutUserInput, LanguageLearnerReviewLikeUncheckedUpdateWithoutUserInput>
    create: XOR<LanguageLearnerReviewLikeCreateWithoutUserInput, LanguageLearnerReviewLikeUncheckedCreateWithoutUserInput>
  }

  export type LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LanguageLearnerReviewLikeWhereUniqueInput
    data: XOR<LanguageLearnerReviewLikeUpdateWithoutUserInput, LanguageLearnerReviewLikeUncheckedUpdateWithoutUserInput>
  }

  export type LanguageLearnerReviewLikeUpdateManyWithWhereWithoutUserInput = {
    where: LanguageLearnerReviewLikeScalarWhereInput
    data: XOR<LanguageLearnerReviewLikeUpdateManyMutationInput, LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type LanguageLearnerReviewLikeScalarWhereInput = {
    AND?: LanguageLearnerReviewLikeScalarWhereInput | LanguageLearnerReviewLikeScalarWhereInput[]
    OR?: LanguageLearnerReviewLikeScalarWhereInput[]
    NOT?: LanguageLearnerReviewLikeScalarWhereInput | LanguageLearnerReviewLikeScalarWhereInput[]
    id?: StringFilter<"LanguageLearnerReviewLike"> | string
    userId?: StringFilter<"LanguageLearnerReviewLike"> | string
    reviewId?: StringFilter<"LanguageLearnerReviewLike"> | string
    createdAt?: DateTimeFilter<"LanguageLearnerReviewLike"> | Date | string
  }

  export type LanguageLearnerUserCreateWithoutOwnedPlatformsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    reviews?: LanguageLearnerReviewCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserUncheckedCreateWithoutOwnedPlatformsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    reviews?: LanguageLearnerReviewUncheckedCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserCreateOrConnectWithoutOwnedPlatformsInput = {
    where: LanguageLearnerUserWhereUniqueInput
    create: XOR<LanguageLearnerUserCreateWithoutOwnedPlatformsInput, LanguageLearnerUserUncheckedCreateWithoutOwnedPlatformsInput>
  }

  export type LanguageLearnerReviewCreateWithoutPlatformInput = {
    id?: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
    user: LanguageLearnerUserCreateNestedOneWithoutReviewsInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutReviewInput
  }

  export type LanguageLearnerReviewUncheckedCreateWithoutPlatformInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type LanguageLearnerReviewCreateOrConnectWithoutPlatformInput = {
    where: LanguageLearnerReviewWhereUniqueInput
    create: XOR<LanguageLearnerReviewCreateWithoutPlatformInput, LanguageLearnerReviewUncheckedCreateWithoutPlatformInput>
  }

  export type LanguageLearnerReviewCreateManyPlatformInputEnvelope = {
    data: LanguageLearnerReviewCreateManyPlatformInput | LanguageLearnerReviewCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type LanguageLearnerUserUpsertWithoutOwnedPlatformsInput = {
    update: XOR<LanguageLearnerUserUpdateWithoutOwnedPlatformsInput, LanguageLearnerUserUncheckedUpdateWithoutOwnedPlatformsInput>
    create: XOR<LanguageLearnerUserCreateWithoutOwnedPlatformsInput, LanguageLearnerUserUncheckedCreateWithoutOwnedPlatformsInput>
    where?: LanguageLearnerUserWhereInput
  }

  export type LanguageLearnerUserUpdateToOneWithWhereWithoutOwnedPlatformsInput = {
    where?: LanguageLearnerUserWhereInput
    data: XOR<LanguageLearnerUserUpdateWithoutOwnedPlatformsInput, LanguageLearnerUserUncheckedUpdateWithoutOwnedPlatformsInput>
  }

  export type LanguageLearnerUserUpdateWithoutOwnedPlatformsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: LanguageLearnerReviewUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserUncheckedUpdateWithoutOwnedPlatformsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: LanguageLearnerReviewUncheckedUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerReviewUpsertWithWhereUniqueWithoutPlatformInput = {
    where: LanguageLearnerReviewWhereUniqueInput
    update: XOR<LanguageLearnerReviewUpdateWithoutPlatformInput, LanguageLearnerReviewUncheckedUpdateWithoutPlatformInput>
    create: XOR<LanguageLearnerReviewCreateWithoutPlatformInput, LanguageLearnerReviewUncheckedCreateWithoutPlatformInput>
  }

  export type LanguageLearnerReviewUpdateWithWhereUniqueWithoutPlatformInput = {
    where: LanguageLearnerReviewWhereUniqueInput
    data: XOR<LanguageLearnerReviewUpdateWithoutPlatformInput, LanguageLearnerReviewUncheckedUpdateWithoutPlatformInput>
  }

  export type LanguageLearnerReviewUpdateManyWithWhereWithoutPlatformInput = {
    where: LanguageLearnerReviewScalarWhereInput
    data: XOR<LanguageLearnerReviewUpdateManyMutationInput, LanguageLearnerReviewUncheckedUpdateManyWithoutPlatformInput>
  }

  export type LanguageLearnerPlatformCreateWithoutReviewsInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    status?: string
    createdAt?: Date | string
    owner: LanguageLearnerUserCreateNestedOneWithoutOwnedPlatformsInput
  }

  export type LanguageLearnerPlatformUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    ownerId: string
    status?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerPlatformCreateOrConnectWithoutReviewsInput = {
    where: LanguageLearnerPlatformWhereUniqueInput
    create: XOR<LanguageLearnerPlatformCreateWithoutReviewsInput, LanguageLearnerPlatformUncheckedCreateWithoutReviewsInput>
  }

  export type LanguageLearnerUserCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformCreateNestedManyWithoutOwnerInput
    votesGiven?: LanguageLearnerUserVoteCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserUncheckedCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedCreateNestedManyWithoutOwnerInput
    votesGiven?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserCreateOrConnectWithoutReviewsInput = {
    where: LanguageLearnerUserWhereUniqueInput
    create: XOR<LanguageLearnerUserCreateWithoutReviewsInput, LanguageLearnerUserUncheckedCreateWithoutReviewsInput>
  }

  export type LanguageLearnerReviewLikeCreateWithoutReviewInput = {
    id?: string
    createdAt?: Date | string
    user: LanguageLearnerUserCreateNestedOneWithoutLikesInput
  }

  export type LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewLikeCreateOrConnectWithoutReviewInput = {
    where: LanguageLearnerReviewLikeWhereUniqueInput
    create: XOR<LanguageLearnerReviewLikeCreateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput>
  }

  export type LanguageLearnerReviewLikeCreateManyReviewInputEnvelope = {
    data: LanguageLearnerReviewLikeCreateManyReviewInput | LanguageLearnerReviewLikeCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type LanguageLearnerPlatformUpsertWithoutReviewsInput = {
    update: XOR<LanguageLearnerPlatformUpdateWithoutReviewsInput, LanguageLearnerPlatformUncheckedUpdateWithoutReviewsInput>
    create: XOR<LanguageLearnerPlatformCreateWithoutReviewsInput, LanguageLearnerPlatformUncheckedCreateWithoutReviewsInput>
    where?: LanguageLearnerPlatformWhereInput
  }

  export type LanguageLearnerPlatformUpdateToOneWithWhereWithoutReviewsInput = {
    where?: LanguageLearnerPlatformWhereInput
    data: XOR<LanguageLearnerPlatformUpdateWithoutReviewsInput, LanguageLearnerPlatformUncheckedUpdateWithoutReviewsInput>
  }

  export type LanguageLearnerPlatformUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: LanguageLearnerUserUpdateOneRequiredWithoutOwnedPlatformsNestedInput
  }

  export type LanguageLearnerPlatformUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserUpsertWithoutReviewsInput = {
    update: XOR<LanguageLearnerUserUpdateWithoutReviewsInput, LanguageLearnerUserUncheckedUpdateWithoutReviewsInput>
    create: XOR<LanguageLearnerUserCreateWithoutReviewsInput, LanguageLearnerUserUncheckedCreateWithoutReviewsInput>
    where?: LanguageLearnerUserWhereInput
  }

  export type LanguageLearnerUserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: LanguageLearnerUserWhereInput
    data: XOR<LanguageLearnerUserUpdateWithoutReviewsInput, LanguageLearnerUserUncheckedUpdateWithoutReviewsInput>
  }

  export type LanguageLearnerUserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUpdateManyWithoutOwnerNestedInput
    votesGiven?: LanguageLearnerUserVoteUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerNestedInput
    votesGiven?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerReviewLikeUpsertWithWhereUniqueWithoutReviewInput = {
    where: LanguageLearnerReviewLikeWhereUniqueInput
    update: XOR<LanguageLearnerReviewLikeUpdateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedUpdateWithoutReviewInput>
    create: XOR<LanguageLearnerReviewLikeCreateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedCreateWithoutReviewInput>
  }

  export type LanguageLearnerReviewLikeUpdateWithWhereUniqueWithoutReviewInput = {
    where: LanguageLearnerReviewLikeWhereUniqueInput
    data: XOR<LanguageLearnerReviewLikeUpdateWithoutReviewInput, LanguageLearnerReviewLikeUncheckedUpdateWithoutReviewInput>
  }

  export type LanguageLearnerReviewLikeUpdateManyWithWhereWithoutReviewInput = {
    where: LanguageLearnerReviewLikeScalarWhereInput
    data: XOR<LanguageLearnerReviewLikeUpdateManyMutationInput, LanguageLearnerReviewLikeUncheckedUpdateManyWithoutReviewInput>
  }

  export type LanguageLearnerUserCreateWithoutLikesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserUncheckedCreateWithoutLikesInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewUncheckedCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutVoterInput
    votesReceived?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserCreateOrConnectWithoutLikesInput = {
    where: LanguageLearnerUserWhereUniqueInput
    create: XOR<LanguageLearnerUserCreateWithoutLikesInput, LanguageLearnerUserUncheckedCreateWithoutLikesInput>
  }

  export type LanguageLearnerReviewCreateWithoutLikesInput = {
    id?: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
    platform: LanguageLearnerPlatformCreateNestedOneWithoutReviewsInput
    user: LanguageLearnerUserCreateNestedOneWithoutReviewsInput
  }

  export type LanguageLearnerReviewUncheckedCreateWithoutLikesInput = {
    id?: string
    platformId: string
    userId: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewCreateOrConnectWithoutLikesInput = {
    where: LanguageLearnerReviewWhereUniqueInput
    create: XOR<LanguageLearnerReviewCreateWithoutLikesInput, LanguageLearnerReviewUncheckedCreateWithoutLikesInput>
  }

  export type LanguageLearnerUserUpsertWithoutLikesInput = {
    update: XOR<LanguageLearnerUserUpdateWithoutLikesInput, LanguageLearnerUserUncheckedUpdateWithoutLikesInput>
    create: XOR<LanguageLearnerUserCreateWithoutLikesInput, LanguageLearnerUserUncheckedCreateWithoutLikesInput>
    where?: LanguageLearnerUserWhereInput
  }

  export type LanguageLearnerUserUpdateToOneWithWhereWithoutLikesInput = {
    where?: LanguageLearnerUserWhereInput
    data: XOR<LanguageLearnerUserUpdateWithoutLikesInput, LanguageLearnerUserUncheckedUpdateWithoutLikesInput>
  }

  export type LanguageLearnerUserUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUncheckedUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterNestedInput
    votesReceived?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerReviewUpsertWithoutLikesInput = {
    update: XOR<LanguageLearnerReviewUpdateWithoutLikesInput, LanguageLearnerReviewUncheckedUpdateWithoutLikesInput>
    create: XOR<LanguageLearnerReviewCreateWithoutLikesInput, LanguageLearnerReviewUncheckedCreateWithoutLikesInput>
    where?: LanguageLearnerReviewWhereInput
  }

  export type LanguageLearnerReviewUpdateToOneWithWhereWithoutLikesInput = {
    where?: LanguageLearnerReviewWhereInput
    data: XOR<LanguageLearnerReviewUpdateWithoutLikesInput, LanguageLearnerReviewUncheckedUpdateWithoutLikesInput>
  }

  export type LanguageLearnerReviewUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: LanguageLearnerPlatformUpdateOneRequiredWithoutReviewsNestedInput
    user?: LanguageLearnerUserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type LanguageLearnerReviewUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserCreateWithoutVotesReceivedInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteCreateNestedManyWithoutVoterInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserUncheckedCreateWithoutVotesReceivedInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewUncheckedCreateNestedManyWithoutUserInput
    votesGiven?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutVoterInput
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserCreateOrConnectWithoutVotesReceivedInput = {
    where: LanguageLearnerUserWhereUniqueInput
    create: XOR<LanguageLearnerUserCreateWithoutVotesReceivedInput, LanguageLearnerUserUncheckedCreateWithoutVotesReceivedInput>
  }

  export type LanguageLearnerUserCreateWithoutVotesGivenInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewCreateNestedManyWithoutUserInput
    votesReceived?: LanguageLearnerUserVoteCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserUncheckedCreateWithoutVotesGivenInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: LanguageLearnerReviewUncheckedCreateNestedManyWithoutUserInput
    votesReceived?: LanguageLearnerUserVoteUncheckedCreateNestedManyWithoutUserInput
    likes?: LanguageLearnerReviewLikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type LanguageLearnerUserCreateOrConnectWithoutVotesGivenInput = {
    where: LanguageLearnerUserWhereUniqueInput
    create: XOR<LanguageLearnerUserCreateWithoutVotesGivenInput, LanguageLearnerUserUncheckedCreateWithoutVotesGivenInput>
  }

  export type LanguageLearnerUserUpsertWithoutVotesReceivedInput = {
    update: XOR<LanguageLearnerUserUpdateWithoutVotesReceivedInput, LanguageLearnerUserUncheckedUpdateWithoutVotesReceivedInput>
    create: XOR<LanguageLearnerUserCreateWithoutVotesReceivedInput, LanguageLearnerUserUncheckedCreateWithoutVotesReceivedInput>
    where?: LanguageLearnerUserWhereInput
  }

  export type LanguageLearnerUserUpdateToOneWithWhereWithoutVotesReceivedInput = {
    where?: LanguageLearnerUserWhereInput
    data: XOR<LanguageLearnerUserUpdateWithoutVotesReceivedInput, LanguageLearnerUserUncheckedUpdateWithoutVotesReceivedInput>
  }

  export type LanguageLearnerUserUpdateWithoutVotesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUpdateManyWithoutVoterNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserUncheckedUpdateWithoutVotesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUncheckedUpdateManyWithoutUserNestedInput
    votesGiven?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterNestedInput
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserUpsertWithoutVotesGivenInput = {
    update: XOR<LanguageLearnerUserUpdateWithoutVotesGivenInput, LanguageLearnerUserUncheckedUpdateWithoutVotesGivenInput>
    create: XOR<LanguageLearnerUserCreateWithoutVotesGivenInput, LanguageLearnerUserUncheckedCreateWithoutVotesGivenInput>
    where?: LanguageLearnerUserWhereInput
  }

  export type LanguageLearnerUserUpdateToOneWithWhereWithoutVotesGivenInput = {
    where?: LanguageLearnerUserWhereInput
    data: XOR<LanguageLearnerUserUpdateWithoutVotesGivenInput, LanguageLearnerUserUncheckedUpdateWithoutVotesGivenInput>
  }

  export type LanguageLearnerUserUpdateWithoutVotesGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUpdateManyWithoutUserNestedInput
    votesReceived?: LanguageLearnerUserVoteUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutUserNestedInput
  }

  export type LanguageLearnerUserUncheckedUpdateWithoutVotesGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedPlatforms?: LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: LanguageLearnerReviewUncheckedUpdateManyWithoutUserNestedInput
    votesReceived?: LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserNestedInput
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameHubPlayerCreateWithoutUserInput = {
    id?: string
    name: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
    tournaments?: GameHubTournamentPlayerCreateNestedManyWithoutPlayerInput
  }

  export type GameHubPlayerUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
    tournaments?: GameHubTournamentPlayerUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type GameHubPlayerCreateOrConnectWithoutUserInput = {
    where: GameHubPlayerWhereUniqueInput
    create: XOR<GameHubPlayerCreateWithoutUserInput, GameHubPlayerUncheckedCreateWithoutUserInput>
  }

  export type GameHubPlayerCreateManyUserInputEnvelope = {
    data: GameHubPlayerCreateManyUserInput | GameHubPlayerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GameHubTournamentCreateWithoutOrganizerInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    createdAt?: Date | string
    players?: GameHubTournamentPlayerCreateNestedManyWithoutTournamentInput
  }

  export type GameHubTournamentUncheckedCreateWithoutOrganizerInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    createdAt?: Date | string
    players?: GameHubTournamentPlayerUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type GameHubTournamentCreateOrConnectWithoutOrganizerInput = {
    where: GameHubTournamentWhereUniqueInput
    create: XOR<GameHubTournamentCreateWithoutOrganizerInput, GameHubTournamentUncheckedCreateWithoutOrganizerInput>
  }

  export type GameHubTournamentCreateManyOrganizerInputEnvelope = {
    data: GameHubTournamentCreateManyOrganizerInput | GameHubTournamentCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type GameHubPlayerUpsertWithWhereUniqueWithoutUserInput = {
    where: GameHubPlayerWhereUniqueInput
    update: XOR<GameHubPlayerUpdateWithoutUserInput, GameHubPlayerUncheckedUpdateWithoutUserInput>
    create: XOR<GameHubPlayerCreateWithoutUserInput, GameHubPlayerUncheckedCreateWithoutUserInput>
  }

  export type GameHubPlayerUpdateWithWhereUniqueWithoutUserInput = {
    where: GameHubPlayerWhereUniqueInput
    data: XOR<GameHubPlayerUpdateWithoutUserInput, GameHubPlayerUncheckedUpdateWithoutUserInput>
  }

  export type GameHubPlayerUpdateManyWithWhereWithoutUserInput = {
    where: GameHubPlayerScalarWhereInput
    data: XOR<GameHubPlayerUpdateManyMutationInput, GameHubPlayerUncheckedUpdateManyWithoutUserInput>
  }

  export type GameHubPlayerScalarWhereInput = {
    AND?: GameHubPlayerScalarWhereInput | GameHubPlayerScalarWhereInput[]
    OR?: GameHubPlayerScalarWhereInput[]
    NOT?: GameHubPlayerScalarWhereInput | GameHubPlayerScalarWhereInput[]
    id?: StringFilter<"GameHubPlayer"> | string
    name?: StringFilter<"GameHubPlayer"> | string
    userId?: StringFilter<"GameHubPlayer"> | string
    rank?: StringFilter<"GameHubPlayer"> | string
    mainGame?: StringFilter<"GameHubPlayer"> | string
    validated?: BoolFilter<"GameHubPlayer"> | boolean
    createdAt?: DateTimeFilter<"GameHubPlayer"> | Date | string
  }

  export type GameHubTournamentUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: GameHubTournamentWhereUniqueInput
    update: XOR<GameHubTournamentUpdateWithoutOrganizerInput, GameHubTournamentUncheckedUpdateWithoutOrganizerInput>
    create: XOR<GameHubTournamentCreateWithoutOrganizerInput, GameHubTournamentUncheckedCreateWithoutOrganizerInput>
  }

  export type GameHubTournamentUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: GameHubTournamentWhereUniqueInput
    data: XOR<GameHubTournamentUpdateWithoutOrganizerInput, GameHubTournamentUncheckedUpdateWithoutOrganizerInput>
  }

  export type GameHubTournamentUpdateManyWithWhereWithoutOrganizerInput = {
    where: GameHubTournamentScalarWhereInput
    data: XOR<GameHubTournamentUpdateManyMutationInput, GameHubTournamentUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type GameHubTournamentScalarWhereInput = {
    AND?: GameHubTournamentScalarWhereInput | GameHubTournamentScalarWhereInput[]
    OR?: GameHubTournamentScalarWhereInput[]
    NOT?: GameHubTournamentScalarWhereInput | GameHubTournamentScalarWhereInput[]
    id?: StringFilter<"GameHubTournament"> | string
    title?: StringFilter<"GameHubTournament"> | string
    game?: StringFilter<"GameHubTournament"> | string
    date?: DateTimeFilter<"GameHubTournament"> | Date | string
    rules?: StringFilter<"GameHubTournament"> | string
    organizerId?: StringFilter<"GameHubTournament"> | string
    createdAt?: DateTimeFilter<"GameHubTournament"> | Date | string
  }

  export type GameHubUserCreateWithoutPlayersInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    validated?: boolean
    createdAt?: Date | string
    tournaments?: GameHubTournamentCreateNestedManyWithoutOrganizerInput
  }

  export type GameHubUserUncheckedCreateWithoutPlayersInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    validated?: boolean
    createdAt?: Date | string
    tournaments?: GameHubTournamentUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type GameHubUserCreateOrConnectWithoutPlayersInput = {
    where: GameHubUserWhereUniqueInput
    create: XOR<GameHubUserCreateWithoutPlayersInput, GameHubUserUncheckedCreateWithoutPlayersInput>
  }

  export type GameHubTournamentPlayerCreateWithoutPlayerInput = {
    id?: string
    joinedAt?: Date | string
    tournament: GameHubTournamentCreateNestedOneWithoutPlayersInput
  }

  export type GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput = {
    id?: string
    tournamentId: string
    joinedAt?: Date | string
  }

  export type GameHubTournamentPlayerCreateOrConnectWithoutPlayerInput = {
    where: GameHubTournamentPlayerWhereUniqueInput
    create: XOR<GameHubTournamentPlayerCreateWithoutPlayerInput, GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput>
  }

  export type GameHubTournamentPlayerCreateManyPlayerInputEnvelope = {
    data: GameHubTournamentPlayerCreateManyPlayerInput | GameHubTournamentPlayerCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type GameHubUserUpsertWithoutPlayersInput = {
    update: XOR<GameHubUserUpdateWithoutPlayersInput, GameHubUserUncheckedUpdateWithoutPlayersInput>
    create: XOR<GameHubUserCreateWithoutPlayersInput, GameHubUserUncheckedCreateWithoutPlayersInput>
    where?: GameHubUserWhereInput
  }

  export type GameHubUserUpdateToOneWithWhereWithoutPlayersInput = {
    where?: GameHubUserWhereInput
    data: XOR<GameHubUserUpdateWithoutPlayersInput, GameHubUserUncheckedUpdateWithoutPlayersInput>
  }

  export type GameHubUserUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournaments?: GameHubTournamentUpdateManyWithoutOrganizerNestedInput
  }

  export type GameHubUserUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournaments?: GameHubTournamentUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type GameHubTournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput = {
    where: GameHubTournamentPlayerWhereUniqueInput
    update: XOR<GameHubTournamentPlayerUpdateWithoutPlayerInput, GameHubTournamentPlayerUncheckedUpdateWithoutPlayerInput>
    create: XOR<GameHubTournamentPlayerCreateWithoutPlayerInput, GameHubTournamentPlayerUncheckedCreateWithoutPlayerInput>
  }

  export type GameHubTournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput = {
    where: GameHubTournamentPlayerWhereUniqueInput
    data: XOR<GameHubTournamentPlayerUpdateWithoutPlayerInput, GameHubTournamentPlayerUncheckedUpdateWithoutPlayerInput>
  }

  export type GameHubTournamentPlayerUpdateManyWithWhereWithoutPlayerInput = {
    where: GameHubTournamentPlayerScalarWhereInput
    data: XOR<GameHubTournamentPlayerUpdateManyMutationInput, GameHubTournamentPlayerUncheckedUpdateManyWithoutPlayerInput>
  }

  export type GameHubTournamentPlayerScalarWhereInput = {
    AND?: GameHubTournamentPlayerScalarWhereInput | GameHubTournamentPlayerScalarWhereInput[]
    OR?: GameHubTournamentPlayerScalarWhereInput[]
    NOT?: GameHubTournamentPlayerScalarWhereInput | GameHubTournamentPlayerScalarWhereInput[]
    id?: StringFilter<"GameHubTournamentPlayer"> | string
    tournamentId?: StringFilter<"GameHubTournamentPlayer"> | string
    playerId?: StringFilter<"GameHubTournamentPlayer"> | string
    joinedAt?: DateTimeFilter<"GameHubTournamentPlayer"> | Date | string
  }

  export type GameHubUserCreateWithoutTournamentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    validated?: boolean
    createdAt?: Date | string
    players?: GameHubPlayerCreateNestedManyWithoutUserInput
  }

  export type GameHubUserUncheckedCreateWithoutTournamentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    validated?: boolean
    createdAt?: Date | string
    players?: GameHubPlayerUncheckedCreateNestedManyWithoutUserInput
  }

  export type GameHubUserCreateOrConnectWithoutTournamentsInput = {
    where: GameHubUserWhereUniqueInput
    create: XOR<GameHubUserCreateWithoutTournamentsInput, GameHubUserUncheckedCreateWithoutTournamentsInput>
  }

  export type GameHubTournamentPlayerCreateWithoutTournamentInput = {
    id?: string
    joinedAt?: Date | string
    player: GameHubPlayerCreateNestedOneWithoutTournamentsInput
  }

  export type GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput = {
    id?: string
    playerId: string
    joinedAt?: Date | string
  }

  export type GameHubTournamentPlayerCreateOrConnectWithoutTournamentInput = {
    where: GameHubTournamentPlayerWhereUniqueInput
    create: XOR<GameHubTournamentPlayerCreateWithoutTournamentInput, GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput>
  }

  export type GameHubTournamentPlayerCreateManyTournamentInputEnvelope = {
    data: GameHubTournamentPlayerCreateManyTournamentInput | GameHubTournamentPlayerCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type GameHubUserUpsertWithoutTournamentsInput = {
    update: XOR<GameHubUserUpdateWithoutTournamentsInput, GameHubUserUncheckedUpdateWithoutTournamentsInput>
    create: XOR<GameHubUserCreateWithoutTournamentsInput, GameHubUserUncheckedCreateWithoutTournamentsInput>
    where?: GameHubUserWhereInput
  }

  export type GameHubUserUpdateToOneWithWhereWithoutTournamentsInput = {
    where?: GameHubUserWhereInput
    data: XOR<GameHubUserUpdateWithoutTournamentsInput, GameHubUserUncheckedUpdateWithoutTournamentsInput>
  }

  export type GameHubUserUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: GameHubPlayerUpdateManyWithoutUserNestedInput
  }

  export type GameHubUserUncheckedUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: GameHubPlayerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameHubTournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput = {
    where: GameHubTournamentPlayerWhereUniqueInput
    update: XOR<GameHubTournamentPlayerUpdateWithoutTournamentInput, GameHubTournamentPlayerUncheckedUpdateWithoutTournamentInput>
    create: XOR<GameHubTournamentPlayerCreateWithoutTournamentInput, GameHubTournamentPlayerUncheckedCreateWithoutTournamentInput>
  }

  export type GameHubTournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput = {
    where: GameHubTournamentPlayerWhereUniqueInput
    data: XOR<GameHubTournamentPlayerUpdateWithoutTournamentInput, GameHubTournamentPlayerUncheckedUpdateWithoutTournamentInput>
  }

  export type GameHubTournamentPlayerUpdateManyWithWhereWithoutTournamentInput = {
    where: GameHubTournamentPlayerScalarWhereInput
    data: XOR<GameHubTournamentPlayerUpdateManyMutationInput, GameHubTournamentPlayerUncheckedUpdateManyWithoutTournamentInput>
  }

  export type GameHubTournamentCreateWithoutPlayersInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    createdAt?: Date | string
    organizer: GameHubUserCreateNestedOneWithoutTournamentsInput
  }

  export type GameHubTournamentUncheckedCreateWithoutPlayersInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    organizerId: string
    createdAt?: Date | string
  }

  export type GameHubTournamentCreateOrConnectWithoutPlayersInput = {
    where: GameHubTournamentWhereUniqueInput
    create: XOR<GameHubTournamentCreateWithoutPlayersInput, GameHubTournamentUncheckedCreateWithoutPlayersInput>
  }

  export type GameHubPlayerCreateWithoutTournamentsInput = {
    id?: string
    name: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
    user: GameHubUserCreateNestedOneWithoutPlayersInput
  }

  export type GameHubPlayerUncheckedCreateWithoutTournamentsInput = {
    id?: string
    name: string
    userId: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type GameHubPlayerCreateOrConnectWithoutTournamentsInput = {
    where: GameHubPlayerWhereUniqueInput
    create: XOR<GameHubPlayerCreateWithoutTournamentsInput, GameHubPlayerUncheckedCreateWithoutTournamentsInput>
  }

  export type GameHubTournamentUpsertWithoutPlayersInput = {
    update: XOR<GameHubTournamentUpdateWithoutPlayersInput, GameHubTournamentUncheckedUpdateWithoutPlayersInput>
    create: XOR<GameHubTournamentCreateWithoutPlayersInput, GameHubTournamentUncheckedCreateWithoutPlayersInput>
    where?: GameHubTournamentWhereInput
  }

  export type GameHubTournamentUpdateToOneWithWhereWithoutPlayersInput = {
    where?: GameHubTournamentWhereInput
    data: XOR<GameHubTournamentUpdateWithoutPlayersInput, GameHubTournamentUncheckedUpdateWithoutPlayersInput>
  }

  export type GameHubTournamentUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: GameHubUserUpdateOneRequiredWithoutTournamentsNestedInput
  }

  export type GameHubTournamentUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubPlayerUpsertWithoutTournamentsInput = {
    update: XOR<GameHubPlayerUpdateWithoutTournamentsInput, GameHubPlayerUncheckedUpdateWithoutTournamentsInput>
    create: XOR<GameHubPlayerCreateWithoutTournamentsInput, GameHubPlayerUncheckedCreateWithoutTournamentsInput>
    where?: GameHubPlayerWhereInput
  }

  export type GameHubPlayerUpdateToOneWithWhereWithoutTournamentsInput = {
    where?: GameHubPlayerWhereInput
    data: XOR<GameHubPlayerUpdateWithoutTournamentsInput, GameHubPlayerUncheckedUpdateWithoutTournamentsInput>
  }

  export type GameHubPlayerUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: GameHubUserUpdateOneRequiredWithoutPlayersNestedInput
  }

  export type GameHubPlayerUncheckedUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleHealthTrackerCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    dateTime: Date | string
    notes?: string | null
    createdAt?: Date | string
  }

  export type ScheduleHealthTrackerUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    dateTime: Date | string
    notes?: string | null
    createdAt?: Date | string
  }

  export type ScheduleHealthTrackerCreateOrConnectWithoutUserInput = {
    where: ScheduleHealthTrackerWhereUniqueInput
    create: XOR<ScheduleHealthTrackerCreateWithoutUserInput, ScheduleHealthTrackerUncheckedCreateWithoutUserInput>
  }

  export type ScheduleHealthTrackerCreateManyUserInputEnvelope = {
    data: ScheduleHealthTrackerCreateManyUserInput | ScheduleHealthTrackerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecordHealthTrackerCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    date: Date | string
    createdAt?: Date | string
  }

  export type RecordHealthTrackerUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    description: string
    date: Date | string
    createdAt?: Date | string
  }

  export type RecordHealthTrackerCreateOrConnectWithoutUserInput = {
    where: RecordHealthTrackerWhereUniqueInput
    create: XOR<RecordHealthTrackerCreateWithoutUserInput, RecordHealthTrackerUncheckedCreateWithoutUserInput>
  }

  export type RecordHealthTrackerCreateManyUserInputEnvelope = {
    data: RecordHealthTrackerCreateManyUserInput | RecordHealthTrackerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleHealthTrackerUpsertWithWhereUniqueWithoutUserInput = {
    where: ScheduleHealthTrackerWhereUniqueInput
    update: XOR<ScheduleHealthTrackerUpdateWithoutUserInput, ScheduleHealthTrackerUncheckedUpdateWithoutUserInput>
    create: XOR<ScheduleHealthTrackerCreateWithoutUserInput, ScheduleHealthTrackerUncheckedCreateWithoutUserInput>
  }

  export type ScheduleHealthTrackerUpdateWithWhereUniqueWithoutUserInput = {
    where: ScheduleHealthTrackerWhereUniqueInput
    data: XOR<ScheduleHealthTrackerUpdateWithoutUserInput, ScheduleHealthTrackerUncheckedUpdateWithoutUserInput>
  }

  export type ScheduleHealthTrackerUpdateManyWithWhereWithoutUserInput = {
    where: ScheduleHealthTrackerScalarWhereInput
    data: XOR<ScheduleHealthTrackerUpdateManyMutationInput, ScheduleHealthTrackerUncheckedUpdateManyWithoutUserInput>
  }

  export type ScheduleHealthTrackerScalarWhereInput = {
    AND?: ScheduleHealthTrackerScalarWhereInput | ScheduleHealthTrackerScalarWhereInput[]
    OR?: ScheduleHealthTrackerScalarWhereInput[]
    NOT?: ScheduleHealthTrackerScalarWhereInput | ScheduleHealthTrackerScalarWhereInput[]
    id?: StringFilter<"ScheduleHealthTracker"> | string
    userId?: StringFilter<"ScheduleHealthTracker"> | string
    type?: StringFilter<"ScheduleHealthTracker"> | string
    title?: StringFilter<"ScheduleHealthTracker"> | string
    dateTime?: DateTimeFilter<"ScheduleHealthTracker"> | Date | string
    notes?: StringNullableFilter<"ScheduleHealthTracker"> | string | null
    createdAt?: DateTimeFilter<"ScheduleHealthTracker"> | Date | string
  }

  export type RecordHealthTrackerUpsertWithWhereUniqueWithoutUserInput = {
    where: RecordHealthTrackerWhereUniqueInput
    update: XOR<RecordHealthTrackerUpdateWithoutUserInput, RecordHealthTrackerUncheckedUpdateWithoutUserInput>
    create: XOR<RecordHealthTrackerCreateWithoutUserInput, RecordHealthTrackerUncheckedCreateWithoutUserInput>
  }

  export type RecordHealthTrackerUpdateWithWhereUniqueWithoutUserInput = {
    where: RecordHealthTrackerWhereUniqueInput
    data: XOR<RecordHealthTrackerUpdateWithoutUserInput, RecordHealthTrackerUncheckedUpdateWithoutUserInput>
  }

  export type RecordHealthTrackerUpdateManyWithWhereWithoutUserInput = {
    where: RecordHealthTrackerScalarWhereInput
    data: XOR<RecordHealthTrackerUpdateManyMutationInput, RecordHealthTrackerUncheckedUpdateManyWithoutUserInput>
  }

  export type RecordHealthTrackerScalarWhereInput = {
    AND?: RecordHealthTrackerScalarWhereInput | RecordHealthTrackerScalarWhereInput[]
    OR?: RecordHealthTrackerScalarWhereInput[]
    NOT?: RecordHealthTrackerScalarWhereInput | RecordHealthTrackerScalarWhereInput[]
    id?: StringFilter<"RecordHealthTracker"> | string
    userId?: StringFilter<"RecordHealthTracker"> | string
    type?: StringFilter<"RecordHealthTracker"> | string
    description?: StringFilter<"RecordHealthTracker"> | string
    date?: DateTimeFilter<"RecordHealthTracker"> | Date | string
    createdAt?: DateTimeFilter<"RecordHealthTracker"> | Date | string
  }

  export type UserHealthTrackerCreateWithoutSchedulesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    records?: RecordHealthTrackerCreateNestedManyWithoutUserInput
  }

  export type UserHealthTrackerUncheckedCreateWithoutSchedulesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    records?: RecordHealthTrackerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserHealthTrackerCreateOrConnectWithoutSchedulesInput = {
    where: UserHealthTrackerWhereUniqueInput
    create: XOR<UserHealthTrackerCreateWithoutSchedulesInput, UserHealthTrackerUncheckedCreateWithoutSchedulesInput>
  }

  export type UserHealthTrackerUpsertWithoutSchedulesInput = {
    update: XOR<UserHealthTrackerUpdateWithoutSchedulesInput, UserHealthTrackerUncheckedUpdateWithoutSchedulesInput>
    create: XOR<UserHealthTrackerCreateWithoutSchedulesInput, UserHealthTrackerUncheckedCreateWithoutSchedulesInput>
    where?: UserHealthTrackerWhereInput
  }

  export type UserHealthTrackerUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: UserHealthTrackerWhereInput
    data: XOR<UserHealthTrackerUpdateWithoutSchedulesInput, UserHealthTrackerUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserHealthTrackerUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: RecordHealthTrackerUpdateManyWithoutUserNestedInput
  }

  export type UserHealthTrackerUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: RecordHealthTrackerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserHealthTrackerCreateWithoutRecordsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    schedules?: ScheduleHealthTrackerCreateNestedManyWithoutUserInput
  }

  export type UserHealthTrackerUncheckedCreateWithoutRecordsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    schedules?: ScheduleHealthTrackerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserHealthTrackerCreateOrConnectWithoutRecordsInput = {
    where: UserHealthTrackerWhereUniqueInput
    create: XOR<UserHealthTrackerCreateWithoutRecordsInput, UserHealthTrackerUncheckedCreateWithoutRecordsInput>
  }

  export type UserHealthTrackerUpsertWithoutRecordsInput = {
    update: XOR<UserHealthTrackerUpdateWithoutRecordsInput, UserHealthTrackerUncheckedUpdateWithoutRecordsInput>
    create: XOR<UserHealthTrackerCreateWithoutRecordsInput, UserHealthTrackerUncheckedCreateWithoutRecordsInput>
    where?: UserHealthTrackerWhereInput
  }

  export type UserHealthTrackerUpdateToOneWithWhereWithoutRecordsInput = {
    where?: UserHealthTrackerWhereInput
    data: XOR<UserHealthTrackerUpdateWithoutRecordsInput, UserHealthTrackerUncheckedUpdateWithoutRecordsInput>
  }

  export type UserHealthTrackerUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ScheduleHealthTrackerUpdateManyWithoutUserNestedInput
  }

  export type UserHealthTrackerUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ScheduleHealthTrackerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConcertMusicLoverCreateWithoutUserInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewMusicLoverCreateNestedManyWithoutConcertInput
  }

  export type ConcertMusicLoverUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewMusicLoverUncheckedCreateNestedManyWithoutConcertInput
  }

  export type ConcertMusicLoverCreateOrConnectWithoutUserInput = {
    where: ConcertMusicLoverWhereUniqueInput
    create: XOR<ConcertMusicLoverCreateWithoutUserInput, ConcertMusicLoverUncheckedCreateWithoutUserInput>
  }

  export type ConcertMusicLoverCreateManyUserInputEnvelope = {
    data: ConcertMusicLoverCreateManyUserInput | ConcertMusicLoverCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewMusicLoverCreateWithoutUserInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    concert: ConcertMusicLoverCreateNestedOneWithoutReviewsInput
  }

  export type ReviewMusicLoverUncheckedCreateWithoutUserInput = {
    id?: string
    concertId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewMusicLoverCreateOrConnectWithoutUserInput = {
    where: ReviewMusicLoverWhereUniqueInput
    create: XOR<ReviewMusicLoverCreateWithoutUserInput, ReviewMusicLoverUncheckedCreateWithoutUserInput>
  }

  export type ReviewMusicLoverCreateManyUserInputEnvelope = {
    data: ReviewMusicLoverCreateManyUserInput | ReviewMusicLoverCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ConcertMusicLoverUpsertWithWhereUniqueWithoutUserInput = {
    where: ConcertMusicLoverWhereUniqueInput
    update: XOR<ConcertMusicLoverUpdateWithoutUserInput, ConcertMusicLoverUncheckedUpdateWithoutUserInput>
    create: XOR<ConcertMusicLoverCreateWithoutUserInput, ConcertMusicLoverUncheckedCreateWithoutUserInput>
  }

  export type ConcertMusicLoverUpdateWithWhereUniqueWithoutUserInput = {
    where: ConcertMusicLoverWhereUniqueInput
    data: XOR<ConcertMusicLoverUpdateWithoutUserInput, ConcertMusicLoverUncheckedUpdateWithoutUserInput>
  }

  export type ConcertMusicLoverUpdateManyWithWhereWithoutUserInput = {
    where: ConcertMusicLoverScalarWhereInput
    data: XOR<ConcertMusicLoverUpdateManyMutationInput, ConcertMusicLoverUncheckedUpdateManyWithoutUserInput>
  }

  export type ConcertMusicLoverScalarWhereInput = {
    AND?: ConcertMusicLoverScalarWhereInput | ConcertMusicLoverScalarWhereInput[]
    OR?: ConcertMusicLoverScalarWhereInput[]
    NOT?: ConcertMusicLoverScalarWhereInput | ConcertMusicLoverScalarWhereInput[]
    id?: StringFilter<"ConcertMusicLover"> | string
    title?: StringFilter<"ConcertMusicLover"> | string
    date?: DateTimeFilter<"ConcertMusicLover"> | Date | string
    venue?: StringFilter<"ConcertMusicLover"> | string
    genre?: StringFilter<"ConcertMusicLover"> | string
    submittedBy?: StringFilter<"ConcertMusicLover"> | string
    validated?: BoolFilter<"ConcertMusicLover"> | boolean
    createdAt?: DateTimeFilter<"ConcertMusicLover"> | Date | string
  }

  export type ReviewMusicLoverUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewMusicLoverWhereUniqueInput
    update: XOR<ReviewMusicLoverUpdateWithoutUserInput, ReviewMusicLoverUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewMusicLoverCreateWithoutUserInput, ReviewMusicLoverUncheckedCreateWithoutUserInput>
  }

  export type ReviewMusicLoverUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewMusicLoverWhereUniqueInput
    data: XOR<ReviewMusicLoverUpdateWithoutUserInput, ReviewMusicLoverUncheckedUpdateWithoutUserInput>
  }

  export type ReviewMusicLoverUpdateManyWithWhereWithoutUserInput = {
    where: ReviewMusicLoverScalarWhereInput
    data: XOR<ReviewMusicLoverUpdateManyMutationInput, ReviewMusicLoverUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewMusicLoverScalarWhereInput = {
    AND?: ReviewMusicLoverScalarWhereInput | ReviewMusicLoverScalarWhereInput[]
    OR?: ReviewMusicLoverScalarWhereInput[]
    NOT?: ReviewMusicLoverScalarWhereInput | ReviewMusicLoverScalarWhereInput[]
    id?: StringFilter<"ReviewMusicLover"> | string
    concertId?: StringFilter<"ReviewMusicLover"> | string
    userId?: StringFilter<"ReviewMusicLover"> | string
    rating?: IntFilter<"ReviewMusicLover"> | number
    comment?: StringFilter<"ReviewMusicLover"> | string
    validated?: BoolFilter<"ReviewMusicLover"> | boolean
    createdAt?: DateTimeFilter<"ReviewMusicLover"> | Date | string
  }

  export type UserMusicLoverCreateWithoutConcertsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    reviews?: ReviewMusicLoverCreateNestedManyWithoutUserInput
  }

  export type UserMusicLoverUncheckedCreateWithoutConcertsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    reviews?: ReviewMusicLoverUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserMusicLoverCreateOrConnectWithoutConcertsInput = {
    where: UserMusicLoverWhereUniqueInput
    create: XOR<UserMusicLoverCreateWithoutConcertsInput, UserMusicLoverUncheckedCreateWithoutConcertsInput>
  }

  export type ReviewMusicLoverCreateWithoutConcertInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    user: UserMusicLoverCreateNestedOneWithoutReviewsInput
  }

  export type ReviewMusicLoverUncheckedCreateWithoutConcertInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewMusicLoverCreateOrConnectWithoutConcertInput = {
    where: ReviewMusicLoverWhereUniqueInput
    create: XOR<ReviewMusicLoverCreateWithoutConcertInput, ReviewMusicLoverUncheckedCreateWithoutConcertInput>
  }

  export type ReviewMusicLoverCreateManyConcertInputEnvelope = {
    data: ReviewMusicLoverCreateManyConcertInput | ReviewMusicLoverCreateManyConcertInput[]
    skipDuplicates?: boolean
  }

  export type UserMusicLoverUpsertWithoutConcertsInput = {
    update: XOR<UserMusicLoverUpdateWithoutConcertsInput, UserMusicLoverUncheckedUpdateWithoutConcertsInput>
    create: XOR<UserMusicLoverCreateWithoutConcertsInput, UserMusicLoverUncheckedCreateWithoutConcertsInput>
    where?: UserMusicLoverWhereInput
  }

  export type UserMusicLoverUpdateToOneWithWhereWithoutConcertsInput = {
    where?: UserMusicLoverWhereInput
    data: XOR<UserMusicLoverUpdateWithoutConcertsInput, UserMusicLoverUncheckedUpdateWithoutConcertsInput>
  }

  export type UserMusicLoverUpdateWithoutConcertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewMusicLoverUpdateManyWithoutUserNestedInput
  }

  export type UserMusicLoverUncheckedUpdateWithoutConcertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewMusicLoverUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReviewMusicLoverUpsertWithWhereUniqueWithoutConcertInput = {
    where: ReviewMusicLoverWhereUniqueInput
    update: XOR<ReviewMusicLoverUpdateWithoutConcertInput, ReviewMusicLoverUncheckedUpdateWithoutConcertInput>
    create: XOR<ReviewMusicLoverCreateWithoutConcertInput, ReviewMusicLoverUncheckedCreateWithoutConcertInput>
  }

  export type ReviewMusicLoverUpdateWithWhereUniqueWithoutConcertInput = {
    where: ReviewMusicLoverWhereUniqueInput
    data: XOR<ReviewMusicLoverUpdateWithoutConcertInput, ReviewMusicLoverUncheckedUpdateWithoutConcertInput>
  }

  export type ReviewMusicLoverUpdateManyWithWhereWithoutConcertInput = {
    where: ReviewMusicLoverScalarWhereInput
    data: XOR<ReviewMusicLoverUpdateManyMutationInput, ReviewMusicLoverUncheckedUpdateManyWithoutConcertInput>
  }

  export type UserMusicLoverCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    concerts?: ConcertMusicLoverCreateNestedManyWithoutUserInput
  }

  export type UserMusicLoverUncheckedCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    concerts?: ConcertMusicLoverUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserMusicLoverCreateOrConnectWithoutReviewsInput = {
    where: UserMusicLoverWhereUniqueInput
    create: XOR<UserMusicLoverCreateWithoutReviewsInput, UserMusicLoverUncheckedCreateWithoutReviewsInput>
  }

  export type ConcertMusicLoverCreateWithoutReviewsInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    validated?: boolean
    createdAt?: Date | string
    user: UserMusicLoverCreateNestedOneWithoutConcertsInput
  }

  export type ConcertMusicLoverUncheckedCreateWithoutReviewsInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ConcertMusicLoverCreateOrConnectWithoutReviewsInput = {
    where: ConcertMusicLoverWhereUniqueInput
    create: XOR<ConcertMusicLoverCreateWithoutReviewsInput, ConcertMusicLoverUncheckedCreateWithoutReviewsInput>
  }

  export type UserMusicLoverUpsertWithoutReviewsInput = {
    update: XOR<UserMusicLoverUpdateWithoutReviewsInput, UserMusicLoverUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserMusicLoverCreateWithoutReviewsInput, UserMusicLoverUncheckedCreateWithoutReviewsInput>
    where?: UserMusicLoverWhereInput
  }

  export type UserMusicLoverUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserMusicLoverWhereInput
    data: XOR<UserMusicLoverUpdateWithoutReviewsInput, UserMusicLoverUncheckedUpdateWithoutReviewsInput>
  }

  export type UserMusicLoverUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    concerts?: ConcertMusicLoverUpdateManyWithoutUserNestedInput
  }

  export type UserMusicLoverUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    concerts?: ConcertMusicLoverUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConcertMusicLoverUpsertWithoutReviewsInput = {
    update: XOR<ConcertMusicLoverUpdateWithoutReviewsInput, ConcertMusicLoverUncheckedUpdateWithoutReviewsInput>
    create: XOR<ConcertMusicLoverCreateWithoutReviewsInput, ConcertMusicLoverUncheckedCreateWithoutReviewsInput>
    where?: ConcertMusicLoverWhereInput
  }

  export type ConcertMusicLoverUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ConcertMusicLoverWhereInput
    data: XOR<ConcertMusicLoverUpdateWithoutReviewsInput, ConcertMusicLoverUncheckedUpdateWithoutReviewsInput>
  }

  export type ConcertMusicLoverUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserMusicLoverUpdateOneRequiredWithoutConcertsNestedInput
  }

  export type ConcertMusicLoverUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSocialButterflyCreateWithoutOwnerInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyCreateOrConnectWithoutOwnerInput = {
    where: EventSocialButterflyWhereUniqueInput
    create: XOR<EventSocialButterflyCreateWithoutOwnerInput, EventSocialButterflyUncheckedCreateWithoutOwnerInput>
  }

  export type EventSocialButterflyCreateManyOwnerInputEnvelope = {
    data: EventSocialButterflyCreateManyOwnerInput | EventSocialButterflyCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ReviewSocialButterflyCreateWithoutUserInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    event: EventSocialButterflyCreateNestedOneWithoutReviewsInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutReviewInput
  }

  export type ReviewSocialButterflyUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewSocialButterflyCreateOrConnectWithoutUserInput = {
    where: ReviewSocialButterflyWhereUniqueInput
    create: XOR<ReviewSocialButterflyCreateWithoutUserInput, ReviewSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type ReviewSocialButterflyCreateManyUserInputEnvelope = {
    data: ReviewSocialButterflyCreateManyUserInput | ReviewSocialButterflyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeSocialButterflyCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    event: EventSocialButterflyCreateNestedOneWithoutLikesInput
  }

  export type LikeSocialButterflyUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    createdAt?: Date | string
  }

  export type LikeSocialButterflyCreateOrConnectWithoutUserInput = {
    where: LikeSocialButterflyWhereUniqueInput
    create: XOR<LikeSocialButterflyCreateWithoutUserInput, LikeSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type LikeSocialButterflyCreateManyUserInputEnvelope = {
    data: LikeSocialButterflyCreateManyUserInput | LikeSocialButterflyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkSocialButterflyCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    event: EventSocialButterflyCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkSocialButterflyUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    createdAt?: Date | string
  }

  export type BookmarkSocialButterflyCreateOrConnectWithoutUserInput = {
    where: BookmarkSocialButterflyWhereUniqueInput
    create: XOR<BookmarkSocialButterflyCreateWithoutUserInput, BookmarkSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type BookmarkSocialButterflyCreateManyUserInputEnvelope = {
    data: BookmarkSocialButterflyCreateManyUserInput | BookmarkSocialButterflyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReportSocialButterflyCreateWithoutUserInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    event?: EventSocialButterflyCreateNestedOneWithoutReportsInput
    review?: ReviewSocialButterflyCreateNestedOneWithoutReportsInput
  }

  export type ReportSocialButterflyUncheckedCreateWithoutUserInput = {
    id?: string
    eventId?: string | null
    reviewId?: string | null
    reason: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyCreateOrConnectWithoutUserInput = {
    where: ReportSocialButterflyWhereUniqueInput
    create: XOR<ReportSocialButterflyCreateWithoutUserInput, ReportSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type ReportSocialButterflyCreateManyUserInputEnvelope = {
    data: ReportSocialButterflyCreateManyUserInput | ReportSocialButterflyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventSocialButterflyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: EventSocialButterflyWhereUniqueInput
    update: XOR<EventSocialButterflyUpdateWithoutOwnerInput, EventSocialButterflyUncheckedUpdateWithoutOwnerInput>
    create: XOR<EventSocialButterflyCreateWithoutOwnerInput, EventSocialButterflyUncheckedCreateWithoutOwnerInput>
  }

  export type EventSocialButterflyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: EventSocialButterflyWhereUniqueInput
    data: XOR<EventSocialButterflyUpdateWithoutOwnerInput, EventSocialButterflyUncheckedUpdateWithoutOwnerInput>
  }

  export type EventSocialButterflyUpdateManyWithWhereWithoutOwnerInput = {
    where: EventSocialButterflyScalarWhereInput
    data: XOR<EventSocialButterflyUpdateManyMutationInput, EventSocialButterflyUncheckedUpdateManyWithoutOwnerInput>
  }

  export type EventSocialButterflyScalarWhereInput = {
    AND?: EventSocialButterflyScalarWhereInput | EventSocialButterflyScalarWhereInput[]
    OR?: EventSocialButterflyScalarWhereInput[]
    NOT?: EventSocialButterflyScalarWhereInput | EventSocialButterflyScalarWhereInput[]
    id?: StringFilter<"EventSocialButterfly"> | string
    title?: StringFilter<"EventSocialButterfly"> | string
    description?: StringFilter<"EventSocialButterfly"> | string
    date?: DateTimeFilter<"EventSocialButterfly"> | Date | string
    location?: StringFilter<"EventSocialButterfly"> | string
    category?: StringFilter<"EventSocialButterfly"> | string
    submittedBy?: StringFilter<"EventSocialButterfly"> | string
    validated?: BoolFilter<"EventSocialButterfly"> | boolean
    createdAt?: DateTimeFilter<"EventSocialButterfly"> | Date | string
  }

  export type ReviewSocialButterflyUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewSocialButterflyWhereUniqueInput
    update: XOR<ReviewSocialButterflyUpdateWithoutUserInput, ReviewSocialButterflyUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewSocialButterflyCreateWithoutUserInput, ReviewSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type ReviewSocialButterflyUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewSocialButterflyWhereUniqueInput
    data: XOR<ReviewSocialButterflyUpdateWithoutUserInput, ReviewSocialButterflyUncheckedUpdateWithoutUserInput>
  }

  export type ReviewSocialButterflyUpdateManyWithWhereWithoutUserInput = {
    where: ReviewSocialButterflyScalarWhereInput
    data: XOR<ReviewSocialButterflyUpdateManyMutationInput, ReviewSocialButterflyUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewSocialButterflyScalarWhereInput = {
    AND?: ReviewSocialButterflyScalarWhereInput | ReviewSocialButterflyScalarWhereInput[]
    OR?: ReviewSocialButterflyScalarWhereInput[]
    NOT?: ReviewSocialButterflyScalarWhereInput | ReviewSocialButterflyScalarWhereInput[]
    id?: StringFilter<"ReviewSocialButterfly"> | string
    eventId?: StringFilter<"ReviewSocialButterfly"> | string
    userId?: StringFilter<"ReviewSocialButterfly"> | string
    rating?: IntFilter<"ReviewSocialButterfly"> | number
    comment?: StringFilter<"ReviewSocialButterfly"> | string
    validated?: BoolFilter<"ReviewSocialButterfly"> | boolean
    createdAt?: DateTimeFilter<"ReviewSocialButterfly"> | Date | string
  }

  export type LikeSocialButterflyUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeSocialButterflyWhereUniqueInput
    update: XOR<LikeSocialButterflyUpdateWithoutUserInput, LikeSocialButterflyUncheckedUpdateWithoutUserInput>
    create: XOR<LikeSocialButterflyCreateWithoutUserInput, LikeSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type LikeSocialButterflyUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeSocialButterflyWhereUniqueInput
    data: XOR<LikeSocialButterflyUpdateWithoutUserInput, LikeSocialButterflyUncheckedUpdateWithoutUserInput>
  }

  export type LikeSocialButterflyUpdateManyWithWhereWithoutUserInput = {
    where: LikeSocialButterflyScalarWhereInput
    data: XOR<LikeSocialButterflyUpdateManyMutationInput, LikeSocialButterflyUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeSocialButterflyScalarWhereInput = {
    AND?: LikeSocialButterflyScalarWhereInput | LikeSocialButterflyScalarWhereInput[]
    OR?: LikeSocialButterflyScalarWhereInput[]
    NOT?: LikeSocialButterflyScalarWhereInput | LikeSocialButterflyScalarWhereInput[]
    id?: StringFilter<"LikeSocialButterfly"> | string
    eventId?: StringFilter<"LikeSocialButterfly"> | string
    userId?: StringFilter<"LikeSocialButterfly"> | string
    createdAt?: DateTimeFilter<"LikeSocialButterfly"> | Date | string
  }

  export type BookmarkSocialButterflyUpsertWithWhereUniqueWithoutUserInput = {
    where: BookmarkSocialButterflyWhereUniqueInput
    update: XOR<BookmarkSocialButterflyUpdateWithoutUserInput, BookmarkSocialButterflyUncheckedUpdateWithoutUserInput>
    create: XOR<BookmarkSocialButterflyCreateWithoutUserInput, BookmarkSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type BookmarkSocialButterflyUpdateWithWhereUniqueWithoutUserInput = {
    where: BookmarkSocialButterflyWhereUniqueInput
    data: XOR<BookmarkSocialButterflyUpdateWithoutUserInput, BookmarkSocialButterflyUncheckedUpdateWithoutUserInput>
  }

  export type BookmarkSocialButterflyUpdateManyWithWhereWithoutUserInput = {
    where: BookmarkSocialButterflyScalarWhereInput
    data: XOR<BookmarkSocialButterflyUpdateManyMutationInput, BookmarkSocialButterflyUncheckedUpdateManyWithoutUserInput>
  }

  export type BookmarkSocialButterflyScalarWhereInput = {
    AND?: BookmarkSocialButterflyScalarWhereInput | BookmarkSocialButterflyScalarWhereInput[]
    OR?: BookmarkSocialButterflyScalarWhereInput[]
    NOT?: BookmarkSocialButterflyScalarWhereInput | BookmarkSocialButterflyScalarWhereInput[]
    id?: StringFilter<"BookmarkSocialButterfly"> | string
    eventId?: StringFilter<"BookmarkSocialButterfly"> | string
    userId?: StringFilter<"BookmarkSocialButterfly"> | string
    createdAt?: DateTimeFilter<"BookmarkSocialButterfly"> | Date | string
  }

  export type ReportSocialButterflyUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportSocialButterflyWhereUniqueInput
    update: XOR<ReportSocialButterflyUpdateWithoutUserInput, ReportSocialButterflyUncheckedUpdateWithoutUserInput>
    create: XOR<ReportSocialButterflyCreateWithoutUserInput, ReportSocialButterflyUncheckedCreateWithoutUserInput>
  }

  export type ReportSocialButterflyUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportSocialButterflyWhereUniqueInput
    data: XOR<ReportSocialButterflyUpdateWithoutUserInput, ReportSocialButterflyUncheckedUpdateWithoutUserInput>
  }

  export type ReportSocialButterflyUpdateManyWithWhereWithoutUserInput = {
    where: ReportSocialButterflyScalarWhereInput
    data: XOR<ReportSocialButterflyUpdateManyMutationInput, ReportSocialButterflyUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportSocialButterflyScalarWhereInput = {
    AND?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
    OR?: ReportSocialButterflyScalarWhereInput[]
    NOT?: ReportSocialButterflyScalarWhereInput | ReportSocialButterflyScalarWhereInput[]
    id?: StringFilter<"ReportSocialButterfly"> | string
    eventId?: StringNullableFilter<"ReportSocialButterfly"> | string | null
    reviewId?: StringNullableFilter<"ReportSocialButterfly"> | string | null
    userId?: StringFilter<"ReportSocialButterfly"> | string
    reason?: StringFilter<"ReportSocialButterfly"> | string
    createdAt?: DateTimeFilter<"ReportSocialButterfly"> | Date | string
  }

  export type UserSocialButterflyCreateWithoutEventsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyUncheckedCreateWithoutEventsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyCreateOrConnectWithoutEventsInput = {
    where: UserSocialButterflyWhereUniqueInput
    create: XOR<UserSocialButterflyCreateWithoutEventsInput, UserSocialButterflyUncheckedCreateWithoutEventsInput>
  }

  export type ReviewSocialButterflyCreateWithoutEventInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutReviewsInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutReviewInput
  }

  export type ReviewSocialButterflyUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewSocialButterflyCreateOrConnectWithoutEventInput = {
    where: ReviewSocialButterflyWhereUniqueInput
    create: XOR<ReviewSocialButterflyCreateWithoutEventInput, ReviewSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type ReviewSocialButterflyCreateManyEventInputEnvelope = {
    data: ReviewSocialButterflyCreateManyEventInput | ReviewSocialButterflyCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkSocialButterflyCreateWithoutEventInput = {
    id?: string
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkSocialButterflyUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type BookmarkSocialButterflyCreateOrConnectWithoutEventInput = {
    where: BookmarkSocialButterflyWhereUniqueInput
    create: XOR<BookmarkSocialButterflyCreateWithoutEventInput, BookmarkSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type BookmarkSocialButterflyCreateManyEventInputEnvelope = {
    data: BookmarkSocialButterflyCreateManyEventInput | BookmarkSocialButterflyCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type LikeSocialButterflyCreateWithoutEventInput = {
    id?: string
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutLikesInput
  }

  export type LikeSocialButterflyUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeSocialButterflyCreateOrConnectWithoutEventInput = {
    where: LikeSocialButterflyWhereUniqueInput
    create: XOR<LikeSocialButterflyCreateWithoutEventInput, LikeSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type LikeSocialButterflyCreateManyEventInputEnvelope = {
    data: LikeSocialButterflyCreateManyEventInput | LikeSocialButterflyCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ReportSocialButterflyCreateWithoutEventInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutReportsInput
    review?: ReviewSocialButterflyCreateNestedOneWithoutReportsInput
  }

  export type ReportSocialButterflyUncheckedCreateWithoutEventInput = {
    id?: string
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyCreateOrConnectWithoutEventInput = {
    where: ReportSocialButterflyWhereUniqueInput
    create: XOR<ReportSocialButterflyCreateWithoutEventInput, ReportSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type ReportSocialButterflyCreateManyEventInputEnvelope = {
    data: ReportSocialButterflyCreateManyEventInput | ReportSocialButterflyCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type UserSocialButterflyUpsertWithoutEventsInput = {
    update: XOR<UserSocialButterflyUpdateWithoutEventsInput, UserSocialButterflyUncheckedUpdateWithoutEventsInput>
    create: XOR<UserSocialButterflyCreateWithoutEventsInput, UserSocialButterflyUncheckedCreateWithoutEventsInput>
    where?: UserSocialButterflyWhereInput
  }

  export type UserSocialButterflyUpdateToOneWithWhereWithoutEventsInput = {
    where?: UserSocialButterflyWhereInput
    data: XOR<UserSocialButterflyUpdateWithoutEventsInput, UserSocialButterflyUncheckedUpdateWithoutEventsInput>
  }

  export type UserSocialButterflyUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutUserNestedInput
  }

  export type UserSocialButterflyUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReviewSocialButterflyUpsertWithWhereUniqueWithoutEventInput = {
    where: ReviewSocialButterflyWhereUniqueInput
    update: XOR<ReviewSocialButterflyUpdateWithoutEventInput, ReviewSocialButterflyUncheckedUpdateWithoutEventInput>
    create: XOR<ReviewSocialButterflyCreateWithoutEventInput, ReviewSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type ReviewSocialButterflyUpdateWithWhereUniqueWithoutEventInput = {
    where: ReviewSocialButterflyWhereUniqueInput
    data: XOR<ReviewSocialButterflyUpdateWithoutEventInput, ReviewSocialButterflyUncheckedUpdateWithoutEventInput>
  }

  export type ReviewSocialButterflyUpdateManyWithWhereWithoutEventInput = {
    where: ReviewSocialButterflyScalarWhereInput
    data: XOR<ReviewSocialButterflyUpdateManyMutationInput, ReviewSocialButterflyUncheckedUpdateManyWithoutEventInput>
  }

  export type BookmarkSocialButterflyUpsertWithWhereUniqueWithoutEventInput = {
    where: BookmarkSocialButterflyWhereUniqueInput
    update: XOR<BookmarkSocialButterflyUpdateWithoutEventInput, BookmarkSocialButterflyUncheckedUpdateWithoutEventInput>
    create: XOR<BookmarkSocialButterflyCreateWithoutEventInput, BookmarkSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type BookmarkSocialButterflyUpdateWithWhereUniqueWithoutEventInput = {
    where: BookmarkSocialButterflyWhereUniqueInput
    data: XOR<BookmarkSocialButterflyUpdateWithoutEventInput, BookmarkSocialButterflyUncheckedUpdateWithoutEventInput>
  }

  export type BookmarkSocialButterflyUpdateManyWithWhereWithoutEventInput = {
    where: BookmarkSocialButterflyScalarWhereInput
    data: XOR<BookmarkSocialButterflyUpdateManyMutationInput, BookmarkSocialButterflyUncheckedUpdateManyWithoutEventInput>
  }

  export type LikeSocialButterflyUpsertWithWhereUniqueWithoutEventInput = {
    where: LikeSocialButterflyWhereUniqueInput
    update: XOR<LikeSocialButterflyUpdateWithoutEventInput, LikeSocialButterflyUncheckedUpdateWithoutEventInput>
    create: XOR<LikeSocialButterflyCreateWithoutEventInput, LikeSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type LikeSocialButterflyUpdateWithWhereUniqueWithoutEventInput = {
    where: LikeSocialButterflyWhereUniqueInput
    data: XOR<LikeSocialButterflyUpdateWithoutEventInput, LikeSocialButterflyUncheckedUpdateWithoutEventInput>
  }

  export type LikeSocialButterflyUpdateManyWithWhereWithoutEventInput = {
    where: LikeSocialButterflyScalarWhereInput
    data: XOR<LikeSocialButterflyUpdateManyMutationInput, LikeSocialButterflyUncheckedUpdateManyWithoutEventInput>
  }

  export type ReportSocialButterflyUpsertWithWhereUniqueWithoutEventInput = {
    where: ReportSocialButterflyWhereUniqueInput
    update: XOR<ReportSocialButterflyUpdateWithoutEventInput, ReportSocialButterflyUncheckedUpdateWithoutEventInput>
    create: XOR<ReportSocialButterflyCreateWithoutEventInput, ReportSocialButterflyUncheckedCreateWithoutEventInput>
  }

  export type ReportSocialButterflyUpdateWithWhereUniqueWithoutEventInput = {
    where: ReportSocialButterflyWhereUniqueInput
    data: XOR<ReportSocialButterflyUpdateWithoutEventInput, ReportSocialButterflyUncheckedUpdateWithoutEventInput>
  }

  export type ReportSocialButterflyUpdateManyWithWhereWithoutEventInput = {
    where: ReportSocialButterflyScalarWhereInput
    data: XOR<ReportSocialButterflyUpdateManyMutationInput, ReportSocialButterflyUncheckedUpdateManyWithoutEventInput>
  }

  export type UserSocialButterflyCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyCreateNestedManyWithoutOwnerInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyUncheckedCreateWithoutReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyUncheckedCreateNestedManyWithoutOwnerInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyCreateOrConnectWithoutReviewsInput = {
    where: UserSocialButterflyWhereUniqueInput
    create: XOR<UserSocialButterflyCreateWithoutReviewsInput, UserSocialButterflyUncheckedCreateWithoutReviewsInput>
  }

  export type EventSocialButterflyCreateWithoutReviewsInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
    owner: UserSocialButterflyCreateNestedOneWithoutEventsInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyUncheckedCreateWithoutReviewsInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyCreateOrConnectWithoutReviewsInput = {
    where: EventSocialButterflyWhereUniqueInput
    create: XOR<EventSocialButterflyCreateWithoutReviewsInput, EventSocialButterflyUncheckedCreateWithoutReviewsInput>
  }

  export type ReportSocialButterflyCreateWithoutReviewInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutReportsInput
    event?: EventSocialButterflyCreateNestedOneWithoutReportsInput
  }

  export type ReportSocialButterflyUncheckedCreateWithoutReviewInput = {
    id?: string
    eventId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyCreateOrConnectWithoutReviewInput = {
    where: ReportSocialButterflyWhereUniqueInput
    create: XOR<ReportSocialButterflyCreateWithoutReviewInput, ReportSocialButterflyUncheckedCreateWithoutReviewInput>
  }

  export type ReportSocialButterflyCreateManyReviewInputEnvelope = {
    data: ReportSocialButterflyCreateManyReviewInput | ReportSocialButterflyCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserSocialButterflyUpsertWithoutReviewsInput = {
    update: XOR<UserSocialButterflyUpdateWithoutReviewsInput, UserSocialButterflyUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserSocialButterflyCreateWithoutReviewsInput, UserSocialButterflyUncheckedCreateWithoutReviewsInput>
    where?: UserSocialButterflyWhereInput
  }

  export type UserSocialButterflyUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserSocialButterflyWhereInput
    data: XOR<UserSocialButterflyUpdateWithoutReviewsInput, UserSocialButterflyUncheckedUpdateWithoutReviewsInput>
  }

  export type UserSocialButterflyUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUpdateManyWithoutOwnerNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutUserNestedInput
  }

  export type UserSocialButterflyUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUncheckedUpdateManyWithoutOwnerNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventSocialButterflyUpsertWithoutReviewsInput = {
    update: XOR<EventSocialButterflyUpdateWithoutReviewsInput, EventSocialButterflyUncheckedUpdateWithoutReviewsInput>
    create: XOR<EventSocialButterflyCreateWithoutReviewsInput, EventSocialButterflyUncheckedCreateWithoutReviewsInput>
    where?: EventSocialButterflyWhereInput
  }

  export type EventSocialButterflyUpdateToOneWithWhereWithoutReviewsInput = {
    where?: EventSocialButterflyWhereInput
    data: XOR<EventSocialButterflyUpdateWithoutReviewsInput, EventSocialButterflyUncheckedUpdateWithoutReviewsInput>
  }

  export type EventSocialButterflyUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserSocialButterflyUpdateOneRequiredWithoutEventsNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ReportSocialButterflyUpsertWithWhereUniqueWithoutReviewInput = {
    where: ReportSocialButterflyWhereUniqueInput
    update: XOR<ReportSocialButterflyUpdateWithoutReviewInput, ReportSocialButterflyUncheckedUpdateWithoutReviewInput>
    create: XOR<ReportSocialButterflyCreateWithoutReviewInput, ReportSocialButterflyUncheckedCreateWithoutReviewInput>
  }

  export type ReportSocialButterflyUpdateWithWhereUniqueWithoutReviewInput = {
    where: ReportSocialButterflyWhereUniqueInput
    data: XOR<ReportSocialButterflyUpdateWithoutReviewInput, ReportSocialButterflyUncheckedUpdateWithoutReviewInput>
  }

  export type ReportSocialButterflyUpdateManyWithWhereWithoutReviewInput = {
    where: ReportSocialButterflyScalarWhereInput
    data: XOR<ReportSocialButterflyUpdateManyMutationInput, ReportSocialButterflyUncheckedUpdateManyWithoutReviewInput>
  }

  export type UserSocialButterflyCreateWithoutLikesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyUncheckedCreateWithoutLikesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyCreateOrConnectWithoutLikesInput = {
    where: UserSocialButterflyWhereUniqueInput
    create: XOR<UserSocialButterflyCreateWithoutLikesInput, UserSocialButterflyUncheckedCreateWithoutLikesInput>
  }

  export type EventSocialButterflyCreateWithoutLikesInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
    owner: UserSocialButterflyCreateNestedOneWithoutEventsInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyUncheckedCreateWithoutLikesInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyCreateOrConnectWithoutLikesInput = {
    where: EventSocialButterflyWhereUniqueInput
    create: XOR<EventSocialButterflyCreateWithoutLikesInput, EventSocialButterflyUncheckedCreateWithoutLikesInput>
  }

  export type UserSocialButterflyUpsertWithoutLikesInput = {
    update: XOR<UserSocialButterflyUpdateWithoutLikesInput, UserSocialButterflyUncheckedUpdateWithoutLikesInput>
    create: XOR<UserSocialButterflyCreateWithoutLikesInput, UserSocialButterflyUncheckedCreateWithoutLikesInput>
    where?: UserSocialButterflyWhereInput
  }

  export type UserSocialButterflyUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserSocialButterflyWhereInput
    data: XOR<UserSocialButterflyUpdateWithoutLikesInput, UserSocialButterflyUncheckedUpdateWithoutLikesInput>
  }

  export type UserSocialButterflyUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutUserNestedInput
  }

  export type UserSocialButterflyUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventSocialButterflyUpsertWithoutLikesInput = {
    update: XOR<EventSocialButterflyUpdateWithoutLikesInput, EventSocialButterflyUncheckedUpdateWithoutLikesInput>
    create: XOR<EventSocialButterflyCreateWithoutLikesInput, EventSocialButterflyUncheckedCreateWithoutLikesInput>
    where?: EventSocialButterflyWhereInput
  }

  export type EventSocialButterflyUpdateToOneWithWhereWithoutLikesInput = {
    where?: EventSocialButterflyWhereInput
    data: XOR<EventSocialButterflyUpdateWithoutLikesInput, EventSocialButterflyUncheckedUpdateWithoutLikesInput>
  }

  export type EventSocialButterflyUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserSocialButterflyUpdateOneRequiredWithoutEventsNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserSocialButterflyCreateWithoutBookmarksInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyUncheckedCreateWithoutBookmarksInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyCreateOrConnectWithoutBookmarksInput = {
    where: UserSocialButterflyWhereUniqueInput
    create: XOR<UserSocialButterflyCreateWithoutBookmarksInput, UserSocialButterflyUncheckedCreateWithoutBookmarksInput>
  }

  export type EventSocialButterflyCreateWithoutBookmarksInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
    owner: UserSocialButterflyCreateNestedOneWithoutEventsInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyUncheckedCreateWithoutBookmarksInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    reports?: ReportSocialButterflyUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyCreateOrConnectWithoutBookmarksInput = {
    where: EventSocialButterflyWhereUniqueInput
    create: XOR<EventSocialButterflyCreateWithoutBookmarksInput, EventSocialButterflyUncheckedCreateWithoutBookmarksInput>
  }

  export type UserSocialButterflyUpsertWithoutBookmarksInput = {
    update: XOR<UserSocialButterflyUpdateWithoutBookmarksInput, UserSocialButterflyUncheckedUpdateWithoutBookmarksInput>
    create: XOR<UserSocialButterflyCreateWithoutBookmarksInput, UserSocialButterflyUncheckedCreateWithoutBookmarksInput>
    where?: UserSocialButterflyWhereInput
  }

  export type UserSocialButterflyUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: UserSocialButterflyWhereInput
    data: XOR<UserSocialButterflyUpdateWithoutBookmarksInput, UserSocialButterflyUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserSocialButterflyUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutUserNestedInput
  }

  export type UserSocialButterflyUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventSocialButterflyUpsertWithoutBookmarksInput = {
    update: XOR<EventSocialButterflyUpdateWithoutBookmarksInput, EventSocialButterflyUncheckedUpdateWithoutBookmarksInput>
    create: XOR<EventSocialButterflyCreateWithoutBookmarksInput, EventSocialButterflyUncheckedCreateWithoutBookmarksInput>
    where?: EventSocialButterflyWhereInput
  }

  export type EventSocialButterflyUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: EventSocialButterflyWhereInput
    data: XOR<EventSocialButterflyUpdateWithoutBookmarksInput, EventSocialButterflyUncheckedUpdateWithoutBookmarksInput>
  }

  export type EventSocialButterflyUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserSocialButterflyUpdateOneRequiredWithoutEventsNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserSocialButterflyCreateWithoutReportsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyUncheckedCreateWithoutReportsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    events?: EventSocialButterflyUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserSocialButterflyCreateOrConnectWithoutReportsInput = {
    where: UserSocialButterflyWhereUniqueInput
    create: XOR<UserSocialButterflyCreateWithoutReportsInput, UserSocialButterflyUncheckedCreateWithoutReportsInput>
  }

  export type EventSocialButterflyCreateWithoutReportsInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
    owner: UserSocialButterflyCreateNestedOneWithoutEventsInput
    reviews?: ReviewSocialButterflyCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyUncheckedCreateWithoutReportsInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    submittedBy: string
    validated?: boolean
    createdAt?: Date | string
    reviews?: ReviewSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    bookmarks?: BookmarkSocialButterflyUncheckedCreateNestedManyWithoutEventInput
    likes?: LikeSocialButterflyUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventSocialButterflyCreateOrConnectWithoutReportsInput = {
    where: EventSocialButterflyWhereUniqueInput
    create: XOR<EventSocialButterflyCreateWithoutReportsInput, EventSocialButterflyUncheckedCreateWithoutReportsInput>
  }

  export type ReviewSocialButterflyCreateWithoutReportsInput = {
    id?: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
    user: UserSocialButterflyCreateNestedOneWithoutReviewsInput
    event: EventSocialButterflyCreateNestedOneWithoutReviewsInput
  }

  export type ReviewSocialButterflyUncheckedCreateWithoutReportsInput = {
    id?: string
    eventId: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewSocialButterflyCreateOrConnectWithoutReportsInput = {
    where: ReviewSocialButterflyWhereUniqueInput
    create: XOR<ReviewSocialButterflyCreateWithoutReportsInput, ReviewSocialButterflyUncheckedCreateWithoutReportsInput>
  }

  export type UserSocialButterflyUpsertWithoutReportsInput = {
    update: XOR<UserSocialButterflyUpdateWithoutReportsInput, UserSocialButterflyUncheckedUpdateWithoutReportsInput>
    create: XOR<UserSocialButterflyCreateWithoutReportsInput, UserSocialButterflyUncheckedCreateWithoutReportsInput>
    where?: UserSocialButterflyWhereInput
  }

  export type UserSocialButterflyUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserSocialButterflyWhereInput
    data: XOR<UserSocialButterflyUpdateWithoutReportsInput, UserSocialButterflyUncheckedUpdateWithoutReportsInput>
  }

  export type UserSocialButterflyUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutUserNestedInput
  }

  export type UserSocialButterflyUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventSocialButterflyUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventSocialButterflyUpsertWithoutReportsInput = {
    update: XOR<EventSocialButterflyUpdateWithoutReportsInput, EventSocialButterflyUncheckedUpdateWithoutReportsInput>
    create: XOR<EventSocialButterflyCreateWithoutReportsInput, EventSocialButterflyUncheckedCreateWithoutReportsInput>
    where?: EventSocialButterflyWhereInput
  }

  export type EventSocialButterflyUpdateToOneWithWhereWithoutReportsInput = {
    where?: EventSocialButterflyWhereInput
    data: XOR<EventSocialButterflyUpdateWithoutReportsInput, EventSocialButterflyUncheckedUpdateWithoutReportsInput>
  }

  export type EventSocialButterflyUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserSocialButterflyUpdateOneRequiredWithoutEventsNestedInput
    reviews?: ReviewSocialButterflyUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ReviewSocialButterflyUpsertWithoutReportsInput = {
    update: XOR<ReviewSocialButterflyUpdateWithoutReportsInput, ReviewSocialButterflyUncheckedUpdateWithoutReportsInput>
    create: XOR<ReviewSocialButterflyCreateWithoutReportsInput, ReviewSocialButterflyUncheckedCreateWithoutReportsInput>
    where?: ReviewSocialButterflyWhereInput
  }

  export type ReviewSocialButterflyUpdateToOneWithWhereWithoutReportsInput = {
    where?: ReviewSocialButterflyWhereInput
    data: XOR<ReviewSocialButterflyUpdateWithoutReportsInput, ReviewSocialButterflyUncheckedUpdateWithoutReportsInput>
  }

  export type ReviewSocialButterflyUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput
    event?: EventSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewSocialButterflyUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerActivityCreateWithoutOrganizerInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    validated?: boolean
    createdAt?: Date | string
    applications?: VolunteerApplicationCreateNestedManyWithoutActivityInput
  }

  export type VolunteerActivityUncheckedCreateWithoutOrganizerInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    validated?: boolean
    createdAt?: Date | string
    applications?: VolunteerApplicationUncheckedCreateNestedManyWithoutActivityInput
  }

  export type VolunteerActivityCreateOrConnectWithoutOrganizerInput = {
    where: VolunteerActivityWhereUniqueInput
    create: XOR<VolunteerActivityCreateWithoutOrganizerInput, VolunteerActivityUncheckedCreateWithoutOrganizerInput>
  }

  export type VolunteerActivityCreateManyOrganizerInputEnvelope = {
    data: VolunteerActivityCreateManyOrganizerInput | VolunteerActivityCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type VolunteerApplicationCreateWithoutUserInput = {
    id?: string
    motivation: string
    status?: string
    createdAt?: Date | string
    activity: VolunteerActivityCreateNestedOneWithoutApplicationsInput
  }

  export type VolunteerApplicationUncheckedCreateWithoutUserInput = {
    id?: string
    activityId: string
    motivation: string
    status?: string
    createdAt?: Date | string
  }

  export type VolunteerApplicationCreateOrConnectWithoutUserInput = {
    where: VolunteerApplicationWhereUniqueInput
    create: XOR<VolunteerApplicationCreateWithoutUserInput, VolunteerApplicationUncheckedCreateWithoutUserInput>
  }

  export type VolunteerApplicationCreateManyUserInputEnvelope = {
    data: VolunteerApplicationCreateManyUserInput | VolunteerApplicationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VolunteerActivityUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: VolunteerActivityWhereUniqueInput
    update: XOR<VolunteerActivityUpdateWithoutOrganizerInput, VolunteerActivityUncheckedUpdateWithoutOrganizerInput>
    create: XOR<VolunteerActivityCreateWithoutOrganizerInput, VolunteerActivityUncheckedCreateWithoutOrganizerInput>
  }

  export type VolunteerActivityUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: VolunteerActivityWhereUniqueInput
    data: XOR<VolunteerActivityUpdateWithoutOrganizerInput, VolunteerActivityUncheckedUpdateWithoutOrganizerInput>
  }

  export type VolunteerActivityUpdateManyWithWhereWithoutOrganizerInput = {
    where: VolunteerActivityScalarWhereInput
    data: XOR<VolunteerActivityUpdateManyMutationInput, VolunteerActivityUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type VolunteerActivityScalarWhereInput = {
    AND?: VolunteerActivityScalarWhereInput | VolunteerActivityScalarWhereInput[]
    OR?: VolunteerActivityScalarWhereInput[]
    NOT?: VolunteerActivityScalarWhereInput | VolunteerActivityScalarWhereInput[]
    id?: StringFilter<"VolunteerActivity"> | string
    title?: StringFilter<"VolunteerActivity"> | string
    description?: StringFilter<"VolunteerActivity"> | string
    location?: StringFilter<"VolunteerActivity"> | string
    date?: DateTimeFilter<"VolunteerActivity"> | Date | string
    organizerId?: StringFilter<"VolunteerActivity"> | string
    validated?: BoolFilter<"VolunteerActivity"> | boolean
    createdAt?: DateTimeFilter<"VolunteerActivity"> | Date | string
  }

  export type VolunteerApplicationUpsertWithWhereUniqueWithoutUserInput = {
    where: VolunteerApplicationWhereUniqueInput
    update: XOR<VolunteerApplicationUpdateWithoutUserInput, VolunteerApplicationUncheckedUpdateWithoutUserInput>
    create: XOR<VolunteerApplicationCreateWithoutUserInput, VolunteerApplicationUncheckedCreateWithoutUserInput>
  }

  export type VolunteerApplicationUpdateWithWhereUniqueWithoutUserInput = {
    where: VolunteerApplicationWhereUniqueInput
    data: XOR<VolunteerApplicationUpdateWithoutUserInput, VolunteerApplicationUncheckedUpdateWithoutUserInput>
  }

  export type VolunteerApplicationUpdateManyWithWhereWithoutUserInput = {
    where: VolunteerApplicationScalarWhereInput
    data: XOR<VolunteerApplicationUpdateManyMutationInput, VolunteerApplicationUncheckedUpdateManyWithoutUserInput>
  }

  export type VolunteerApplicationScalarWhereInput = {
    AND?: VolunteerApplicationScalarWhereInput | VolunteerApplicationScalarWhereInput[]
    OR?: VolunteerApplicationScalarWhereInput[]
    NOT?: VolunteerApplicationScalarWhereInput | VolunteerApplicationScalarWhereInput[]
    id?: StringFilter<"VolunteerApplication"> | string
    userId?: StringFilter<"VolunteerApplication"> | string
    activityId?: StringFilter<"VolunteerApplication"> | string
    motivation?: StringFilter<"VolunteerApplication"> | string
    status?: StringFilter<"VolunteerApplication"> | string
    createdAt?: DateTimeFilter<"VolunteerApplication"> | Date | string
  }

  export type UserVolunteerOrgCreateWithoutActivitiesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    applications?: VolunteerApplicationCreateNestedManyWithoutUserInput
  }

  export type UserVolunteerOrgUncheckedCreateWithoutActivitiesInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    applications?: VolunteerApplicationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserVolunteerOrgCreateOrConnectWithoutActivitiesInput = {
    where: UserVolunteerOrgWhereUniqueInput
    create: XOR<UserVolunteerOrgCreateWithoutActivitiesInput, UserVolunteerOrgUncheckedCreateWithoutActivitiesInput>
  }

  export type VolunteerApplicationCreateWithoutActivityInput = {
    id?: string
    motivation: string
    status?: string
    createdAt?: Date | string
    user: UserVolunteerOrgCreateNestedOneWithoutApplicationsInput
  }

  export type VolunteerApplicationUncheckedCreateWithoutActivityInput = {
    id?: string
    userId: string
    motivation: string
    status?: string
    createdAt?: Date | string
  }

  export type VolunteerApplicationCreateOrConnectWithoutActivityInput = {
    where: VolunteerApplicationWhereUniqueInput
    create: XOR<VolunteerApplicationCreateWithoutActivityInput, VolunteerApplicationUncheckedCreateWithoutActivityInput>
  }

  export type VolunteerApplicationCreateManyActivityInputEnvelope = {
    data: VolunteerApplicationCreateManyActivityInput | VolunteerApplicationCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type UserVolunteerOrgUpsertWithoutActivitiesInput = {
    update: XOR<UserVolunteerOrgUpdateWithoutActivitiesInput, UserVolunteerOrgUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserVolunteerOrgCreateWithoutActivitiesInput, UserVolunteerOrgUncheckedCreateWithoutActivitiesInput>
    where?: UserVolunteerOrgWhereInput
  }

  export type UserVolunteerOrgUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserVolunteerOrgWhereInput
    data: XOR<UserVolunteerOrgUpdateWithoutActivitiesInput, UserVolunteerOrgUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserVolunteerOrgUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: VolunteerApplicationUpdateManyWithoutUserNestedInput
  }

  export type UserVolunteerOrgUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: VolunteerApplicationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VolunteerApplicationUpsertWithWhereUniqueWithoutActivityInput = {
    where: VolunteerApplicationWhereUniqueInput
    update: XOR<VolunteerApplicationUpdateWithoutActivityInput, VolunteerApplicationUncheckedUpdateWithoutActivityInput>
    create: XOR<VolunteerApplicationCreateWithoutActivityInput, VolunteerApplicationUncheckedCreateWithoutActivityInput>
  }

  export type VolunteerApplicationUpdateWithWhereUniqueWithoutActivityInput = {
    where: VolunteerApplicationWhereUniqueInput
    data: XOR<VolunteerApplicationUpdateWithoutActivityInput, VolunteerApplicationUncheckedUpdateWithoutActivityInput>
  }

  export type VolunteerApplicationUpdateManyWithWhereWithoutActivityInput = {
    where: VolunteerApplicationScalarWhereInput
    data: XOR<VolunteerApplicationUpdateManyMutationInput, VolunteerApplicationUncheckedUpdateManyWithoutActivityInput>
  }

  export type UserVolunteerOrgCreateWithoutApplicationsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    activities?: VolunteerActivityCreateNestedManyWithoutOrganizerInput
  }

  export type UserVolunteerOrgUncheckedCreateWithoutApplicationsInput = {
    id?: string
    email: string
    name: string
    password: string
    createdAt?: Date | string
    activities?: VolunteerActivityUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type UserVolunteerOrgCreateOrConnectWithoutApplicationsInput = {
    where: UserVolunteerOrgWhereUniqueInput
    create: XOR<UserVolunteerOrgCreateWithoutApplicationsInput, UserVolunteerOrgUncheckedCreateWithoutApplicationsInput>
  }

  export type VolunteerActivityCreateWithoutApplicationsInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    validated?: boolean
    createdAt?: Date | string
    organizer: UserVolunteerOrgCreateNestedOneWithoutActivitiesInput
  }

  export type VolunteerActivityUncheckedCreateWithoutApplicationsInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    organizerId: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type VolunteerActivityCreateOrConnectWithoutApplicationsInput = {
    where: VolunteerActivityWhereUniqueInput
    create: XOR<VolunteerActivityCreateWithoutApplicationsInput, VolunteerActivityUncheckedCreateWithoutApplicationsInput>
  }

  export type UserVolunteerOrgUpsertWithoutApplicationsInput = {
    update: XOR<UserVolunteerOrgUpdateWithoutApplicationsInput, UserVolunteerOrgUncheckedUpdateWithoutApplicationsInput>
    create: XOR<UserVolunteerOrgCreateWithoutApplicationsInput, UserVolunteerOrgUncheckedCreateWithoutApplicationsInput>
    where?: UserVolunteerOrgWhereInput
  }

  export type UserVolunteerOrgUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: UserVolunteerOrgWhereInput
    data: XOR<UserVolunteerOrgUpdateWithoutApplicationsInput, UserVolunteerOrgUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserVolunteerOrgUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: VolunteerActivityUpdateManyWithoutOrganizerNestedInput
  }

  export type UserVolunteerOrgUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: VolunteerActivityUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type VolunteerActivityUpsertWithoutApplicationsInput = {
    update: XOR<VolunteerActivityUpdateWithoutApplicationsInput, VolunteerActivityUncheckedUpdateWithoutApplicationsInput>
    create: XOR<VolunteerActivityCreateWithoutApplicationsInput, VolunteerActivityUncheckedCreateWithoutApplicationsInput>
    where?: VolunteerActivityWhereInput
  }

  export type VolunteerActivityUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: VolunteerActivityWhereInput
    data: XOR<VolunteerActivityUpdateWithoutApplicationsInput, VolunteerActivityUncheckedUpdateWithoutApplicationsInput>
  }

  export type VolunteerActivityUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserVolunteerOrgUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type VolunteerActivityUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    organizerId?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerTaskCreateManyUserInput = {
    id?: string
    title: string
    description: string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
  }

  export type EventOrganizerGuestCreateManyUserInput = {
    id?: string
    eventId: string
    name: string
    email: string
    phone: string
    status: string
    createdAt?: Date | string
  }

  export type EventOrganizerVenueCreateManyUserInput = {
    id?: string
    name: string
    location: string
    capacity: number
    amenities: string
    createdAt?: Date | string
  }

  export type EventOrganizerServiceProviderCreateManyUserInput = {
    id?: string
    name: string
    serviceType: string
    contactInfo: string
    createdAt?: Date | string
  }

  export type EventOrganizerTaskUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerTaskUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerTaskUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerGuestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerGuestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerGuestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerVenueUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    amenities?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerVenueUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    amenities?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerVenueUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    amenities?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerServiceProviderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    serviceType?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerServiceProviderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    serviceType?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerServiceProviderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    serviceType?: StringFieldUpdateOperationsInput | string
    contactInfo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerPlatformCreateManyOwnerInput = {
    id?: string
    name: string
    website: string
    languagesOffered: string
    description: string
    status?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewCreateManyUserInput = {
    id?: string
    platformId: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerUserVoteCreateManyVoterInput = {
    id?: string
    userId: string
    voteType: string
    createdAt?: Date | string
  }

  export type LanguageLearnerUserVoteCreateManyUserInput = {
    id?: string
    voterId: string
    voteType: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewLikeCreateManyUserInput = {
    id?: string
    reviewId: string
    createdAt?: Date | string
  }

  export type LanguageLearnerPlatformUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: LanguageLearnerReviewUpdateManyWithoutPlatformNestedInput
  }

  export type LanguageLearnerPlatformUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: LanguageLearnerReviewUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type LanguageLearnerPlatformUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    languagesOffered?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: LanguageLearnerPlatformUpdateOneRequiredWithoutReviewsNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutReviewNestedInput
  }

  export type LanguageLearnerReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type LanguageLearnerReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserVoteUpdateWithoutVoterInput = {
    id?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: LanguageLearnerUserUpdateOneRequiredWithoutVotesReceivedNestedInput
  }

  export type LanguageLearnerUserVoteUncheckedUpdateWithoutVoterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserVoteUncheckedUpdateManyWithoutVoterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserVoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voter?: LanguageLearnerUserUpdateOneRequiredWithoutVotesGivenNestedInput
  }

  export type LanguageLearnerUserVoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    voterId?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerUserVoteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    voterId?: StringFieldUpdateOperationsInput | string
    voteType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: LanguageLearnerReviewUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewCreateManyPlatformInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    status?: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewUpdateWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: LanguageLearnerUserUpdateOneRequiredWithoutReviewsNestedInput
    likes?: LanguageLearnerReviewLikeUpdateManyWithoutReviewNestedInput
  }

  export type LanguageLearnerReviewUncheckedUpdateWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LanguageLearnerReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type LanguageLearnerReviewUncheckedUpdateManyWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewLikeCreateManyReviewInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LanguageLearnerReviewLikeUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: LanguageLearnerUserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageLearnerReviewLikeUncheckedUpdateManyWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubPlayerCreateManyUserInput = {
    id?: string
    name: string
    rank: string
    mainGame: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type GameHubTournamentCreateManyOrganizerInput = {
    id?: string
    title: string
    game: string
    date: Date | string
    rules: string
    createdAt?: Date | string
  }

  export type GameHubPlayerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournaments?: GameHubTournamentPlayerUpdateManyWithoutPlayerNestedInput
  }

  export type GameHubPlayerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournaments?: GameHubTournamentPlayerUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type GameHubPlayerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    mainGame?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: GameHubTournamentPlayerUpdateManyWithoutTournamentNestedInput
  }

  export type GameHubTournamentUncheckedUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: GameHubTournamentPlayerUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type GameHubTournamentUncheckedUpdateManyWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rules?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentPlayerCreateManyPlayerInput = {
    id?: string
    tournamentId: string
    joinedAt?: Date | string
  }

  export type GameHubTournamentPlayerUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: GameHubTournamentUpdateOneRequiredWithoutPlayersNestedInput
  }

  export type GameHubTournamentPlayerUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentPlayerUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentPlayerCreateManyTournamentInput = {
    id?: string
    playerId: string
    joinedAt?: Date | string
  }

  export type GameHubTournamentPlayerUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: GameHubPlayerUpdateOneRequiredWithoutTournamentsNestedInput
  }

  export type GameHubTournamentPlayerUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameHubTournamentPlayerUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleHealthTrackerCreateManyUserInput = {
    id?: string
    type: string
    title: string
    dateTime: Date | string
    notes?: string | null
    createdAt?: Date | string
  }

  export type RecordHealthTrackerCreateManyUserInput = {
    id?: string
    type: string
    description: string
    date: Date | string
    createdAt?: Date | string
  }

  export type ScheduleHealthTrackerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleHealthTrackerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleHealthTrackerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecordHealthTrackerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecordHealthTrackerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecordHealthTrackerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConcertMusicLoverCreateManyUserInput = {
    id?: string
    title: string
    date: Date | string
    venue: string
    genre: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewMusicLoverCreateManyUserInput = {
    id?: string
    concertId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ConcertMusicLoverUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewMusicLoverUpdateManyWithoutConcertNestedInput
  }

  export type ConcertMusicLoverUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewMusicLoverUncheckedUpdateManyWithoutConcertNestedInput
  }

  export type ConcertMusicLoverUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewMusicLoverUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    concert?: ConcertMusicLoverUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewMusicLoverUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    concertId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewMusicLoverUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    concertId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewMusicLoverCreateManyConcertInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewMusicLoverUpdateWithoutConcertInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserMusicLoverUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewMusicLoverUncheckedUpdateWithoutConcertInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewMusicLoverUncheckedUpdateManyWithoutConcertInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSocialButterflyCreateManyOwnerInput = {
    id?: string
    title: string
    description: string
    date: Date | string
    location: string
    category: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type ReviewSocialButterflyCreateManyUserInput = {
    id?: string
    eventId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type LikeSocialButterflyCreateManyUserInput = {
    id?: string
    eventId: string
    createdAt?: Date | string
  }

  export type BookmarkSocialButterflyCreateManyUserInput = {
    id?: string
    eventId: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyCreateManyUserInput = {
    id?: string
    eventId?: string | null
    reviewId?: string | null
    reason: string
    createdAt?: Date | string
  }

  export type EventSocialButterflyUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    bookmarks?: BookmarkSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    likes?: LikeSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventSocialButterflyUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewSocialButterflyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutReviewNestedInput
  }

  export type ReviewSocialButterflyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewSocialButterflyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeSocialButterflyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventSocialButterflyUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeSocialButterflyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeSocialButterflyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkSocialButterflyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventSocialButterflyUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkSocialButterflyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkSocialButterflyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventSocialButterflyUpdateOneWithoutReportsNestedInput
    review?: ReviewSocialButterflyUpdateOneWithoutReportsNestedInput
  }

  export type ReportSocialButterflyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewSocialButterflyCreateManyEventInput = {
    id?: string
    userId: string
    rating: number
    comment: string
    validated?: boolean
    createdAt?: Date | string
  }

  export type BookmarkSocialButterflyCreateManyEventInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LikeSocialButterflyCreateManyEventInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyCreateManyEventInput = {
    id?: string
    reviewId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReviewSocialButterflyUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutReviewsNestedInput
    reports?: ReportSocialButterflyUpdateManyWithoutReviewNestedInput
  }

  export type ReviewSocialButterflyUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportSocialButterflyUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewSocialButterflyUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkSocialButterflyUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkSocialButterflyUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkSocialButterflyUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeSocialButterflyUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeSocialButterflyUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeSocialButterflyUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutReportsNestedInput
    review?: ReviewSocialButterflyUpdateOneWithoutReportsNestedInput
  }

  export type ReportSocialButterflyUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyCreateManyReviewInput = {
    id?: string
    eventId?: string | null
    userId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportSocialButterflyUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserSocialButterflyUpdateOneRequiredWithoutReportsNestedInput
    event?: EventSocialButterflyUpdateOneWithoutReportsNestedInput
  }

  export type ReportSocialButterflyUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSocialButterflyUncheckedUpdateManyWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerActivityCreateManyOrganizerInput = {
    id?: string
    title: string
    description: string
    location: string
    date: Date | string
    validated?: boolean
    createdAt?: Date | string
  }

  export type VolunteerApplicationCreateManyUserInput = {
    id?: string
    activityId: string
    motivation: string
    status?: string
    createdAt?: Date | string
  }

  export type VolunteerActivityUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: VolunteerApplicationUpdateManyWithoutActivityNestedInput
  }

  export type VolunteerActivityUncheckedUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: VolunteerApplicationUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type VolunteerActivityUncheckedUpdateManyWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    validated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerApplicationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: VolunteerActivityUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type VolunteerApplicationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerApplicationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerApplicationCreateManyActivityInput = {
    id?: string
    userId: string
    motivation: string
    status?: string
    createdAt?: Date | string
  }

  export type VolunteerApplicationUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserVolunteerOrgUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type VolunteerApplicationUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerApplicationUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}