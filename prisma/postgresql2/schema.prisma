generator client {
  provider      = "prisma-client-js"
  output        = "../generated/postgresql2"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource neon2 {
  provider = "postgresql"
  url      = env("DATABASE_URL_2")
}

model EventOrganizerUser {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())

  tasks            EventOrganizerTask[]
  guests           EventOrganizerGuest[]
  venues           EventOrganizerVenue[]
  serviceProviders EventOrganizerServiceProvider[]
}

model EventOrganizerTask {
  id          String   @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  status      String
  userId      String
  createdAt   DateTime @default(now())

  user EventOrganizerUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventOrganizerGuest {
  id        String   @id @default(uuid())
  eventId   String
  name      String
  email     String
  phone     String
  status    String
  userId    String
  createdAt DateTime @default(now())

  user EventOrganizerUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventOrganizerVenue {
  id          String   @id @default(uuid())
  name        String
  location    String
  capacity    Int
  amenities   String
  submittedBy String
  createdAt   DateTime @default(now())

  user EventOrganizerUser @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
}

model EventOrganizerServiceProvider {
  id          String   @id @default(uuid())
  name        String
  serviceType String
  contactInfo String
  submittedBy String
  createdAt   DateTime @default(now())

  user EventOrganizerUser @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
}

model LanguageLearnerUser {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("learner") // "learner", "owner", "admin", "banned"
  createdAt DateTime @default(now())

  ownedPlatforms LanguageLearnerPlatform[] // Platforms owned by user
  reviews        LanguageLearnerReview[]
  votesGiven     LanguageLearnerUserVote[]   @relation("VotesGiven")
  votesReceived  LanguageLearnerUserVote[]   @relation("VotesReceived")
  likes          LanguageLearnerReviewLike[]
}

model LanguageLearnerPlatform {
  id               String   @id @default(uuid())
  name             String
  website          String
  languagesOffered String
  description      String
  ownerId          String // User ID reference for ownership
  status           String   @default("pending") // "pending", "approved", "rejected"
  createdAt        DateTime @default(now())

  owner   LanguageLearnerUser     @relation(fields: [ownerId], references: [id])
  reviews LanguageLearnerReview[]
}

model LanguageLearnerReview {
  id         String   @id @default(uuid())
  platformId String
  userId     String
  rating     Int
  comment    String
  status     String   @default("pending") // "pending", "approved", "rejected"
  createdAt  DateTime @default(now())

  platform LanguageLearnerPlatform     @relation(fields: [platformId], references: [id])
  user     LanguageLearnerUser         @relation(fields: [userId], references: [id])
  likes    LanguageLearnerReviewLike[]
}

model LanguageLearnerReviewLike {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())

  user   LanguageLearnerUser   @relation(fields: [userId], references: [id])
  review LanguageLearnerReview @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId]) // Prevents duplicate likes per user
}

model LanguageLearnerUserVote {
  id        String   @id @default(uuid())
  userId    String
  voterId   String
  voteType  String // "upvote" or "downvote"
  createdAt DateTime @default(now())

  user  LanguageLearnerUser @relation(fields: [userId], references: [id], name: "VotesReceived")
  voter LanguageLearnerUser @relation(fields: [voterId], references: [id], name: "VotesGiven")

  @@unique([userId, voterId]) // Prevents multiple votes per user
}

model GameHubUser {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user") // "user", "admin"
  validated Boolean  @default(false)
  createdAt DateTime @default(now())

  players     GameHubPlayer[]
  tournaments GameHubTournament[]
}

model GameHubPlayer {
  id        String   @id @default(uuid())
  name      String
  userId    String
  rank      String
  mainGame  String
  validated Boolean  @default(false)
  createdAt DateTime @default(now())

  user        GameHubUser               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournaments GameHubTournamentPlayer[] // Participations
}

model GameHubTournament {
  id          String   @id @default(uuid())
  title       String
  game        String
  date        DateTime
  rules       String
  organizerId String
  createdAt   DateTime @default(now())

  organizer GameHubUser               @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  players   GameHubTournamentPlayer[] // Participations
}

model GameHubTournamentPlayer {
  id           String   @id @default(uuid())
  tournamentId String
  playerId     String
  joinedAt     DateTime @default(now())

  tournament GameHubTournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player     GameHubPlayer     @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, playerId]) // Prevent duplicate entries
}

model UserHealthTracker {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())

  schedules ScheduleHealthTracker[]
  records   RecordHealthTracker[]
}

model ScheduleHealthTracker {
  id        String   @id @default(uuid())
  userId    String
  type      String // "appointment" | "medication"
  title     String
  dateTime  DateTime
  notes     String?
  createdAt DateTime @default(now())

  user UserHealthTracker @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecordHealthTracker {
  id          String   @id @default(uuid())
  userId      String
  type        String // "symptom" | "log"
  description String
  date        DateTime
  createdAt   DateTime @default(now())

  user UserHealthTracker @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClinicHealthTracker {
  id             String   @id @default(uuid())
  name           String
  location       String
  availableSlots String[] // ISO datetime strings
  contact        String
  createdAt      DateTime @default(now())
}
